Number1:
Date.<init>
Calendar.getInstance
Calendar.setTime
Calendar.getTimeInMillis
NonAPI.minus(long,long)
NonAPI.divide(long,int)
NonAPI.times(int,int)
System.out.println
NonAPI.plus(java.lang.String,long)
Date.getTime
TimeUnit.convert
Calendar.clone
Calendar.before
Calendar.add
String.valueOf
String.length
NonAPI.less(int,int)
NonAPI.plus(java.lang.String,java.lang.String)
NonAPI.times(long,int)
NonAPI.reminder(long,int)
NonAPI.greater(long,int)
NonAPI.plus(long,java.lang.String)
NonAPI.plus(UNRESOLVED,java.lang.String)
NonAPI.minus(UNRESOLVED,UNRESOLVED)
NonAPI.less(long,int)
Calendar.get
NonAPI.equals(int,int)
NonAPI.minus(int,int)
Math.abs
NonAPI.plus(int,int)
NonAPI.greater(int,int)
NonAPI.conditionalOr(int,int)
IllegalArgumentException.<init>
NonAPI.reminder(int,int)
NonAPI.notEquals(int,int)
NonAPI.divide(int,int)
Calendar.set
Date.toInstant
ChronoUnit.DAYS.between
Instant.<init>
Interval.<init>
NonAPI.plus(java.lang.String,.now)
Instant.now
Duration.ofHours
Instant.plus
ChronoUnit.MINUTES.between
Days.daysBetween
Days.getDays
LocalDate.of
NonAPI.divide(long,double)
Math.round
DateTime.<init>
Interval.toPeriod
Period.getYears
Period.getMonths
Period.getWeeks
Period.getDays
NonAPI.plus(int,java.lang.String)
Period.getHours
Period.getMinutes
Period.getSeconds
PeriodType.yearMonthDayTime
Period.<init>
NonAPI.divide(UNRESOLVED,UNRESOLVED)
TimeZone.getTimeZone
Calendar.getTime
NonAPI.reminder(UNRESOLVED,UNRESOLVED)
DateTimeFormatter.ofPattern
LocalDate.parse
LocalDate.toEpochDay
Duration.<init>
NonAPI.times(int,long)
NonAPI.plus(long,long)
SUPER.getFechaNac
getTime
NonAPI.plus(UNRESOLVED,long)
NonAPI.divide(long,long)
SimpleDateFormat.<init>
SimpleDateFormat.parse
NonAPI.divide(UNRESOLVED,int)
ZonedDateTime.now
ZonedDateTime.minusDays
minusMinutes
Duration.between
NonAPI.plus(java.lang.String,.Duration)
Duration.toMinutes
NonAPI.plus(java.lang.String,double)
ZoneId.of
ZonedDateTime.plusMinutes

Number2:
Scanner.<init>
System.out.print
Scanner.nextLine
Integer.parseInt
NonAPI.reminder(int,int)
NonAPI.equals(int,int)
NonAPI.conditionalAnd(int,int)
NonAPI.minus(int,int)
NonAPI.plus(int,int)
NonAPI.lessEquals(int,int)
NonAPI.plus(java.lang.String,java.lang.String)
String.indexOf
String.substring
String.length
SimpleDateFormat.<init>
SimpleDateFormat.parse
ParseException.printStackTrace
Date.<init>
System.out.println
Date.getTime
NonAPI.minus(UNRESOLVED,UNRESOLVED)
TimeUnit.MILLISECONDS.toSeconds
TimeUnit.MILLISECONDS.toMinutes
TimeUnit.MILLISECONDS.toHours
TimeUnit.MILLISECONDS.toDays
NonAPI.greater(long,int)
NonAPI.divide(long,int)
NonAPI.plus(int,java.lang.String)
NonAPI.plus(long,java.lang.String)
TimeZone.getTimeZone
Calendar.getInstance
Calendar.getTime
Calendar.add
NonAPI.minus(long,long)
NonAPI.greaterEquals(long,long)
NonAPI.reminder(long,long)
StringBuffer.<init>
StringBuffer.append
StringBuffer.toString
NonAPI.times(int,int)
NonAPI.greater(int,int)
Period.<init>
Period.getHours
Period.getMinutes
Instant.<init>
Interval.<init>
Duration.between
Duration.toHours
Duration.toMinutes
LocalDate.now
LocalDate.of
Period.between
ChronoUnit.DAYS.between
Period.getYears
Period.getMonths
Period.getDays
NonAPI.plus(java.lang.String,int)
NonAPI.reminder(long,int)
NonAPI.divide(int,int)
NonAPI.divide(UNRESOLVED,UNRESOLVED)
DateTimeFormatterBuilder.<init>
DateTimeFormatterBuilder.appendValue
appendLiteral
appendValue
appendValueReduced
toFormatter
LocalDateTime.parse
DateTimeFormatter.format
Duration.get
getTime
NonAPI.plus(java.lang.String,long)
Toast.makeText
show

Number3:
SimpleDateFormat.<init>
SimpleDateFormat.parse
ParseException.printStackTrace
Date.getTime
NonAPI.minus(long,long)
TimeUnit.MILLISECONDS.toDays
TimeUnit.DAYS.toMillis
NonAPI.minus(long,UNRESOLVED)
TimeUnit.MILLISECONDS.toHours
TimeUnit.HOURS.toMillis
TimeUnit.MILLISECONDS.toMinutes
TimeUnit.MINUTES.toMillis
TimeUnit.MILLISECONDS.toSeconds
NonAPI.plus(java.lang.String,long)
System.out.println
Date.<init>
Thread.sleep
System.currentTimeMillis
NonAPI.times(int,int)
NonAPI.minus(long,int)
TimeDiff.getTimeDifference
System.out.printf
TimeDiff.TimeField.ordinal
Calendar.getInstance
TimeZone.getTimeZone
Calendar.setTimeZone
Calendar.setTime
Calendar.getTimeInMillis
Math.abs
NonAPI.divide(int,int)
NonAPI.divide(long,int)
NonAPI.reminder(long,int)
NonAPI.reminder(int,int)
NonAPI.greater(int,int)
Integer.toString
NonAPI.plus(String,java.lang.String)
Calendar.add
Calendar.before
Calendar.after
Calendar.get
NonAPI.equals(int,Calendar.HOUR_OF_DAY)
NonAPI.equals(int,Calendar.MINUTE)
NonAPI.times(long,int)
NonAPI.divide(long,long)
NonAPI.less(long,int)
NonAPI.plus(long,java.lang.String)
NonAPI.divide(.diff,int)
NonAPI.reminder(.diff,int)
NonAPI.minus(UNRESOLVED,UNRESOLVED)
DurationFormatUtils.formatDuration
NonAPI.plus(java.lang.String,java.lang.String)
NonAPI.reminder(UNRESOLVED,int)
String.format
System.out.print
DateTimeZone.forID
DateTimeFormat.forPattern
DateTimeFormatter.withZone
DateTimeFormatter.parseDateTime
Period.<init>
PeriodFormat.getDefault
PeriodFormatter.print

Number4:
NonAPI.less(long,long)
TimeZone.getDefault
Calendar.getInstance
Calendar.setTimeInMillis
NonAPI.minus(long,long)
NonAPI.times(int,int)
Calendar.get
NonAPI.equals(int,int)
Calendar.add
Calendar.before
DateTimeZone.forID
DateTime.<init>
DateTime.withTimeAtStartOfDay
getDays
System.out.println
DateTime.toLocalDate
ZoneId.of
ZonedDateTime.now
Start.toLocalDate
Stop.toLocalDate
ChronoUnit.DAYS.between
ZonedDateTime.of
ZonedDateTime.truncatedTo
ChronoUnit.HOURS.between
LocalDate.now
LocalDate.of
Period.between
Period.getDays
NonAPI.plus(java.lang.String,int)
DateTime.getMillis
DateTime.minus
DateTime.getDayOfYear
NonAPI.plus(java.lang.String,UNRESOLVED)
NonAPI.minus(java.lang.String,UNRESOLVED)

Number5:
LocalDate.now
NonAPI.plus(java.lang.String,.LocalDate)
System.out.println
LocalDate.plus
ChronoUnit.DAYS.between
NonAPI.plus(java.lang.String,long)
LocalDate.parse
NonAPI.plus(java.lang.String,java.lang.String)
NonAPI.plus(java.lang.String,java.time.LocalDate)
DAYS.between
LocalDate.minusDays
LocalDate.atStartOfDay
Duration.between
toDays
LocalDate.of
LocalDate.until
NonAPI.plus(java.lang.String,UNRESOLVED)

Number6:
Date.getTime
NonAPI.minus(long,long)
NonAPI.divide(long,long)
ZoneId.of
ZonedDateTime.of
ChronoUnit.SECONDS.between
NonAPI.plus(java.lang.String,long)
System.out.println
Duration.between
NonAPI.plus(java.lang.String,.Duration)
Duration.getSeconds
NonAPI.plus(java.lang.String,int)
Math.abs
NonAPI.minus(UNRESOLVED,UNRESOLVED)
NonAPI.divide(UNRESOLVED,UNRESOLVED)
System.nanoTime

Number7:
InputStreamReader.<init>
BufferedReader.<init>
SimpleDateFormat.<init>
System.out.println
BufferedReader.readLine
String.trim
SimpleDateFormat.parse
Date.getTime
NonAPI.minus(long,long)
NonAPI.divide(long,int)
NonAPI.plus(java.lang.String,long)
NonAPI.notEquals(java.io.BufferedReader,null)
BufferedReader.close
LocalDate.parse
ChronoUnit.DAYS.between
Math.abs
DateTimeFormatter.ofPattern
System.out.print
Scanner.<init>
Scanner.nextLine
DateTimeFormat.forPattern
DateTimeFormatter.parseDateTime
LocalDate.<init>
Days.daysBetween
Days.getDays
NonAPI.plus(java.lang.String,int)
DateFormat.parse
DateTime.<init>
DateTime.plusDays
DateTime.toDate
ArrayList<.Date>.<init>
Date.before
Date.equals
NonAPI.conditionalOr(boolean,boolean)
List<.Date>.add
TimeUnit.DAYS.convert
NonAPI.times(int,int)
Long.toString
NonAPI.plus(java.lang.String,java.lang.String)
Log.e
NonAPI.plus(java.lang.String,java.lang.Exception)
NonAPI.plus(long,int)
NonAPI.reminder(long,int)
NonAPI.plus(long,java.lang.String)
NonAPI.divide(.diff,int)

Number8:
Date.getTime
NonAPI.minus(UNRESOLVED,UNRESOLVED)
TimeUnit.convert
NonAPI.equals(.Date,null)
NonAPI.conditionalOr(.Date,null)
DateFormat.format
NonAPI.plus(StringBuffer,java.lang.String)
Integer.parseInt
NonAPI.lessEquals(int,int)
Calendar.getInstance
Calendar.getActualMaximum
NonAPI.plus(UNRESOLVED,int)
NonAPI.minus(UNRESOLVED,int)
NonAPI.minus(int,int)
NonAPI.times(int,int)
NonAPI.divide(UNRESOLVED,UNRESOLVED)
SimpleDateFormat.<init>
SimpleDateFormat.parse
ParseException.printStackTrace
Date.<init>
Locale.getDefault
SimpleDateFormat.format
Date.after
Calendar.setTime
Calendar.get
Calendar.clear
Calendar.set
Calendar.getTimeInMillis
NonAPI.minus(long,long)
NonAPI.divide(float,int)
NonAPI.plus(java.lang.String,int)
DateTimeFormatter.ofPattern
LocalDate.parse
ChronoUnit.DAYS.between
NonAPI.plus(java.lang.String,long)
System.out.println
NonAPI.divide(long,int)
NumberFormat.getInstance
NumberFormat.setRoundingMode
NumberFormat.setMaximumFractionDigits
NumberFormat.setMinimumFractionDigits
NumberFormat.format
NumberFormat.parse
Number.intValue
DateValue.getTime
TimeUnit.DAYS.convert
NonAPI.plus(java.lang.String,UNRESOLVED)
Days.daysBetween
Days.getDays
NonAPI.minus(yourDate.time,UNRESOLVED)
TimeUnit.MILLISECONDS.toDays
toString
NonAPI.plus(UNRESOLVED,java.lang.String)
NonAPI.minus(yourDate1.time,yourDate2.time)
LocalDate.of

Number9:
GregorianCalendar.getInstance
Calendar.setTime
Calendar.get
NonAPI.minus(int,int)
Calendar.add
SimpleDateFormat.<init>
NonAPI.equals(int,t.expectedYearDiff)
SimpleDateFormat.format
NonAPI.plus(t.comment,java.lang.String)
System.out.println
NonAPI.greater(int,int)
Calendar.getInstance
Calendar.getTime
Calendar.getTimeInMillis
NonAPI.less(long,long)
NonAPI.plus(int,java.lang.String)
Calendar.set
NonAPI.greater(long,long)
Integer.parseInt
LocalDate.of
ZoneId.of
LocalDate.now
ChronoUnit.YEARS.between
GregorianCalendar.<init>
GregorianCalendar.get
GregorianCalendar.set
NonAPI.minus(int,UNRESOLVED)
NonAPI.less(int,UNRESOLVED)
NonAPI.equals(int,UNRESOLVED)
NonAPI.conditionalAnd(int,UNRESOLVED)
NonAPI.conditionalOr(int,UNRESOLVED)
NonAPI.less(int,int)
IllegalArgumentException.<init>
String.substring
NonAPI.greaterEquals(int,int)
NonAPI.times(int,int)
NonAPI.plus(int,int)
NonAPI.plus(java.lang.String,int)
DateTimeFormat.forPattern
DateTimeFormatter.parseDateTime
DateTime.<init>
Months.monthsBetween
Months.getMonths

Number10:
NonAPI.equals(.Date,null)
NonAPI.conditionalOr(.Date,null)
Calendar.set
Calendar.before
Calendar.add
Calendar.after
TimeZone.getTimeZone
Calendar.getInstance
Calendar.setTimeInMillis
Calendar.getTimeInMillis
NonAPI.minus(UNRESOLVED,UNRESOLVED)
NonAPI.times(int,int)
NonAPI.divide(float,int)
Math.round
NonAPI.divide(long,int)
LocalDate.<init>
Days.daysBetween
Days.getDays
Duration.between
toDays
ZoneId.of
ZonedDateTime.of
ZonedDateTime.now
ChronoUnit.DAYS.between
GregCal.toZonedDateTime
DayCalendar.getTimeInMillis
Math.abs
TimeUnit.MILLISECONDS.toDays
SimpleDateFormat.<init>
DateFormat.format
DateFormat.parse
Date.getTime

