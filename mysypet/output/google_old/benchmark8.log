Buildfile: /root/workspace/liujiaxin/mysypet/build.xml

sypet:
     [java] ----------Options
     [java] Verbose: false
     [java] Timeout: 600000
     [java] Round Robin: false
     [java] Round Robin Iterations: 100
     [java] Round Robin Range: 2
     [java] Solver limit: 5
     [java] ----------benchmarks/google/8/benchmark8.json
     [java] Benchmark Id: 8
     [java] Method name: predict
     [java] Packages: [org.apache.commons.math.stat]
     [java] Libraries: [./lib/commons-math-2.2.jar]
     [java] Source type(s): [double[][], double]
     [java] Target type: double
     [java] --------------------------------------------------------
     [java] Warning: javax.crypto.Cipher is a phantom class!
     [java] Warning: javax.crypto.IllegalBlockSizeException is a phantom class!
     [java] Warning: javax.crypto.BadPaddingException is a phantom class!
     [java] Warning: javax.crypto.NoSuchPaddingException is a phantom class!
     [java] Warning: javax.crypto.SecretKey is a phantom class!
     [java] ============usingGoogle===============
     [java] 8
     [java] =========cnt:=========23
     [java] #Classes: 72
     [java] #Methods: 925
     [java] Soot Time: 2187.562692
     [java] PetriNet for path length: 1 [places: 47 ; transitions: 94 ; edges: 196]
     [java] =========sketch========
     [java] #Program: 0
     [java] PetriNet for path length: 2 [places: 47 ; transitions: 94 ; edges: 196]
     [java] =========sketch========
     [java] #Program: 0
     [java] PetriNet for path length: 3 [places: 47 ; transitions: 94 ; edges: 196]
     [java] =========sketch========
     [java] #Program: 0
     [java] PetriNet for path length: 4 [places: 47 ; transitions: 94 ; edges: 196]
     [java] =========sketch========
     [java] #Program: 0
     [java] PetriNet for path length: 5 [places: 47 ; transitions: 94 ; edges: 196]
     [java] =========sketch========
     [java] <org.apache.commons.math.stat.regression.SimpleRegression: void <init>()>
     [java] <org.apache.commons.math.stat.regression.SimpleRegression: void addData(double[][])>
     [java] <org.apache.commons.math.stat.regression.SimpleRegression: void <init>()>
     [java] <org.apache.commons.math.stat.regression.SimpleRegression: double getSlopeConfidenceInterval(double)>
     [java] #Program: 0
     [java] =========sketch========
     [java] <org.apache.commons.math.stat.regression.SimpleRegression: void <init>()>
     [java] <org.apache.commons.math.stat.regression.SimpleRegression: void addData(double[][])>
     [java] <org.apache.commons.math.stat.regression.SimpleRegression: void <init>()>
     [java] <org.apache.commons.math.stat.regression.SimpleRegression: double predict(double)>
     [java] #Program: 2
     [java] =========sketch========
     [java] <org.apache.commons.math.stat.regression.SimpleRegression: void <init>()>
     [java] sypet_clone_org.apache.commons.math.stat.regression.SimpleRegression
     [java] <org.apache.commons.math.stat.regression.SimpleRegression: void addData(double[][])>
     [java] <org.apache.commons.math.stat.regression.SimpleRegression: double predict(double)>
     [java] #Program: 4
     [java] =========Statistics (time in milliseconds)=========
     [java] Benchmark Id: 8
     [java] Recommend Api Number:23
     [java] Sketch Generation Time: 48.68293299999999
     [java] Sketch Completion Time: 11.027843
     [java] Compilation Time: 384.07902
     [java] Running Test cases Time: 43.771446
     [java] Synthesis Time: 103.48222199999998
     [java] Total Time: 2675.123934
     [java] Number of components: 4
     [java] Number of holes: 5
     [java] Number of completed programs: 5
     [java] Number of sketches: 3
     [java] Solution:
     [java]  org.apache.commons.math.stat.regression.SimpleRegression sypet_var15 = new org.apache.commons.math.stat.regression.SimpleRegression();
     [java]  sypet_var15.addData(sypet_arg0);
     [java]  double sypet_var17 = sypet_var15.predict(sypet_arg1);
     [java]  return sypet_var17;
     [java]  
     [java] ============================

BUILD SUCCESSFUL
Total time: 3 seconds
