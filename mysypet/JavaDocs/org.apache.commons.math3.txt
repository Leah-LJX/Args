CompositeFormat.parseNextCharacter(String,ParsePosition)	Parses source until a non whitespace character is found
BlockRealMatrix.getFrobeniusNorm()	Returns the Frobenius norm of the matrix
PoissonDistribution.PoissonDistribution(double,double,int)	Creates a new Poisson distribution with specified mean convergence criterion and maximum number of iterations
LogNormalDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
ChromosomePair.toString()	
StandardDeviation.StandardDeviation(SecondMoment)	Constructs a StandardDeviation from an external second moment
CauchyDistribution.CauchyDistribution(double,double)	Creates a Cauchy distribution using the given median and scale
ArithmeticUtils.factorialLog(int)	Compute the natural logarithm of the factorial of n
TransformerMap.getTransformer(Class)	Returns the Transformer that is mapped to a class if mapping is not present this returns null
LeastSquaresAdapter.getIterationCounter()	Get a independent Incrementor that counts up to the maximum number of iterations and then throws an exception
BlockRealMatrix.walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)	Visit and possibly change some matrix entries in row order
UnivariateSolverUtils.bracket(UnivariateFunction,double,double,double)	This method simply calls bracket function initial lowerBound upperBound q r maximumIterations with q and r set to 1 0 and maximumIterations set to Integer MAX VALUE
EnumeratedIntegerDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all integers between the lower and upper bound of the support are included in the support
DSCompiler.pow(double,double[],int,double[],int)	Compute power of a double to a derivative structure
BaseSecantSolver.solve(int,UnivariateFunction,double,double,double,AllowedSolution)	Solve for a zero in the given interval start at startValue
RectangularCholeskyDecomposition.getRootMatrix()	Get the root of the covariance matrix
SynchronizedMultivariateSummaryStatistics.equals(Object)	Returns true iff object is a MultivariateSummaryStatistics instance and all statistics have the same values as this
Circle.toSubSpace(Point)	Transform a space point into a sub space point
DifferentiableMultivariateVectorMultiStartOptimizer.DifferentiableMultivariateVectorMultiStartOptimizer(DifferentiableMultivariateVectorOptimizer,int,RandomVectorGenerator)	Create a multi start optimizer from a single start optimizer
GaussIntegratorFactory.legendreHighPrecision(int)	Creates a Gauss Legendre integrator of the given order
Transform.apply(Hyperplane)	Transform an hyperplane of a space
RandomKey.toString()	
SimpleRegression.getRSquare()	Returns the coefficient of determination usually denoted r square
MullerSolver.MullerSolver(double,double)	Construct a solver
RealVectorFormat.getFormat()	Get the components format
ExpandableStatefulODE.getSecondaryMappers()	Get the equations mappers for the secondary equations sets
CombinatoricsUtils.checkBinomial(int,int)	Check binomial preconditions
DummyLocalizable.getSourceString()	Gets the source non localized string
UniformRealDistribution.UniformRealDistribution(RandomGenerator,double,double,double)	Creates a uniform distribution
PolygonsSet.PolygonsSet(BSPTree)	Build a polygons set from a BSP tree
GeometricMean.evaluate(double[],int,int)	Returns the geometric mean of the entries in the specified portion of the input array
MultiStartUnivariateOptimizer.getOptima()	Gets all the optima found during the last call to optimize
UnivariateIntegrator.getMaximalIterationCount()	Get the upper limit for the number of iterations
FieldRotation.FieldRotation(FieldVector3D,FieldVector3D,FieldVector3D,FieldVector3D)	Build the rotation that transforms a pair of vector into another pair
TDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
LeastSquaresAdapter.getObservationSize()	Get the number of observations rows in the Jacobian in this problem
StatUtils.variance(double[],double,int,int)	Returns the variance of the entries in the specified portion of the input array using the precomputed mean value Returns Double NaN if the designated subarray is empty
BaseAbstractUnivariateIntegrator.getRelativeAccuracy()	Get the actual relative accuracy
DerivativeStructure.pow(int)	Integer power operation
Pair.getSecond()	Get the second element of the pair
ArrayFieldVector.mapMultiplyToSelf(FieldElement)	Map a multiplication operation to each entry
GeometricMean.getResult()	Returns the current value of the Statistic
BigFraction.BigFraction(BigInteger)	Create a BigFraction equivalent to the passed BigInteger ie num 1
FieldRotation.applyTo(Rotation,FieldVector3D)	Apply a rotation to a vector
FieldMatrix.setRowMatrix(int,FieldMatrix)	Set the entries in row number row as a row matrix
EventState.getMaxCheckInterval()	Get the maximal time interval between events handler checks
NonLinearConjugateGradientOptimizer.NonLinearConjugateGradientOptimizer(ConjugateGradientFormula,ConvergenceChecker,UnivariateSolver)	Constructor with default preconditioner
RandomGenerator.nextInt()	Returns the next pseudorandom uniformly distributed int value from this random number generator s sequence
LeastSquaresProblem.Evaluation.getCost()	Get the cost
NormalApproximationInterval.NormalApproximationInterval()	
SimpleCurveFitter.withStartPoint(double[])	Configure the start point initial guess
CurveFitter.getObservations()	Get the observed points
SynchronizedSummaryStatistics.setMaxImpl(StorelessUnivariateStatistic)	Sets the implementation for the maximum
Max.value(double,double)	Compute the value for the function
ArrayRealVector.ArrayRealVector(RealVector)	Construct a vector from another vector using a deep copy
SimpleRegression.getIntercept()	Returns the intercept of the estimated regression line if hasIntercept is true otherwise 0
CurveFitter.CurveFitter(MultivariateVectorOptimizer)	Simple constructor
ExceptionContext.getMessage()	Gets the default message
IterativeLinearSolver.solveInPlace(RealLinearOperator,RealVector,RealVector)	Returns an estimate of the solution to the linear system A x b The solution is computed in place initial guess is modified
RandomKey.inducedPermutation(List,List)	Generates a representation of a permutation corresponding to a permutation which yields permutedData when applied to originalData
FieldRotation.FieldRotation(RealFieldElement[][],double)	Build a rotation from a 3X3 matrix
ArrayRealVector.walkInDefaultOrder(RealVectorChangingVisitor,int,int)	Visits and possibly alters some entries of this vector in default order increasing index
ArrayRealVector.walkInDefaultOrder(RealVectorPreservingVisitor)	Visits but does not alter all entries of this vector in default order increasing index
BigFraction.BigFraction(double,double,int)	Create a fraction given the double value and maximum error allowed
Quaternion.toString()	
BSPTree.BSPTree(Object)	Build a tree having only one root cell representing the whole space
CauchyDistribution.getMedian()	Access the median
SimpleRegression.getN()	Returns the number of observations that have been added to the model
TriangularDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
Dfp.rint()	Round to nearest integer using the round half even method
Atanh.Atanh()	
FastMath.min(long,long)	Compute the minimum of two values
OLSMultipleLinearRegression.OLSMultipleLinearRegression(double)	Create an empty OLSMultipleLinearRegression instance using the given singularity threshold for the QR decomposition
KMeansPlusPlusClusterer.KMeansPlusPlusClusterer(int,int)	Build a clusterer
Vector2D.negate()	Get the opposite of the instance
SparseGradient.sinh()	Hyperbolic sine operation
DefaultProcessModel.DefaultProcessModel(double[][],double[][],double[][])	Create a new ProcessModel taking double arrays as input parameters
NonLinearConjugateGradientOptimizer.NonLinearConjugateGradientOptimizer(ConjugateGradientFormula)	Constructor with default checker line search solver and preconditioner
SparseGradient.toDegrees()	Convert radians to degrees with error of less than 0 5 ULP
ResizableDoubleArray.start()	Returns the starting index of the internal array The starting index is the position of the first addressable element in the internal storage array The addressable elements in the array are internalArray startIndex internalArray startIndex numElements 1
ConstantRealDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
ElitisticListPopulation.ElitisticListPopulation(int,double)	Creates a new ElitisticListPopulation instance and initializes its inner chromosome list
FieldMatrix.getSubMatrix(int,int,int,int)	Get a submatrix Rows and columns are indicated counting from 0 to n 1
AbstractUnivariateStatistic.evaluate(double[])	Returns the result of evaluating the statistic over the input array
RealVector.getLInfNorm()	Returns the L norm of the vector
NewtonRaphsonSolver.solve(int,UnivariateDifferentiableFunction,double,double)	Find a zero near the midpoint of min and max
EuclideanDoublePoint.EuclideanDoublePoint(double[])	Build an instance wrapping an integer array
GammaDistribution.getAlpha()	Returns the shape parameter of this distribution
FieldRotation.applyInverseTo(Rotation)	Apply the inverse of the instance to another rotation
TransformUtils.scaleArray(Complex[],double)	Multiply every component in the given complex array by the given real number The change is made in place
ResizableDoubleArray.ResizableDoubleArray(int,double)	Creates an instance with the specified initial capacity and expansion factor
PreconditionedIterativeLinearSolver.solve(RealLinearOperator,RealLinearOperator,RealVector,RealVector)	Returns an estimate of the solution to the linear system A x b
EuclideanDoublePoint.toString()	
OLSMultipleLinearRegression.newSampleData(double[],int,int)	Loads model x and y sample data from a flat input array overriding any previous sample
ExponentialDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
RandomKey.randomPermutation(int)	Generates a representation corresponding to a random permutation of length l which can be passed to the RandomKey constructor
QuasiSigmoidDecayFunction.value(long)	Computes the value of the learning factor
UnivariateSolverUtils.solve(UnivariateFunction,double,double)	Convenience method to find a zero of a univariate real function A default solver is used
SimpleRegression.getSignificance()	Returns the significance level of the slope equiv correlation
Vector3DFormat.parse(String)	Parses a string to produce a Vector3D object
SimpsonIntegrator.SimpsonIntegrator(double,double,int,int)	Build a Simpson integrator with given accuracies and iterations counts
EventFilter.EventFilter(EventHandler,FilterType)	Wrap an event handler
Decimal64.divide(Decimal64)	Compute this a
ArrayRealVector.ArrayRealVector(int,double)	Construct a vector with preset values
DfpField.getE()	Get the constant e
RandomDataImpl.nextSecureLong(long,long)	Generates a uniformly distributed random long integer between lower and upper endpoints included from a secure random sequence
RealDistribution.cumulativeProbability(double,double)	For a random variable X whose values are distributed according to this distribution this method returns P x0 X x1
Vector2D.Vector2D(double,Vector2D,double,Vector2D,double,Vector2D,double,Vector2D)	Linear constructor Build a vector from four other ones and corresponding scale factors
PolynomialSplineFunction.PolynomialSplineFunction(double[],PolynomialFunction[])	Construct a polynomial spline function with the given segment delimiters and interpolating polynomials
Gamma.regularizedGammaP(double,double,double,int)	Returns the regularized gamma function P a x
Line.toSpace(Point)	Transform a sub space point into a space point
SummaryStatistics.getMin()	Returns the minimum of the values that have been added
ExpandableStatefulODE.setTime(double)	Set current time
ArrayRealVector.ArrayRealVector(RealVector,ArrayRealVector)	Construct a vector by appending one vector to another vector
Vector1D.getNormSq()	Get the square of the norm for the vector
GaussIntegratorFactory.hermite(int)	Creates a Gauss Hermite integrator of the given order
FieldRotation.FieldRotation(RotationOrder,RealFieldElement,RealFieldElement,RealFieldElement)	Build a rotation from three Cardan or Euler elementary rotations
AdamsNordsieckTransformer.updateHighOrderDerivativesPhase2(double[],double[],Array2DRowRealMatrix)	Update the high order scaled derivatives Adams integrators phase 2
FieldVector3D.hashCode()	Get a hashCode for the 3D vector
Decimal64.floatValue()	The current implementation performs casting to a float
BracketingNthOrderBrentSolverDFP.getFunctionValueAccuracy()	Get the function accuracy
Circle.getYAxis()	Get the Y axis of the circle
LeastSquaresProblem.getStart()	Gets the initial guess
UniformIntegerDistribution.UniformIntegerDistribution(RandomGenerator,int,int)	Creates a new uniform integer distribution using the given lower and upper bounds both inclusive
PointVectorValuePair.getValueRef()	Gets a reference to the value of the objective function
ArrayFieldVector.ArrayFieldVector(Field)	Build a 0 length vector
BigFraction.intValue()	Gets the fraction as an int This returns the whole number part of the fraction
Decimal64.log10()	Base 10 logarithm
NormalDistribution.getStandardDeviation()	Access the standard deviation
RealVector.mapSubtractToSelf(double)	Subtract a value from each entry
Gamma.regularizedGammaQ(double,double,double,int)	Returns the regularized gamma function Q a x 1 P a x
OrderedTuple.OrderedTuple()	Build an ordered T uple from its components
TestUtils.rootLogLikelihoodRatio(long,long,long,long)	
Decimal64.multiply(Decimal64)	Compute this a
Embedding.toSpace(Point)	Transform a sub space point into a space point
AdamsNordsieckTransformer.getNSteps()	Get the number of steps of the method excluding the one being computed
SimpleVectorValueChecker.converged(int,PointVectorValuePair,PointVectorValuePair)	Check if the optimization algorithm has converged considering the last two points
ResizableDoubleArray.copy()	Returns a copy of the ResizableDoubleArray Does not contract before the copy so the returned object is an exact copy of this
KohonenUpdateAction.update(Network,double[])	Updates the network in response to the sample features
MaxCountExceededException.MaxCountExceededException(Localizable,Number,)	Construct the exception with a specific context
Subtract.Subtract()	
SumOfSquares.getResult()	Returns the current value of the Statistic
Complex.sqrt1z()	Compute the square root of 1 this2 for this complex number
DerivativeStructure.sqrt()	Square root
NonMonotonicSequenceException.getStrict()	true is the sequence should be strictly monotonic
MathArrays.linearCombination(double,double,double,double,double,double,double,double)	Compute a linear combination accurately
BlockRealMatrix.setColumnMatrix(int,RealMatrix)	Sets the specified column of this matrix to the entries of the specified column matrix Column indices start at 0
DSCompiler.log1p(double[],int,double[],int)	Computes shifted logarithm of a derivative structure
Min.copy()	Returns a copy of the statistic with the same internal state
RegionFactory.getComplement(Region)	Get the complement of the region exchanged interior exterior
Ceil.value(double)	Compute the value of the function
SphericalPolygonsSet.SphericalPolygonsSet(double,)	Build a polygon from a simple list of vertices
Plane.getOffset(Vector)	Get the offset oriented distance of a vector
RRQRDecomposition.getRank(double)	Return the effective numerical matrix rank
PolynomialFunctionNewtonForm.PolynomialFunctionNewtonForm(double[],double[])	Construct a Newton polynomial with the given a and c The order of centers are important in that if c shuffle then values of a would completely change not just a permutation of old a
BetaDistribution.BetaDistribution(double,double,double)	Build a new instance
FieldVector3D.distanceSq(FieldVector3D,Vector3D)	Compute the square of the distance between two vectors
Array2DRowFieldMatrix.createMatrix(int,int)	Create a new FieldMatrix of the same type as the instance with the supplied row and column dimensions
CorrelatedRandomVectorGenerator.nextVector()	Generate a correlated random vector
Rotation.revert()	Revert a rotation
Exp.value(DerivativeStructure)	Simple mathematical function
TTest.t(StatisticalSummary,StatisticalSummary)	Computes a 2 sample t statistic comparing the means of the datasets described by two StatisticalSummary instances without the assumption of equal subpopulation variances Use homoscedasticT StatisticalSummary StatisticalSummary to compute a t statistic under the equal variances assumption
MicrosphereInterpolatingFunction.MicrosphereInterpolatingFunction(double[][],double[],int,int,UnitSphereRandomVectorGenerator)	
ExpandableStatefulODE.computeDerivatives(double,double[],double[])	Get the current time derivative of the complete state vector
Atan2.Atan2()	
DifferentiableMultivariateFunction.gradient()	Returns the gradient function
Gaussian.value(double)	Compute the value of the function
NelderMeadSimplex.NelderMeadSimplex(double[])	Build a Nelder Mead simplex with default coefficients
FieldMatrix.getColumnVector(int)	Returns the entries in column number column as a vector
DefaultIterativeLinearSolverEvent.DefaultIterativeLinearSolverEvent(Object,int,RealVector,RealVector,RealVector,double)	Creates a new instance of this class This implementation does not deep copy the specified vectors x b r Therefore the user must make sure that these vectors are either unmodifiable views or deep copies of the same vectors actually used by the source Failure to do so may compromise subsequent iterations of the source If the residual vector r is null then getResidual throws a MathUnsupportedOperationException and providesResidual returns false
RealMatrix.power(int)	Returns the result of multiplying this with itself p times Depending on the underlying storage instability for high powers might occur
ExponentialDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
DiagonalMatrix.setEntry(int,int,double)	Set the entry in the specified row and column Row and column indices start at 0
Dfp.copySign(double)	Returns the instance with the sign of the argument
WeibullDistribution.density(double)	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF
DerivativeStructure.pow(DerivativeStructure)	Power operation
ExponentialDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
BinomialDistribution.cumulativeProbability(int)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
Vector2D.getZero()	Get the null vector of the vectorial space or origin point of the affine space
MultiDimensionMismatchException.getWrongDimension(int)	the wrong dimension stored at index
Array2DRowFieldMatrix.multiplyEntry(int,int,FieldElement)	Change an entry in the specified row and column
Decimal64.sin()	Sine operation
RRQRDecomposition.getP()	Returns the pivot matrix P used in the QR Decomposition of matrix A such that AP QR
OpenMapRealVector.OpenMapRealVector(OpenMapRealVector)	Copy constructor
MultivariateJacobianFunction.value(RealVector)	Compute the function value and its Jacobian
MonotoneChain.findHullVertices(Collection)	Find the convex hull vertices from the set of input points
Minus.Minus()	
FastMath.addExact(long,long)	Add two numbers detecting overflows
ArcsSet.buildNew(BSPTree)	Build a region using the instance as a prototype
Gaussian.Gaussian()	Normalized gaussian with zero mean and unit standard deviation
SymmLQ.solve(RealLinearOperator,RealLinearOperator,RealVector)	Returns an estimate of the solution to the linear system A x b
NonNegativeConstraint.isRestrictedToNonNegative()	Indicates whether all the variables must be restricted to non negative values
PascalDistribution.cumulativeProbability(int)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
ArrayFieldVector.mapInvToSelf()	Map the 1 x function to each entry
Clusterer.cluster(Collection)	Perform a cluster analysis on the given set of Clusterable instances
BaseAbstractMultivariateOptimizer.getStartPoint()	
SynchronizedSummaryStatistics.setMeanImpl(StorelessUnivariateStatistic)	Sets the implementation for the mean
AbstractRealMatrix.getRow(int)	Get the entries at the given row index Row indices start at 0
CombinatoricsUtils.binomialCoefficientLog(int,int)	Returns the natural log of the Binomial Coefficient n choose k the number of k element subsets that can be selected from an n element set
ConvexHull.getVertices()	Get the vertices of the convex hull
SearchInterval.SearchInterval(double,double)	
FunctionUtils.toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction)	Convert a DifferentiableMultivariateFunction into a MultivariateDifferentiableFunction
AbstractRealMatrix.walkInOptimizedOrder(RealMatrixPreservingVisitor)	Visit but don t change all matrix entries using the fastest possible order
ParetoDistribution.sample()	Generate a random value sampled from this distribution
PearsonsCorrelation.PearsonsCorrelation(RealMatrix,int)	Create a PearsonsCorrelation from a covariance matrix The correlation matrix is computed by scaling the covariance matrix
MathArrays.distance(double[],double[])	Calculates the L2 Euclidean distance between two points
Frequency.getCumPct(char)	Returns the cumulative percentage of values less than or equal to v as a proportion between 0 and 1
MonotoneChain.generate(Collection)	Builds the convex hull from the set of input points
AbstractFieldMatrix.equals(Object)	Returns true iff object is a FieldMatrix instance with the same dimensions as this and all corresponding matrix entries are equal
DfpField.getPi()	Get the constant
StandardDeviation.StandardDeviation(StandardDeviation)	Copy constructor creates a new StandardDeviation identical to the original
ResizableDoubleArray.setExpansionMode(int)	Sets the expansionMode The specified value must be one of ADDITIVE MODE MULTIPLICATIVE MODE
IterativeLegendreGaussIntegrator.IterativeLegendreGaussIntegrator(int,int,int)	Builds an integrator with given iteration counts
FiniteDifferencesDifferentiator.FiniteDifferencesDifferentiator(int,double)	Build a differentiator with number of points and step size when independent variable is unbounded
CentroidCluster.CentroidCluster(Clusterable)	Build a cluster centered at a specified point
Percentile.copy()	Returns a copy of the statistic with the same internal state
MeasurementModel.getMeasurementMatrix()	Returns the measurement matrix
EventHandler.resetState(double,double[])	Reset the state prior to continue the integration
PascalDistribution.probability(int)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the probability mass function PMF for the distribution
AbstractRealMatrix.preMultiply(RealMatrix)	Returns the result of premultiplying this by m
SparseGradient.taylor()	Evaluate Taylor expansion of a sparse gradient
Incrementor.canIncrement()	Checks whether a single increment is allowed
SparseGradient.linearCombination(double,SparseGradient,double,SparseGradient,double,SparseGradient,double,SparseGradient)	Compute a linear combination
MullerSolver2.MullerSolver2(double,double)	Construct a solver
SummaryStatistics.clear()	Resets all statistics and storage
AbstractRealMatrix.preMultiply(double[])	Returns the row vector result of premultiplying this by the vector v
OLSMultipleLinearRegression.calculateRSquared()	Returns the R Squared statistic defined by the formula R2 1 SSR SSTO where SSR is the sum of squared residuals and SSTO is the total sum of squares If there is no variance in y i e SSTO 0 NaN is returned
LegendreGaussIntegrator.LegendreGaussIntegrator(int,int,int)	Build a Legendre Gauss integrator with given iteration counts
LinearObjectiveFunction.LinearObjectiveFunction(double[],double)	
SparseGradient.negate()	Returns the additive inverse of this element
Dfp.rootN(int)	Nth root
ChiSquaredDistribution.logDensity(double)	Returns the natural logarithm of the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF If the derivative does not exist at x then an appropriate replacement should be returned e g Double POSITIVE INFINITY Double NaN or the limit inferior or limit superior of the difference quotient Note that due to the floating point precision and under overflow issues this method will for some distributions be more precise and faster than computing the logarithm of RealDistribution density double The default implementation simply computes the logarithm of density x
S2Point.getVector()	Get the corresponding normalized vector in the 3D euclidean space
Covariance.Covariance(double[][],boolean)	Create a Covariance matrix from a rectangular array whose columns represent covariates
Pair.Pair(K,V)	Create an entry representing a mapping from the specified key to the specified value
FieldMatrix.walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)	Visit but don t change some matrix entries in column order
Cos.Cos()	
NordsieckStepInterpolator.writeExternal(ObjectOutput)	
AbstractRandomGenerator.nextGaussian()	Returns the next pseudorandom Gaussian normally distributed double value with mean 0 0 and standard deviation 1 0 from this random number generator s sequence
Fraction.subtract(int)	Subtract an integer from the fraction
Array2DRowFieldMatrix.getDataRef()	Get a reference to the underlying data array
ODEIntegrator.getName()	Get the name of the method
OpenIntToFieldHashMap.OpenIntToFieldHashMap(Field)	Build an empty map with default size and using zero for missing entries
ArrayFieldVector.mapDivide(FieldElement)	Map a division operation to each entry
RandomDataGenerator.setSecureAlgorithm(String,String)	Sets the PRNG algorithm for the underlying SecureRandom instance using the Security Provider API The Security Provider API is defined in Java Cryptography Architecture API Specification Reference
GradientFunction.GradientFunction(MultivariateDifferentiableFunction)	Simple constructor
SemiVariance.evaluate(double[],double)	Returns the SemiVariance of the designated values against the cutoff using instance properties variancDirection and biasCorrection
ResizableDoubleArray.getElement(int)	Returns the element at the specified index
RiddersSolver.RiddersSolver()	Construct a solver with default accuracy 1e 6
AbstractWell.setSeed(long)	Reinitialize the generator as if just built with the given long seed
Vertex.getOutgoing()	Get outgoing edge
CMAESOptimizer.CMAESOptimizer()	Default constructor uses default parameters
Vector2D.add(Vector)	Add a vector to the instance
RealDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
StorelessCovariance.StorelessCovariance(int)	Create a bias corrected covariance matrix with a given dimension
DoubleArray.clear()	Clear the double array
Vector3D.distance1(Vector3D,Vector3D)	Compute the distance between two vectors according to the L1 norm
ResizableDoubleArray.getInternalValues()	Returns the internal storage array Note that this method returns a reference to the internal storage array not a copy and to correctly address elements of the array the startIndex is required available via the start method This method should only be used in cases where copying the internal array is not practical
UnivariateMatrixFunction.value(double)	Compute the value for the function
IntegerDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all integers between the lower and upper bound of the support are included in the support
FieldRotation.applyInverseTo(RealFieldElement[],RealFieldElement[])	Apply the inverse of the rotation to a vector stored in an array
RegionFactory.buildConvex(Hyperplane)	Build a convex region from a collection of bounding hyperplanes
Vector1D.Vector1D(double)	Simple constructor
StorelessUnivariateStatistic.clear()	Clears the internal state of the Statistic
IntegerDistribution.sample()	Generate a random value sampled from this distribution
TestUtils.kolmogorovSmirnovTest(RealDistribution,double[],double)	
MonotoneChain.MonotoneChain(boolean,double)	Create a new MonotoneChain instance
Array2DRowRealMatrix.getColumnDimension()	Returns the number of columns of this matrix
Dfp.intLog10()	Get the exponent of the greatest power of 10 that is less than or equal to abs this
FastMath.nextAfter(double,double)	Get the next machine representable number after a number moving in the direction of another number
OpenMapRealVector.OpenMapRealVector(double[],double)	Create from an array specifying zero tolerance
RealVector.walkInOptimizedOrder(RealVectorChangingVisitor)	Visits and possibly alters all entries of this vector in optimized order The order in which the entries are visited is selected so as to lead to the most efficient implementation it might depend on the concrete implementation of this abstract class
BigFraction.multiply(long)	Multiply the value of this fraction by the passed long returning the result in reduced form
Dfp.power10K(int)	Get the specified power of 10000
BrentSolver.BrentSolver(double)	Construct a solver
BigFractionFormat.parse(String,ParsePosition)	Parses a string to produce a BigFraction object
BlockRealMatrix.add(RealMatrix)	Returns the sum of this and m
ValueAndJacobianFunction.computeValue(double[])	Compute the value
KMeansPlusPlusClusterer.cluster(Collection,int,int,int)	Runs the K means clustering algorithm
FieldVector3D.distanceInf(Vector3D)	Compute the distance between the instance and another vector according to the L norm
MultivariateSummaryStatistics.getCovariance()	Returns the covariance matrix of the values that have been added
Dfp.multiply(double)	operator
DfpField.getRoundingMode()	Get the current rounding mode
Vector2DFormat.Vector2DFormat(String,String,String)	Create an instance with custom prefix suffix and separator
SynchronizedMultivariateSummaryStatistics.setSumLogImpl(StorelessUnivariateStatistic[])	Sets the implementation for the sum of logs
PolynomialsUtils.createChebyshevPolynomial(int)	Create a Chebyshev polynomial of the first kind
Line.getReverse()	Get the reverse of the instance
DifferentiableUnivariateVectorFunction.derivative()	Returns the derivative of the function
RealVectorChangingVisitor.end()	End visiting a vector This method is called once after all entries of the vector have been visited
Frequency.getPct(long)	Returns the percentage of values that are equal to v as a proportion between 0 and 1
FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)	Convert a MultivariateDifferentiableFunction into a DifferentiableMultivariateFunction
NordsieckStepInterpolator.rescale(double)	Rescale the instance
ConvexHull2D.getVertices()	Get the vertices of the convex hull
RealMatrix.setSubMatrix(double[][],int,int)	Replace the submatrix starting at row column using data in the input subMatrix array Indexes are 0 based
UnivariateFunction.value(double)	Compute the value of the function
BlockFieldMatrix.multiplyEntry(int,int,FieldElement)	Change an entry in the specified row and column
BaseAbstractMultivariateVectorOptimizer.optimize(int,FUNC,double[],double[],double[])	Optimize an objective function
MultivariateFunctionMappingAdapter.boundedToUnbounded(double[])	Maps an array from bounded to unbounded
Power.derivative()	Returns the derivative of the function
TriangularDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
Decimal64.tan()	Tangent operation
Frequency.incrementValue(long,long)	Increments the frequency count for v
DerivativeStructure.hypot(DerivativeStructure)	Returns the hypotenuse of a triangle with sides this and y sqrt this2 y2 avoiding intermediate overflow or underflow
MonotoneChain.MonotoneChain()	Create a new MonotoneChain instance
MatrixDimensionMismatchException.MatrixDimensionMismatchException(int,int,int,int)	Construct an exception from the mismatched dimensions
Line.wholeHyperplane()	Build a sub hyperplane covering the whole hyperplane
PointValuePair.getPointRef()	Gets a reference to the point
DescriptiveStatistics.getWindowSize()	Returns the maximum number of values that can be stored in the dataset or INFINITE WINDOW 1 if there is no limit
Constant.value(DerivativeStructure)	Simple mathematical function
NormalDistribution.NormalDistribution()	Create a normal distribution with mean equal to zero and standard deviation equal to one
Skewness.Skewness(Skewness)	Copy constructor creates a new Skewness identical to the original
FractionFormat.getImproperInstance(Locale)	Returns the default complex format for the given locale
FieldRotation.applyTo(RealFieldElement[],RealFieldElement[])	Apply the rotation to a vector stored in an array
LaguerreSolver.solveComplex(double[],double)	Find a complex root for the polynomial with the given coefficients starting from the given initial value
MathArrays.checkOrder(double[],OrderDirection,boolean,boolean)	Check that the given array is sorted
ListPopulation.addChromosome(Chromosome)	Add the given chromosome to the population
Kurtosis.clear()	Clears the internal state of the Statistic
DSCompiler.linearCombination(double,double[],int,double,double[],int,double,double[],int,double[],int)	Compute linear combination
DfpField.getSqr2Reciprocal()	Get the constant 2 2
Interval.getSup()	Get the upper bound of the interval
DfpDec.DfpDec(Dfp)	Copy constructor
DummyStepHandler.init(double,double[],double)	Initialize step handler at the start of an ODE integration
ArrayRealVector.ArrayRealVector(Double[])	Construct a vector from an array
SphericalPolygonsSet.SphericalPolygonsSet(Collection,double)	Build a polygons set from a Boundary REPresentation B rep
RealMatrixFormat.RealMatrixFormat(String,String,String,String,String,String,NumberFormat)	Create an instance with custom prefix suffix separator and format for components
Vector3D.Vector3D(double,Vector3D)	Multiplicative constructor Build a vector from another one and a scale factor
VectorFormat.parse(String,ParsePosition)	Parses a string to produce a Vector object
Network.iterator()	
AbstractLeastSquaresOptimizer.guessParametersErrors()	Returns an estimate of the standard deviation of each parameter The returned values are the so called asymptotic standard errors on the parameters defined as sd a i sqrt S n m C i i where a i is the optimized value of the i th parameter S is the minimized value of the sum of squares objective function as returned by getChiSquare n is the number of observations m is the number of parameters and C is the covariance matrix
SparseFieldVector.projection(FieldVector)	Find the orthogonal projection of this vector onto another vector
PolynomialFunctionNewtonForm.getCoefficients()	Returns a copy of the coefficients array
Array2DRowRealMatrix.addToEntry(int,int,double)	Adds in place the specified value to the specified entry of this matrix Row and column indices start at 0
FieldMatrixChangingVisitor.start(int,int,int,int,int,int)	Start visiting a matrix
UniformRealDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
RealMatrix.createMatrix(int,int)	Create a new RealMatrix of the same type as the instance with the supplied row and column dimensions
LimitAngle.LimitAngle(S1Point,boolean,double)	Simple constructor
FieldVector3D.toVector3D()	Convert to a constant vector without derivatives
NakagamiDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
Pair.Pair(Pair)	Create an entry representing the same mapping as the specified entry
GeometricMean.getSumLogImpl()	Returns the currently configured sum of logs implementation
SumOfLogs.evaluate(double[],int,int)	Returns the sum of the natural logs of the entries in the specified portion of the input array or Double NaN if the designated subarray is empty
IterationManager.addIterationListener(IterationListener)	Attaches a listener to this manager
RandomDataImpl.nextHexString(int)	Generates a random string of hex characters of length len
BicubicSplineInterpolatingFunction.partialDerivativeXY(double,double)	
FractionField.getZero()	Get the additive identity of the field
Percentile.Percentile()	Constructs a Percentile with the following defaults
RandomGeneratorFactory.createRandomGenerator(Random)	Creates a RandomDataGenerator instance that wraps a Random instance
FieldVector3D.distance1(FieldVector3D,Vector3D)	Compute the distance between two vectors according to the L1 norm
SobolSequenceGenerator.getNextIndex()	Returns the index i of the next point in the Sobol sequence that will be returned by calling nextVector
BaseMultivariateMultiStartOptimizer.optimize(int,FUNC,GoalType,double[])	Optimize an objective function
ODEIntegrator.getCurrentStepStart()	Get the current value of the step start time ti
CorrelatedRandomVectorGenerator.getGenerator()	Get the underlying normalized components generator
DifferentiableMultivariateMultiStartOptimizer.DifferentiableMultivariateMultiStartOptimizer(DifferentiableMultivariateOptimizer,int,RandomVectorGenerator)	Create a multi start optimizer from a single start optimizer
RealMatrix.getRowVector(int)	Returns the entries in row number row as a vector Row indices start at 0
Variance.copy()	Returns a copy of the statistic with the same internal state
StatisticalSummaryValues.getMean()	Description copied from interface StatisticalSummary
RegionFactory.xor(Region,Region)	Compute the symmetric difference exclusive or of two regions
BigReal.multiply(BigReal)	Compute this a
Dfp.cbrt()	Cubic root
LineSearch.search(double[],double[])	Finds the number alpha that optimizes f startPoint alpha direction
MatrixUtils.createRealVector(double[])	Creates a RealVector using the data from the input array
MultivariateNormalMixtureExpectationMaximization.fit(MixtureMultivariateNormalDistribution,int,double)	Fit a mixture model to the data supplied to the constructor
PiecewiseBicubicSplineInterpolatingFunction.PiecewiseBicubicSplineInterpolatingFunction(double[],double[],double[][])	
LogisticDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
SynchronizedSummaryStatistics.getGeoMeanImpl()	Returns the currently configured geometric mean implementation
Complex.isInfinite()	Checks whether either the real or imaginary part of this complex number takes an infinite value either Double POSITIVE INFINITY or Double NEGATIVE INFINITY and neither part is NaN
ParameterValidator.validate(RealVector)	Validates the set of parameters
AggregateSummaryStatistics.getMax()	Returns the maximum of the available values This version returns the maximum over all the aggregated data
RealTransformer.transform(UnivariateFunction,double,double,int,TransformType)	Returns the forward inverse transform of the specified real function sampled on the specified interval
AdamsIntegrator.AdamsIntegrator(String,int,int,double,double,double[],double[])	Build an Adams integrator with the given order and step control parameters
JDKRandomGenerator.setSeed(int[])	Sets the seed of the underlying random number generator using an int array seed
Product.evaluate(double[],double[])	Returns the weighted product of the entries in the input array
SynchronizedMultivariateSummaryStatistics.SynchronizedMultivariateSummaryStatistics(int,boolean)	Construct a SynchronizedMultivariateSummaryStatistics instance
CMAESOptimizer.getStatisticsMeanHistory()	History of mean matrix
PivotingStrategyInterface.pivotIndex(double[],int,int)	Find pivot index of the array so that partition and Kth element selection can be made
NelderMeadSimplex.NelderMeadSimplex(int)	Build a Nelder Mead simplex with default coefficients
DSCompiler.pow(double[],int,double[],int,double[],int)	Compute power of a derivative structure
RealDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
RealVector.outerProduct(RealVector)	Compute the outer product
AbstractIntegrator.computeDerivatives(double,double[],double[])	Compute the derivatives and check the number of evaluations
StatUtils.mode(double[],int,int)	Returns the sample mode s The mode is the most frequently occurring value in the sample If there is a unique value with maximum frequency this value is returned as the only element of the output array Otherwise the returned array contains the maximum frequency elements in increasing order For example if sample is 0 12 5 6 0 13 5 17 the returned array will have length two with 0 in the first element and 5 in the second
SparseFieldVector.mapMultiplyToSelf(FieldElement)	Map a multiplication operation to each entry
ParetoDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
Decimal64.equals(Object)	
EventFilter.g(double,double[])	Compute the value of the switching function
SumOfClusterVariances.SumOfClusterVariances(DistanceMeasure)	
Well19937c.Well19937c(int)	Creates a new random number generator using a single int seed
Rotation.applyInverseTo(double[],double[])	Apply the inverse of the rotation to a vector stored in an array
PointValuePair.PointValuePair(double[],double)	Builds a point objective function value pair
Vector3D.Vector3D(double,double,double)	Simple constructor
DescriptiveStatistics.getStandardDeviation()	Returns the standard deviation of the available values
PascalDistribution.PascalDistribution(RandomGenerator,int,double)	Create a Pascal distribution with the given number of successes and probability of success
AbstractUnivariateStatistic.setData(double[])	Set the data array
SparseFieldVector.SparseFieldVector(Field,int)	Construct a vector of zeroes
LevyDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
RandomDataGenerator.nextSecureInt(int,int)	Generates a uniformly distributed random integer between lower and upper endpoints included from a secure random sequence
SimpleBounds.SimpleBounds(double[],double[])	
Interval.getInf()	Get the lower bound of the interval
DescriptiveStatistics.getVarianceImpl()	Returns the currently configured variance implementation
ISAACRandom.setSeed(int)	Sets the seed of the underlying random number generator using an int seed
Array2DRowFieldMatrix.multiply(Array2DRowFieldMatrix)	Postmultiplying this matrix by m
TestUtils.tTest(double,StatisticalSummary,double)	
BaseAbstractUnivariateOptimizer.getConvergenceChecker()	Get the convergence checker
DfpDec.newInstance(String)	Create an instance from a String representation
SingularValueDecomposition.getCovariance(double)	Returns the n n covariance matrix
AggregateSummaryStatistics.AggregateSummaryStatistics()	Initializes a new AggregateSummaryStatistics with default statistics implementations
BigReal.multiply(int)	Compute n this Multiplication by an integer number is defined as the following sum n this i 1n this
NonLinearConjugateGradientOptimizer.IdentityPreconditioner.NonLinearConjugateGradientOptimizer.IdentityPreconditioner()	
ArrayFieldVector.ArrayFieldVector(Field,FieldElement[],int,int)	Construct a vector from part of a array
EmpiricalDistribution.EmpiricalDistribution(int,RandomGenerator)	Creates a new EmpiricalDistribution with the specified bin count using the provided RandomGenerator as the source of random data
TDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
DiagonalMatrix.createMatrix(int,int)	Create a new RealMatrix of the same type as the instance with the supplied row and column dimensions
Line.copySelf()	Copy the instance
Neuron.getSize()	Gets the length of the feature set
SingularOperatorException.SingularOperatorException()	Creates a new instance of this class
UnitSphereRandomVectorGenerator.UnitSphereRandomVectorGenerator(int)	Create an object that will use a default RNG MersenneTwister in order to generate the individual components
Dfp.strictlyPositive()	Check if instance is strictly greater than 0
ResizableDoubleArray.getContractionCriterion()	The contraction criterion defines when the internal array will contract to store only the number of elements in the element array
Circle.Circle(Circle)	Copy constructor
UnivariateMultiStartOptimizer.optimize(int,FUNC,GoalType,double,double,double)	Find an optimum in the given interval start at startValue
GaussianCurveFitter.create()	Creates a default curve fitter
ChiSquareTest.chiSquareTest(double[],long[])	Returns the observed significance level or p value associated with a Chi square goodness of fit test comparing the observed frequency counts to those in the expected array
Region.getBarycenter()	Get the barycenter of the instance
ContinuousOutputModel.init(double,double[],double)	Initialize step handler at the start of an ODE integration
EuclideanDoublePoint.hashCode()	
BigFractionFormat.getProperInstance()	Returns the default complex format for the current locale
ModelFunction.getModelFunction()	Gets the model function to be optimized
FieldMatrix.setEntry(int,int,FieldElement)	Set the entry in the specified row and column
EnumeratedIntegerDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
FastMath.atan(double)	Arctangent function
Array2DRowRealMatrix.walkInColumnOrder(RealMatrixChangingVisitor)	Visit and possibly change all matrix entries in column order
AbstractRegion.intersection(SubHyperplane)	Get the parts of a sub hyperplane that are contained in the region
PolynomialFunction.Parametric.value(double,)	Compute the value of the function
DerivativeStructure.hashCode()	Get a hashCode for the derivative structure
AbstractRealMatrix.getEntry(int,int)	Get the entry in the specified row and column Row and column indices start at 0
CorrelatedRandomVectorGenerator.CorrelatedRandomVectorGenerator(RealMatrix,double,NormalizedRandomGenerator)	Builds a null mean random correlated vector generator from its covariance matrix
ConvexHullGenerator2D.generate(Collection)	Builds the convex hull from the set of input points
BoundaryAttribute.getPlusOutside()	Get the part of the node cut sub hyperplane that belongs to the boundary and has the outside of the region on the plus side of its underlying hyperplane
ParetoDistribution.cumulativeProbability(double,double)	For a random variable X whose values are distributed according to this distribution this method returns P x0 X x1
MultistepIntegrator.getMaxGrowth()	Get the maximal growth factor for stepsize control
Complex.reciprocal()	Returns the multiplicative inverse of this element
EulerIntegrator.EulerIntegrator(double)	Simple constructor
Decimal64.remainder(double)	IEEE remainder operator
SimpleRegression.predict(double)	Returns the predicted y value associated with the supplied x value based on the data that has been added to the model when this method is activated
Asinh.value(DerivativeStructure)	Simple mathematical function
StandardDeviation.evaluate(double[],double,int,int)	Returns the Standard Deviation of the entries in the specified portion of the input array using the precomputed mean value Returns Double NaN if the designated subarray is empty
MultiKMeansPlusPlusClusterer.MultiKMeansPlusPlusClusterer(KMeansPlusPlusClusterer,int)	Build a clusterer
OpenMapRealVector.getEntry(int)	Return the entry at the specified index
EvaluationRmsChecker.converged(int,Evaluation,Evaluation)	Check if the optimization algorithm has converged
StorelessUnivariateStatistic.incrementAll(double[])	Updates the internal state of the statistic to reflect addition of all values in the values array Does not clear the statistic first i e the values are added incrementally to the dataset
MatrixUtils.checkColumnIndex(AnyMatrix,int)	Check if a column index is valid
RealVector.toArray()	Convert the vector to an array of doubles
Frequency.addValue(long)	Adds 1 to the frequency count for v
Sum.evaluate(double[],double[])	The weighted sum of the entries in the the input array
Gamma.invGamma1pm1(double)	Returns the value of 1 1 x 1 for 0 5 x 1 5 This implementation is based on the double precision implementation in the NSWC Library of Mathematics Subroutines DGAM1
Circle.getReverse()	Get the reverse of the instance
EnclosingBall.contains(P,double)	Check if a point is within an enlarged ball or at boundary
DSCompiler.pow(double[],int,int,double[],int)	Compute integer power of a derivative structure
BigFraction.subtract(int)	Subtracts the value of an integer from the value of this BigFraction returning the result in reduced form
BitsStreamGenerator.nextBytes(byte[])	Generates random bytes and places them into a user supplied byte array The number of random bytes produced is equal to the length of the byte array
BetaDistribution.BetaDistribution(RandomGenerator,double,double)	Creates a distribution
AbstractSimplex.getSize()	Get simplex size
Array2DRowRealMatrix.Array2DRowRealMatrix()	Creates a matrix with no data
Dfp.add(double)	operator
PSquarePercentile.toString()	Returns a string containing the last observation the current estimate of the quantile and all markers
Line.toSpace(Vector)	Transform a sub space point into a space point
FuzzyKMeansClusterer.getK()	Return the number of clusters this instance will use
Vector3D.getX()	Get the abscissa of the vector
FastMath.round(double)	Get the closest long to x
IterativeLinearSolverEvent.getRightHandSideVector()	Returns the current right hand side of the linear system to be solved
FastMath.acosh(double)	Compute the inverse hyperbolic cosine of a number
Mean.copy(Mean,Mean)	Copies source to dest
BracketingNthOrderBrentSolverDFP.getAbsoluteAccuracy()	Get the absolute accuracy
AbstractLeastSquaresOptimizer.getChiSquare()	Get a Chi Square like value assuming the N residuals follow N distinct normal distributions centered on 0 and whose variances are the reciprocal of the weights
AbstractRealMatrix.power(int)	Returns the result of multiplying this with itself p times Depending on the underlying storage instability for high powers might occur
ArrayFieldVector.mapAddToSelf(FieldElement)	Map an addition operation to each entry
FieldVector.append(FieldElement)	Construct a vector by appending a T to this vector
EventFilter.eventOccurred(double,double[],boolean)	Handle an event and choose what to do next
DefaultProcessModel.getInitialErrorCovariance()	Returns the initial error covariance matrix
CurveFitter.clearObservations()	Remove all observations
RealMatrixPreservingVisitor.visit(int,int,double)	Visit one matrix entry
AbstractLeastSquaresOptimizer.computeSigma(double[],double)	Computes an estimate of the standard deviation of the parameters The returned values are the square root of the diagonal coefficients of the covariance matrix sd a i sqrt C i i where a i is the optimized value of the i th parameter and C is the covariance matrix
RealMatrix.operate(double[])	Returns the result of multiplying this by the vector v
ProcessModel.getStateTransitionMatrix()	Returns the state transition matrix
SimplexOptimizer.SimplexOptimizer(double,double)	
MultivariateFunctionMappingAdapter.MultivariateFunctionMappingAdapter(MultivariateFunction,double[],double[])	Simple constructor
Euclidean2D.getDimension()	Get the dimension of the space
StatUtils.sumDifference(double[],double[])	Returns the sum of the signed differences between corresponding elements of the input arrays i e sum sample1 i sample2 i
AbstractStepInterpolator.writeExternal(ObjectOutput)	
Rint.Rint()	
PoissonDistribution.getMean()	Get the mean for the distribution
ExceptionContext.getMessage(Locale,String)	Gets the message in a specified locale
StatisticalSummaryValues.StatisticalSummaryValues(double,double,long,double,double,double)	Constructor
FieldMatrix.subtract(FieldMatrix)	Subtract m from this matrix
PascalDistribution.getNumberOfSuccesses()	Access the number of successes for this distribution
FunctionUtils.add()	Adds functions
StatisticalSummaryValues.equals(Object)	Returns true iff object is a StatisticalSummaryValues instance and all statistics have the same values as this
RandomKeyMutation.mutate(Chromosome)	Mutate the given chromosome
BoundaryAttribute.BoundaryAttribute(SubHyperplane,SubHyperplane)	Simple constructor
BinomialDistribution.probability(int)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the probability mass function PMF for the distribution
DerivativeStructure.hypot(DerivativeStructure,DerivativeStructure)	Returns the hypotenuse of a triangle with sides x and y sqrt x2 y2 avoiding intermediate overflow or underflow
ResizableDoubleArray.ResizableDoubleArray(double[])	Creates an instance from an existing double with the initial capacity and numElements corresponding to the size of the supplied double array
LevenbergMarquardtOptimizer.optimize(LeastSquaresProblem)	Solve the non linear least squares problem
LoessInterpolator.LoessInterpolator()	Constructs a new LoessInterpolator with a bandwidth of DEFAULT BANDWIDTH DEFAULT ROBUSTNESS ITERS robustness iterations and an accuracy of link DEFAULT ACCURACY
LimitAngle.getReverse()	Get the reverse of the instance
RealVectorPreservingVisitor.visit(int,double)	Visit one entry of the vector
AbstractSimplex.evaluate(MultivariateFunction,Comparator)	Evaluate all the non evaluated points of the simplex
MultivariateSummaryStatistics.getSumLogImpl()	Returns the currently configured sum of logs implementation
Line.intersection(Line)	Get the intersection point of the instance and another line
SymmLQ.solve(RealLinearOperator,RealVector,boolean,double)	Returns the solution to the system A shift I x b
Vector.isInfinite()	Returns true if any coordinate of this vector is infinite and none are NaN false otherwise
FastCosineTransformer.transform(UnivariateFunction,double,double,int,TransformType)	Returns the forward inverse transform of the specified real function sampled on the specified interval
RandomDataGenerator.reSeed()	Reseeds the random number generator with System currentTimeMillis System identityHashCode this
BigReal.getScale()	Sets the scale for division operations
ClusterEvaluator.ClusterEvaluator()	Creates a new cluster evaluator with an EuclideanDistance as distance measure
GTest.gTest(double[],long[])	Returns the observed significance level or p value associated with a G Test for goodness of fit comparing the observed frequency counts to those in the expected array
ChromosomePair.ChromosomePair(Chromosome,Chromosome)	Create a chromosome pair
ResizableDoubleArray.setContractionCriteria(float)	Sets the contraction criteria
Dfp.acos()	Arc cosine operation
RealVector.addToEntry(int,double)	Change an entry at the specified index
AbstractRealDistribution.inverseCumulativeProbability(double)	Computes the quantile function of this distribution For a random variable X distributed according to this distribution the returned value is inf x in R P X x p for 0 p 1 inf x in R P X x 0 for p 0
MultidimensionalCounter.Iterator.getCounts()	Get the current multidimensional counter slots
AbstractRealMatrix.setRowMatrix(int,RealMatrix)	Sets the specified row of this matrix to the entries of the specified row matrix Row indices start at 0
SparseFieldMatrix.createMatrix(int,int)	Create a new FieldMatrix of the same type as the instance with the supplied row and column dimensions
Line.getDirection()	Get the normalized direction vector
FieldRotation.FieldRotation(FieldVector3D,RealFieldElement)	Build a rotation from an axis and an angle
MatrixUtils.solveUpperTriangularSystem(RealMatrix,RealVector)	Solver a system composed of an Upper Triangular Matrix RealMatrix
FastHadamardTransformer.transform(int[])	Returns the forward transform of the specified integer data set The integer transform cannot be inverted directly due to a scaling factor which may lead to double results
Decimal64.linearCombination(double,Decimal64,double,Decimal64,double,Decimal64,double,Decimal64)	Compute a linear combination
Decimal64.acosh()	Inverse hyperbolic cosine operation
AbstractMultipleLinearRegression.estimateErrorVariance()	Estimates the variance of the error
BaseAbstractUnivariateSolver.solve(int,FUNC,double)	Solve for a zero in the vicinity of startValue
IntegerDistribution.cumulativeProbability(int)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
NumberIsTooSmallException.NumberIsTooSmallException(Localizable,Number,Number,boolean)	Construct the exception with a specific context
StepInterpolator.isForward()	Check if the natural integration direction is forward
Variance.Variance(SecondMoment)	Constructs a Variance based on an external second moment
TTest.homoscedasticTTest(StatisticalSummary,StatisticalSummary)	Returns the observed significance level or p value associated with a two sample two tailed t test comparing the means of the datasets described by two StatisticalSummary instances under the hypothesis of equal subpopulation variances To perform a test without the equal variances assumption use tTest StatisticalSummary StatisticalSummary
FieldVectorChangingVisitor.start(int,int,int)	Start visiting a vector This method is called once before any entry of the vector is visited
StatisticalMultivariateSummary.getSumSq()	Returns an array whose ith entry is the sum of squares of the ith entries of the arrays that correspond to each multivariate sample
StatUtils.variance(double[],int,int)	Returns the variance of the entries in the specified portion of the input array or Double NaN if the designated subarray is empty
Dfp.linearCombination(double,Dfp,double,Dfp,double,Dfp)	Compute a linear combination
ResizableDoubleArray.setNumElements(int)	This function allows you to control the number of elements contained in this array and can be used to throw out the last n values in an array This function will also expand the internal array as needed
IntegerDistribution.probability(int)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the probability mass function PMF for the distribution
GraggBulirschStoerIntegrator.setOrderControl(int,double,double)	Set the order control parameters
ExpandableStatefulODE.getTime()	Get current time
WeibullDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
Vector1D.negate()	Get the opposite of the instance
GeometricDistribution.logProbability(int)	For a random variable X whose values are distributed according to this distribution this method returns log P X x where log is the natural logarithm In other words this method represents the logarithm of the probability mass function PMF for the distribution Note that due to the floating point precision and under overflow issues this method will for some distributions be more precise and faster than computing the logarithm of IntegerDistribution probability int
AggregateSummaryStatistics.aggregate(Collection)	Computes aggregate summary statistics This method can be used to combine statistics computed over partitions or subsamples i e the StatisticalSummaryValues returned should contain the same values that would have been obtained by computing a single StatisticalSummary over the combined dataset
RealVectorFormat.getAvailableLocales()	Get the set of locales for which real vectors formats are available
ArrayRealVector.walkInDefaultOrder(RealVectorPreservingVisitor,int,int)	Visits but does not alter some entries of this vector in default order increasing index
AbstractFieldMatrix.subtract(FieldMatrix)	Subtract m from this matrix
Dfp.exp()	Exponential
TestUtils.chiSquare(double[],long[])	
MatrixUtils.createRealMatrix(double[][])	Returns a RealMatrix whose entries are the the values in the the input array
FieldMatrix.power(int)	Returns the result multiplying this with itself p times
LaguerreSolver.LaguerreSolver(double,double)	Construct a solver
BoundaryProjection.getOriginal()	Get the original point
Dfp.pow(double)	Power operation
PointValuePair.PointValuePair(double[],double,boolean)	Builds a point objective function value pair
FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)	Convert a MultivariateDifferentiableVectorFunction into a DifferentiableMultivariateVectorFunction
CompositeFormat.parseAndIgnoreWhitespace(String,ParsePosition)	Parses source until a non whitespace character is found
AbstractWell.setSeed(int[])	Reinitialize the generator as if just built with the given int array seed
AbstractFormat.format(double,StringBuffer,FieldPosition)	Formats a double value as a fraction and appends the result to a StringBuffer
SparseGradient.getDerivative(int)	Get the derivative with respect to a particular index variable
ValueServer.computeDistribution(int)	Computes the empirical distribution using values from the file in valuesFileURL and binCount bins
ConstantRealDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
FieldMatrix.walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)	Visit and possibly change some matrix entries in row order
MatrixUtils.createRealMatrix(int,int)	Returns a RealMatrix with specified dimensions
StableRandomGenerator.StableRandomGenerator(RandomGenerator,double,double)	Create a new generator
SingularValueDecomposition.getSingularValues()	Returns the diagonal elements of the matrix of the decomposition
ZipfDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
RandomData.nextSample(Collection,int)	Returns an array of k objects selected randomly from the Collection c
Product.getResult()	Returns the current value of the Statistic
Fraction.intValue()	Gets the fraction as an int This returns the whole number part of the fraction
SubHyperplane.split(Hyperplane)	Split the instance in two parts by an hyperplane
ArrayRealVector.ArrayRealVector(double[],boolean)	Create a new ArrayRealVector using the input array as the underlying data array
LoessInterpolator.LoessInterpolator(double,int,double)	Construct a new LoessInterpolator with given bandwidth number of robustness iterations and accuracy
ObjectiveFunctionGradient.ObjectiveFunctionGradient(MultivariateVectorFunction)	
DSCompiler.asinh(double[],int,double[],int)	Compute inverse hyperbolic sine of a derivative structure
Sphere1D.getDimension()	Get the dimension of the space
ArrayRealVector.getSubVector(int,int)	Get a subvector from consecutive elements
MillerUpdatingRegression.getPartialCorrelations(int)	In the original algorithm only the partial correlations of the regressors is returned to the user In this implementation we have corr corrxx lower triangular corrxy bottom row of the matrix Replaces subroutines PCORR and COR of ALGORITHM AS274 APPL STATIST 1992 VOL 41 NO 2 Calculate partial correlations after the variables in rows 1 2 IN have been forced into the regression
Pow.Pow()	
GaussNewtonOptimizer.doOptimize()	Performs the bulk of the optimization algorithm
Log10.derivative()	Returns the derivative of the function
IterationListener.iterationPerformed(IterationEvent)	Invoked each time an iteration is completed in the main iteration loop
JacobianMatrices.setParameterStep(String,double)	Set the step associated to a parameter in order to compute by finite difference the Jacobian matrix
MathArrays.copyOf(int[],int)	Creates a copy of the source array
AbstractRealDistribution.logDensity(double)	Returns the natural logarithm of the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF If the derivative does not exist at x then an appropriate replacement should be returned e g Double POSITIVE INFINITY Double NaN or the limit inferior or limit superior of the difference quotient Note that due to the floating point precision and under overflow issues this method will for some distributions be more precise and faster than computing the logarithm of RealDistribution density double The default implementation simply computes the logarithm of density x
Decimal64.multiply(int)	Compute n this Multiplication by an integer number is defined as the following sum n this i 1n this
UniformIntegerDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
ArrayRealVector.append(RealVector)	Construct a new vector by appending a vector to this vector
BigFractionField.getOne()	Get the multiplicative identity of the field
Decimal64.round()	Get the closest long to instance value
SparseFieldVector.mapInvToSelf()	Map the 1 x function to each entry
ConstantRealDistribution.inverseCumulativeProbability(double)	Description copied from class AbstractRealDistribution
HarmonicCurveFitter.withMaxIterations(int)	Configure the maximum number of iterations
CurveFitter.addObservedPoint(double,double)	Add an observed x y point to the sample with unit weight
AVLTree.getNotLarger(Comparable)	Get the node whose element is not larger than the reference object
Circle.wholeHyperplane()	Build a sub hyperplane covering the whole hyperplane
BaseAbstractUnivariateIntegrator.getMinimalIterationCount()	Get the min limit for the number of iterations
EquationsMapper.EquationsMapper(int,int)	simple constructor
ExponentialDistribution.density(double)	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF
DiagonalMatrix.getEntry(int,int)	Get the entry in the specified row and column Row and column indices start at 0
EmbeddedRungeKuttaIntegrator.setMinReduction(double)	Set the minimal reduction factor for stepsize control
DerivativeStructure.log1p()	Shifted natural logarithm
SynchronizedSummaryStatistics.SynchronizedSummaryStatistics()	Construct a SynchronizedSummaryStatistics instance
FieldVector3D.getDelta()	Get the elevation of the vector
BinomialConfidenceInterval.createInterval(int,int,double)	Create a confidence interval for the true probability of success of an unknown binomial distribution with the given observed number of trials successes and confidence level
Erf.erfInv(double)	Returns the inverse erf
PolynomialSplineFunction.getN()	Get the number of spline segments
CorrelatedRandomVectorGenerator.getRank()	Get the rank of the covariance matrix
GumbelDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
BlockFieldMatrix.copy()	Make a deep copy of this
Network.NeuronIdentifierComparator.compare(Neuron,Neuron)	
BlockRealMatrix.walkInOptimizedOrder(RealMatrixPreservingVisitor)	Visit but don t change all matrix entries using the fastest possible order
StatisticalMultivariateSummary.getSum()	Returns an array whose ith entry is the sum of the ith entries of the arrays that correspond to each multivariate sample
RealDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
AbstractStepInterpolator.getInterpolatedSecondaryDerivatives(int)	Get the interpolated secondary derivatives corresponding to the secondary equations
SynchronizedRandomGenerator.setSeed(long)	Sets the seed of the underlying random number generator using a long seed
BigFractionFormat.format(Object,StringBuffer,FieldPosition)	Formats an object and appends the result to a StringBuffer
NodesSet.iterator()	
Min.value(double,double)	Compute the value for the function
TransformUtils.exactLog2(int)	Returns the base 2 logarithm of the specified int Throws an exception if n is not a power of two
ChiSquareTest.chiSquareTestDataSetsComparison(long[],long[],double)	Performs a Chi Square two sample test comparing two binned data sets The test evaluates the null hypothesis that the two lists of observed counts conform to the same frequency distribution with significance level alpha Returns true iff the null hypothesis can be rejected with 100 1 alpha percent confidence
Segment.getLine()	Get the line containing the segment
SynchronizedDescriptiveStatistics.getN()	Returns the number of available values
FDistribution.getDenominatorDegreesOfFreedom()	Access the denominator degrees of freedom
Line.contains(Vector2D)	Check if the line contains a point
NelderMeadSimplex.NelderMeadSimplex(double[],double,double,double,double)	Build a Nelder Mead simplex with specified coefficients
FieldElement.reciprocal()	Returns the multiplicative inverse of this element
PSquarePercentile.newMarkers(List,double)	A creation method to build Markers
NakagamiDistribution.NakagamiDistribution(double,double)	Build a new instance
IterationManager.getMaxIterations()	Returns the maximum number of iterations
ElitisticListPopulation.setElitismRate(double)	Sets the elitism rate i e how many best chromosomes will be directly transferred to the next generation in
BaseMultivariateVectorOptimizer.optimize(int,FUNC,double[],double[],double[])	Optimize an objective function
MathArrays.distance(int[],int[])	Calculates the L2 Euclidean distance between two points
BigFraction.negate()	Return the additive inverse of this fraction returning the result in reduced form
StatisticalSummary.getVariance()	Returns the variance of the available values
AbstractFieldMatrix.preMultiply(FieldElement[])	Returns the row vector result of premultiplying this by the vector v
AbstractListChromosome.newFixedLengthChromosome(List)	Creates a new instance of the same class as this is with a given arrayRepresentation
RandomAdaptor.setSeed(int)	Sets the seed of the underlying random number generator using an int seed
SynchronizedMultivariateSummaryStatistics.addValue(double[])	Add an n tuple to the data
MillerUpdatingRegression.addObservation(double[],double)	Adds an observation to the regression model
Incrementor.setMaximalCount(int)	Sets the upper limit for the counter
KolmogorovSmirnovTest.cdf(double,int,boolean)	Calculates P D n d using method described in 1 with quick decisions for extreme values given in 2 see above
Kurtosis.copy(Kurtosis,Kurtosis)	Copies source to dest
AbstractSimplex.getDimension()	Get simplex dimension
CholeskyDecomposition.getSolver()	Get a solver for finding the A X B solution in least square sense
RealVectorPreservingVisitor.end()	End visiting a vector This method is called once after all entries of the vector have been visited
Complex.divide(Complex)	Returns a Complex whose value is this divisor
SubLine.side(Hyperplane)	Compute the relative position of the instance with respect to an hyperplane
BinaryChromosome.randomBinaryRepresentation(int)	Returns a representation of a random binary array of length length
BigFractionFormat.formatBigFraction(BigFraction)	This static method calls formatBigFraction on a default instance of BigFractionFormat
FixedStepHandler.init(double,double[],double)	Initialize step handler at the start of an ODE integration
RandomDataGenerator.nextPascal(int,double)	Generates a random value from the Pascal Distribution
MultivariateRealDistribution.sample(int)	Generates a list of a random value vectors from the distribution
ConstantRealDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
AdaptiveStepsizeIntegrator.getMinStep()	Get the minimal step
Vector2D.getSpace()	Get the space to which the point belongs
NonSymmetricMatrixException.getThreshold()	the relative symmetry threshold
BracketFinder.getFMid()	Get function value at getMid
KolmogorovSmirnovTest.kolmogorovSmirnovTest(RealDistribution,double[],double)	Performs a Kolmogorov Smirnov test evaluating the null hypothesis that data conforms to distribution
Decimal64.linearCombination(Decimal64,Decimal64,Decimal64,Decimal64,Decimal64,Decimal64)	Compute a linear combination
DBSCANClusterer.getMinPts()	Returns the minimum number of points needed for a cluster
Logistic.Logistic(double,double,double,double,double,double)	
Interval.getLength()	Get the length of the interval
FieldLUDecomposition.getSolver()	Get a solver for finding the A X B solution in exact linear sense
StandardDeviation.clear()	Clears the internal state of the Statistic
TDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
Array2DRowFieldMatrix.walkInColumnOrder(FieldMatrixChangingVisitor)	Visit and possibly change all matrix entries in column order
ClopperPearsonInterval.createInterval(int,int,double)	Create a confidence interval for the true probability of success of an unknown binomial distribution with the given observed number of trials successes and confidence level
DfpMath.cos(Dfp)	computes the cosine of the argument
FieldVector.subtract(FieldVector)	Compute this minus v
PearsonsCorrelation.PearsonsCorrelation(RealMatrix)	Create a PearsonsCorrelation from a RealMatrix whose columns represent variables to be correlated
GaussianRandomGenerator.nextNormalizedDouble()	Generate a random scalar with null mean and unit standard deviation
SymmLQ.solve(RealLinearOperator,RealVector,RealVector)	Returns an estimate of the solution to the linear system A x b
Localizable.getLocalizedString(Locale)	Gets the localized string
Logistic.value(double)	Compute the value of the function
LevyDistribution.logDensity(double)	Returns the natural logarithm of the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF If the derivative does not exist at x then an appropriate replacement should be returned e g Double POSITIVE INFINITY Double NaN or the limit inferior or limit superior of the difference quotient Note that due to the floating point precision and under overflow issues this method will for some distributions be more precise and faster than computing the logarithm of RealDistribution density double The default implementation simply computes the logarithm of density x
NormalDistribution.inverseCumulativeProbability(double)	Computes the quantile function of this distribution For a random variable X distributed according to this distribution the returned value is inf x in R P X x p for 0 p 1 inf x in R P X x 0 for p 0
ConstantRealDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
FieldMatrixChangingVisitor.end()	End visiting a matrix
SubHyperplane.getHyperplane()	Get the underlying hyperplane
Sinc.Sinc()	The sinc function sin x x
UniformIntegerDistribution.probability(int)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the probability mass function PMF for the distribution
Variance.Variance(Variance)	Copy constructor creates a new Variance identical to the original
UniformCrossover.crossover(Chromosome,Chromosome)	Perform a crossover operation on the given chromosomes
FastHadamardTransformer.transform(double[],TransformType)	Returns the forward inverse transform of the specified real data set
StatisticalSummaryValues.toString()	Generates a text report displaying values of statistics
AbstractFieldMatrix.getTrace()	Returns the trace of the matrix the sum of the elements on the main diagonal
BSPTree.LeafMerger.merge(BSPTree,BSPTree,BSPTree,boolean,boolean)	Merge a leaf node and a tree node
Precision.equalsIncludingNaN(float,float,int)	Returns true if both arguments are NaN or if they are equal as defined by equals x y maxUlps
ExponentialDistribution.getMean()	Access the mean
SphericalCoordinates.SphericalCoordinates(Vector3D)	Build a spherical coordinates transformer from Cartesian coordinates
SecondaryEquations.computeDerivatives(double,double[],double[],double[],double[])	Compute the derivatives related to the secondary state parameters
ConfidenceInterval.getConfidenceLevel()	the asserted probability that the interval contains the population parameter
IntervalsSet.IntervalsSet(BSPTree,double)	Build an intervals set from an inside outside BSP tree
PolynomialFunctionLagrangeForm.evaluate(double[],double[],double)	Evaluate the Lagrange polynomial using Neville s Algorithm It takes O n 2 time
SimpleRegression.clear()	Clears all data from the model
SubOrientedPoint.isEmpty()	Check if the instance is empty
EnumeratedRealDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
RandomDataGenerator.nextF(double,double)	Generates a random value from the F Distribution
KolmogorovSmirnovTest.KolmogorovSmirnovTest()	Construct a KolmogorovSmirnovTest instance with a default random data generator
BaseAbstractUnivariateIntegrator.getEvaluations()	Get the number of function evaluations of the last run of the integrator
AVLTree.delete(Comparable)	Delete an element from the tree
AbstractUnivariateStatistic.AbstractUnivariateStatistic()	
ArithmeticUtils.pow(BigInteger,BigInteger)	Raise a BigInteger to a BigInteger power
SubOrientedPoint.split(Hyperplane)	Split the instance in two parts by an hyperplane
BicubicSplineInterpolator.BicubicSplineInterpolator(boolean)	Creates an interpolator
MultiDimensionMismatchException.getExpectedDimensions()	an array containing the expected dimensions
Quaternion.Quaternion(double,double,double,double)	Builds a quaternion from its components
ArrayRealVector.mapAddToSelf(double)	Add a value to each entry
MultivariateRealDistribution.sample()	Generates a random value vector sampled from this distribution
AbstractRealMatrix.copySubMatrix(int,int,int,int,double[][])	Copy a submatrix Rows and columns are indicated counting from 0 to n 1
BigFraction.BigFraction(BigInteger,BigInteger)	Create a BigFraction given the numerator and denominator as BigInteger The BigFraction is reduced to lowest terms
UnivariateStatistic.copy()	Returns a copy of the statistic with the same internal state
BaseSecantSolver.solve(int,UnivariateFunction,double,double,AllowedSolution)	Solve for a zero in the given interval
BinomialDistribution.getProbabilityOfSuccess()	Access the probability of success for this distribution
EnumeratedRealDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
DefaultIterativeLinearSolverEvent.getResidual()	Returns the residual This is an optional operation as all iterative linear solvers do not provide cheap estimate of the updated residual vector in which case this method should throw a MathUnsupportedOperationException IterativeLinearSolverEvent providesResidual returns false
ValueServer.closeReplayFile()	Closes valuesFileURL after use in REPLAY MODE
Fraction.divide(int)	Divide the fraction by an integer
FieldVector.getDimension()	Returns the size of the vector
FieldVectorPreservingVisitor.visit(int,FieldElement)	Visit one entry of the vector
LeastSquaresFactory.countEvaluations(LeastSquaresProblem,Incrementor)	Count the evaluations of a particular problem The counter will be incremented every time LeastSquaresProblem evaluate RealVector is called on the returned problem
Exp.value(double)	Compute the value of the function
MultiStartMultivariateOptimizer.getOptima()	Gets all the optima found during the last call to optimize
BlockFieldMatrix.transpose()	Returns the transpose of this matrix
FieldVector3D.equals(Object)	Test for the equality of two 3D vectors
Rotation.Rotation(Vector3D,Vector3D)	Build one of the rotations that transform one vector into another one
Neuron.compareAndSetFeatures(double[],double[])	Tries to atomically update the neuron s features
MathIllegalStateException.getContext()	Gets a reference to the rich context data structure that allows to customize error messages and store key value pairs in exceptions
ArrayFieldVector.add(FieldVector)	Compute the sum of this and v
OpenMapRealVector.getL1Distance(OpenMapRealVector)	Distance between two vectors
MixtureMultivariateRealDistribution.density(double[])	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the cumulative distribution function If the derivative does not exist at x then an appropriate replacement should be returned e g Double POSITIVE INFINITY Double NaN or the limit inferior or limit superior of the difference quotient
RealFieldElement.sqrt()	Square root
BigFraction.pow(int)	Returns a BigFraction whose value is this sup exponent sup returning the result in reduced form
SparseFieldVector.SparseFieldVector(Field,FieldElement[])	Create from a Field array
BlockFieldMatrix.setRowVector(int,FieldVector)	Set the entries in row number row as a vector
DSCompiler.subtract(double[],int,double[],int,double[],int)	Perform subtraction of two derivative structures
MultivariateVectorOptimizer.getTarget()	Gets the observed values to be matched by the objective vector function
GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double[],double[])	Simple constructor
ValueServer.getValuesFileURL()	Returns the URL for the file used to build the empirical distribution when using DIGEST MODE
Array2DRowFieldMatrix.Array2DRowFieldMatrix(FieldElement[][],boolean)	Create a new FieldMatrix T using the input array as the underlying data array
RealMatrix.getSubMatrix(int[],int[])	Gets a submatrix Rows and columns are indicated counting from 0 to n 1
WeightedObservedPoints.WeightedObservedPoints()	
ClopperPearsonInterval.ClopperPearsonInterval()	
FieldMatrix.walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)	Visit but don t change some matrix entries in row order
RombergIntegrator.RombergIntegrator(int,int)	Build a Romberg integrator with given iteration counts
RandomDataImpl.nextGaussian(double,double)	Generates a random value from the Normal or Gaussian distribution with specified mean and standard deviation
EuclideanDoublePoint.centroidOf(Collection)	Returns the centroid of the given Collection of points
DSCompiler.log(double[],int,double[],int)	Compute natural logarithm of a derivative structure
RandomDataGenerator.nextHypergeometric(int,int,int)	Generates a random value from the Hypergeometric Distribution
Dfp.cos()	Cosine operation
MathInternalError.MathInternalError()	Simple constructor
SimplexSolver.SimplexSolver()	Builds a simplex solver with default settings
IntervalsSet.getSup()	Get the highest value belonging to the instance
AbstractIntegerDistribution.inverseCumulativeProbability(double)	Computes the quantile function of this distribution
TriangularDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
AbstractIntegerDistribution.sample()	Generate a random value sampled from this distribution
RealVector.mapAddToSelf(double)	Add a value to each entry
MathIllegalStateException.getLocalizedMessage()	
Cosh.Cosh()	
Decimal64.copySign(Decimal64)	Returns the instance with the sign of the argument
ZeroException.ZeroException()	Construct the exception
FieldVector.mapDivideToSelf(FieldElement)	Map a division operation to each entry
WelzlEncloser.WelzlEncloser(double,SupportBallGenerator)	Simple constructor
NeuronSquareMesh2D.getNumberOfRows()	Gets the number of neurons in each row of this map
Erf.erf(double)	Returns the error function
DefaultTransformer.equals(Object)	
ArrayRealVector.ArrayRealVector(ArrayRealVector,RealVector)	Construct a vector by appending one vector to another vector
Fraction.multiply(Fraction)	Multiplies the value of this fraction by another returning the result in reduced form
Logit.value(double)	Compute the value of the function
RegressionResults.hasIntercept()	Returns true if the regression model has been computed including an intercept
RealVector.getLInfDistance(RealVector)	Distance between two vectors
Vector3D.normalize()	Get a normalized vector aligned with the instance
ExponentialDistribution.logDensity(double)	Returns the natural logarithm of the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF If the derivative does not exist at x then an appropriate replacement should be returned e g Double POSITIVE INFINITY Double NaN or the limit inferior or limit superior of the difference quotient Note that due to the floating point precision and under overflow issues this method will for some distributions be more precise and faster than computing the logarithm of RealDistribution density double The default implementation simply computes the logarithm of density x
PolynomialFunction.getCoefficients()	Returns a copy of the coefficients array
Decimal64.signum()	Compute the signum of the instance
AdaptiveStepsizeIntegrator.initializeStep(boolean,int,double[],double,double[],double[],double[],double[])	Initialize the integration step
Fraction.Fraction(double)	Create a fraction given the double value
Precision.round(double,int)	Rounds the given value to the specified number of decimal places
Fraction.Fraction(int,int)	Create a fraction given the numerator and denominator The fraction is reduced to lowest terms
SubCircle.split(Hyperplane)	Split the instance in two parts by an hyperplane
FDistribution.FDistribution(double,double)	Creates an F distribution using the given degrees of freedom
DfpDec.newInstance()	Create an instance with a value of 0
ArrayFieldVector.walkInOptimizedOrder(FieldVectorPreservingVisitor)	Visits but does not alter all entries of this vector in optimized order The order in which the entries are visited is selected so as to lead to the most efficient implementation it might depend on the concrete implementation of this abstract class
AbstractFieldMatrix.walkInRowOrder(FieldMatrixPreservingVisitor)	Visit but don t change all matrix entries in row order
ODEIntegrator.clearStepHandlers()	Remove all the step handlers that have been added to the integrator
SparseFieldVector.outerProduct(SparseFieldVector)	Optimized method to compute outer product when both vectors are sparse
Edge.getCircle()	Get the circle supporting this edge
LinearObjectiveFunction.getValue(RealVector)	Compute the value of the linear equation at the current point
Mean.evaluate(double[],double[])	Returns the weighted arithmetic mean of the entries in the input array
LaplaceDistribution.LaplaceDistribution(double,double)	Build a new instance
Max.Max()	Create a Max instance
ConstantRealDistribution.reseedRandomGenerator(long)	Override with no op there is no generator
BicubicSplineInterpolator.BicubicSplineInterpolator()	Default constructor
AVLTree.isEmpty()	Check if the tree is empty
MathIllegalArgumentException.MathIllegalArgumentException(Localizable,)	
HarmonicOscillator.Parametric.value(double,)	Computes the value of the harmonic oscillator at x
Vector1D.distanceInf(Vector)	Compute the distance between the instance and another vector according to the L norm
MixtureMultivariateRealDistribution.MixtureMultivariateRealDistribution(List)	Creates a mixture model from a list of distributions and their associated weights
MathUtils.checkNotNull(Object,Localizable,)	Checks that an object is not null
Percentile.evaluate(double[],int,int,double)	Returns an estimate of the pth percentile of the values in the values array starting with the element in 0 based position begin in the array and including length values
BaseAbstractUnivariateSolver.getAbsoluteAccuracy()	Get the absolute accuracy of the solver Solutions returned by the solver should be accurate to this tolerance i e if is the absolute accuracy of the solver and v is a value returned by one of the solve methods then a root of the function should exist somewhere in the interval v v
Region.getBoundarySize()	Get the size of the boundary
Dfp.newInstance(String)	Create an instance from a String representation
SubOrientedPoint.side(Hyperplane)	Compute the relative position of the instance with respect to an hyperplane
TTest.tTest(double,double[])	Returns the observed significance level or p value associated with a one sample two tailed t test comparing the mean of the input array with the constant mu
NoBracketingException.NoBracketingException(double,double,double,double)	Construct the exception
BrentSolver.BrentSolver(double,double,double)	Construct a solver
FastSineTransformer.transform(UnivariateFunction,double,double,int,TransformType)	Returns the forward inverse transform of the specified real function sampled on the specified interval
BracketFinder.getFLo()	Get function value at getLo
ZipfDistribution.probability(int)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the probability mass function PMF for the distribution
Logit.Logit(double,double)	Logit function
ArrayRealVector.mapToSelf(UnivariateFunction)	Acts as if it is implemented as Entry e null for Iterator it iterator it hasNext e it next e setValue function value e getValue Entries of this vector are modified in place by this method
DerivativeStructure.multiply(DerivativeStructure)	Compute this a
Vector1D.subtract(Vector)	Subtract a vector from the instance
ListPopulation.iterator()	Returns an iterator over the unmodifiable list of chromosomes
SparseGradient.sin()	Sine operation
ArithmeticUtils.mulAndCheck(int,int)	Multiply two integers checking for overflow
BigFraction.BigFraction(long)	Create a BigFraction equivalent to the passed long ie num 1
BigFraction.doubleValue()	Gets the fraction as a double This calculates the fraction as the numerator divided by denominator
BigRealField.getZero()	Get the additive identity of the field
SplineInterpolator.interpolate(double[],double[])	Computes an interpolating function for the data set
MathArrays.linearCombination(double[],double[])	Compute a linear combination accurately
FractionFormat.getProperInstance()	Returns the default complex format for the current locale
RealFieldElement.round()	Get the closest long to instance value
AbstractStepInterpolator.getInterpolatedState()	Get the state vector of the interpolated point
Logit.Logit()	Usual logit function where the lower bound is 0 and the higher bound is 1
RiddersSolver.RiddersSolver(double,double)	Construct a solver
AbstractRealMatrix.setRow(int,double[])	Sets the specified row of this matrix to the entries of the specified array Row indices start at 0
DerivativeStructure.copySign(double)	Returns the instance with the sign of the argument
HarmonicFitter.fit()	Fit an harmonic function to the observed points
SpearmansCorrelation.computeCorrelationMatrix(double[][])	Computes the Spearman s rank correlation matrix for the columns of the input rectangular array The columns of the array represent values of variables to be correlated
SumOfSquares.increment(double)	Updates the internal state of the statistic to reflect the addition of the new value
RealMatrix.preMultiply(RealVector)	Returns the row vector result of premultiplying this by the vector v
Vector1D.getNorm()	Get the L2 norm for the vector
MultiDimensionMismatchException.getWrongDimensions()	an array containing the wrong dimensions
SummaryStatistics.getSum()	Returns the sum of the values that have been added
AbstractRandomGenerator.nextBytes(byte[])	Generates random bytes and places them into a user supplied byte array The number of random bytes produced is equal to the length of the byte array
TournamentSelection.TournamentSelection(int)	Creates a new TournamentSelection instance
Sigmoid.Parametric.value(double,)	Computes the value of the sigmoid at x
S2Point.equals(Object)	Test for the equality of two points on the 2 sphere
AbstractEvaluation.getRMS()	Get the normalized cost It is the square root of the sum of squared of the residuals divided by the number of measurements
EigenDecomposition.getImagEigenvalues()	Gets a copy of the imaginary parts of the eigenvalues of the original matrix
NakagamiDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
SobolSequenceGenerator.SobolSequenceGenerator(int)	Construct a new Sobol sequence generator for the given space dimension
Array2DRowFieldMatrix.addToEntry(int,int,FieldElement)	Change an entry in the specified row and column
Line.getOffset(Line)	Get the offset oriented distance of a parallel line
GammaDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
Quaternion.multiply(Quaternion,Quaternion)	Returns the Hamilton product of two quaternions
Plane.Plane(Vector3D,Vector3D,Vector3D)	Build a plane from three points
FieldVector3D.isNaN()	Returns true if any coordinate of this vector is NaN false otherwise
LevyDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
Localizable.getSourceString()	Gets the source non localized string
Dfp.abs()	Get the absolute value of instance
ArrayFieldVector.ArrayFieldVector(FieldVector)	Construct a vector from another vector using a deep copy
WeightedObservedPoints.add(double,double,double)	Adds a point to the sample
EventState.getEventHandler()	Get the underlying event handler
SemiVariance.setVarianceDirection(Direction)	Sets the variance direction
Dfp.log10K()	Get the exponent of the greatest power of 10000 that is less than or equal to the absolute value of this I E if this is 106 then log10K would return 1
Sinc.Sinc(boolean)	Instantiates the sinc function
RandomDataImpl.nextWeibull(double,double)	Generates a random value from the Weibull Distribution
Power.Power(double)	
ExpandableStatefulODE.getCompleteState()	Get the complete current state
Vector1DFormat.getInstance(Locale)	Returns the default 1D vector format for the given locale
GeometricMean.GeometricMean(GeometricMean)	Copy constructor creates a new GeometricMean identical to the original
GTest.gDataSetsComparison(long[],long[])	Computes a G Log Likelihood Ratio two sample test statistic for independence comparing frequency counts in observed1 and observed2 The sums of frequency counts in the two samples are not required to be the same The formula used to compute the test statistic is 2 totalSum H rowSums H colSums H k where H is the Shannon Entropy of the random variable formed by viewing the elements of the argument array as incidence counts k is a matrix with rows observed1 observed2 rowSums colSums are the row col sums of k and totalSum is the overall sum of all entries in k
Max.copy(Max,Max)	Copies source to dest
AbstractFieldMatrix.getRowMatrix(int)	Get the entries in row number row as a row matrix
Decimal64.linearCombination(Decimal64,Decimal64,Decimal64,Decimal64)	Compute a linear combination
UnivariateSolverUtils.midpoint(double,double)	Compute the midpoint of two values
SimpleRegression.getTotalSumSquares()	Returns the sum of squared deviations of the y values about their mean
Field.getOne()	Get the multiplicative identity of the field
SimpleRegression.removeData(double[][])	Removes observations represented by the elements in data
Vector2D.toString(NumberFormat)	Get a string representation of this vector
StatisticalSummaryValues.getMin()	Description copied from interface StatisticalSummary
Sigmoid.value(DerivativeStructure)	Simple mathematical function
SparseGradient.log1p()	Shifted natural logarithm
AbstractLeastSquaresOptimizer.getJacobianEvaluations()	
MultiDirectionalSimplex.MultiDirectionalSimplex(int,double,double,double)	Build a multi directional simplex with specified coefficients
DfpField.setIEEEFlags(int)	Sets the IEEE 854 status flags
KolmogorovSmirnovTest.monteCarloP(double,int,int,boolean,int)	Uses Monte Carlo simulation to approximate P D n m d where D n m is the 2 sample Kolmogorov Smirnov statistic See kolmogorovSmirnovStatistic double double for the definition of D n m
BigFraction.subtract(BigFraction)	Subtracts the value of another fraction from the value of this one returning the result in reduced form
BracketFinder.getFHi()	Get function value at getHi
TestUtils.kolmogorovSmirnovTest(double[],double[],boolean)	
ComplexFormat.format(Double)	This method calls format Object StringBuffer FieldPosition
LevyDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
ArrayFieldVector.getEntry(int)	Returns the entry in the specified index
S1Point.isNaN()	Returns true if any coordinate of this point is NaN false otherwise
NewtonRaphsonSolver.NewtonRaphsonSolver(double)	Construct a solver
MixtureMultivariateNormalDistribution.MixtureMultivariateNormalDistribution(List)	Creates a mixture model from a list of distributions and their associated weights
StatUtils.min(double[],int,int)	Returns the minimum of the entries in the specified portion of the input array or Double NaN if the designated subarray is empty
EnclosingBall.getRadius()	Get the radius of the ball
IterativeLinearSolver.solve(RealLinearOperator,RealVector)	Returns an estimate of the solution to the linear system A x b
Euclidean2D.getSubSpace()	Get the n 1 dimension subspace of this space
FieldMatrix.preMultiply(FieldVector)	Returns the row vector result of premultiplying this by the vector v
FractionFormat.parse(String,ParsePosition)	Parses a string to produce a Fraction object This method expects the string to be formatted as an improper fraction
NormalDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
DefaultMeasurementModel.getMeasurementMatrix()	Returns the measurement matrix
MultivariateSummaryStatistics.clear()	Resets all statistics and storage
AbstractSimplex.getPoints()	Get the points of the simplex
AkimaSplineInterpolator.AkimaSplineInterpolator()	
TDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
RealMatrixFormat.getFormat()	Get the components format
RegressionResults.getAdjustedRSquared()	Returns the adjusted R squared statistic defined by the formula R2adj 1 SSR n 1 SSTO n p where SSR is the sum of squared residuals SSTO is the total sum of squares n is the number of observations and p is the number of parameters estimated including the intercept
IntegerDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
Sinc.value(DerivativeStructure)	Simple mathematical function
FieldVector3D.FieldVector3D(RealFieldElement,Vector3D,RealFieldElement,Vector3D,RealFieldElement,Vector3D)	Linear constructor Build a vector from three other ones and corresponding scale factors
NevilleInterpolator.interpolate(double[],double[])	Computes an interpolating function for the data set
StorelessUnivariateStatistic.incrementAll(double[],int,int)	Updates the internal state of the statistic to reflect addition of the values in the designated portion of the values array Does not clear the statistic first i e the values are added incrementally to the dataset
PointVectorValuePair.PointVectorValuePair(double[],double[])	Builds a point objective function value pair
StableRandomGenerator.nextNormalizedDouble()	Generate a random scalar with zero location and unit scale
FieldMatrix.getSubMatrix(int[],int[])	Get a submatrix Rows and columns are indicated counting from 0 to n 1
BracketFinder.getMaxEvaluations()	the number of evalutations
PolyhedronsSet.PolyhedronsSet(Collection)	Build a polyhedrons set from a Boundary REPresentation B rep
PoissonDistribution.PoissonDistribution(RandomGenerator,double,double,int)	Creates a new Poisson distribution with specified mean convergence criterion and maximum number of iterations
FieldVector3D.FieldVector3D(double,FieldVector3D,double,FieldVector3D,double,FieldVector3D,double,FieldVector3D)	Linear constructor Build a vector from four other ones and corresponding scale factors
GeneticAlgorithm.GeneticAlgorithm(CrossoverPolicy,double,MutationPolicy,double,SelectionPolicy)	Create a new genetic algorithm
FieldRotation.applyInverseTo(Vector3D)	Apply the inverse of the rotation to a vector
BSPTree.setAttribute(Object)	Associate an attribute with the instance
DfpField.getSqr2()	Get the constant 2
ComplexField.getRuntimeClass()	Returns the runtime class of the FieldElement
FieldVector3D.scalarMultiply(RealFieldElement)	Multiply the instance by a scalar
RandomDataImpl.nextExponential(double)	Generates a random value from the exponential distribution with specified mean
DerivativeStructure.multiply(double)	operator
DfpMath.exp(Dfp)	Computes e to the given power
VectorialCovariance.VectorialCovariance(int,boolean)	Constructs a VectorialCovariance
PiecewiseBicubicSplineInterpolator.PiecewiseBicubicSplineInterpolator()	
ArrayFieldVector.outerProduct(ArrayFieldVector)	Compute the outer product
NonMonotonicSequenceException.getDirection()	the order direction
RealVector.add(RealVector)	Compute the sum of this vector and v
RealVectorFormat.getInstance()	Returns the default real vector format for the current locale
DSCompiler.getPartialDerivativeOrders(int)	Get the derivation orders for a specific index in the array
NonLinearConjugateGradientOptimizer.NonLinearConjugateGradientOptimizer(ConjugateGradientFormula,ConvergenceChecker)	Constructor with default line search solver and preconditioner
DiagonalMatrix.copy()	Returns a deep copy of this
AbstractFieldMatrix.toString()	Get a string representation for this matrix
FuzzyKMeansClusterer.getFuzziness()	Returns the fuzziness factor used by this instance
MultipleLinearRegression.estimateRegressionParametersStandardErrors()	Returns the standard errors of the regression parameters
Tan.value(DerivativeStructure)	Simple mathematical function
GaussianFitter.GaussianFitter(MultivariateVectorOptimizer)	Constructs an instance using the specified optimizer
Vector1D.dotProduct(Vector)	Compute the dot product of the instance and another vector
KolmogorovSmirnovDistribution.KolmogorovSmirnovDistribution(int)	
DefaultFieldMatrixChangingVisitor.end()	End visiting a matrix
DiagonalMatrix.addToEntry(int,int,double)	Adds in place the specified value to the specified entry of this matrix Row and column indices start at 0
ChiSquaredDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
ExponentialDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
NotFiniteNumberException.NotFiniteNumberException(Localizable,Number,)	Construct the exception with a specific context
AbstractFieldMatrix.createMatrix(int,int)	Create a new FieldMatrix of the same type as the instance with the supplied row and column dimensions
BigReal.BigReal(int)	Build an instance from an int
GraggBulirschStoerIntegrator.setControlFactors(double,double,double,double)	Set the step size control factors
PascalDistribution.getProbabilityOfSuccess()	Access the probability of success for this distribution
Expm1.value(DerivativeStructure)	Simple mathematical function
FieldVector3D.FieldVector3D(RealFieldElement,FieldVector3D)	Multiplicative constructor Build a vector from another one and a scale factor
TDistribution.TDistribution(RandomGenerator,double,double)	Creates a t distribution
SparseGradient.linearCombination(SparseGradient,SparseGradient,SparseGradient,SparseGradient,SparseGradient,SparseGradient)	Compute a linear combination
BaseMultivariateMultiStartOptimizer.getOptima()	Get all the optima found during the last call to optimize
BesselJ.BesselJResult.getnVals()	the number of valid function values normally the same as the length of the array returned by getnVals
LeastSquaresConverter.value(double[])	Compute the value for the function at the given point
TriangularDistribution.TriangularDistribution(double,double,double)	Creates a triangular real distribution using the given lower limit upper limit and mode
Vector2D.add(double,Vector)	Add a scaled vector to the instance
Frequency.getCount(Comparable)	Returns the number of values equal to v
Chromosome.searchForFitnessUpdate(Population)	Searches the population for a chromosome representing the same solution and if it finds one updates the fitness to its value
IterativeLinearSolverEvent.getResidual()	Returns the residual This is an optional operation as all iterative linear solvers do not provide cheap estimate of the updated residual vector in which case this method should throw a MathUnsupportedOperationException providesResidual returns false
Frequency.getPct(char)	Returns the percentage of values that are equal to v as a proportion between 0 and 1
TestUtils.chiSquareDataSetsComparison(long[],long[])	
SemiVariance.SemiVariance(boolean)	Constructs a SemiVariance with the specified biasCorrected property and default Downside varianceDirection property
FieldLUDecomposition.getL()	Returns the matrix L of the decomposition
StepInterpolator.copy()	Copy the instance
ArrayRealVector.isNaN()	Check if any coordinate of this vector is NaN
IterativeLinearSolver.IterativeLinearSolver(IterationManager)	Creates a new instance of this class with custom iteration manager
UnknownParameterException.UnknownParameterException(String)	Construct an exception from the unknown parameter
BinomialDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in Z P X x 0
SphereGenerator.SphereGenerator()	
LogNormalDistribution.logDensity(double)	Returns the natural logarithm of the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF If the derivative does not exist at x then an appropriate replacement should be returned e g Double POSITIVE INFINITY Double NaN or the limit inferior or limit superior of the difference quotient Note that due to the floating point precision and under overflow issues this method will for some distributions be more precise and faster than computing the logarithm of RealDistribution density double The default implementation simply computes the logarithm of density x
Edge.getStart()	Get start vertex
AVLTree.insert(Comparable)	Insert an element in the tree
TTest.tTest(double,StatisticalSummary,double)	Performs a two sided t test evaluating the null hypothesis that the mean of the population from which the dataset described by stats is drawn equals mu
Plane.toSpace(Vector)	Transform a sub space point into a space point
FieldVector3D.subtract(double,FieldVector3D)	Subtract a scaled vector from the instance
KMeansPlusPlusClusterer.KMeansPlusPlusClusterer(int)	Build a clusterer
NonLinearConjugateGradientOptimizer.setInitialStep(double)	Set the initial step used to bracket the optimum in line search
SynchronizedRandomGenerator.nextDouble()	Returns the next pseudorandom uniformly distributed double value between 0 0 and 1 0 from this random number generator s sequence
ArrayFieldVector.append(FieldElement)	Construct a vector by appending a T to this vector
RealMatrix.setRowVector(int,RealVector)	Sets the specified row of this matrix to the entries of the specified vector Row indices start at 0
GaussIntegrator.getNumberOfPoints()	the order of the integration rule the number of integration points
FieldVectorPreservingVisitor.start(int,int,int)	Start visiting a vector This method is called once before any entry of the vector is visited
BlockRealMatrix.setRowVector(int,RealVector)	Sets the specified row of this matrix to the entries of the specified vector Row indices start at 0
Gamma.logGamma1p(double)	Returns the value of log 1 x for 0 5 x 1 5
RealVector.getNorm()	Returns the L2 norm of the vector
Array2DRowRealMatrix.setEntry(int,int,double)	Set the entry in the specified row and column Row and column indices start at 0
FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)	Convert a DifferentiableUnivariateFunction into a UnivariateDifferentiableFunction
SymmetricGaussIntegrator.SymmetricGaussIntegrator(double[],double[])	Creates an integrator from the given points and weights
RealMatrix.setEntry(int,int,double)	Set the entry in the specified row and column Row and column indices start at 0
Decimal64.atan2(Decimal64)	Two arguments arc tangent operation
Atan.derivative()	Returns the derivative of the function
BlockRealMatrix.walkInOptimizedOrder(RealMatrixChangingVisitor)	Visit and possibly change all matrix entries using the fastest possible order
Euclidean1D.getSubSpace()	Get the n 1 dimension subspace of this space
IllConditionedOperatorException.IllConditionedOperatorException(double)	Creates a new instance of this class
UpdatingMultipleLinearRegression.regress(int[])	Performs a regression on data present in buffers including only regressors indexed in variablesToInclude and outputs a RegressionResults object
DSCompiler.add(double[],int,double[],int,double[],int)	Perform addition of two derivative structures
DormandPrince853Integrator.DormandPrince853Integrator(double,double,double[],double[])	Simple constructor
Vector3D.getAlpha()	Get the azimuth of the vector
SynchronizedRandomGenerator.nextBoolean()	Returns the next pseudorandom uniformly distributed boolean value from this random number generator s sequence
RandomDataGenerator.nextBinomial(int,double)	Generates a random value from the Binomial Distribution
BlockFieldMatrix.setEntry(int,int,FieldElement)	Set the entry in the specified row and column
PointVectorValuePair.getPointRef()	Gets a reference to the point
ComplexFormat.parse(String)	Parses a string to produce a Complex object
SummaryStatistics.getPopulationVariance()	Returns the population variance of the values that have been added
OpenMapRealVector.setSubVector(int,RealVector)	Set a sequence of consecutive elements
MicrosphereInterpolator.interpolate(double[][],double[])	Computes an interpolating function for the data set
BaseRuleFactory.BaseRuleFactory()	
SimpleVectorValueChecker.SimpleVectorValueChecker(double,double,int)	Builds an instance with specified tolerance thresholds and iteration count
SubLimitAngle.SubLimitAngle(Hyperplane,Region)	Simple constructor
MathInternalError.MathInternalError(Throwable)	Simple constructor
Complex.multiply(int)	Returns a Complex whose value is this factor with factor interpreted as a integer number
AbstractRealMatrix.toString()	Get a string representation for this matrix
SumOfLogs.getN()	Returns the number of values that have been added
KalmanFilter.predict()	Predict the internal state estimation one time step ahead
Dfp.hypot(Dfp)	Returns the hypotenuse of a triangle with sides this and y sqrt this2 y2 avoiding intermediate overflow or underflow
FieldVector.add(FieldVector)	Compute the sum of this and v
Logit.Parametric.value(double,)	Computes the value of the logit at x
LogNormalDistribution.density(double)	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF
FractionFormat.getProperInstance(Locale)	Returns the default complex format for the given locale
RealMatrix.getTrace()	Returns the trace of the matrix the sum of the elements on the main diagonal
ODEIntegrator.getCurrentSignedStepsize()	Get the current signed value of the integration stepsize
ResizableDoubleArray.clear()	Clear the array contents resetting the number of elements to zero
FieldVector.mapMultiply(FieldElement)	Map a multiplication operation to each entry
LimitAngle.getLocation()	Get the hyperplane location on the circle
MultivariateSummaryStatistics.setMaxImpl(StorelessUnivariateStatistic[])	Sets the implementation for the maximum
LeastSquaresOptimizer.Optimum.getIterations()	Get the number of times the algorithm iterated in order to produce this optimum In general least squares it is common to have one evaluation per iterations
EnumeratedRealDistribution.EnumeratedRealDistribution(RandomGenerator,double[],double[])	Create a discrete distribution using the given random number generator and probability mass function enumeration
DiagonalMatrix.DiagonalMatrix(int)	Creates a matrix with the supplied dimension
ArrayFieldVector.getDimension()	Returns the size of the vector
RealFieldElement.signum()	Compute the signum of the instance
DefaultRealMatrixChangingVisitor.start(int,int,int,int,int,int)	Start visiting a matrix
SynchronizedMultivariateSummaryStatistics.getSum()	Returns an array whose ith entry is the sum of the ith entries of the arrays that have been added using MultivariateSummaryStatistics addValue double
EnumeratedIntegerDistribution.EnumeratedIntegerDistribution(int[],double[])	Create a discrete distribution using the given probability mass function definition
OpenMapRealVector.OpenMapRealVector(Double[])	Create from an array
Decimal64.ceil()	Get the smallest whole number larger than instance
RandomDataImpl.nextSecureInt(int,int)	Generates a uniformly distributed random integer between lower and upper endpoints included from a secure random sequence
WilsonScoreInterval.createInterval(int,int,double)	Create a confidence interval for the true probability of success of an unknown binomial distribution with the given observed number of trials successes and confidence level
HypergeometricDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
Population.getFittestChromosome()	Access the fittest chromosome in this population
Vector3D.distanceSq(Vector)	Compute the square of the distance between the instance and another vector
TTest.homoscedasticT(double[],double[])	Computes a 2 sample t statistic under the hypothesis of equal subpopulation variances To compute a t statistic without the equal variances hypothesis use t double double
DescriptiveStatistics.setWindowSize(int)	WindowSize controls the number of values that contribute to the reported statistics For example if windowSize is set to 3 and the values 1 2 3 4 5 have been added in that order then the available values are 3 4 5 and all reported statistics will be based on these values If windowSize is decreased as a result of this call and there are more than the new value of elements in the current dataset values from the front of the array are discarded to reduce the dataset to windowSize elements
GradientMultivariateOptimizer.optimize()	Stores data and performs the optimization
Frequency.addValue(char)	Adds 1 to the frequency count for v
UnivariateMultiStartOptimizer.UnivariateMultiStartOptimizer(BaseUnivariateOptimizer,int,RandomGenerator)	Create a multi start optimizer from a single start optimizer
DfpMath.acos(Dfp)	computes the arc cosine of the argument
NoDataException.NoDataException(Localizable)	Construct the exception with a specific context
FractionFormat.FractionFormat(NumberFormat)	Create an improper formatting instance with a custom number format for both the numerator and denominator
Vector.negate()	Get the opposite of the instance
ArrayRealVector.walkInOptimizedOrder(RealVectorPreservingVisitor)	Visits but does not alter all entries of this vector in optimized order The order in which the entries are visited is selected so as to lead to the most efficient implementation it might depend on the concrete implementation of this abstract class
ResizableDoubleArray.getCapacity()	Gets the currently allocated size of the internal data structure used for storing elements
ProperFractionFormat.ProperFractionFormat()	Create a proper formatting instance with the default number format for the whole numerator and denominator
ArrayRealVector.copy()	Returns a deep copy of this vector
TransformerMap.containsClass(Class)	Tests if a Class is present in the TransformerMap
EquationsMapper.extractEquationData(double[],double[])	Extract equation data from a complete state or derivative array
DfpField.getSqr2Split()	Get the constant 2 split in two pieces
SparseFieldMatrix.setEntry(int,int,FieldElement)	Set the entry in the specified row and column
Circle.getPointAt(double)	Get a circle point from its phase around the circle
NakagamiDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
FieldMatrix.setColumnVector(int,FieldVector)	Set the entries in column number column as a vector
GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double,double,double,double)	Simple constructor
Vector2D.getX()	Get the abscissa of the vector
FastMath.multiplyExact(long,long)	Multiply two numbers detecting overflows
SimplePointChecker.SimplePointChecker()	Build an instance with default threshold
Sigmoid.value(double)	Compute the value of the function
BlockFieldMatrix.addToEntry(int,int,FieldElement)	Change an entry in the specified row and column
TournamentSelection.select(Population)	Select two chromosomes from the population Each of the two selected chromosomes is selected based on n ary tournament this is done by drawing arity random chromosomes without replacement from the population and then selecting the fittest chromosome among them
MathArrays.checkNonNegative(long[])	Check that all entries of the input array are 0
SummaryStatistics.getSumOfLogs()	Returns the sum of the logs of the values that have been added
EigenDecomposition.EigenDecomposition(double[],double[],double)	Calculates the eigen decomposition of the symmetric tridiagonal matrix The Householder matrix is assumed to be the identity matrix
TransformerMap.TransformerMap()	Build a map containing only the default transformer
SparseGradient.linearCombination(SparseGradient[],SparseGradient[])	Compute a linear combination
LevyDistribution.inverseCumulativeProbability(double)	Computes the quantile function of this distribution For a random variable X distributed according to this distribution the returned value is inf x in R P X x p for 0 p 1 inf x in R P X x 0 for p 0
RealFieldElement.sin()	Sine operation
RealMatrix.getRow(int)	Get the entries at the given row index Row indices start at 0
NonLinearConjugateGradientOptimizer.NonLinearConjugateGradientOptimizer(Formula,ConvergenceChecker,UnivariateSolver)	Constructor with default preconditioner
FixedElapsedTime.FixedElapsedTime(long,TimeUnit)	Create a new FixedElapsedTime instance
MillerUpdatingRegression.getOrderOfRegressors()	Gets the order of the regressors useful if some type of reordering has been called Calling regress with int args will trigger a reordering
GeometricDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all integers between the lower and upper bound of the support are included in the support
ChiSquaredDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
RegressionResults.getMeanSquareError()	Returns the sum of squared errors divided by the degrees of freedom usually abbreviated MSE
FieldMatrix.walkInRowOrder(FieldMatrixChangingVisitor)	Visit and possibly change all matrix entries in row order
SparseGradient.abs()	absolute value
Line.isSimilarTo(Line)	Check if the instance is similar to another line
RealDistribution.sample()	Generate a random value sampled from this distribution
DSCompiler.rootN(double[],int,int,double[],int)	Compute nth root of a derivative structure
SparseGradient.pow(double)	Power operation
MidPointIntegrator.MidPointIntegrator()	Construct a midpoint integrator with default settings
BigFractionFormat.parse(String)	Parses a string to produce a BigFraction object
MathIllegalArgumentException.getMessage()	
ArrayRealVector.equals(Object)	Test for the equality of two real vectors If all coordinates of two real vectors are exactly the same and none are NaN the two real vectors are considered to be equal NaN coordinates are considered to affect globally the vector and be equals to each other i e if either or all coordinates of the real vector are equal to NaN the real vector is equal to a vector with all NaN coordinates
SobolSequenceGenerator.skipTo(int)	Skip to the i th point in the Sobol sequence
AgrestiCoullInterval.createInterval(int,int,double)	Create a confidence interval for the true probability of success of an unknown binomial distribution with the given observed number of trials successes and confidence level
Line.getAngle()	Get the angle of the line
EmpiricalDistribution.EmpiricalDistribution(RandomDataImpl)	Creates a new EmpiricalDistribution with default bin count using the provided RandomDataImpl as the source of random data
MillerUpdatingRegression.regress()	Conducts a regression on the data in the model using all regressors
FastMath.log1p(double)	Computes log 1 x
AbstractFieldMatrix.getColumnVector(int)	Returns the entries in column number column as a vector
Dfp.round()	Get the closest long to instance value
OLSMultipleLinearRegression.newSampleData(double[],double[][])	Loads model x and y sample data overriding any previous sample
AbstractRegion.getTree(boolean)	Get the underlying BSP tree
DerivativeStructure.toRadians()	Convert degrees to radians with error of less than 0 5 ULP
Region.isEmpty()	Check if the instance is empty
AbstractFieldMatrix.addToEntry(int,int,FieldElement)	Change an entry in the specified row and column
RandomPivotingStrategy.pivotIndex(double[],int,int)	Find pivot index of the array so that partition and Kth element selection can be made A uniform random pivot selection between begin and end indices
Percentile.setQuantile(double)	Sets the value of the quantile field determines what percentile is computed when evaluate is called with no quantile argument
UnitSphereRandomVectorGenerator.nextVector()	Generate a random vector
BinomialDistribution.BinomialDistribution(int,double)	Create a binomial distribution with the given number of trials and probability of success
PegasusSolver.PegasusSolver(double,double)	Construct a solver
PolygonsSet.PolygonsSet(double,double,double,double)	Build a parallellepipedic box
Decimal64.atan()	Arc tangent operation
Kurtosis.increment(double)	Updates the internal state of the statistic to reflect the addition of the new value
StatisticalMultivariateSummary.getSumLog()	Returns an array whose ith entry is the sum of logs of the ith entries of the arrays that correspond to each multivariate sample
Vector1D.distance(Vector)	Compute the distance between the instance and another vector according to the L2 norm
FieldVector3D.distanceSq(Vector3D)	Compute the square of the distance between the instance and another vector
EmpiricalDistribution.reseedRandomGenerator(long)	Reseed the random generator used to generate samples
DescriptiveStatistics.setPercentileImpl(UnivariateStatistic)	Sets the implementation to be used by getPercentile double
ArrayRealVector.combine(double,double,RealVector)	Returns a new vector representing a this b y the linear combination of this and y
VectorialCovariance.equals(Object)	
FieldRotation.revert()	Revert a rotation
BitsStreamGenerator.nextLong(long)	Returns a pseudorandom uniformly distributed long value between 0 inclusive and the specified value exclusive drawn from this random number generator s sequence
TTest.pairedTTest(double[],double[])	Returns the observed significance level or p value associated with a paired two sample two tailed t test based on the data in the input arrays
BlockRealMatrix.setRowMatrix(int,RealMatrix)	Sets the specified row of this matrix to the entries of the specified row matrix Row indices start at 0
FieldVector3D.subtract(RealFieldElement,FieldVector3D)	Subtract a scaled vector from the instance
SingularValueDecomposition.getVT()	Returns the transpose of the matrix V of the decomposition
LeastSquaresBuilder.start(double[])	Configure the initial guess
MultivariateRealDistribution.getDimension()	Gets the number of random variables of the distribution
CMAESOptimizer.Sigma.CMAESOptimizer.Sigma(double[])	
Decimal64.pow(Decimal64)	Power operation
SynchronizedMultivariateSummaryStatistics.getGeoMeanImpl()	Returns the currently configured geometric mean implementation
NormalDistribution.logDensity(double)	Returns the natural logarithm of the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF If the derivative does not exist at x then an appropriate replacement should be returned e g Double POSITIVE INFINITY Double NaN or the limit inferior or limit superior of the difference quotient Note that due to the floating point precision and under overflow issues this method will for some distributions be more precise and faster than computing the logarithm of RealDistribution density double The default implementation simply computes the logarithm of density x
NumberIsTooLargeException.NumberIsTooLargeException(Number,Number,boolean)	Construct the exception
SparseFieldVector.walkInDefaultOrder(FieldVectorChangingVisitor,int,int)	Visits and possibly alters some entries of this vector in default order increasing index
RandomDataImpl.reSeedSecure()	Reseeds the secure random number generator with the current time in milliseconds
BitsStreamGenerator.BitsStreamGenerator()	Creates a new random number generator
MapUtils.computeHitHistogram(Iterable,NeuronSquareMesh2D,DistanceMeasure)	Computes the hit histogram of a two dimensional map
EventFilter.init(double,double[],double)	Initialize event handler at the start of an ODE integration
SparseFieldVector.mapInv()	Map the 1 x function to each entry
ParetoDistribution.ParetoDistribution(double,double)	Create a Pareto distribution using the specified scale and shape
LinearObjectiveFunction.getValue(double[])	Compute the value of the linear equation at the current point
SphericalPolygonsSet.buildNew(BSPTree)	Build a region using the instance as a prototype
Euclidean3D.getInstance()	Get the unique instance
ChiSquareTest.chiSquareDataSetsComparison(long[],long[])	Computes a Chi Square two sample test statistic comparing bin frequency counts in observed1 and observed2 The sums of frequency counts in the two samples are not required to be the same The formula used to compute the test statistic is K observed1 i observed2 i K 2 observed1 i observed2 i where K sqrt sum observed2 observed1 This statistic can be used to perform a Chi Square test evaluating the null hypothesis that both observed counts follow the same distribution
NaturalRanking.NaturalRanking()	Create a NaturalRanking with default strategies for handling ties and NaNs
SparseGradient.pow(SparseGradient)	Power operation
FieldElement.getField()	Get the Field to which the instance belongs
ChromosomePair.getSecond()	Access the second chromosome
DfpMath.tan(Dfp)	computes the tangent of the argument
Vector2DFormat.Vector2DFormat(String,String,String,NumberFormat)	Create an instance with custom prefix suffix separator and format for components
EigenDecomposition.EigenDecomposition(RealMatrix)	Calculates the eigen decomposition of the given real matrix
NeuronSquareMesh2D.getNeuron(int,int)	Retrieves the neuron at location i j in the map
TricubicInterpolatingFunction.TricubicInterpolatingFunction(double[],double[],double[],double[][][],double[][][],double[][][],double[][][],double[][][],double[][][],double[][][],double[][][])	
FractionField.getRuntimeClass()	Returns the runtime class of the FieldElement
ParametricUnivariateFunction.gradient(double,)	Compute the gradient of the function with respect to its parameters
FieldMatrix.scalarMultiply(FieldElement)	Multiply each entry by d
Percentile.withEstimationType(EstimationType)	Build a new instance similar to the current one except for the estimation type
ProcessModel.getProcessNoise()	Returns the process noise matrix This method is called by the KalmanFilter every prediction step so implementations of this interface may return a modified process noise depending on the current iteration step
FastMath.getExponent(double)	Return the exponent of a double number removing the bias
Euclidean1D.getDimension()	Get the dimension of the space
Interval.getUpper()	Get the upper bound of the interval
BivariateGridInterpolator.interpolate(double[],double[],double[][])	Compute an interpolating function for the dataset
AbstractLeastSquaresOptimizer.computeCovariances(double[],double)	Get the covariance matrix of the optimized parameters
AbstractLeastSquaresOptimizer.getWeightSquareRoot()	Gets the square root of the weight matrix
Decimal64.cos()	Cosine operation
SecondOrderIntegrator.integrate(SecondOrderDifferentialEquations,double,double[],double[],double,double[],double[])	Integrate the differential equations up to the given time
DSCompiler.cos(double[],int,double[],int)	Compute cosine of a derivative structure
Vector.getNorm1()	Get the L1 norm for the vector
InitialGuess.InitialGuess(double[])	
ConfidenceInterval.ConfidenceInterval(double,double,double)	Create a confidence interval with the given bounds and confidence level
FieldLUDecomposition.getPivot()	Returns the pivot permutation vector
RealVector.subtract(RealVector)	Subtract v from this vector
FieldVector.ebeDivide(FieldVector)	Element by element division
Frequency.getCount(char)	Returns the number of values equal to v
OnePointCrossover.crossover(Chromosome,Chromosome)	Performs one point crossover A random crossover point is selected and the first part from each parent is copied to the corresponding child and the second parts are copied crosswise
DerivativeStructure.atanh()	Inverse hyperbolic tangent operation
Covariance.Covariance()	Create a Covariance with no data
GraggBulirschStoerIntegrator.addStepHandler(StepHandler)	Add a step handler to this integrator
Arc.Arc(double,double,double)	Simple constructor
DiagonalMatrix.subtract(DiagonalMatrix)	Returns this minus m
MathIllegalArgumentException.getContext()	Gets a reference to the rich context data structure that allows to customize error messages and store key value pairs in exceptions
AdamsMoultonIntegrator.AdamsMoultonIntegrator(int,double,double,double[],double[])	Build an Adams Moulton integrator with the given order and error control parameters
GeometricMean.getN()	Returns the number of values that have been added
MultistepIntegrator.getMinReduction()	Get the minimal reduction factor for stepsize control
CMAESOptimizer.getStatisticsSigmaHistory()	History of sigma values
SecondMoment.copy(FirstMoment,FirstMoment)	Copies source to dest
Plane.getU()	Get the plane first canonical vector
RealFieldElement.tanh()	Hyperbolic tangent operation
MatrixUtils.createFieldMatrix(T[][])	Returns a FieldMatrix whose entries are the the values in the the input array
TDistribution.TDistribution(RandomGenerator,double)	Creates a t distribution
SparseFieldVector.getSubVector(int,int)	Get a subvector from consecutive elements
DerivativeStructure.round()	Get the closest long to instance value
Circle.getPhase(Vector3D)	Get the phase angle of a direction
PreconditionedIterativeLinearSolver.solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector)	Returns an estimate of the solution to the linear system A x b The solution is computed in place initial guess is modified
SubLine.split(Hyperplane)	Split the instance in two parts by an hyperplane
Variance.increment(double)	Updates the internal state of the statistic to reflect the addition of the new value
EnumeratedIntegerDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
ExponentialDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
MultivariateSummaryStatistics.setMinImpl(StorelessUnivariateStatistic[])	Sets the implementation for the minimum
SynchronizedSummaryStatistics.getSummary()	Return a StatisticalSummaryValues instance reporting current statistics
MixtureMultivariateNormalDistribution.MixtureMultivariateNormalDistribution(RandomGenerator,List)	Creates a mixture model from a list of distributions and their associated weights
BaseMultivariateOptimizer.getLowerBound()	the lower bounds or null if not set
ComplexFormat.getInstance()	Returns the default complex format for the current locale
S2Point.S2Point(double,double)	Simple constructor
MathRuntimeException.getMessage()	
ArcsSet.iterator()	The iterator returns the limit angles pairs of sub arcs in trigonometric order
EigenDecomposition.getD()	Gets the block diagonal matrix D of the decomposition
Edge.getLength()	Get the length of the arc
Plane.Plane(Vector3D,Vector3D,Vector3D,double)	Build a plane from three points
DfpField.newDfp(Dfp)	Copy constructor
Median.withKthSelector(KthSelector)	Build a new instance similar to the current one except for the kthSelector instance specifically set
GaussNewtonOptimizer.toString()	
GumbelDistribution.GumbelDistribution(RandomGenerator,double,double)	Build a new instance
LaplaceDistribution.getLocation()	Access the location parameter mu
SummaryStatistics.toString()	Generates a text report displaying summary statistics from values that have been added
LogisticDistribution.LogisticDistribution(RandomGenerator,double,double)	Build a new instance
WeightedObservedPoint.getWeight()	Get the weight of the measurement in the fitting process
UniformRandomGenerator.nextNormalizedDouble()	Generate a random scalar with null mean and unit standard deviation
RandomDataGenerator.nextSecureHexString(int)	Generates a random string of hex characters from a secure random sequence
Population.nextGeneration()	Start the population for the next generation
LeastSquaresFactory.weightMatrix(LeastSquaresProblem,RealMatrix)	Apply a dense weight matrix to the LeastSquaresProblem
Hyperplane.wholeSpace()	Build a region covering the whole space
ComplexField.getInstance()	Get the unique instance
Vector2D.Vector2D(double,Vector2D,double,Vector2D)	Linear constructor Build a vector from two other ones and corresponding scale factors
AbstractSubHyperplane.split(Hyperplane)	Split the instance in two parts by an hyperplane
MatrixUtils.createRealDiagonalMatrix(double[])	Returns a diagonal matrix with specified elements
Chromosome.compareTo(Chromosome)	Compares two chromosomes based on their fitness The bigger the fitness the better the chromosome
CMAESOptimizer.PopulationSize.CMAESOptimizer.PopulationSize(int)	
RandomData.nextGaussian(double,double)	Generates a random value from the Normal or Gaussian distribution with specified mean and standard deviation
HypergeometricDistribution.getNumberOfSuccesses()	Access the number of successes
OpenMapRealVector.OpenMapEntry.getValue()	Get the value of the entry
BracketingNthOrderBrentSolver.BracketingNthOrderBrentSolver(double,double,int)	Construct a solver
LinearObjectiveFunction.hashCode()	
Fraction.getNumerator()	Access the numerator
ManhattanDistance.compute(double[],double[])	Compute the distance between two n dimensional vectors
Min.Min(Min)	Copy constructor creates a new Min identical to the original
BetaDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
RealMatrix.setColumn(int,double[])	Sets the specified column of this matrix to the entries of the specified array Column indices start at 0
BrentOptimizer.BrentOptimizer(double,double)	The arguments are used for implementing the original stopping criterion of Brent s algorithm
FastMath.pow(double,int)	Raise a double to an int power
ListPopulation.setChromosomes(List)	Sets the list of chromosomes
Asinh.value(double)	Compute the value of the function
FieldVector.mapSubtractToSelf(FieldElement)	Map a subtraction operation to each entry
UniformIntegerDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in Z P X x 0
Gamma.lanczos(double)	Returns the Lanczos approximation used to compute the gamma function
BracketFinder.getHi()	the higher bound of the bracket
SimpleRegression.getSlope()	Returns the slope of the estimated regression line
CholeskyDecomposition.getDeterminant()	Return the determinant of the matrix
FieldElement.multiply(T)	Compute this a
Frequency.getUniqueCount()	Returns the number of values in the frequency table
Vector2DFormat.getInstance()	Returns the default 2D vector format for the current locale
NormalDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
OptimizationProblem.getIterationCounter()	Get a independent Incrementor that counts up to the maximum number of iterations and then throws an exception
Sigmoid.Sigmoid()	Usual sigmoid function where the lower asymptote is 0 and the higher asymptote is 1
Plane.getNormal()	Get the normalized normal vector
Euclidean3D.getDimension()	Get the dimension of the space
BracketedUnivariateSolver.solve(int,FUNC,double,double,AllowedSolution)	Solve for a zero in the given interval
Exp.derivative()	Returns the derivative of the function
Dfp.positiveOrNull()	Check if instance is greater than or equal to 0
Vector2D.getNorm1()	Get the L1 norm for the vector
RandomAdaptor.nextBytes(byte[])	Generates random bytes and places them into a user supplied byte array The number of random bytes produced is equal to the length of the byte array
SynchronizedMultivariateSummaryStatistics.getDimension()	Returns the dimension of the data
ValueServer.setValuesFileURL(URL)	Sets the the values file URL
BSPTree.copySelf()	Copy the instance
MathIllegalNumberException.getArgument()	the requested value
FieldVector3D.negate()	Get the opposite of the instance
DSCompiler.sin(double[],int,double[],int)	Compute sine of a derivative structure
SecondMoment.getN()	Returns the number of values that have been added
LogNormalDistribution.probability(double,double)	For a random variable X whose values are distributed according to this distribution this method returns P x0 X x1
Plane.wholeHyperplane()	Build a region covering the whole hyperplane
Logit.Parametric.gradient(double,)	Computes the value of the gradient at x
BaseAbstractMultivariateOptimizer.getLowerBound()	
BigFractionFormat.format(BigFraction,StringBuffer,FieldPosition)	Formats a BigFraction object to produce a string The BigFraction is output in improper format
ComplexFormat.ComplexFormat(NumberFormat,NumberFormat)	Create an instance with a custom number format for the real part and a custom number format for the imaginary part
OpenMapRealVector.append(OpenMapRealVector)	Optimized method to append a OpenMapRealVector
UnivariatePointValuePair.UnivariatePointValuePair(double,double)	Build a point objective function value pair
SynchronizedDescriptiveStatistics.getWindowSize()	Returns the maximum number of values that can be stored in the dataset or INFINITE WINDOW 1 if there is no limit
BigReal.negate()	Returns the additive inverse of this element
WeightedObservedPoint.getY()	Get the observed value of the function at x
SumOfSquares.copy(SumOfSquares,SumOfSquares)	Copies source to dest
ChiSquaredDistribution.ChiSquaredDistribution(RandomGenerator,double)	Create a Chi Squared distribution with the given degrees of freedom
FieldVector.toArray()	Convert the vector to a T array
BlockFieldMatrix.subtract(BlockFieldMatrix)	Compute this m
AbstractEvaluation.getCost()	Get the cost
ResizableDoubleArray.setExpansionFactor(float)	Sets the expansionFactor Throws IllegalArgumentException if the the following conditions are not met expansionFactor 1 contractionFactor expansionFactor
EventState.reinitializeBegin(StepInterpolator)	Reinitialize the beginning of the step
GumbelDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
Network.deleteLink(Neuron,Neuron)	Deletes the link between neurons a and b
LinearOptimizer.getIterations()	Get the number of iterations realized by the algorithm
SimpleRegression.append(SimpleRegression)	Appends data from another regression calculation to this one
Fraction.toString()	Returns the String representing this fraction ie num dem or just num if the denominator is one
BaseAbstractMultivariateVectorOptimizer.getTarget()	Gets the observed values to be matched by the objective vector function
SparseFieldVector.copy()	Returns a deep copy of this
GeometricMean.setSumLogImpl(StorelessUnivariateStatistic)	Sets the implementation for the sum of logs
PSquarePercentile.hashCode()	Returns hash code based on getResult and getN
BetaDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
Dfp.newInstance(Dfp)	Create an instance by copying an existing one
AbstractUnivariateStatistic.copy()	Returns a copy of the statistic with the same internal state
SymmLQ.solve(RealLinearOperator,RealLinearOperator,RealVector,boolean,double)	Returns an estimate of the solution to the linear system A shift I x b
Plane.revertSelf()	Revert the plane
EmpiricalDistribution.isLoaded()	Property indicating whether or not the distribution has been loaded
Frequency.merge(Frequency)	Merge another Frequency object s counts into this instance
TransformerMap.hashCode()	
Tanh.value(DerivativeStructure)	Simple mathematical function
Vector3DFormat.getInstance()	Returns the default 3D vector format for the current locale
ChiSquaredDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
Vector2DFormat.Vector2DFormat(NumberFormat)	Create an instance with a custom number format for components
Rotation.getQ3()	Get the third coordinate of the vectorial part of the quaternion
SemiVariance.isBiasCorrected()	Returns true iff biasCorrected property is set to true
EnumeratedRealDistribution.sample()	Generate a random value sampled from this distribution
MathArrays.Function.evaluate(double[],int,int)	the result of the operation
BaseAbstractMultivariateVectorOptimizer.getEvaluations()	Get the number of evaluations of the objective function
UnivariateVectorFunction.value(double)	Compute the value for the function
Fraction.longValue()	Gets the fraction as a long This returns the whole number part of the fraction
Pow.value(double,double)	Compute the value for the function
StepInterpolator.getInterpolatedDerivatives()	Get the derivatives of the state vector of the interpolated point
AbstractConvergenceChecker.converged(int,PAIR,PAIR)	Check if the optimization algorithm has converged
BetaDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
SumOfSquares.copy()	Returns a copy of the statistic with the same internal state
RandomData.nextLong(long,long)	Generates a uniformly distributed random long integer between lower and upper endpoints included
Euclidean1D.NoSubSpaceException.Euclidean1D.NoSubSpaceException()	Simple constructor
RealMatrixFormat.getAvailableLocales()	Get the set of locales for which real vectors formats are available
ArrayFieldVector.setSubVector(int,FieldVector)	Set a set of consecutive elements
DoublePoint.hashCode()	
DefaultRealMatrixChangingVisitor.visit(int,int,double)	Visit one matrix entry
SparseGradient.numVars()	Find the number of variables
JacobianMatrices.getCurrentMainSetJacobian(double[][])	Get the current value of the Jacobian matrix with respect to state
Kurtosis.getN()	Returns the number of values that have been added
BaseSecantSolver.solve(int,UnivariateFunction,double,double,double)	Solve for a zero in the given interval start at startValue
Dfp.isZero()	Check if instance is equal to zero
Sigmoid.Sigmoid(double,double)	Sigmoid function
EventHandler.init(double,double[],double)	Initialize event handler at the start of an ODE integration
HaltonSequenceGenerator.nextVector()	Generate a random vector
ArcsSet.ArcsSet(double)	Build an arcs set representing the whole circle
StatisticalSummary.getMax()	Returns the maximum of the available values
WeightedObservedPoints.add(WeightedObservedPoint)	Adds a point to the sample
S1Point.getAlpha()	Get the azimuthal angle alpha
ProperBigFractionFormat.ProperBigFractionFormat(NumberFormat,NumberFormat,NumberFormat)	Create a proper formatting instance with a custom number format for each of the whole numerator and denominator
Interval.checkPoint(double,double)	Check a point with respect to the interval
UpdatingMultipleLinearRegression.hasIntercept()	Returns true if a constant has been included false otherwise
LogNormalDistribution.LogNormalDistribution()	Create a log normal distribution where the mean and standard deviation of the normally distributed natural logarithm of the log normal distribution are equal to zero and one respectively In other words the scale of the returned distribution is 0 while its shape is 1
BracketFinder.getLo()	the lower bound of the bracket
Vector.getNormSq()	Get the square of the norm for the vector
AbstractConvergenceChecker.getAbsoluteThreshold()	the absolute threshold
BaseOptimizer.getEvaluations()	Gets the number of evaluations of the objective function
FieldMatrix.setRow(int,FieldElement[])	Set the entries in row number row as a row matrix
EmbeddedRungeKuttaIntegrator.getMaxGrowth()	Get the maximal growth factor for stepsize control
SynchronizedRandomGenerator.nextInt(int)	Returns a pseudorandom uniformly distributed int value between 0 inclusive and the specified value exclusive drawn from this random number generator s sequence
LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer()	Build an optimizer for least squares problems with default values for all the tuning parameters see the other contructor
Quaternion.Quaternion(double,double[])	Builds a quaternion from scalar and vector parts
Vector2D.dotProduct(Vector)	Compute the dot product of the instance and another vector
Vector3D.distance1(Vector)	Compute the distance between the instance and another vector according to the L1 norm
RealDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
PolyhedronsSet.buildNew(BSPTree)	Build a region using the instance as a prototype
LinearConstraint.getValue()	Gets the value of the constraint right hand side
PearsonsCorrelation.getCorrelationStandardErrors()	Returns a matrix of standard errors associated with the estimates in the correlation matrix
ArrayRealVector.toArray()	Convert the vector to an array of doubles
Circle.Circle(S2Point,S2Point,double)	Build a great circle from two non aligned points
Line.getOrigin()	Get the line point closest to the origin
Vector1D.Vector1D(double,Vector1D,double,Vector1D,double,Vector1D,double,Vector1D)	Linear constructor Build a vector from four other ones and corresponding scale factors
BetaDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
DerivativeStructure.exp()	Exponential
BigReal.BigReal(long)	Build an instance from a long
MultiDirectionalSimplex.MultiDirectionalSimplex(int,double,double)	Build a multi directional simplex with specified coefficients
AbstractIntegrator.getStepHandlers()	Get all the step handlers that have been added to the integrator
RotationOrder.getA2()	Get the axis of the second rotation
UnivariateSolverUtils.bracket(UnivariateFunction,double,double,double,double,double,int)	This method attempts to find two values a and b satisfying lowerBound a initial b upperBound f a f b 0 If f is continuous on a b this means that a and b bracket a root of f
AbstractRegion.getTolerance()	Get the tolerance below which points are considered to belong to hyperplanes
ContinuedFraction.evaluate(double,double)	Evaluates the continued fraction at the value x
Gamma.gamma(double)	Returns the value of x Based on the NSWC Library of Mathematics Subroutines double precision implementation DGAMMA
Rotation.distance(Rotation,Rotation)	Compute the distance between two rotations
MultivariateDifferentiableFunction.value(DerivativeStructure[])	Compute the value for the function at the given point
OpenMapRealVector.ebeDivide(RealVector)	Element by element division
DfpField.getZero()	Get the constant 0
RandomDataImpl.nextBeta(double,double)	Generates a random value from the Beta Distribution
AdamsIntegrator.integrate(ExpandableStatefulODE,double)	Integrate a set of differential equations up to the given time
SphericalPolygonsSet.getEnclosingCap()	Get a spherical cap enclosing the polygon
Pair.getValue()	Get the value
IterationManager.removeIterationListener(IterationListener)	Removes the specified iteration listener from the list of listeners currently attached to this object Attempting to remove a listener which was not previously registered does not cause any error
Complex.sin()	Compute the sine of this complex number
UnivariateSolverUtils.verifyInterval(double,double)	Check that the endpoints specify an interval
Circle.wholeSpace()	Build a region covering the whole space
BigReal.doubleValue()	Get the double value corresponding to the instance
Asin.value(DerivativeStructure)	Simple mathematical function
KolmogorovSmirnovTest.KolmogorovSmirnovTest(RandomGenerator)	Construct a KolmogorovSmirnovTest with the provided random data generator
FuzzyKMeansClusterer.FuzzyKMeansClusterer(int,double)	Creates a new instance of a FuzzyKMeansClusterer
ChiSquaredDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
ODEIntegrator.clearEventHandlers()	Remove all the event handlers that have been added to the integrator
AbstractRealMatrix.walkInRowOrder(RealMatrixPreservingVisitor)	Visit but don t change all matrix entries in row order
TestUtils.monteCarloP(double,int,int,boolean,int)	
BigFraction.divide(long)	Divide the value of this fraction by the passed long ie this 1 l returning the result in reduced form
SparseFieldVector.ebeDivide(FieldVector)	Element by element division
AbstractRealMatrix.walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)	Visit but don t change some matrix entries in row order
SynchronizedDescriptiveStatistics.SynchronizedDescriptiveStatistics(int)	Construct an instance with finite window
Decimal64.abs()	absolute value
GaussianFitter.ParameterGuesser.guess()	Gets an estimation of the parameters
TestUtils.tTest(double,double[])	
SparseFieldVector.equals(Object)	
FieldVector3D.distanceInf(FieldVector3D)	Compute the distance between the instance and another vector according to the L norm
StorelessCovariance.getData()	Return the covariance matrix as two dimensional array
SimplexSolver.SimplexSolver(double,int)	Builds a simplex solver with a specified accepted amount of error
FastMath.nextDown(double)	Compute next number towards negative infinity
Segment.getStart()	Get the start point of the segment
SynchronizedSummaryStatistics.setMinImpl(StorelessUnivariateStatistic)	Sets the implementation for the minimum
Vector3D.add(Vector)	Add a vector to the instance
AbstractFieldMatrix.getRowDimension()	Returns the number of rows in the matrix
Line.getOffset(Point)	Get the offset oriented distance of a point
AggregateSummaryStatistics.AggregateSummaryStatistics(SummaryStatistics,SummaryStatistics)	Initializes a new AggregateSummaryStatistics with the specified statistics object as a prototype for contributing statistics and for the internal aggregate statistics This provides for different statistics implementations to be used by contributing and aggregate statistics and for an initial state to be supplied for the aggregate statistics
TricubicSplineInterpolator.TricubicSplineInterpolator()	
BlockRealMatrix.subtract(RealMatrix)	Returns this minus m
AbstractRandomGenerator.setSeed(long)	Sets the seed of the underlying random number generator using a long seed Sequences of values generated starting with the same seeds should be identical
MultivariateNormalDistribution.getStandardDeviations()	Gets the square root of each element on the diagonal of the covariance matrix
KendallsCorrelation.KendallsCorrelation(double[][])	Create a KendallsCorrelation from a rectangular array whose columns represent values of variables to be correlated
GLSMultipleLinearRegression.GLSMultipleLinearRegression()	
OpenMapRealVector.hashCode()	This method must be overriden by concrete subclasses of RealVector current implementation throws an exception
PolygonsSet.PolygonsSet()	Build a polygons set representing the whole real line
ConjugateGradient.getCheck()	Returns true if positive definiteness should be checked for both matrix and preconditioner
SimpleRegression.addObservation(double[],double)	Adds one observation to the regression model
MultivariateNormalMixtureExpectationMaximization.estimate(double[][],int)	Helper method to create a multivariate normal mixture model which can be used to initialize fit MixtureMultivariateNormalDistribution
BigFractionField.getInstance()	Get the unique instance
Vector.getZero()	Get the null vector of the vectorial space or origin point of the affine space
RandomGenerator.setSeed(long)	Sets the seed of the underlying random number generator using a long seed
DescriptiveStatistics.setMaxImpl(UnivariateStatistic)	Sets the implementation for the maximum
GTest.g(double[],long[])	Computes the G statistic for Goodness of Fit comparing observed and expected frequency counts
Multiply.Multiply()	
Log10.value(DerivativeStructure)	Simple mathematical function
MidPointIntegrator.MidPointIntegrator(int,int)	Build a midpoint integrator with given iteration counts
PolynomialFunctionNewtonForm.value(double)	Calculate the function value at the given point
RealMatrix.getRowMatrix(int)	Get the entries at the given row index as a row matrix Row indices start at 0
MultipleLinearRegression.estimateResiduals()	Estimates the residuals ie u y X b
AdamsNordsieckTransformer.getInstance(int)	Get the Nordsieck transformer for a given number of steps
FieldMatrixChangingVisitor.visit(int,int,FieldElement)	Visit one matrix entry
Mean.getN()	Returns the number of values that have been added
OptimizationProblem.getConvergenceChecker()	Gets the convergence checker
AbstractRegion.getSize()	Get the size of the instance
DescriptiveStatistics.getPercentile(double)	Returns an estimate for the pth percentile of the stored values
Dfp.strictlyNegative()	Check if instance is strictly less than 0
Vector3D.distance(Vector3D,Vector3D)	Compute the distance between two vectors according to the L2 norm
FieldVector3D.FieldVector3D(RealFieldElement,Vector3D)	Multiplicative constructor Build a vector from another one and a scale factor
Quaternion.subtract(Quaternion)	Subtracts a quaternion from the instance
Plane.intersection(Plane,Plane,Plane)	Get the intersection point of three planes
Circle.sameOrientationAs(Hyperplane)	Check if the instance has the same orientation as another hyperplane
Vector1D.getZero()	Get the null vector of the vectorial space or origin point of the affine space
IntegerDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
S2Point.hashCode()	Get a hashCode for the 2D vector
RealFieldElement.linearCombination(double,T,double,T)	Compute a linear combination
EmbeddedRungeKuttaIntegrator.setMaxGrowth(double)	Set the maximal growth factor for stepsize control
RealMatrix.transpose()	Returns the transpose of this matrix
ModelFunction.ModelFunction(MultivariateVectorFunction)	
MathParseException.MathParseException(String,int)	
Median.Median()	Default constructor
TrapezoidIntegrator.TrapezoidIntegrator(double,double,int,int)	Build a trapezoid integrator with given accuracies and iterations counts
Pair.toString()	
SubLine.SubLine(Vector3D,Vector3D)	Create a sub line from two endpoints
DfpField.getOne()	Get the constant 1
FieldVector3D.scalarMultiply(double)	Multiply the instance by a scalar
PoissonDistribution.probability(int)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the probability mass function PMF for the distribution
BaseUnivariateSolver.solve(int,FUNC,double,double,double)	Solve for a zero in the given interval start at startValue
NaturalRanking.NaturalRanking(NaNStrategy,RandomGenerator)	Create a NaturalRanking with the given NaNStrategy TiesStrategy RANDOM and the given source of random data
RealMatrix.scalarAdd(double)	Returns the result of adding d to each entry of this
Mean.evaluate(double[],int,int)	Returns the arithmetic mean of the entries in the specified portion of the input array or Double NaN if the designated subarray is empty
SynchronizedDescriptiveStatistics.copy()	Returns a copy of this SynchronizedDescriptiveStatistics instance with the same internal state
Well44497a.Well44497a(int[])	Creates a new random number generator using an int array seed
CompositeFormat.formatDouble(double,NumberFormat,StringBuffer,FieldPosition)	Formats a double value to produce a string In general the value is formatted using the formatting rules of format There are three exceptions to this NaN is formatted as NaN Positive infinity is formatted as Infinity Negative infinity is formatted as Infinity
NewtonSolver.NewtonSolver(double)	Construct a solver
SubOrientedPoint.getSize()	Get the size of the instance
MaxEval.getMaxEval()	Gets the maximum number of evaluations
PSquarePercentile.clear()	Clears the internal state of the Statistic This basically clears all the markers the initialFive list and sets countOfObservations to 0
CycleCrossover.isRandomStart()	Returns whether the starting index is chosen randomly or set to zero
Percentile.withNaNStrategy(NaNStrategy)	Build a new instance similar to the current one except for the NaN handling strategy
RandomKey.RandomKey(List)	Constructor
SynchronizedSummaryStatistics.getSumImpl()	Returns the currently configured Sum implementation
LinearConstraintSet.getConstraints()	Gets the set of linear constraints
DfpDec.newInstance(long)	Create an instance from a long value
SynchronizedSummaryStatistics.setVarianceImpl(StorelessUnivariateStatistic)	Sets the implementation for the variance
RegressionResults.getTotalSumSquares()	Returns the sum of squared deviations of the y values about their mean
LogisticDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
Vector3D.Vector3D(double[])	Simple constructor
MathArrays.isMonotonic(T[],OrderDirection,boolean)	Check that an array is monotonically increasing or decreasing
AbstractRealMatrix.multiply(RealMatrix)	Returns the result of postmultiplying this by m
UnknownParameterException.getName()	the name of the unknown parameter
Vector1D.distanceSq(Vector1D,Vector1D)	Compute the square of the distance between two vectors
SymmetricGaussIntegrator.integrate(UnivariateFunction)	Returns an estimate of the integral of f x w x where w is a weight function that depends on the actual flavor of the Gauss integration scheme
ArrayRealVector.getNorm()	Returns the L2 norm of the vector
S1Point.getSpace()	Get the space to which the point belongs
ModelFunctionJacobian.ModelFunctionJacobian(MultivariateMatrixFunction)	
AbstractRealDistribution.sample(int)	Generate a random sample from the distribution
DerivativeStructure.subtract(double)	operator
Network.Network(long,int)	
AggregateSummaryStatistics.getSumOfLogs()	Returns the sum of the logs of all the aggregated data
MultiDirectionalSimplex.MultiDirectionalSimplex(double[],double,double)	Build a multi directional simplex with specified coefficients
AbstractParameterizable.getParametersNames()	Get the names of the supported parameters
StepNormalizer.StepNormalizer(double,FixedStepHandler,StepNormalizerMode)	Simple constructor Uses FIRST bounds setting
TestUtils.pairedTTest(double[],double[],double)	
Array2DRowFieldMatrix.subtract(Array2DRowFieldMatrix)	Subtract m from this matrix
BlockRealMatrix.walkInRowOrder(RealMatrixPreservingVisitor)	Visit but don t change all matrix entries in row order
SparseFieldVector.walkInOptimizedOrder(FieldVectorChangingVisitor)	Visits and possibly alters all entries of this vector in optimized order The order in which the entries are visited is selected so as to lead to the most efficient implementation it might depend on the concrete implementation of this abstract class
Covariance.Covariance(double[][])	Create a Covariance matrix from a rectangular array whose columns represent covariates
ArrayRealVector.getEntry(int)	Return the entry at the specified index
SynchronizedMultivariateSummaryStatistics.toString()	Generates a text report displaying summary statistics from values that have been added
ArrayRealVector.ArrayRealVector(double[],ArrayRealVector)	Construct a vector by appending one vector to another vector
MainStateJacobianProvider.computeMainStateJacobian(double,double[],double[],double[][])	Compute the jacobian matrix of ODE with respect to main state
AbstractCurveFitter.TheoreticalValuesFunction.getModelFunction()	the model function values
SparseGradient.remainder(SparseGradient)	IEEE remainder operator
LeastSquaresBuilder.checker(ConvergenceChecker)	Configure the convergence checker
MultiDirectionalSimplex.MultiDirectionalSimplex(double[][])	Build a multi directional simplex with default coefficients
BicubicSplineInterpolatingFunction.partialDerivativeYY(double,double)	
Frequency.getCount(int)	Returns the number of values equal to v
LevyDistribution.getScale()	Get the scale parameter of the distribution
UnivariateIntegrator.getRelativeAccuracy()	Get the actual relative accuracy
StatisticalMultivariateSummary.getCovariance()	Returns the covariance of the available values
UnivariatePeriodicInterpolator.UnivariatePeriodicInterpolator(UnivariateInterpolator,double,int)	Builds an interpolator
FieldVector3D.crossProduct(FieldVector3D)	Compute the cross product of the instance with another vector
NaturalRanking.getNanStrategy()	Return the NaNStrategy
EventState.stepAccepted(double,double[])	Acknowledge the fact the step has been accepted by the integrator
ArcsSet.projectToBoundary(Point)	Project a point on the boundary of the region
Circle.Circle(Vector3D,double)	Build a great circle from its pole
LeastSquaresOptimizer.optimize(LeastSquaresProblem)	Solve the non linear least squares problem
Vector1D.distance(Point)	Compute the distance between the instance and another point
AbstractRandomGenerator.nextInt()	Returns the next pseudorandom uniformly distributed int value from this random number generator s sequence
Frequency.entrySetIterator()	Return an Iterator over the set of keys and values that have been added
ChiSquareTest.chiSquareTest(long[][])	Returns the observed significance level or p value associated with a chi square test of independence based on the input counts array viewed as a two way table
NormalDistribution.cumulativeProbability(double,double)	For a random variable X whose values are distributed according to this distribution this method returns P x0 X x1
DerivativeStructure.subtract(DerivativeStructure)	Compute this a
Vector3D.toArray()	Get the vector coordinates as a dimension 3 array
NotPositiveException.NotPositiveException(Localizable,Number)	Construct the exception with a specific context
DecompositionSolver.isNonSingular()	Check if the decomposed matrix is non singular
DerivativeStructure.atan2(DerivativeStructure)	Two arguments arc tangent operation
Mean.Mean(FirstMoment)	Constructs a Mean with an External Moment
TestUtils.homoscedasticT(double[],double[])	
MathArrays.verifyValues(double[],double[],int,int,boolean)	This method is used to verify that the begin and length parameters designate a subarray of positive length and the weights are all non negative non NaN finite and not all zero
SparseGradient.createVariable(int,double)	Factory method creating an independent variable
AnyMatrix.getRowDimension()	Returns the number of rows in the matrix
DerivativeStructure.multiply(int)	Compute n this Multiplication by an integer number is defined as the following sum n this i 1n this
MatrixUtils.isSymmetric(RealMatrix,double)	Checks whether a matrix is symmetric
DefaultFieldMatrixPreservingVisitor.visit(int,int,FieldElement)	Visit one matrix entry
SobolSequenceGenerator.nextVector()	Generate a random vector
FeatureInitializerFactory.function(UnivariateFunction,double,double)	Creates an initializer from a univariate function f x
RealVector.getL1Distance(RealVector)	Distance between two vectors
ResizableDoubleArray.getExpansionMode()	The expansion mode determines whether the internal storage array grows additively or multiplicatively when it is expanded
DSCompiler.linearCombination(double,double[],int,double,double[],int,double[],int)	Compute linear combination
TransformerMap.classes()	Returns the Set of Classes used as keys in the map
ZipfDistribution.getExponent()	Get the exponent characterizing the distribution
OpenMapRealVector.OpenMapRealVector(int,int)	Build a vector with known the sparseness for advanced use only
Skewness.getN()	Returns the number of values that have been added
FunctionUtils.fix1stArgument(BivariateFunction,double)	Creates a unary function by fixing the first argument of a binary function
EvaluationRmsChecker.EvaluationRmsChecker(double,double)	Create a convergence checker for the RMS with a relative and absolute tolerance
RandomPivotingStrategy.RandomPivotingStrategy(RandomGenerator)	Simple constructor
FieldMatrix.walkInColumnOrder(FieldMatrixChangingVisitor)	Visit and possibly change all matrix entries in column order
BlockFieldMatrix.walkInRowOrder(FieldMatrixPreservingVisitor)	Visit but don t change all matrix entries in row order
AVLTree.Node.getNext()	Get the node containing the next larger or equal element
SimpleRegression.addData(double,double)	Adds the observation x y to the regression data set
ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double)	Simple constructor
OpenMapRealVector.dotProduct(OpenMapRealVector)	Computes the dot product
AbstractUnivariateStatistic.getData()	Get a copy of the stored data array
FieldMatrix.getRow(int)	Get the entries in row number row as an array
SynchronizedDescriptiveStatistics.addValue(double)	Adds the value to the dataset If the dataset is at the maximum size i e the number of stored elements equals the currently configured windowSize the first oldest element in the dataset is discarded to make room for the new value
ArrayRealVector.append(double)	Construct a new vector by appending a double to this vector
DSCompiler.acos(double[],int,double[],int)	Compute arc cosine of a derivative structure
Dfp.divide(int)	Divide by a single digit less than radix
AbstractMultipleLinearRegression.newSampleData(double[],int,int)	Loads model x and y sample data from a flat input array overriding any previous sample
Floor.Floor()	
SparseFieldVector.add(SparseFieldVector)	Optimized method to add sparse vectors
JacobiPreconditioner.getRowDimension()	Returns the dimension of the codomain of this operator
AbstractRealMatrix.getRowMatrix(int)	Get the entries at the given row index as a row matrix Row indices start at 0
BicubicInterpolator.interpolate(double[],double[],double[][])	Compute an interpolating function for the dataset
BracketingNthOrderBrentSolverDFP.solve(int,UnivariateDfpFunction,Dfp,Dfp,Dfp,AllowedSolution)	Solve for a zero in the given interval start at startValue
Rotation.Rotation(double[][],double)	Build a rotation from a 3X3 matrix
SynchronizedMultivariateSummaryStatistics.getMaxImpl()	Returns the currently configured maximum implementation
SynchronizedSummaryStatistics.getQuadraticMean()	Returns the quadratic mean a k a
ArrayFieldVector.mapInv()	Map the 1 x function to each entry
Covariance.getN()	Returns the number of observations length of covariate vectors
Sum.Sum()	Create a Sum instance
FieldVector3D.toString(NumberFormat)	Get a string representation of this vector
RealMatrixFormat.getRowPrefix()	Get the format prefix
Sinc.derivative()	Returns the derivative of the function
Dfp.lessThan(Dfp)	Check if instance is less than x
MultidimensionalCounter.MultidimensionalCounter()	Create a counter
ArithmeticUtils.binomialCoefficient(int,int)	Returns an exact representation of the Binomial Coefficient n choose k the number of k element subsets that can be selected from an n element set
RealFieldElement.rint()	Get the whole number that is the nearest to the instance or the even one if x is exactly half way between two integers
ExponentialDistribution.ExponentialDistribution(double,double)	Create an exponential distribution with the given mean
Vector3D.distance(Vector)	Compute the distance between the instance and another vector according to the L2 norm
KolmogorovSmirnovTest.kolmogorovSmirnovTest(RealDistribution,double[],boolean)	Computes the p value or observed significance level of a one sample Kolmogorov Smirnov test evaluating the null hypothesis that data conforms to distribution If exact is true the distribution used to compute the p value is computed using extended precision See cdfExact double int
FixedGenerationCount.FixedGenerationCount(int)	Create a new FixedGenerationCount instance
LevenbergMarquardtOptimizer.withRankingThreshold(double)	a new instance
Line.distance(Vector3D)	Compute the distance between the instance and a point
ArrayFieldVector.ArrayFieldVector(FieldElement[],FieldVector)	Construct a vector by appending one vector to another vector
GeometricMean.clear()	Clears the internal state of the Statistic
RandomDataImpl.reSeedSecure(long)	Reseeds the secure random number generator with the supplied seed
ArrayRealVector.addToEntry(int,double)	Change an entry at the specified index
PascalDistribution.PascalDistribution(int,double)	Create a Pascal distribution with the given number of successes and probability of success
BracketingNthOrderBrentSolver.solve(int,UnivariateFunction,double,double,double,AllowedSolution)	Solve for a zero in the given interval start at startValue
FieldVector3D.dotProduct(FieldVector3D,FieldVector3D)	Compute the dot product of two vectors
ExceptionContext.addMessage(Localizable,)	Adds a message
FieldVector3D.angle(Vector3D,FieldVector3D)	Compute the angular separation between two vectors
NakagamiDistribution.getShape()	Access the shape parameter mu
PegasusSolver.PegasusSolver(double,double,double)	Construct a solver
VectorFormat.getFormat()	Get the components format
RealVectorFormat.RealVectorFormat()	Create an instance with default settings
DerivativeStructure.taylor()	Evaluate Taylor expansion a derivative structure
EuclideanDistance.EuclideanDistance()	
StatisticalSummaryValues.getVariance()	Description copied from interface StatisticalSummary
GammaDistribution.GammaDistribution(RandomGenerator,double,double)	Creates a Gamma distribution
DefaultRealMatrixChangingVisitor.DefaultRealMatrixChangingVisitor()	
RealVector.setEntry(int,double)	Set a single element
BaseMultivariateVectorMultiStartOptimizer.getOptima()	Get all the optima found during the last call to optimize
AbstractSubHyperplane.getRemainingRegion()	Get the remaining region of the hyperplane
Combinations.Combinations(int,int)	Creates an instance whose range is the k element subsets of 0 n 1 represented as int arrays
ArcsSet.ArcsSet(Collection,double)	Build an arcs set from a Boundary REPresentation B rep
WeibullDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
MersenneTwister.setSeed(int)	Reinitialize the generator as if just built with the given int seed
UniformRealDistribution.inverseCumulativeProbability(double)	Description copied from class AbstractRealDistribution
PolynomialFunction.multiply(PolynomialFunction)	Multiply the instance by a polynomial
EventState.stop()	Check if the integration should be stopped at the end of the current step
NoBracketingException.NoBracketingException(Localizable,double,double,double,double,)	Construct the exception with a specific context
TriangularDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
DerivativeStructure.pow(double,DerivativeStructure)	Compute ax where a is a double and x a DerivativeStructure
NonMonotonicSequenceException.getPrevious()	the previous value
OpenIntToDoubleHashMap.Iterator.advance()	Advance iterator one step further
SynchronizedMultivariateSummaryStatistics.setMinImpl(StorelessUnivariateStatistic[])	Sets the implementation for the minimum
Vector.distanceInf(Vector)	Compute the distance between the instance and another vector according to the L norm
RealFieldElement.cosh()	Hyperbolic cosine operation
MatrixUtils.createFieldMatrix(Field,int,int)	Returns a FieldMatrix with specified dimensions
SparseGradient.linearCombination(SparseGradient,SparseGradient,SparseGradient,SparseGradient)	Compute a linear combination
Precision.representableDelta(double,double)	Computes a number delta close to originalDelta with the property that x delta x is exactly machine representable
Target.getTarget()	Gets the initial guess
ProperFractionFormat.format(Fraction,StringBuffer,FieldPosition)	Formats a Fraction object to produce a string The fraction is output in proper format
SubPlane.side(Hyperplane)	Compute the relative position of the instance with respect to an hyperplane
MapUtils.findBestAndSecondBest(double[],Iterable,DistanceMeasure)	Finds the two neurons that best match the given features
RealVector.Entry.getValue()	Get the value of the entry
SparseGradient.cbrt()	Cubic root
Decimal64Field.getOne()	Get the multiplicative identity of the field
Log.value(double)	Compute the value of the function
GaussIntegratorFactory.GaussIntegratorFactory()	
FieldVector3D.getZ()	Get the height of the vector
BlockRealMatrix.BlockRealMatrix(double[][])	Create a new dense matrix copying entries from raw layout data
JacobiPreconditioner.getColumnDimension()	Returns the dimension of the domain of this operator
RealVector.sparseIterator()	Create a sparse iterator over the vector which may omit some entries
ResizableDoubleArray.discardMostRecentElements(int)	Discards the i last elements of the array For example if the array contains the elements 1 2 3 4 invoking discardMostRecentElements 2 will cause the last two elements to be discarded leaving 1 2 in the array Throws illegalArgumentException if i exceeds numElements
Line.Line(Vector2D,double,double)	Build a line from a point and an angle
ArrayFieldVector.ArrayFieldVector(int,FieldElement)	Construct a vector with preset values
ArithmeticUtils.factorial(int)	Returns n Shorthand for n Factorial the product of the numbers 1 n
AbstractRealDistribution.reseedRandomGenerator(long)	Reseed the random generator used to generate samples
LimitAngle.wholeHyperplane()	Build a region covering the whole hyperplane
BigFraction.pow(BigInteger)	Returns a BigFraction whose value is thisexponent returning the result in reduced form
GeneticAlgorithm.getSelectionPolicy()	Returns the selection policy
Complex.getImaginary()	Access the imaginary part
StorelessCovariance.getCovariance(int,int)	Get the covariance for an individual element of the covariance matrix
OpenMapRealVector.OpenMapRealVector(Double[],double)	Create from an array
ConvexHull2D.createRegion()	Returns a new region that is enclosed by the convex hull
MatrixUtils.inverse(RealMatrix,double)	Computes the inverse of the given matrix
RealVector.walkInDefaultOrder(RealVectorPreservingVisitor)	Visits but does not alter all entries of this vector in default order increasing index
KMeansPlusPlusClusterer.KMeansPlusPlusClusterer(int,int,DistanceMeasure,RandomGenerator,EmptyClusterStrategy)	Build a clusterer
TournamentSelection.setArity(int)	Sets the arity number of chromosomes drawn to the tournament
ZipfDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all integers between the lower and upper bound of the support are included in the support
BaseMultiStartMultivariateOptimizer.getOptima()	Gets all the optima found during the last call to optimize
BSPTree.getMinus()	Get the tree on the minus side of the cut hyperplane
MultivariateSummaryStatistics.setGeoMeanImpl(StorelessUnivariateStatistic[])	Sets the implementation for the geometric mean
UniformIntegerDistribution.cumulativeProbability(int)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
AbstractMultipleLinearRegression.AbstractMultipleLinearRegression()	
EmpiricalDistribution.EmpiricalDistribution(RandomGenerator)	Creates a new EmpiricalDistribution with default bin count using the provided RandomGenerator as the source of random data
LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer(ConvergenceChecker)	Constructor that allows the specification of a custom convergence checker
DerivativeStructure.sinh()	Hyperbolic sine operation
SubLimitAngle.getSize()	Get the size of the instance
MillerUpdatingRegression.MillerUpdatingRegression(int,boolean,double)	This is the augmented constructor for the MillerUpdatingRegression class
MultivariateSummaryStatistics.getMean()	Returns an array whose ith entry is the mean of the ith entries of the arrays that have been added using addValue double
MultivariateVectorOptimizer.optimize()	Stores data and performs the optimization
LaplaceDistribution.inverseCumulativeProbability(double)	Description copied from class AbstractRealDistribution
BlockRealMatrix.multiplyEntry(int,int,double)	Multiplies in place the specified entry of this matrix by the specified value Row and column indices start at 0
IterationManager.fireIterationStartedEvent(IterationEvent)	Informs all registered listeners that a new iteration in the main iteration loop has been started
DerivativeStructure.abs()	absolute value
MathArrays.checkOrder(double[],OrderDirection,boolean)	Check that the given array is sorted
FieldVector3D.getNorm()	Get the L2 norm for the vector
Array2DRowFieldMatrix.preMultiply(FieldElement[])	Returns the row vector result of premultiplying this by the vector v
BlockFieldMatrix.scalarMultiply(FieldElement)	Multiply each entry by d
BicubicSplineInterpolatingFunction.isValidPoint(double,double)	Indicates whether a point is within the interpolation range
Decimal64.byteValue()	The current implementation performs casting to a byte
Subtract.value(double,double)	Compute the value for the function
SparseFieldMatrix.multiplyEntry(int,int,FieldElement)	Change an entry in the specified row and column
ContinuousOutputModel.setInterpolatedTime(double)	Set the time of the interpolated point
ArrayFieldVector.ArrayFieldVector(Field,FieldElement[],FieldElement[])	Construct a vector by appending one vector to another vector
RealFieldElement.abs()	absolute value
RealVector.getMinIndex()	Get the index of the minimum entry
EmpiricalDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
MedianOf3PivotingStrategy.MedianOf3PivotingStrategy()	
Asin.Asin()	
RegulaFalsiSolver.RegulaFalsiSolver(double)	Construct a solver
RandomGenerator.nextGaussian()	Returns the next pseudorandom Gaussian normally distributed double value with mean 0 0 and standard deviation 1 0 from this random number generator s sequence
FixedStepHandler.handleStep(double,double[],double[],boolean)	Handle the last accepted step
RandomKey.comparatorPermutation(List,Comparator)	Generates a representation of a permutation corresponding to the data sorted by comparator The data is not modified during the process
IterativeLinearSolver.solve(RealLinearOperator,RealVector,RealVector)	Returns an estimate of the solution to the linear system A x b
RealVector.combineToSelf(double,double,RealVector)	Updates this with the linear combination of this and y
Line.getAbscissa(Vector3D)	Get the abscissa of a point with respect to the line
LaplaceDistribution.density(double)	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF
IntegerDistribution.inverseCumulativeProbability(double)	Computes the quantile function of this distribution
MatrixUtils.createColumnRealMatrix(double[])	Creates a column RealMatrix using the data from the input array
AVLTree.size()	Get the number of elements of the tree
Network.getNeighbours(Neuron,Iterable)	Retrieves the neighbours of the given neuron
ExponentialDistribution.ExponentialDistribution(RandomGenerator,double)	Creates an exponential distribution
Complex.exp()	Compute the exponential function of this complex number
ZipfDistribution.getNumberOfElements()	Get the number of elements e g corpus size for the distribution
Vector3D.subtract(double,Vector)	Subtract a scaled vector from the instance
Vector2D.toArray()	Get the vector coordinates as a dimension 2 array
Dfp.pow(int)	Integer power operation
EquationsMapper.getDimension()	Get the dimension of the secondary state parameters
RealMatrix.copy()	Returns a deep copy of this
MathArrays.sortInPlace(double[],OrderDirection,)	Sort an array in place and perform the same reordering of entries on other arrays This method works the same as the other sortInPlace method but allows the order of the sort to be provided in the dir parameter
SynchronizedDescriptiveStatistics.getQuadraticMean()	Returns the quadratic mean a k a
FastMath.max(float,float)	Compute the maximum of two values
LUDecomposition.getU()	Returns the matrix U of the decomposition
RandomDataImpl.nextChiSquare(double)	Generates a random value from the ChiSquare Distribution
ExceptionContext.getMessage(Locale)	Gets the message in a specified locale
UniformRealDistribution.sample()	Generate a random value sampled from this distribution
TestUtils.oneWayAnovaFValue(Collection)	
ValueServer.reSeed(long)	Reseeds the random data generator
MillerUpdatingRegression.addObservations(double[][],double[])	Adds multiple observations to the model
RandomDataGenerator.nextLong(long,long)	Generates a uniformly distributed random long integer between lower and upper endpoints included
PolyhedronsSet.PolyhedronsSet(Collection,double)	Build a polyhedrons set from a Boundary REPresentation B rep specified by sub hyperplanes
FieldMatrix.getData()	Returns matrix entries as a two dimensional array
SparseFieldVector.mapMultiply(FieldElement)	Map a multiplication operation to each entry
BaseOptimizer.getMaxEvaluations()	Gets the maximal number of function evaluations
DSCompiler.cosh(double[],int,double[],int)	Compute hyperbolic cosine of a derivative structure
Mean.evaluate(double[],double[],int,int)	Returns the weighted arithmetic mean of the entries in the specified portion of the input array or Double NaN if the designated subarray is empty
VectorialMean.getResult()	Get the mean vector
PolyhedronsSet.rotate(Vector3D,Rotation)	Rotate the region around the specified point
PoissonDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
BlockRealMatrix.operate(double[])	Returns the result of multiplying this by the vector v
LevyDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
JacobianMatrices.registerVariationalEquations(ExpandableStatefulODE)	Register the variational equations for the Jacobians matrices to the expandable set
Rotation.applyTo(Vector3D)	Apply the rotation to a vector
RealMatrix.getData()	Returns matrix entries as a two dimensional array
PreconditionedIterativeLinearSolver.solve(RealLinearOperator,RealLinearOperator,RealVector)	Returns an estimate of the solution to the linear system A x b
DSCompiler.tanh(double[],int,double[],int)	Compute hyperbolic tangent of a derivative structure
Variance.evaluate(double[],double,int,int)	Returns the variance of the entries in the specified portion of the input array using the precomputed mean value Returns Double NaN if the designated subarray is empty
FDistribution.density(double)	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF
SynchronizedSummaryStatistics.getStandardDeviation()	Returns the standard deviation of the values that have been added
RealVectorFormat.RealVectorFormat(String,String,String)	Create an instance with custom prefix suffix and separator
MultiKMeansPlusPlusClusterer.getNumTrials()	Returns the number of trials this instance will do
GTest.gTestDataSetsComparison(long[],long[])	Returns the observed significance level or p value associated with a G Value Log Likelihood Ratio for two sample test comparing bin frequency counts in observed1 and observed2
Kurtosis.getResult()	Returns the current value of the Statistic
RealDistribution.sample(int)	Generate a random sample from the distribution
SymmLQ.solve(RealLinearOperator,RealLinearOperator,RealVector,RealVector)	Returns an estimate of the solution to the linear system A x b
MathArrays.copyOf(double[],int)	Creates a copy of the source array
OpenMapRealVector.OpenMapEntry.setValue(double)	Set the value of the entry
ExponentialDistribution.inverseCumulativeProbability(double)	Computes the quantile function of this distribution For a random variable X distributed according to this distribution the returned value is inf x in R P X x p for 0 p 1 inf x in R P X x 0 for p 0
TDistribution.TDistribution(double,double)	Create a t distribution using the given degrees of freedom and the specified inverse cumulative probability absolute accuracy
MonotoneChain.MonotoneChain(boolean)	Create a new MonotoneChain instance
MathArrays.checkNotNaN(double[])	Check that no entry of the input array is NaN
ExponentialDistribution.ExponentialDistribution(double)	Create an exponential distribution with the given mean
MathIllegalStateException.MathIllegalStateException()	Default constructor
Cluster.getPoints()	Get the points contained in the cluster
PolynomialFunction.Parametric.gradient(double,)	Compute the gradient of the function with respect to its parameters
SingularValueDecomposition.getConditionNumber()	Return the condition number of the matrix
RandomAdaptor.nextLong()	Returns the next pseudorandom uniformly distributed long value from this random number generator s sequence All 264 possible long values should be produced with approximately equal probability
Log1p.derivative()	Returns the derivative of the function
DefaultRealMatrixPreservingVisitor.visit(int,int,double)	Visit one matrix entry
Gaussian.derivative()	Returns the derivative of the function
Space.getDimension()	Get the dimension of the space
ValueServer.ValueServer()	Creates new ValueServer
LogNormalDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
Dfp.newInstance(int)	Create an instance from an int value
IllinoisSolver.IllinoisSolver(double,double,double)	Construct a solver
MathArrays.ebeAdd(double[],double[])	Creates an array whose contents will be the element by element addition of the arguments
ComplexFormat.format(Complex,StringBuffer,FieldPosition)	Formats a Complex object to produce a string
MultivariateSummaryStatistics.hashCode()	Returns hash code based on values of statistics
AbstractStepInterpolator.getGlobalPreviousTime()	Get the previous global grid point time
RealLinearOperator.isTransposable()	Returns true if this operator supports operateTranspose RealVector If true is returned operateTranspose RealVector should not throw UnsupportedOperationException The default implementation returns false
BetaDistribution.getBeta()	Access the second shape parameter beta
ValueServer.getNext()	Returns the next generated value generated according to the mode value see MODE constants
Decimal64.tanh()	Hyperbolic tangent operation
GradientFunction.value(double[])	Compute the value for the function at the given point
DerivativeStructure.acosh()	Inverse hyperbolic cosine operation
ArrayRealVector.ArrayRealVector(ArrayRealVector,ArrayRealVector)	Construct a vector by appending one vector to another vector
PolygonsSet.buildNew(BSPTree)	Build a region using the instance as a prototype
AbstractRegion.isEmpty(BSPTree)	Check if the sub tree starting at a given node is empty
ValueServer.setMu(double)	Sets the mean used in data generation Note that calling this method after computeDistribution has been called will have no effect on data generated in DIGEST MODE
Percentile.evaluate(double)	Returns the result of evaluating the statistic over the stored data
ChiSquareTest.chiSquareTest(double[],long[],double)	Performs a Chi square goodness of fit test evaluating the null hypothesis that the observed counts conform to the frequency distribution described by the expected counts with significance level alpha Returns true iff the null hypothesis can be rejected with 100 1 alpha percent confidence
MatrixUtils.createRowRealMatrix(double[])	Create a row RealMatrix using the data from the input array
FieldVector3D.angle(FieldVector3D,FieldVector3D)	Compute the angular separation between two vectors
GaussianFitter.fit(double[])	Fits a Gaussian function to the observed points
TestUtils.chiSquareTest(double[],long[],double)	
FastMath.main(String[])	Print out contents of arrays and check the length
ValueServer.setMode(int)	Sets the data generation mode
BaseAbstractUnivariateIntegrator.getMaximalIterationCount()	Get the upper limit for the number of iterations
NormalDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
UnivariateFunctionDifferentiator.differentiate(UnivariateFunction)	Create an implementation of a differential from a regular function
Dfp.sin()	Sine operation
SphericalCoordinates.SphericalCoordinates(double,double,double)	Build a spherical coordinates transformer from spherical coordinates
Kurtosis.Kurtosis()	Construct a Kurtosis
Fraction.abs()	Returns the absolute value of this fraction
DfpField.DfpField(int)	Create a factory for the specified number of radix digits
BlockRealMatrix.getRowDimension()	Returns the number of rows of this matrix
Plane.contains(Vector3D)	Check if the instance contains a point
Complex.equals(Complex,Complex,double)	Returns true if both for the real part and for the imaginary part there is no double value strictly between the arguments or the difference between them is within the range of allowed error inclusive
FieldHermiteInterpolator.addSamplePoint(FieldElement,)	Add a sample point
ArrayFieldVector.walkInDefaultOrder(FieldVectorPreservingVisitor)	Visits but does not alter all entries of this vector in default order increasing index
StatisticalMultivariateSummary.getN()	Returns the number of available values
Combinations.getN()	Gets the size of the set from which combinations are drawn
BigReal.BigReal(char[],int,int)	Build an instance from a characters representation
PolynomialFunctionNewtonForm.getNewtonCoefficients()	Returns a copy of coefficients in Newton form formula
FastMath.round(float)	Get the closest int to x
ArrayRealVector.getL1Norm()	Returns the L1 norm of the vector
LogNormalDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
ExceptionContext.getLocalizedMessage()	Gets the message in the default locale
Decimal64.add(Decimal64)	Compute this a
SparseFieldVector.SparseFieldVector(Field)	Build a 0 length vector
Array2DRowRealMatrix.createMatrix(int,int)	Create a new RealMatrix of the same type as the instance with the supplied row and column dimensions
GaussIntegratorFactory.legendre(int)	Creates a Gauss Legendre integrator of the given order
RealVector.dotProduct(RealVector)	Compute the dot product of this vector with v
FieldElement.divide(T)	Compute this a
NumberIsTooLargeException.getBoundIsAllowed()	true if the maximum is included in the allowed range
RRQRDecomposition.RRQRDecomposition(RealMatrix,double)	Calculates the QR decomposition of the given matrix
TrapezoidIntegrator.TrapezoidIntegrator(int,int)	Build a trapezoid integrator with given iteration counts
RandomDataGenerator.nextGamma(double,double)	Generates a random value from the Gamma Distribution
PolynomialFunctionLagrangeForm.getInterpolatingValues()	Returns a copy of the interpolating values array
Sphere1D.getInstance()	Get the unique instance
Fraction.getField()	Get the Field to which the instance belongs
AbstractIntegrator.getCurrentStepStart()	Get the current value of the step start time ti
ExpandableStatefulODE.setCompleteState(double[])	Set the complete current state
Incrementor.getCount()	Gets the current count
BicubicSplineInterpolator.interpolate(double[],double[],double[][])	Compute an interpolating function for the dataset
LeastSquaresFactory.create(MultivariateJacobianFunction,RealVector,RealVector,RealMatrix,ConvergenceChecker,int,int)	Create a LeastSquaresProblem from the given elements
RealVectorChangingVisitor.visit(int,double)	Visit one entry of the vector
FieldVector3D.distance(FieldVector3D)	Compute the distance between the instance and another vector according to the L2 norm
NelderMeadSimplex.NelderMeadSimplex(int,double)	Build a Nelder Mead simplex with default coefficients
DefaultProcessModel.DefaultProcessModel(RealMatrix,RealMatrix,RealMatrix,RealVector,RealMatrix)	Create a new ProcessModel taking double arrays as input parameters
Vector1DFormat.getInstance()	Returns the default 1D vector format for the current locale
ProperBigFractionFormat.setWholeFormat(NumberFormat)	Modify the whole format
RandomDataGenerator.nextPoisson(double)	Generates a random value from the Poisson distribution with the given mean
RandomDataImpl.nextCauchy(double,double)	Generates a random value from the Cauchy Distribution
FieldVector3D.dotProduct(FieldVector3D)	Compute the dot product of the instance and another vector
SparseGradient.expm1()	Exponential minus 1
Segment.distance(Vector2D)	Calculates the shortest distance from a point to this line segment
Well1024a.Well1024a(int[])	Creates a new random number generator using an int array seed
Region.contains(Region)	Check if the instance entirely contains another region
AVLTree.Node.getElement()	Get the contained element
ObjectiveFunctionGradient.getObjectiveFunctionGradient()	Gets the gradient of the function to be optimized
SparseFieldMatrix.SparseFieldMatrix(FieldMatrix)	Generic copy constructor
ArithmeticUtils.binomialCoefficientLog(int,int)	Returns the natural log of the Binomial Coefficient n choose k the number of k element subsets that can be selected from an n element set
FieldRotation.applyInverseTo(FieldRotation)	Apply the inverse of the instance to another rotation
DescriptiveStatistics.getPercentileImpl()	Returns the currently configured percentile implementation
FastCosineTransformer.transform(double[],TransformType)	Returns the forward inverse transform of the specified real data set
Decimal64.getField()	Get the Field to which the instance belongs
ISAACRandom.ISAACRandom()	Creates a new ISAAC random number generator
ArrayRealVector.outerProduct(RealVector)	Compute the outer product
Variance.clear()	Clears the internal state of the Statistic
ArithmeticUtils.addAndCheck(long,long)	Add two long integers checking for overflow
BigFraction.divide(int)	Divide the value of this fraction by the passed int ie this 1 i returning the result in reduced form
FDistribution.FDistribution(RandomGenerator,double,double)	Creates an F distribution
Line.translateToPoint(Vector2D)	Translate the line to force it passing by a point
BoundaryAttribute.getSplitters()	Get the sub hyperplanes that were used to split the boundary part
BigFraction.getNumerator()	Access the numerator as a BigInteger
Quaternion.hashCode()	
AbstractRealMatrix.setColumnVector(int,RealVector)	Sets the specified column of this matrix to the entries of the specified vector Column indices start at 0
IntervalsSet.IntervalsSet(Collection)	Build an intervals set from a Boundary REPresentation B rep
OpenIntToFieldHashMap.containsKey(int)	Check if a value is associated with a key
Cluster.addPoint(Clusterable)	Add a point to this cluster
Plane.Plane(Plane)	Copy constructor
SumOfLogs.getResult()	Returns the current value of the Statistic
BigFraction.BigFraction(double)	Create a fraction given the double value
FastMath.addExact(int,int)	Add two numbers detecting overflows
Decimal64.sqrt()	Square root
ExceptionContext.getKeys()	Gets all the keys stored in the exception
MultivariateSummaryStatistics.getSumLog()	Returns an array whose ith entry is the sum of logs of the ith entries of the arrays that have been added using addValue double
OpenMapRealMatrix.subtract(RealMatrix)	Returns this minus m
TTest.TTest()	
BaseAbstractUnivariateSolver.solve(int,FUNC,double,double)	Solve for a zero root in the given interval
LeastSquaresProblem.Evaluation.getResiduals()	Get the weighted residuals The residual is the difference between the observed target values and the model objective function value There is one residual for each element of the vector valued function The raw residuals are then multiplied by the square root of the weight matrix
FastHadamardTransformer.FastHadamardTransformer()	
RegulaFalsiSolver.RegulaFalsiSolver()	Construct a solver with default accuracy 1e 6
ArrayRealVector.ebeDivide(RealVector)	Element by element division
Weight.getWeight()	Gets the initial guess
AbstractRealMatrix.walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)	Visit and possibly change some matrix entries in column order
ArcsSet.ArcsSet(double,double,double)	Build an arcs set corresponding to a single arc
ArithmeticUtils.pow(BigInteger,long)	Raise a BigInteger to a long power
FieldMatrix.multiplyEntry(int,int,FieldElement)	Change an entry in the specified row and column
BinomialDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
MathUtils.hash(double)	Returns an integer hash code representing the given double value
Frequency.getCumPct(Comparable)	Returns the cumulative percentage of values less than or equal to v as a proportion between 0 and 1
LevyDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
Vector1D.hashCode()	Get a hashCode for the 1D vector
LevenbergMarquardtOptimizer.withInitialStepBoundFactor(double)	a new instance
SingularValueDecomposition.getV()	Returns the matrix V of the decomposition
AbstractFieldMatrix.copy()	Make a deep copy of this
Cluster.addPoint(Clusterable>)	Add a point to this cluster
PointValuePair.getPoint()	Gets the point
GLSMultipleLinearRegression.newSampleData(double[],double[][],double[][])	Replace sample data overriding any previous sample
PolygonsSet.PolygonsSet(double)	Build a polygons set representing the whole plane
BlockFieldMatrix.multiply(BlockFieldMatrix)	Returns the result of postmultiplying this by m
ProperBigFractionFormat.getWholeFormat()	Access the whole format
SparseGradient.copySign(SparseGradient)	Returns the instance with the sign of the argument
Sinc.value(double)	Compute the value of the function
NoBracketingException.getFLo()	Get the value at the lower end of the interval
Decimal64.pow(int)	Integer power operation
Ulp.Ulp()	
Skewness.evaluate(double[],int,int)	Returns the Skewness of the entries in the specifed portion of the input array
FieldRotation.applyInverseTo(double[],RealFieldElement[])	Apply the inverse of the rotation to a vector stored in an array
FastHadamardTransformer.transform(UnivariateFunction,double,double,int,TransformType)	Returns the forward inverse transform of the specified real function sampled on the specified interval
Pair.getKey()	Get the key
FieldVector3D.distance1(FieldVector3D,FieldVector3D)	Compute the distance between two vectors according to the L1 norm
StatisticalSummaryValues.getStandardDeviation()	Description copied from interface StatisticalSummary
AbstractRealMatrix.copy()	Returns a deep copy of this
HarmonicOscillator.Parametric.HarmonicOscillator.Parametric()	
MultivariateSummaryStatistics.addValue(double[])	Add an n tuple to the data
LaplaceDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
Vector3D.getY()	Get the ordinate of the vector
SimpsonIntegrator.SimpsonIntegrator(int,int)	Build a Simpson integrator with given iteration counts
ContinuousOutputModel.getFinalTime()	Get the final integration time
Hyperplane.copySelf()	Copy the instance
SphericalPolygonsSet.getBoundaryLoops()	Get the boundary loops of the polygon
FastMath.floor(double)	Get the largest whole number smaller than x
RegressionResults.getN()	Returns the number of observations added to the regression model
AbstractFieldMatrix.walkInColumnOrder(FieldMatrixPreservingVisitor)	Visit but don t change all matrix entries in column order
FDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
Vector3D.add(double,Vector)	Add a scaled vector to the instance
EventState.getEventTime()	Get the occurrence time of the event triggered in the current step
Plane.getOffset(Plane)	Get the offset oriented distance of a parallel plane
IllinoisSolver.IllinoisSolver(double,double)	Construct a solver
SparseFieldMatrix.SparseFieldMatrix(SparseFieldMatrix)	Copy constructor
EmpiricalDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
ConstantRealDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
AbstractIntegrator.getCurrentSignedStepsize()	Get the current signed value of the integration stepsize
StandardDeviation.setBiasCorrected(boolean)	
BaseOptimizer.getMaxIterations()	Gets the maximal number of iterations
Rotation.getMatrix()	Get the 3X3 matrix corresponding to the instance
DummyLocalizable.getLocalizedString(Locale)	Gets the localized string
AbstractIntegrator.clearEventHandlers()	Remove all the event handlers that have been added to the integrator
BaseAbstractMultivariateVectorOptimizer.getMaxEvaluations()	Get the maximal number of function evaluations
Acos.derivative()	Returns the derivative of the function
SubHyperplane.isEmpty()	Check if the instance is empty
EmpiricalDistribution.getNextValue()	Generates a random value from this distribution
SecondOrderDifferentialEquations.computeSecondDerivatives(double,double[],double[],double[])	Get the current time derivative of the state vector
TestUtils.tTest(StatisticalSummary,StatisticalSummary)	
QRDecomposition.getQT()	Returns the transpose of the matrix Q of the decomposition
Kurtosis.Kurtosis(Kurtosis)	Copy constructor creates a new Kurtosis identical to the original
MatrixUtils.createRowFieldMatrix(T[])	Create a row FieldMatrix using the data from the input array
PolynomialCurveFitter.create(int)	Creates a default curve fitter
SimpleRegression.addData(double[][])	Adds the observations represented by the elements in data
BaseAbstractMultivariateOptimizer.optimize(int,FUNC,GoalType,)	Optimize an objective function
SolutionCallback.SolutionCallback()	
LeastSquaresBuilder.checkerPair(ConvergenceChecker)	Configure the convergence checker
EmbeddedRungeKuttaIntegrator.getSafety()	Get the safety factor for stepsize control
ConvexHull2D.ConvexHull2D(Vector2D[],double)	Simple constructor
FieldMatrix.scalarAdd(FieldElement)	Increment each entry of this matrix
Vector3D.negate()	Get the opposite of the instance
StepHandler.handleStep(StepInterpolator,boolean)	Handle the last accepted step
GammaDistribution.GammaDistribution(double,double,double)	Creates a new gamma distribution with specified values of the shape and scale parameters
GaussNewtonOptimizer.GaussNewtonOptimizer(Decomposition)	Create a Gauss Newton optimizer that uses the given decomposition algorithm to solve the normal equations
Decimal64.multiply(double)	operator
BaseAbstractUnivariateSolver.getFunctionValueAccuracy()	Get the function value accuracy of the solver If v is a value returned by the solver for a function f then by contract f v should be less than or equal to the function value accuracy configured for the solver
LaplaceDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
RealMatrix.addToEntry(int,int,double)	Adds in place the specified value to the specified entry of this matrix Row and column indices start at 0
Plane.Plane(Vector3D,Vector3D)	Build a plane from a point and a normal
Vector1DFormat.Vector1DFormat(String,String)	Create an instance with custom prefix suffix and separator
DerivativeStructure.asinh()	Inverse hyperbolic sine operation
DfpMath.pow(Dfp,Dfp)	Computes x to the y power
MultiDimensionMismatchException.MultiDimensionMismatchException(Integer[],Integer[])	Construct an exception from the mismatched dimensions
PSquarePercentile.PSquareMarkers.clone()	A clone function to clone the current instance It s created as an interface method as well for convenience though Cloneable is just a marker interface
AbstractRealMatrix.operate(RealVector)	Returns the result of multiplying this by the vector x
BlockFieldMatrix.getColumn(int)	Get the entries in column number col as an array
EnumeratedIntegerDistribution.cumulativeProbability(int)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
MathUtils.equals(double,double)	Returns true if the values are equal according to semantics of Double equals Object
SphericalPolygonsSet.SphericalPolygonsSet(BSPTree,double)	Build a polygons set from a BSP tree
Vector1D.subtract(double,Vector)	Subtract a scaled vector from the instance
Vector3DFormat.format(Vector,StringBuffer,FieldPosition)	Formats a Vector3D object to produce a string
OnePointCrossover.OnePointCrossover()	
DerivativeStructure.cosh()	Hyperbolic cosine operation
CardanEulerSingularityException.CardanEulerSingularityException(boolean)	Simple constructor
FieldMatrix.getRowMatrix(int)	Get the entries in row number row as a row matrix
FieldMatrix.addToEntry(int,int,FieldElement)	Change an entry in the specified row and column
MaxIter.unlimited()	Factory method that creates instance of this class that represents a virtually unlimited number of iterations
SimplexSolver.doOptimize()	Performs the bulk of the optimization algorithm
UnivariateIntegrator.getMinimalIterationCount()	Get the min limit for the number of iterations
AbstractFormat.format(long,StringBuffer,FieldPosition)	Formats a long value as a fraction and appends the result to a StringBuffer
ComplexFormat.getInstance(Locale)	Returns the default complex format for the given locale
GeneticAlgorithm.getRandomGenerator()	Returns the static random generator
PowellOptimizer.PowellOptimizer(double,double,double,double,ConvergenceChecker)	This constructor allows to specify a user defined convergence checker in addition to the parameters that control the default convergence checking procedure and the line search tolerances
BicubicInterpolatingFunction.BicubicInterpolatingFunction(double[],double[],double[][],double[][],double[][],double[][])	
BitsStreamGenerator.clear()	Clears the cache used by the default implementation of nextGaussian
MatrixUtils.checkMatrixIndex(AnyMatrix,int,int)	Check if matrix indices are valid
EventFilter.resetState(double,double[])	Reset the state prior to continue the integration
OpenMapRealVector.ebeMultiply(RealVector)	Element by element multiplication
BlockFieldMatrix.getEntry(int,int)	Returns the entry in the specified row and column
KthSelector.KthSelector()	Constructor with default median of 3 pivoting strategy
Frequency.merge(Collection)	Merge a Collection of Frequency objects into this instance
CMAESOptimizer.CMAESOptimizer(int,double[],int,double,boolean,int,int,RandomGenerator,boolean,ConvergenceChecker)	
OpenMapRealVector.mapAdd(double)	Add a value to each entry
PolynomialFitter.PolynomialFitter(int,DifferentiableMultivariateVectorOptimizer)	Simple constructor
Arc.getBarycenter()	Get the barycenter of the arc
OpenMapRealVector.isNaN()	Check whether any coordinate of this vector is NaN
HarmonicFitter.HarmonicFitter(MultivariateVectorOptimizer)	Simple constructor
DoublePoint.getPoint()	Gets the n dimensional point
Vector2D.isNaN()	Returns true if any coordinate of this point is NaN false otherwise
UnivariateInterpolator.interpolate(double[],double[])	Compute an interpolating function for the dataset
GammaDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
ParetoDistribution.logDensity(double)	Returns the natural logarithm of the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF If the derivative does not exist at x then an appropriate replacement should be returned e g Double POSITIVE INFINITY Double NaN or the limit inferior or limit superior of the difference quotient Note that due to the floating point precision and under overflow issues this method will for some distributions be more precise and faster than computing the logarithm of RealDistribution density double The default implementation simply computes the logarithm of density x
DerivativeStructure.equals(Object)	Test for the equality of two derivative structures
RealFieldElement.expm1()	Exponential minus 1
FeatureInitializerFactory.uniform(RandomGenerator,double,double)	Uniform sampling of the given range
DSCompiler.asin(double[],int,double[],int)	Compute arc sine of a derivative structure
BaseOptimizer.optimize()	Performs the optimization
AdaptiveStepsizeIntegrator.setInitialStepSize(double)	Set the initial step size
FastMath.atan2(double,double)	Two arguments arctangent function
TestUtils.pairedT(double[],double[])	
LeastSquaresBuilder.maxIterations(int)	Configure the max iterations
MultivariateSummaryStatistics.getSumsqImpl()	Returns the currently configured sum of squares implementation
FirstOrderDifferentialEquations.getDimension()	Get the dimension of the problem
LaplaceDistribution.LaplaceDistribution(RandomGenerator,double,double)	Build a new instance
LogisticDistribution.getLocation()	Access the location parameter mu
Quaternion.getVectorPart()	Gets the three components of the vector part of the quaternion
CMAESOptimizer.CMAESOptimizer(int,double[],int,double,boolean,int,int,RandomGenerator,boolean)	
VectorialMean.hashCode()	
RealFieldElement.getReal()	Get the real value of the number
RandomAdaptor.nextInt(int)	Returns a pseudorandom uniformly distributed int value between 0 inclusive and the specified value exclusive drawn from this random number generator s sequence
Quaternion.dotProduct(Quaternion,Quaternion)	Computes the dot product of two quaternions
OpenMapRealMatrix.multiply(RealMatrix)	Returns the result of postmultiplying this by m
DerivativeStructure.atan2(DerivativeStructure,DerivativeStructure)	Two arguments arc tangent operation
NeuronString.getSize()	Gets the number of neurons
FastMath.floorMod(int,int)	Finds r such that a q b r with 0 r b if b 0 and b r 0 if b 0
FastMath.min(float,float)	Compute the minimum of two values
DerivativeStructure.linearCombination(double,DerivativeStructure,double,DerivativeStructure,double,DerivativeStructure)	Compute a linear combination
DescriptiveStatistics.copy()	Returns a copy of this DescriptiveStatistics instance with the same internal state
ExpandableStatefulODE.getTotalDimension()	Return the dimension of the complete set of equations
PolynomialFunctionNewtonForm.getCenters()	Returns a copy of the centers array
PegasusSolver.PegasusSolver()	Construct a solver with default accuracy 1e 6
AbstractRegion.isFull(BSPTree)	Check if the sub tree starting at a given node covers the full space
RandomDataGenerator.nextGaussian(double,double)	Generates a random value from the Normal or Gaussian distribution with specified mean and standard deviation
Space.getSubSpace()	Get the n 1 dimension subspace of this space
FieldRotation.distance(FieldRotation,FieldRotation)	Compute the distance between two rotations
MathArrays.ebeDivide(double[],double[])	Creates an array whose contents will be the element by element division of the first argument by the second
FastMath.floorMod(long,long)	Finds r such that a q b r with 0 r b if b 0 and b r 0 if b 0
NormalDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
ArcsSet.asList()	Build an ordered list of arcs representing the instance
Dfp.toDouble()	Convert the instance into a double
Vector3DFormat.Vector3DFormat(NumberFormat)	Create an instance with a custom number format for components
UniformIntegerDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
RealMatrix.walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)	Visit and possibly change some matrix entries in column order
LeastSquaresProblem.getParameterSize()	Get the number of parameters columns in the Jacobian in this problem
DefaultProcessModel.getProcessNoise()	Returns the process noise matrix This method is called by the KalmanFilter every prediction step so implementations of this interface may return a modified process noise depending on the current iteration step
CompositeFormat.getDefaultNumberFormat(Locale)	Create a default number format The default number format is based on NumberFormat getInstance java util Locale with the only customizing that the maximum number of fraction digits is set to 10
DefaultMeasurementModel.getMeasurementNoise()	Returns the measurement noise matrix This method is called by the KalmanFilter every correction step so implementations of this interface may return a modified measurement noise depending on the current iteration step
AbstractIntegrator.addEventHandler(EventHandler,double,double,int)	Add an event handler to the integrator
Decimal64.sinh()	Hyperbolic sine operation
Frequency.incrementValue(int,long)	Increments the frequency count for v
Complex.pow(double)	Returns of value of this complex number raised to the power of x
RealMatrix.walkInRowOrder(RealMatrixPreservingVisitor)	Visit but don t change all matrix entries in row order
RealVectorFormat.getSeparator()	Get the format separator between components
SparseGradient.hashCode()	Get a hashCode for the derivative structure
DescriptiveStatistics.copy(DescriptiveStatistics,DescriptiveStatistics)	Copies source to dest
CycleCrossover.CycleCrossover(boolean)	Creates a new CycleCrossover policy using the given randomStart behavior
ContinuousOutputModel.ContinuousOutputModel()	Simple constructor
S1Point.S1Point(double)	Simple constructor
UniformCrossover.getRatio()	Returns the mixing ratio used by this CrossoverPolicy
AbstractUnivariateStatistic.setData(double[],int,int)	Set the data array The input array is copied not referenced
DerivativeStructure.log10()	Base 10 logarithm
StandardDeviation.copy(StandardDeviation,StandardDeviation)	Copies source to dest
StorelessUnivariateStatistic.copy()	Returns a copy of the statistic with the same internal state
BaseUnivariateSolver.getMaxEvaluations()	Get the maximum number of function evaluations
BisectionSolver.BisectionSolver(double)	Construct a solver
Percentile.evaluate(double[],double)	Returns an estimate of the pth percentile of the values in the values array
UnivariateMultiStartOptimizer.getConvergenceChecker()	Get the convergence checker
DerivativeStructure.DerivativeStructure(int,int)	Build an instance with all values and derivatives set to 0
FieldMatrix.walkInOptimizedOrder(FieldMatrixChangingVisitor)	Visit and possibly change all matrix entries using the fastest possible order
Variance.evaluate(double[],double[])	Returns the weighted variance of the entries in the the input array
NaturalRanking.rank(double[])	Rank data using the natural ordering on Doubles with NaN values handled according to nanStrategy and ties resolved using tiesStrategy
BigFraction.getNumeratorAsLong()	Access the numerator as a long
DescriptiveStatistics.getQuadraticMean()	Returns the quadratic mean a k a
Cluster.Cluster(Clusterable)	Build a cluster centered at a specified point
Plane.getOrigin()	Get the origin point of the plane frame
FastMath.atanh(double)	Compute the inverse hyperbolic tangent of a number
DfpField.getLn10()	Get the constant ln 10
NaturalRanking.NaturalRanking(NaNStrategy)	Create a NaturalRanking with the given NaNStrategy
PoissonDistribution.PoissonDistribution(double)	Creates a new Poisson distribution with specified mean
ExponentialDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
LogNormalDistribution.sample()	Generate a random value sampled from this distribution
SynchronizedDescriptiveStatistics.clear()	Resets all statistics and storage
Sinh.value(double)	Compute the value of the function
BaseMultivariateMultiStartOptimizer.getEvaluations()	Get the number of evaluations of the objective function
RandomAdaptor.RandomAdaptor(RandomGenerator)	Construct a RandomAdaptor wrapping the supplied RandomGenerator
FieldMatrix.getField()	Get the type of field elements of the matrix
EmbeddedRungeKuttaIntegrator.getOrder()	Get the order of the method
EnumeratedDistribution.EnumeratedDistribution(List)	Create an enumerated distribution using the given probability mass function enumeration
Complex.toString()	
OpenMapRealVector.copy()	Returns a deep copy of this vector
AbstractRegion.getBoundarySize()	Get the size of the boundary
Array2DRowFieldMatrix.walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)	Visit and possibly change some matrix entries in column order
AdamsMoultonIntegrator.integrate(ExpandableStatefulODE,double)	Integrate a set of differential equations up to the given time
SparseGradient.multiply(SparseGradient)	Compute this a
Exp.Exp()	
Vector.add(Vector)	Add a vector to the instance
Sin.value(double)	Compute the value of the function
RealMatrix.getFrobeniusNorm()	Returns the Frobenius norm of the matrix
RandomGenerator.setSeed(int[])	Sets the seed of the underlying random number generator using an int array seed
Incrementor.MaxCountExceededCallback.trigger(int)	Function called when the maximal count has been reached
Circle.revertSelf()	Revert the instance
BaseAbstractUnivariateOptimizer.getEvaluations()	Get the number of evaluations of the objective function
RealVector.RealVector()	
Dfp.getRadixDigits()	Get the number of radix digits of the instance
MathArrays.linearCombination(double,double,double,double,double,double)	Compute a linear combination accurately
SynchronizedRandomGenerator.nextLong()	Returns the next pseudorandom uniformly distributed long value from this random number generator s sequence All 264 possible long values should be produced with approximately equal probability
Minus.value(DerivativeStructure)	Simple mathematical function
MultiKMeansPlusPlusClusterer.getClusterer()	Returns the embedded k means clusterer used by this instance
RandomData.nextSecureLong(long,long)	Generates a uniformly distributed random long integer between lower and upper endpoints included from a secure random sequence
BaseMultivariateVectorMultiStartOptimizer.getMaxEvaluations()	Get the maximal number of function evaluations
Covariance.getCovarianceMatrix()	Returns the covariance matrix
ArrayFieldVector.mapSubtract(FieldElement)	Map a subtraction operation to each entry
Network.deleteNeuron(Neuron)	Deletes a neuron
FieldVector3D.distanceInf(Vector3D,FieldVector3D)	Compute the distance between two vectors according to the L norm
PSquarePercentile.getN()	Returns the number of values that have been added
RealFieldElement.asinh()	Inverse hyperbolic sine operation
RealVectorFormat.getInstance(Locale)	Returns the default real vector format for the given locale
PowellOptimizer.PowellOptimizer(double,double)	The parameters control the default convergence checking procedure
ArrayFieldVector.getField()	Get the type of field elements of the vector
Vector2D.getNorm()	Get the L2 norm for the vector
AbstractRealMatrix.multiplyEntry(int,int,double)	Multiplies in place the specified entry of this matrix by the specified value Row and column indices start at 0
SparseGradient.log()	Natural logarithm
Vector1D.distance1(Vector)	Compute the distance between the instance and another vector according to the L1 norm
NakagamiDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
Dfp.getTwo()	Get the constant 2
DerivativeStructure.tanh()	Hyperbolic tangent operation
AbstractFieldMatrix.getRowVector(int)	Get the entries in row number row as a vector
AbstractIntegrator.clearStepHandlers()	Remove all the step handlers that have been added to the integrator
AbstractStorelessUnivariateStatistic.clear()	Clears the internal state of the Statistic
Line.getOffset(Vector)	Get the offset oriented distance of a vector
DiagonalMatrix.DiagonalMatrix(double[])	Creates a matrix using the input array as the underlying data
ValueAndJacobianFunction.computeJacobian(double[])	Compute the Jacobian
HarmonicFitter.HarmonicFitter(DifferentiableMultivariateVectorOptimizer)	Simple constructor
SupportBallGenerator.ballOnSupport(List)	Create a ball whose boundary lies on prescribed support points
BigFraction.getNumeratorAsInt()	Access the numerator as a int
AbstractFieldMatrix.power(int)	Returns the result multiplying this with itself p times
IterativeLegendreGaussIntegrator.IterativeLegendreGaussIntegrator(int,double,double)	Builds an integrator with given accuracies
RandomAdaptor.setSeed(int[])	Sets the seed of the underlying random number generator using an int array seed
DiagonalMatrix.multiplyEntry(int,int,double)	Multiplies in place the specified entry of this matrix by the specified value Row and column indices start at 0
AbstractLeastSquaresOptimizer.optimize(int,MultivariateDifferentiableVectorFunction,double[],double[],double[])	Optimize an objective function
LogisticDistribution.getScale()	Access the scale parameter s
BaseUnivariateSolver.solve(int,FUNC,double,double)	Solve for a zero root in the given interval
SynchronizedDescriptiveStatistics.getValues()	Returns the current set of values in an array of double primitives
RealMatrix.walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)	Visit but don t change some matrix entries in column order
Frequency.addValue(Comparable)	Adds 1 to the frequency count for v
SparseGradient.reciprocal()	Returns the multiplicative inverse of this element
FastMath.sqrt(double)	Compute the square root of a number
NonSquareOperatorException.NonSquareOperatorException(int,int)	Construct an exception from the mismatched dimensions
RegulaFalsiSolver.RegulaFalsiSolver(double,double,double)	Construct a solver
StorelessUnivariateStatistic.increment(double)	Updates the internal state of the statistic to reflect the addition of the new value
DerivativeStructure.divide(double)	operator
UnivariateMultiStartOptimizer.getMaxEvaluations()	Get the maximal number of function evaluations
EventState.EventState(EventHandler,double,double,int,UnivariateSolver)	Simple constructor
Sin.derivative()	Returns the derivative of the function
SynchronizedMultivariateSummaryStatistics.getStandardDeviation()	Returns an array whose ith entry is the standard deviation of the ith entries of the arrays that have been added using MultivariateSummaryStatistics addValue double
EigenDecomposition.getEigenvector(int)	Gets a copy of the ith eigenvector of the original matrix
FieldVector3D.FieldVector3D(double,FieldVector3D)	Multiplicative constructor Build a vector from another one and a scale factor
SparseGradient.asin()	Arc sine operation
AbstractStepInterpolator.readExternal(ObjectInput)	
LaguerreSolver.solveComplex(double[],double,int)	Find a complex root for the polynomial with the given coefficients starting from the given initial value
FastMath.ulp(float)	Compute least significant bit Unit in Last Position for a number
ArrayRealVector.add(RealVector)	Compute the sum of this vector and v
CanberraDistance.compute(double[],double[])	Compute the distance between two n dimensional vectors
RealMatrix.setRowMatrix(int,RealMatrix)	Sets the specified row of this matrix to the entries of the specified row matrix Row indices start at 0
Gamma.regularizedGammaP(double,double)	Returns the regularized gamma function P a x
ArrayFieldVector.ArrayFieldVector(Field,FieldElement[],boolean)	Create a new ArrayFieldVector using the input array as the underlying data array
DfpField.setRoundingMode(RoundingMode)	Set the rounding mode
SparseFieldMatrix.getRowDimension()	Returns the number of rows in the matrix
OpenIntToFieldHashMap.size()	Get the number of elements stored in the map
NelderMeadSimplex.NelderMeadSimplex(double[][])	Build a Nelder Mead simplex with default coefficients
AbstractRealDistribution.probability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the probability mass function PMF for the distribution
SubLine.SubLine(Vector2D,Vector2D)	Create a sub line from two endpoints
AbstractIntegrator.addStepHandler(StepHandler)	Add a step handler to this integrator
BaseAbstractUnivariateOptimizer.getGoalType()	
MathArrays.verifyValues(double[],int,int,boolean)	This method is used to verify that the input parameters designate a subarray of positive length
RandomDataImpl.nextInt(int,int)	Generates a uniformly distributed random integer between lower and upper endpoints included
Embedding.toSubSpace(Point)	Transform a space point into a sub space point
BaseAbstractUnivariateSolver.getMaxEvaluations()	Get the maximum number of function evaluations
MicrosphereInterpolatingFunction.value(double[])	Description copied from interface MultivariateFunction
NonLinearConjugateGradientOptimizer.NonLinearConjugateGradientOptimizer(ConjugateGradientFormula,ConvergenceChecker,UnivariateSolver,Preconditioner)	
DefaultFieldMatrixChangingVisitor.visit(int,int,FieldElement)	Visit one matrix entry
Vector3D.scalarMultiply(double)	Multiply the instance by a scalar
OrderedTuple.equals(Object)	
AbstractFieldMatrix.hashCode()	Computes a hashcode for the matrix
RealMatrix.multiply(RealMatrix)	Returns the result of postmultiplying this by m
FractionFormat.FractionFormat(NumberFormat,NumberFormat)	Create an improper formatting instance with a custom number format for the numerator and a custom number format for the denominator
ExponentialDecayFunction.value(long)	Computes a e numCall b
RealDistribution.probability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the probability mass function PMF for the distribution
FieldRotation.FieldRotation(FieldVector3D,FieldVector3D)	Build one of the rotations that transform one vector into another one
LeastSquaresBuilder.build()	Construct a LeastSquaresProblem from the data in this builder
PSquarePercentile.PSquareMarkers.height(int)	Returns the marker height or percentile of a given marker index
SimpleCurveFitter.withMaxIterations(int)	Configure the maximum number of iterations
AbstractRandomGenerator.nextBoolean()	Returns the next pseudorandom uniformly distributed boolean value from this random number generator s sequence
SphereGenerator.ballOnSupport(List)	Create a ball whose boundary lies on prescribed support points
FastMath.log(double,double)	Computes the logarithm in a given base
ConjugateGradient.solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector)	Returns an estimate of the solution to the linear system A x b The solution is computed in place initial guess is modified
RealVector.set(double)	Set all elements to a single value
LevyDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
ArithmeticUtils.pow(int,int)	Raise an int to an int power
RealFieldElement.linearCombination(T[],T[])	Compute a linear combination
LinearOptimizer.getMaxIterations()	Get the maximal number of iterations of the algorithm
ListPopulation.addChromosomes(Collection)	Add a Collection of chromosomes to this Population
BaseMultivariateOptimizer.getStartPoint()	Gets the initial guess
BlockFieldMatrix.add(BlockFieldMatrix)	Compute the sum of this and m
Rotation.getAngles(RotationOrder)	Get the Cardan or Euler angles corresponding to the instance
Complex.getReal()	Access the real part
StatUtils.percentile(double[],double)	Returns an estimate of the pth percentile of the values in the values array
AbstractFieldMatrix.isSquare()	Is this a square matrix
FuzzyKMeansClusterer.getMaxIterations()	Returns the maximum number of iterations this instance will use
HypergeometricDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
AbstractFieldMatrix.operate(FieldVector)	Returns the result of multiplying this by the vector v
LevenbergMarquardtOptimizer.withOrthoTolerance(double)	Modifies the given parameter
TestUtils.gTest(double[],long[],double)	
BicubicInterpolatingFunction.isValidPoint(double,double)	Indicates whether a point is within the interpolation range
RealFieldElement.rootN(int)	Nth root
Expm1.value(double)	Compute the value of the function
Complex.valueOf(double)	Create a complex number given only the real part
Array2DRowRealMatrix.setSubMatrix(double[][],int,int)	Replace the submatrix starting at row column using data in the input subMatrix array Indexes are 0 based
MaxCountExceededException.MaxCountExceededException(Number)	Construct the exception
Vector.scalarMultiply(double)	Multiply the instance by a scalar
ArithmeticUtils.mulAndCheck(long,long)	Multiply two long integers checking for overflow
ArrayRealVector.append(ArrayRealVector)	Construct a vector by appending a vector to this vector
StatisticalMultivariateSummary.getStandardDeviation()	Returns an array whose ith entry is the standard deviation of the ith entries of the arrays that correspond to each multivariate sample
KMeansPlusPlusClusterer.getEmptyClusterStrategy()	Returns the KMeansPlusPlusClusterer EmptyClusterStrategy used by this instance
ComplexFormat.getImaginaryCharacter()	Access the imaginaryCharacter
RealVector.combine(double,double,RealVector)	Returns a new vector representing a this b y the linear combination of this and y
S1Point.equals(Object)	Test for the equality of two points on the 2 sphere
IntervalsSet.IntervalsSet(double,double,double)	Build an intervals set corresponding to a single interval
VectorialCovariance.increment(double[])	Add a new vector to the sample
AdaptiveStepsizeIntegrator.getMaxStep()	Get the maximal step
ComplexFormat.ComplexFormat(NumberFormat)	Create an instance with a custom number format for both real and imaginary parts
FieldMatrix.setColumnMatrix(int,FieldMatrix)	Set the entries in column number column as a column matrix
RealVector.getSubVector(int,int)	Get a subvector from consecutive elements
RealLinearOperator.operate(RealVector)	Returns the result of multiplying this by the vector x
DifferentiableMultivariateFunction.partialDerivative(int)	Returns the partial derivative of the function with respect to a point coordinate
FieldDecompositionSolver.isNonSingular()	Check if the decomposed matrix is non singular
ContinuousOutputModel.getInterpolatedDerivatives()	Get the derivatives of the state vector of the interpolated point
Array2DRowRealMatrix.Array2DRowRealMatrix(double[][],boolean)	Create a new RealMatrix using the input array as the underlying data array
Abs.value(double)	Compute the value of the function
CycleCrossover.crossover(Chromosome,Chromosome)	Perform a crossover operation on the given chromosomes
DerivativeStructure.compose()	Compute composition of the instance by a univariate function
ArrayFieldVector.ArrayFieldVector(FieldElement[])	Construct a vector from an array copying the input array
RandomGenerator.nextFloat()	Returns the next pseudorandom uniformly distributed float value between 0 0 and 1 0 from this random number generator s sequence
ChebyshevDistance.ChebyshevDistance()	
MultidimensionalCounter.getDimension()	Get the number of dimensions of the multidimensional counter
DSCompiler.exp(double[],int,double[],int)	Compute exponential of a derivative structure
Incrementor.getMaximalCount()	Gets the upper limit of the counter
ObjectiveFunction.getObjectiveFunction()	Gets the function to be optimized
IntervalsSet.getInf()	Get the lowest value belonging to the instance
DefaultProcessModel.getInitialStateEstimate()	Returns the initial state estimation vector
KalmanFilter.getErrorCovariance()	Returns the current error covariance matrix
FunctionUtils.fix2ndArgument(BivariateFunction,double)	Creates a unary function by fixing the second argument of a binary function
SubPlane.SubPlane(Hyperplane,Region)	Simple constructor
RandomDataGenerator.nextChiSquare(double)	Generates a random value from the ChiSquare Distribution
SparseGradient.atan()	Arc tangent operation
Vector2DFormat.parse(String)	Parses a string to produce a Vector object
ArrayRealVector.mapMultiplyToSelf(double)	Multiply each entry
MillerUpdatingRegression.getN()	Gets the number of observations added to the regression model
IterativeLinearSolver.IterativeLinearSolver(int)	Creates a new instance of this class with default iteration manager
RandomDataImpl.setSecureAlgorithm(String,String)	Sets the PRNG algorithm for the underlying SecureRandom instance using the Security Provider API The Security Provider API is defined in Java Cryptography Architecture API Specification Reference
Array2DRowFieldMatrix.getData()	Returns matrix entries as a two dimensional array
MathUtils.checkFinite(double[])	Check that all the elements are real numbers
KendallsCorrelation.computeCorrelationMatrix(RealMatrix)	Computes the Kendall s Tau rank correlation matrix for the columns of the input matrix
GaussianFitter.fit()	Fits a Gaussian function to the observed points
FractionFormat.format(Fraction,StringBuffer,FieldPosition)	Formats a Fraction object to produce a string The fraction is output in improper format
ArrayFieldVector.getData()	Returns vector entries as a T array
BaseAbstractMultivariateVectorOptimizer.getStartPoint()	Gets the initial values of the optimized parameters
SparseFieldMatrix.getColumnDimension()	Returns the number of columns in the matrix
Euclidean2D.getInstance()	Get the unique instance
PreconditionedIterativeLinearSolver.PreconditionedIterativeLinearSolver(int)	Creates a new instance of this class with default iteration manager
EnumeratedDistribution.getPmf()	Return the probability mass function as a list of pairs
WeightedObservedPoints.clear()	Removes all observations from this container
Vector.distanceSq(Vector)	Compute the square of the distance between the instance and another vector
TriangularDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
FieldVector3D.angle(FieldVector3D,Vector3D)	Compute the angular separation between two vectors
SingularValueDecomposition.getRank()	Return the effective numerical matrix rank
EquationsMapper.getFirstIndex()	Get the index of the first equation element in complete state arrays
JacobianFunction.JacobianFunction(MultivariateDifferentiableVectorFunction)	Simple constructor
MedianOf3PivotingStrategy.pivotIndex(double[],int,int)	Find pivot index of the array so that partition and Kth element selection can be made This in specific makes use of median of 3 pivoting
DiagonalMatrix.preMultiply(RealVector)	Returns the row vector result of premultiplying this by the vector v
FastMath.floorDiv(int,int)	Finds q such that a q b r with 0 r b if b 0 and b r 0 if b 0
WilsonScoreInterval.WilsonScoreInterval()	
PoissonDistribution.cumulativeProbability(int)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
Sqrt.Sqrt()	
KendallsCorrelation.correlation(double[],double[])	Computes the Kendall s Tau rank correlation coefficient between the two arrays
AbstractRealMatrix.getRowVector(int)	Returns the entries in row number row as a vector Row indices start at 0
BlockFieldMatrix.operate(FieldElement[])	Returns the result of multiplying this by the vector v
Cbrt.derivative()	Returns the derivative of the function
BetaDistribution.logDensity(double)	Returns the natural logarithm of the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF If the derivative does not exist at x then an appropriate replacement should be returned e g Double POSITIVE INFINITY Double NaN or the limit inferior or limit superior of the difference quotient Note that due to the floating point precision and under overflow issues this method will for some distributions be more precise and faster than computing the logarithm of RealDistribution density double The default implementation simply computes the logarithm of density x
AbstractRealMatrix.scalarMultiply(double)	Returns the result of multiplying each entry of this by d
DerivativeStructure.getReal()	Get the real value of the number
IterativeLinearSolverEvent.getSolution()	Returns the current estimate of the solution to the linear system to be solved This method should return an unmodifiable view or a deep copy of the actual current solution in order not to compromise subsequent iterations of the source IterativeLinearSolver
AbstractRealMatrix.walkInRowOrder(RealMatrixChangingVisitor)	Visit and possibly change all matrix entries in row order
DefaultFieldMatrixChangingVisitor.start(int,int,int,int,int,int)	Start visiting a matrix
FiniteDifferencesDifferentiator.FiniteDifferencesDifferentiator(int,double,double,double)	Build a differentiator with number of points and step size when independent variable is bounded
LinearConstraint.equals(Object)	
ArithmeticUtils.stirlingS2(int,int)	Returns the Stirling number of the second kind S n k the number of ways of partitioning an n element set into k non empty subsets
UncorrelatedRandomVectorGenerator.nextVector()	Generate an uncorrelated random vector
Beta.logBeta(double,double,double,int)	Returns the natural logarithm of the beta function B a b
BSPTree.getParent()	Get the parent node
FastMath.signum(float)	Compute the signum of a number
Field.getZero()	Get the additive identity of the field
Gaussian.Gaussian(double,double)	Normalized gaussian with given mean and standard deviation
ArrayRealVector.getLInfDistance(RealVector)	Distance between two vectors
DefaultIterativeLinearSolverEvent.providesResidual()	Returns true if IterativeLinearSolverEvent getResidual is supported The default implementation returns false
Dfp.toString()	Get a string representation of the instance
BaseMultivariateMultiStartOptimizer.getMaxEvaluations()	Get the maximal number of function evaluations
SynchronizedDescriptiveStatistics.setWindowSize(int)	WindowSize controls the number of values that contribute to the reported statistics For example if windowSize is set to 3 and the values 1 2 3 4 5 have been added in that order then the available values are 3 4 5 and all reported statistics will be based on these values If windowSize is decreased as a result of this call and there are more than the new value of elements in the current dataset values from the front of the array are discarded to reduce the dataset to windowSize elements
BigReal.add(BigReal)	Compute this a
Vector1D.Vector1D(double,Vector1D,double,Vector1D,double,Vector1D)	Linear constructor Build a vector from three other ones and corresponding scale factors
ISAACRandom.setSeed(long)	Sets the seed of the underlying random number generator using a long seed
CrossoverPolicy.crossover(Chromosome,Chromosome)	Perform a crossover operation on the given chromosomes
SparseGradient.log10()	Base 10 logarithm
Skewness.copy()	Returns a copy of the statistic with the same internal state
BlockFieldMatrix.setRow(int,FieldElement[])	Set the entries in row number row as a row matrix
BracketingNthOrderBrentSolver.solve(int,UnivariateFunction,double,double,AllowedSolution)	Solve for a zero in the given interval
TTest.tTest(double[],double[],double)	Performs a two sided t test evaluating the null hypothesis that sample1 and sample2 are drawn from populations with the same mean with significance level alpha This test does not assume that the subpopulation variances are equal To perform the test assuming equal variances use homoscedasticTTest double double double
CMAESOptimizer.Sigma.getSigma()	the sigma values
Decimal64.isNaN()	Returns true if this double precision number is Not a Number NaN false otherwise
OrientedPoint.getLocation()	Get the hyperplane location on the real line
NeuronSquareMesh2D.getNetwork()	Retrieves the underlying network
SimpleUnivariateValueChecker.SimpleUnivariateValueChecker(double,double)	Build an instance with specified thresholds
GeneticAlgorithm.nextGeneration(Population)	Evolve the given population into the next generation
NonLinearConjugateGradientOptimizer.BracketingStep.getBracketingStep()	Gets the initial step
BigFraction.divide(BigInteger)	Divide the value of this fraction by the passed BigInteger ie this 1 bg returning the result in reduced form
DerivativeStructure.getOrder()	Get the derivation order
Network.createNeuron(double[])	Creates a neuron and assigns it a unique identifier
NoFeasibleSolutionException.NoFeasibleSolutionException()	Simple constructor using a default message
ArrayFieldVector.getDataRef()	Returns a reference to the underlying data array
DecompositionSolver.solve(RealVector)	Solve the linear equation A X B for matrices A
AbstractFieldMatrix.getColumnDimension()	Returns the number of columns in the matrix
MathArrays.buildArray(Field,int)	Build an array of elements
PolynomialFunction.Parametric.PolynomialFunction.Parametric()	
Circle.reset(Vector3D)	Reset the instance as if built from a pole
Vector2D.distanceSq(Vector)	Compute the square of the distance between the instance and another vector
BlockRealMatrix.getSubMatrix(int,int,int,int)	Gets a submatrix Rows and columns are indicated counting from 0 to n 1
RealFieldElement.linearCombination(double,T,double,T,double,T,double,T)	Compute a linear combination
SummaryStatistics.getStandardDeviation()	Returns the standard deviation of the values that have been added
SparseFieldVector.append(SparseFieldVector)	Construct a vector by appending a vector to this vector
NordsieckStepInterpolator.NordsieckStepInterpolator()	Simple constructor
EnclosingBall.getSupportSize()	Get the number of support points used to define the ball
AbstractIntegrator.AbstractIntegrator(String)	Build an instance
BlockRealMatrix.subtract(BlockRealMatrix)	Subtract m from this matrix
LeastSquaresBuilder.model(MultivariateJacobianFunction)	Configure the model function
RealVectorPreservingVisitor.start(int,int,int)	Start visiting a vector This method is called once before any entry of the vector is visited
FieldMatrix.copySubMatrix(int,int,int,int,FieldElement[][])	Copy a submatrix Rows and columns are indicated counting from 0 to n 1
Variance.copy(Variance,Variance)	Copies source to dest
BicubicSplineInterpolatingFunction.value(double,double)	Compute the value for the function
BigFraction.equals(Object)	Test for the equality of two fractions If the lowest term numerator and denominators are the same for both fractions the two fractions are considered to be equal
RealMatrix.walkInColumnOrder(RealMatrixChangingVisitor)	Visit and possibly change all matrix entries in column order
BSPTree.getAttribute()	Get the attribute associated with the instance
DiagonalMatrix.preMultiply(double[])	Returns the row vector result of premultiplying this by the vector v
TestUtils.exactP(double,int,int,boolean)	
DerivativeStructure.linearCombination(DerivativeStructure[],DerivativeStructure[])	Compute a linear combination
DfpField.getSqr3()	Get the constant 3
Array2DRowFieldMatrix.walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)	Visit but don t change some matrix entries in row order
LogisticDistribution.density(double)	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF
ListPopulation.ListPopulation(int)	Creates a new ListPopulation instance and initializes its inner chromosome list
DfpDec.newInstance(byte)	Create an instance from a byte value
Logit.derivative()	Returns the derivative of the function
FieldVector3D.crossProduct(FieldVector3D,FieldVector3D)	Compute the cross product of two vectors
FuzzyKMeansClusterer.FuzzyKMeansClusterer(int,double,int,DistanceMeasure,double,RandomGenerator)	Creates a new instance of a FuzzyKMeansClusterer
SparseFieldVector.toArray()	Convert the vector to a T array
BrentSolver.BrentSolver()	Construct a solver with default absolute accuracy 1e 6
RandomData.nextPermutation(int,int)	Generates an integer array of length k whose entries are selected randomly without repetition from the integers 0 n 1 inclusive
Line.getPointAt(Vector1D,double)	Get one point from the plane
SemiVariance.copy(SemiVariance,SemiVariance)	Copies source to dest
FuzzyKMeansClusterer.getObjectiveFunctionValue()	Get the value of the objective function
DerivativeStructure.scalb(int)	Multiply the instance by a power of 2
Dfp.linearCombination(double,Dfp,double,Dfp)	Compute a linear combination
NonMonotonicSequenceException.NonMonotonicSequenceException(Number,Number,int)	Construct the exception
SemiVariance.evaluate(double[],int,int)	Returns the SemiVariance of the designated values against the mean using instance properties varianceDirection and biasCorrection
PascalDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
LeastSquaresAdapter.evaluate(RealVector)	Evaluate the model at the specified point
LoessInterpolator.LoessInterpolator(double,int)	Construct a new LoessInterpolator with given bandwidth and number of robustness iterations
ComplexUtils.convertToComplex(double[])	Convert an array of primitive doubles to an array of Complex objects
BinomialDistribution.BinomialDistribution(RandomGenerator,int,double)	Creates a binomial distribution
FieldVectorPreservingVisitor.end()	End visiting a vector This method is called once after all entries of the vector have been visited
BaseUnivariateSolver.solve(int,FUNC,double)	Solve for a zero in the vicinity of startValue
CauchyDistribution.CauchyDistribution(RandomGenerator,double,double)	Creates a Cauchy distribution
SobolSequenceGenerator.SobolSequenceGenerator(int,InputStream)	Construct a new Sobol sequence generator for the given space dimension with direction vectors loaded from the given stream
ArrayFieldVector.copy()	Returns a deep copy of this
CholeskyDecomposition.CholeskyDecomposition(RealMatrix)	Calculates the Cholesky decomposition of the given matrix
SummaryStatistics.getQuadraticMean()	Returns the quadratic mean a k a
Cbrt.value(double)	Compute the value of the function
BSPTree.insertInTree(BSPTree,boolean,VanishingCutHandler)	Insert the instance into another tree
ListPopulation.ListPopulation(List,int)	Creates a new ListPopulation instance
RealFieldElement.copySign(double)	Returns the instance with the sign of the argument
PolynomialSplineFunction.value(DerivativeStructure)	Simple mathematical function
GeometricDistribution.getProbabilityOfSuccess()	Access the probability of success for this distribution
LaguerreSolver.solveAllComplex(double[],double,int)	Find all complex roots for the polynomial with the given coefficients starting from the given initial value
FieldLUDecomposition.getU()	Returns the matrix U of the decomposition
RealFieldElement.atan2(T)	Two arguments arc tangent operation
NoBracketingException.getLo()	Get the lower end of the interval
NormalDistribution.getMean()	Access the mean
UnivariateSolverUtils.isSequence(double,double,double)	Check whether the arguments form a strictly increasing sequence
SynchronizedSummaryStatistics.getMinImpl()	Returns the currently configured minimum implementation
UnivariateOptimizer.getMin()	the lower bounds
LeastSquaresBuilder.target(double[])	Configure the observed data
ListPopulation.getPopulationLimit()	Access the maximum population size
Decimal64.linearCombination(Decimal64[],Decimal64[])	Compute a linear combination
Vector2D.distance(Point)	Compute the distance between the instance and another point
BlockRealMatrix.transpose()	Returns the transpose of this matrix
SynchronizedSummaryStatistics.hashCode()	Returns hash code based on values of statistics
Gamma.regularizedGammaQ(double,double)	Returns the regularized gamma function Q a x 1 P a x
Fraction.equals(Object)	Test for the equality of two fractions If the lowest term numerator and denominators are the same for both fractions the two fractions are considered to be equal
BigReal.BigReal(char[],int,int,MathContext)	Build an instance from a characters representation
RealFieldElement.scalb(int)	Multiply the instance by a power of 2
ConfidenceInterval.getLowerBound()	the lower endpoint of the interval
Log.derivative()	Returns the derivative of the function
RealMatrixChangingVisitor.visit(int,int,double)	Visit one matrix entry
ChiSquaredDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
MultivariateMatrixFunction.value(double[])	Compute the value for the function at the given point
DSCompiler.atan(double[],int,double[],int)	Compute arc tangent of a derivative structure
RandomData.nextSecureInt(int,int)	Generates a uniformly distributed random integer between lower and upper endpoints included from a secure random sequence
MatrixUtils.serializeRealMatrix(RealMatrix,ObjectOutputStream)	Serialize a RealMatrix
MathArrays.checkRectangular(long[][])	Throws DimensionMismatchException if the input array is not rectangular
Dfp.add(Dfp)	Add x to this
Vector2D.getNormSq()	Get the square of the norm for the vector
GaussIntegratorFactory.legendreHighPrecision(int,double,double)	Creates an integrator of the given order and whose call to the integrate method will perform an integration on the given interval
UpdateAction.update(Network,double[])	Updates the network in response to the sample features
SubHyperplane.SplitSubHyperplane.getMinus()	Get the part of the sub hyperplane on the minus side of the splitting hyperplane
BivariateFunction.value(double,double)	Compute the value for the function
Well44497b.Well44497b(long)	Creates a new random number generator using a single long seed
EnclosingBall.getSupport()	Get the support points used to define the ball
Sphere2D.getDimension()	Get the dimension of the space
AVLTree.getNotSmaller(Comparable)	Get the node whose element is not smaller than the reference object
RealVector.hashCode()	This method must be overriden by concrete subclasses of RealVector current implementation throws an exception
SynchronizedDescriptiveStatistics.copy(SynchronizedDescriptiveStatistics,SynchronizedDescriptiveStatistics)	Copies source to dest
ExponentialDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
Well19937a.Well19937a()	Creates a new random number generator
DoubleArray.getElement(int)	Returns the element at the specified index Note that if an out of bounds index is supplied a ArrayIndexOutOfBoundsException will be thrown
Incrementor.Incrementor(int,MaxCountExceededCallback)	Defines a maximal count and a callback method to be triggered at counter exhaustion
Log10.Log10()	
StepHandler.init(double,double[],double)	Initialize step handler at the start of an ODE integration
ArrayFieldVector.hashCode()	Get a hashCode for the real vector
Rotation.getQ1()	Get the first coordinate of the vectorial part of the quaternion
KolmogorovSmirnovTest.kolmogorovSmirnovTest(double[],double[])	Computes the p value or observed significance level of a two sample Kolmogorov Smirnov test evaluating the null hypothesis that x and y are samples drawn from the same probability distribution Assumes the strict form of the inequality used to compute the p value See kolmogorovSmirnovTest RealDistribution double boolean
SumOfLogs.increment(double)	Updates the internal state of the statistic to reflect the addition of the new value
LogNormalDistribution.cumulativeProbability(double,double)	For a random variable X whose values are distributed according to this distribution this method returns P x0 X x1
DescriptiveStatistics.getSkewness()	Returns the skewness of the available values Skewness is a measure of the asymmetry of a given distribution
RealVector.ebeDivide(RealVector)	Element by element division
SearchInterval.getStartValue()	Gets the start value
Complex.sqrt()	Compute the square root of this complex number
BSPTree.getCell(Vector)	Get the cell to which a point belongs
ArcsSet.side(Arc)	Compute the relative position of the instance with respect to an arc
StatUtils.variance(double[])	Returns the variance of the entries in the input array or Double NaN if the array is empty
NakagamiDistribution.NakagamiDistribution(RandomGenerator,double,double,double)	Build a new instance
TTest.tTest(StatisticalSummary,StatisticalSummary)	Returns the observed significance level or p value associated with a two sample two tailed t test comparing the means of the datasets described by two StatisticalSummary instances
MultiStartUnivariateOptimizer.getEvaluations()	Gets the number of evaluations of the objective function
FieldElement.multiply(int)	Compute n this Multiplication by an integer number is defined as the following sum n this i 1n this
AdaptiveStepsizeIntegrator.setStepSizeControl(double,double,double,double)	Set the adaptive step size control parameters
RandomData.nextUniform(double,double,boolean)	Generates a uniformly distributed random value from the interval lower upper or the interval lower upper The lower bound is thus optionally included while the upper bound is always excluded
AbstractFieldMatrix.setRowMatrix(int,FieldMatrix)	Set the entries in row number row as a row matrix
MultivariateSummaryStatistics.getGeoMeanImpl()	Returns the currently configured geometric mean implementation
AbstractMultivariateRealDistribution.reseedRandomGenerator(long)	Reseeds the random generator used to generate samples
PolyhedronsSet.translate(Vector3D)	Translate the region by the specified amount
HypergeometricDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all integers between the lower and upper bound of the support are included in the support
KolmogorovSmirnovTest.ksSum(double,double,int)	Computes 1 2 sum i 1 infty 1 i e 2 i 2 t 2 stopping when successive partial sums are within tolerance of one another or when maxIterations partial sums have been computed If the sum does not converge before maxIterations iterations a TooManyIterationsException is thrown
ArithmeticUtils.factorialDouble(int)	Compute n the factorial of n the product of the numbers 1 to n as a double
GumbelDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
Frequency.getPct(Comparable)	Returns the percentage of values that are equal to v as a proportion between 0 and 1
LUDecomposition.getSolver()	Get a solver for finding the A X B solution in exact linear sense
ODEIntegrator.addStepHandler(StepHandler)	Add a step handler to this integrator
SparseGradient.subtract(double)	operator
DescriptiveStatistics.getGeometricMean()	Returns the geometric mean of the available values
FieldVector3D.getNormInf()	Get the L norm for the vector
AbstractFieldMatrix.walkInOptimizedOrder(FieldMatrixChangingVisitor)	Visit and possibly change all matrix entries using the fastest possible order
RandomDataGenerator.reSeedSecure(long)	Reseeds the secure random number generator with the supplied seed
RealMatrix.preMultiply(RealMatrix)	Returns the result of premultiplying this by m
DescriptiveStatistics.getSumImpl()	Returns the currently configured sum implementation
RealVector.unmodifiableRealVector(RealVector)	Returns an unmodifiable view of the specified vector
EmpiricalDistribution.load(URL)	Computes the empirical distribution using data read from a URL
BaseOptimizer.getIterations()	Gets the number of iterations performed by the algorithm
ProperBigFractionFormat.ProperBigFractionFormat(NumberFormat)	Create a proper formatting instance with a custom number format for the whole numerator and denominator
NeighbourhoodSizeFunctionFactory.exponentialDecay(double,double,long)	Creates an exponential decay function
LinearOptimizer.setMaxIterations(int)	Set the maximal number of iterations of the algorithm
AbstractSubHyperplane.getSize()	Get the size of the instance
SparseGradient.linearCombination(double,SparseGradient,double,SparseGradient)	Compute a linear combination
AbstractRealMatrix.isSquare()	Is this a square matrix
Quaternion.multiply(double)	Multiplies the instance by a scalar
BitsStreamGenerator.nextFloat()	Returns the next pseudorandom uniformly distributed float value between 0 0 and 1 0 from this random number generator s sequence
TTest.t(double,double[])	Computes a t statistic given observed values and a comparison constant
UnivariateObjectiveFunction.UnivariateObjectiveFunction(UnivariateFunction)	
MathArrays.checkNonNegative(long[][])	Check all entries of the input array are 0
Vector2D.distance(Vector2D,Vector2D)	Compute the distance between two vectors according to the L2 norm
LeastSquaresProblem.Evaluation.getRMS()	Get the normalized cost It is the square root of the sum of squared of the residuals divided by the number of measurements
LinearObjectiveFunction.getCoefficients()	Gets the coefficients of the linear equation being optimized
OrientedPoint.revertSelf()	Revert the instance
Complex.hashCode()	Get a hashCode for the complex number
FieldRotation.applyTo(FieldRotation)	Apply the instance to another rotation
Signum.value(double)	Compute the value of the function
EmpiricalDistribution.getBinCount()	Returns the number of bins
Incrementor.Incrementor()	Default constructor
ArrayFieldVector.ArrayFieldVector(FieldElement[],boolean)	Create a new ArrayFieldVector using the input array as the underlying data array
OneWayAnova.anovaFValue(Collection)	Computes the ANOVA F value for a collection of double arrays
RealMatrix.subtract(RealMatrix)	Returns this minus m
BaseMultiStartMultivariateOptimizer.BaseMultiStartMultivariateOptimizer(BaseMultivariateOptimizer,int,RandomVectorGenerator)	Create a multi start optimizer from a single start optimizer
ParetoDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
JacobiPreconditioner.operate(RealVector)	Returns the result of multiplying this by the vector x
LogNormalDistribution.LogNormalDistribution(RandomGenerator,double,double)	Creates a log normal distribution
CMAESOptimizer.CMAESOptimizer(int)	
FastMath.scalb(float,int)	Multiply a float number by a power of 2
ConvergenceException.ConvergenceException(Localizable,)	Construct the exception with a specific context and arguments
HypergeometricDistribution.HypergeometricDistribution(RandomGenerator,int,int,int)	Creates a new hypergeometric distribution
MultivariateDifferentiableMultiStartOptimizer.MultivariateDifferentiableMultiStartOptimizer(MultivariateDifferentiableOptimizer,int,RandomVectorGenerator)	Create a multi start optimizer from a single start optimizer
StatisticalSummaryValues.getN()	Description copied from interface StatisticalSummary
Min.getResult()	Returns the current value of the Statistic
Sphere2D.getSubSpace()	Get the n 1 dimension subspace of this space
RandomDataImpl.nextUniform(double,double)	Generates a uniformly distributed random value from the open interval lower upper i e endpoints excluded
BlockRealMatrix.getColumnMatrix(int)	Get the entries at the given column index as a column matrix Column indices start at 0
LUDecomposition.getP()	Returns the P rows permutation matrix
ChiSquaredDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
CombinatoricsUtils.factorialDouble(int)	Compute n the factorial of n the product of the numbers 1 to n as a double
OpenMapRealVector.getL1Distance(RealVector)	Distance between two vectors
BaseAbstractMultivariateOptimizer.getMaxEvaluations()	Get the maximal number of function evaluations
Vector2D.subtract(double,Vector)	Subtract a scaled vector from the instance
KalmanFilter.getStateEstimationVector()	Returns a copy of the current state estimation vector
MathArrays.scale(double,double[])	Create a copy of an array scaled by a value
PolynomialFunctionLagrangeForm.getCoefficients()	Returns a copy of the coefficients array
CanberraDistance.CanberraDistance()	
MultiDirectionalSimplex.MultiDirectionalSimplex(double[])	Build a multi directional simplex with default coefficients
RealVector.Entry.setValue(double)	Set the value of the entry
UpdatingMultipleLinearRegression.clear()	Clears internal buffers and resets the regression model This means all data and derived values are initialized
AbstractOptimizationProblem.getIterationCounter()	Get a independent Incrementor that counts up to the maximum number of iterations and then throws an exception
AbstractFieldMatrix.getEntry(int,int)	Returns the entry in the specified row and column
Divide.value(double,double)	Compute the value for the function
MultidimensionalCounter.Iterator.getCount()	Get the current unidimensional counter slot
FieldVector.mapAdd(FieldElement)	Map an addition operation to each entry
KMeansPlusPlusClusterer.getRandomGenerator()	Returns the random generator this instance will use
RombergIntegrator.RombergIntegrator(double,double,int,int)	Build a Romberg integrator with given accuracies and iterations counts
StandardDeviation.StandardDeviation()	Constructs a StandardDeviation Sets the underlying Variance instance s isBiasCorrected property to true
RiddersSolver.RiddersSolver(double)	Construct a solver
Array2DRowFieldMatrix.copy()	Make a deep copy of this
BoundaryAttribute.getPlusInside()	Get the part of the node cut sub hyperplane that belongs to the boundary and has the inside of the region on the plus side of its underlying hyperplane
RandomGenerator.nextInt(int)	Returns a pseudorandom uniformly distributed int value between 0 inclusive and the specified value exclusive drawn from this random number generator s sequence
EmpiricalDistribution.load(File)	Computes the empirical distribution from the input file
DescriptiveStatistics.getSkewnessImpl()	Returns the currently configured skewness implementation
Cosh.derivative()	Returns the derivative of the function
GeometricDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in Z P X x 0
AdamsNordsieckTransformer.initializeHighOrderDerivatives(double,double[],double[][],double[][])	Initialize the high order scaled derivatives at step start
DiagonalMatrix.isSingular(double)	Returns whether this diagonal matrix is singular i e any diagonal entry is equal to 0 within the given threshold
SparseFieldMatrix.getEntry(int,int)	Returns the entry in the specified row and column
UniformRealDistribution.UniformRealDistribution(double,double,double)	Create a uniform distribution
ArrayFieldVector.ArrayFieldVector(Field,int)	Construct a vector of zeroes
DerivativeStructure.getAllDerivatives()	Get all partial derivatives
FunctionUtils.collector(BivariateFunction,UnivariateFunction,double)	Returns a MultivariateFunction h x defined by h x combiner combiner combiner initialValue f x 0 f x 1 f x x length 1
Well44497b.Well44497b(int)	Creates a new random number generator using a single int seed
NumberIsTooSmallException.NumberIsTooSmallException(Number,Number,boolean)	Construct the exception
FieldMatrix.setRowVector(int,FieldVector)	Set the entries in row number row as a vector
AbstractRandomGenerator.setSeed(int[])	Sets the seed of the underlying random number generator using an int array seed
IntervalUtils.getWilsonScoreInterval(int,int,double)	Create a Wilson score binomial confidence interval for the true probability of success of an unknown binomial distribution with the given observed number of trials successes and confidence level
CurveFitter.addObservedPoint(double,double,double)	Add an observed weighted x y point to the sample
TTest.tTest(double,double[],double)	Performs a two sided t test evaluating the null hypothesis that the mean of the population from which sample is drawn equals mu
RandomDataGenerator.nextT(double)	Generates a random value from the T Distribution
SolutionCallback.getSolution()	Retrieve the best solution found so far
EmpiricalDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
Percentile.getNaNStrategy()	Get the NaN Handling strategy used for computation
FieldMatrix.transpose()	Returns the transpose of this matrix
DormandPrince54Integrator.DormandPrince54Integrator(double,double,double[],double[])	Simple constructor
Array2DRowFieldMatrix.Array2DRowFieldMatrix(FieldElement[][])	Create a new FieldMatrix T using the input array as the underlying data array
LimitAngle.project(Point)	Project a point to the hyperplane
Vector3D.Vector3D(double,Vector3D,double,Vector3D,double,Vector3D,double,Vector3D)	Linear constructor Build a vector from four other ones and corresponding scale factors
Clusterer.getDistanceMeasure()	Returns the DistanceMeasure instance used by this clusterer
Min.copy(Min,Min)	Copies source to dest
MultivariateSummaryStatistics.getStandardDeviation()	Returns an array whose ith entry is the standard deviation of the ith entries of the arrays that have been added using addValue double
ArrayRealVector.toString()	
UnivariateDifferentiableFunction.value(DerivativeStructure)	Simple mathematical function
UnitSphereRandomVectorGenerator.UnitSphereRandomVectorGenerator(int,RandomGenerator)	
AbstractScalarDifferentiableOptimizer.optimize(int,MultivariateDifferentiableFunction,GoalType,double[])	Optimize an objective function
BlockRealMatrix.setEntry(int,int,double)	Set the entry in the specified row and column Row and column indices start at 0
ParetoDistribution.ParetoDistribution(RandomGenerator,double,double)	Creates a Pareto distribution
AbstractRealMatrix.getColumnMatrix(int)	Get the entries at the given column index as a column matrix Column indices start at 0
UniformRealDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
DescriptiveStatistics.setVarianceImpl(UnivariateStatistic)	Sets the implementation for the variance
EigenDecomposition.hasComplexEigenvalues()	Returns whether the calculated eigen values are complex or real
SphericalPolygonsSet.SphericalPolygonsSet(double)	Build a polygons set representing the whole real 2 sphere
SummaryStatistics.getMaxImpl()	Returns the currently configured maximum implementation
DescriptiveStatistics.removeMostRecentValue()	Removes the most recent value from the dataset
FastMath.decrementExact(long)	Decrement a number detecting overflows
RegressionResults.getNumberOfParameters()	Returns the number of parameters estimated in the model
EuclideanDistance.compute(double[],double[])	Compute the distance between two n dimensional vectors
FuzzyKMeansClusterer.cluster(Collection)	Performs Fuzzy K Means cluster analysis
SynchronizedMultivariateSummaryStatistics.setSumsqImpl(StorelessUnivariateStatistic[])	Sets the implementation for the sum of squares
SummaryStatistics.setMeanImpl(StorelessUnivariateStatistic)	Sets the implementation for the mean
BlockRealMatrix.multiply(BlockRealMatrix)	Returns the result of postmultiplying this by m
ChiSquareTest.chiSquare(double[],long[])	Computes the Chi Square statistic comparing observed and expected frequency counts
BlockRealMatrix.walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)	Visit and possibly change some matrix entries using the fastest possible order
SphericalPolygonsSet.SphericalPolygonsSet(Vector3D,double)	Build a polygons set representing a hemisphere
OrderedCrossover.crossover(Chromosome,Chromosome)	Perform a crossover operation on the given chromosomes
BlockRealMatrix.getEntry(int,int)	Get the entry in the specified row and column Row and column indices start at 0
ArrayFieldVector.ebeDivide(FieldVector)	Element by element division
ComplexFormat.getRealFormat()	Access the realFormat
OpenMapRealVector.OpenMapRealVector(RealVector)	Generic copy constructor
IllinoisSolver.IllinoisSolver()	Construct a solver with default accuracy 1e 6
DerivativeStructure.sin()	Sine operation
ParetoDistribution.ParetoDistribution()	Create a Pareto distribution with a scale of 1 and a shape of 1
Precision.equals(double,double,double)	Returns true if there is no double value strictly between the arguments or the difference between them is within the range of allowed error inclusive
BracketingNthOrderBrentSolver.BracketingNthOrderBrentSolver()	Construct a solver with default accuracy and maximal order 1e 6 and 5 respectively
GeneticAlgorithm.evolve(Population,StoppingCondition)	Evolve the given population Evolution stops when the stopping condition is satisfied Updates the generationsEvolved property with the number of generations evolved before the StoppingCondition is satisfied
CombinatoricsUtils.combinationsIterator(int,int)	Returns an iterator whose range is the k element subsets of 0 n 1 represented as int arrays
Dfp.tan()	Tangent operation
ExpandableStatefulODE.getPrimary()	Get the primary set of differential equations
Vector.distance(Vector)	Compute the distance between the instance and another vector according to the L2 norm
OpenMapRealVector.setEntry(int,double)	Set a single element
RealVectorChangingVisitor.start(int,int,int)	Start visiting a vector This method is called once before any entry of the vector is visited
ArrayFieldVector.walkInDefaultOrder(FieldVectorChangingVisitor,int,int)	Visits and possibly alters some entries of this vector in default order increasing index
AgrestiCoullInterval.AgrestiCoullInterval()	
Decimal64.linearCombination(double[],Decimal64[])	Compute a linear combination
DSCompiler.atanh(double[],int,double[],int)	Compute inverse hyperbolic tangent of a derivative structure
AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(String,double,double,double,double)	Build an integrator with the given stepsize bounds
S2Point.S2Point(Vector3D)	Simple constructor
PSquarePercentile.PSquareMarkers.processDataPoint(double)	Process a data point by moving the marker heights based on estimator
Complex.abs()	Return the absolute value of this complex number
FieldVector3D.isInfinite()	Returns true if any coordinate of this vector is infinite and none are NaN false otherwise
RealMatrixFormat.parse(String,ParsePosition)	Parse a string to produce a RealMatrix object
Array2DRowRealMatrix.subtract(Array2DRowRealMatrix)	Returns this minus m
BigFraction.reduce()	Reduce this BigFraction to its lowest terms
SparseFieldVector.walkInOptimizedOrder(FieldVectorChangingVisitor,int,int)	Visits and possibly change some entries of this vector in optimized order The order in which the entries are visited is selected so as to lead to the most efficient implementation it might depend on the concrete implementation of this abstract class
DescriptiveStatistics.getMax()	Returns the maximum of the available values
AbstractRandomGenerator.setSeed(int)	Sets the seed of the underlying random number generator using an int seed
SummaryStatistics.getSumsq()	Returns the sum of the squares of the values that have been added
Target.Target(double[])	
RandomDataGenerator.getRandomGenerator()	Returns the RandomGenerator used to generate non secure random data
SummaryStatistics.getN()	Returns the number of available values
BlockFieldMatrix.multiply(FieldMatrix)	Postmultiply this matrix by m
ArithmeticUtils.pow(long,long)	Raise a long to a long power
QRDecomposition.getQ()	Returns the matrix Q of the decomposition
UniformIntegerDistribution.sample()	Generate a random value sampled from this distribution
MultivariateNormalMixtureExpectationMaximization.getFittedModel()	Gets the fitted model
MathArrays.sequence(int,int,int)	Returns an array of size integers starting at start skipping stride numbers
ArrayFieldVector.ArrayFieldVector(FieldVector,FieldElement[])	Construct a vector by appending one vector to another vector
Log.value(DerivativeStructure)	Simple mathematical function
Decimal64.log()	Natural logarithm
Decimal64.asinh()	Inverse hyperbolic sine operation
GammaDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
NonSquareMatrixException.NonSquareMatrixException(int,int)	Construct an exception from the mismatched dimensions
Frequency.getCumFreq(char)	Returns the cumulative frequency of values less than or equal to v
RealMatrixFormat.getRowSeparator()	Get the format separator between rows of the matrix
StatUtils.sumLog(double[])	Returns the sum of the natural logs of the entries in the input array or Double NaN if the array is empty
Vector.add(double,Vector)	Add a scaled vector to the instance
MultidimensionalCounter.Iterator.hasNext()	
ProperFractionFormat.getWholeFormat()	Access the whole format
BracketFinder.getMid()	a point in the middle of the bracket
BaseAbstractMultivariateVectorOptimizer.getWeight()	Gets the weight matrix of the observations
FeatureInitializer.value()	Selects the initial value
RegulaFalsiSolver.RegulaFalsiSolver(double,double)	Construct a solver
Vector2D.angle(Vector2D,Vector2D)	Compute the angular separation between two vectors
AbstractFieldMatrix.transpose()	Returns the transpose of this matrix
MathArrays.verifyValues(double[],int,int)	This method is used to verify that the input parameters designate a subarray of positive length
TransformUtils.createComplexArray(double[][])	Builds a new array of Complex from the specified two dimensional array of real and imaginary parts In the returned array dataC the data is laid out as follows dataC i getReal dataRI 0 i dataC i getImaginary dataRI 1 i
BlockRealMatrix.BlockRealMatrix(int,int)	Create a new matrix with the supplied row and column dimensions
Line.distance(Line)	Compute the shortest distance between the instance and another line
Sum.Sum(Sum)	Copy constructor creates a new Sum identical to the original
StatUtils.varianceDifference(double[],double[],double)	Returns the variance of the signed differences between corresponding elements of the input arrays i e var sample1 i sample2 i
Vector3D.distanceSq(Vector3D,Vector3D)	Compute the square of the distance between two vectors
MatrixUtils.fractionMatrixToRealMatrix(FieldMatrix)	Convert a FieldMatrix Fraction matrix to a RealMatrix
UnivariateIntegrator.getEvaluations()	Get the number of function evaluations of the last run of the integrator
FieldVector3D.distance1(Vector3D,FieldVector3D)	Compute the distance between two vectors according to the L1 norm
OpenMapRealVector.toArray()	Convert the vector to an array of doubles
MixtureMultivariateRealDistribution.getComponents()	Gets the distributions that make up the mixture model
TTest.homoscedasticT(StatisticalSummary,StatisticalSummary)	Computes a 2 sample t statistic comparing the means of the datasets described by two StatisticalSummary instances under the assumption of equal subpopulation variances To compute a t statistic without the equal variances assumption use t StatisticalSummary StatisticalSummary
FieldElement.add(T)	Compute this a
AbstractRegion.side(Hyperplane)	Compute the relative position of the instance with respect to an hyperplane
LogNormalDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
Circle.getOffset(Vector3D)	Get the offset oriented distance of a direction
Plane.rotate(Vector3D,Rotation)	Rotate the plane around the specified point
SimpleRegression.getSumOfCrossProducts()	Returns the sum of crossproducts xi yi
HypergeometricDistribution.getSampleSize()	Access the sample size
Dfp.linearCombination(Dfp,Dfp,Dfp,Dfp)	Compute a linear combination
BigFractionFormat.BigFractionFormat(NumberFormat,NumberFormat)	Create an improper formatting instance with a custom number format for the numerator and a custom number format for the denominator
EventState.reset(double,double[])	Let the event handler reset the state if it wants
SparseGradient.add(double)	operator
TDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
NoDataException.NoDataException()	Construct the exception
DefaultTransformer.DefaultTransformer()	
ArrayRealVector.ArrayRealVector(int)	Construct a vector of zeroes
FieldElement.subtract(T)	Compute this a
BlockFieldMatrix.preMultiply(FieldElement[])	Returns the row vector result of premultiplying this by the vector v
VectorFormat.parse(String)	Parses a string to produce a Vector object
Complex.isNaN()	Checks whether either or both parts of this complex number is NaN
SynchronizedMultivariateSummaryStatistics.getMinImpl()	Returns the currently configured minimum implementation
RealVector.getMaxValue()	Get the value of the maximum entry
Variance.getResult()	Returns the current value of the Statistic
CurveFitter.fit(int,ParametricUnivariateFunction>,double[])	Fit a curve
JacobiPreconditioner.sqrt()	Returns the square root of this diagonal operator More precisely this method returns P diag 1 A11 1 A22
Asin.derivative()	Returns the derivative of the function
SearchInterval.getMax()	Gets the upper bound
Product.copy()	Returns a copy of the statistic with the same internal state
SynchronizedMultivariateSummaryStatistics.setMeanImpl(StorelessUnivariateStatistic[])	Sets the implementation for the mean
IntervalsSet.buildNew(BSPTree)	Build a region using the instance as a prototype
TrapezoidIntegrator.TrapezoidIntegrator()	Construct a trapezoid integrator with default settings
WeightedObservedPoint.getX()	Get the abscissa of the point
StatisticalSummaryValues.getMax()	Description copied from interface StatisticalSummary
AbstractSimplex.build(double[])	Build an initial simplex
LevenbergMarquardtOptimizer.getRankingThreshold()	Gets the value of a tuning parameter
DefaultProcessModel.getStateTransitionMatrix()	Returns the state transition matrix
Well19937a.Well19937a(int)	Creates a new random number generator using a single int seed
MultivariateSummaryStatistics.getMaxImpl()	Returns the currently configured maximum implementation
BigReal.BigReal(BigInteger,int)	Build an instance from an unscaled BigInteger
BaseAbstractUnivariateSolver.getMin()	the lower end of the search interval
GammaDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
FieldVector3D.distance1(Vector3D)	Compute the distance between the instance and another vector according to the L1 norm
TDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
Vector1DFormat.format(Vector,StringBuffer,FieldPosition)	Formats a Vector object to produce a string
EigenDecomposition.EigenDecomposition(RealMatrix,double)	Calculates the eigen decomposition of the given real matrix
GammaDistribution.sample()	This implementation uses the following algorithms For 0 shape 1 Ahrens J H and Dieter U Computer methods for sampling from gamma beta Poisson and binomial distributions
GammaDistribution.getShape()	Returns the shape parameter of this distribution
SubCircle.side(Hyperplane)	Compute the relative position of the instance with respect to an hyperplane
ArrayFieldVector.dotProduct(ArrayFieldVector)	Compute the dot product
FieldRotation.toRotation()	Convert to a constant vector without derivatives
TriangularDistribution.getMode()	Returns the mode c of this distribution
Array2DRowFieldMatrix.walkInColumnOrder(FieldMatrixPreservingVisitor)	Visit but don t change all matrix entries in column order
Region.getSize()	Get the size of the instance
PolynomialSplineFunction.isValidPoint(double)	Indicates whether a point is within the interpolation range
Clusterable.distanceFrom(T)	Returns the distance from the given point
BinaryChromosome.BinaryChromosome(Integer[])	Constructor
Plane.sameOrientationAs(Hyperplane)	Check if the instance has the same orientation as another hyperplane
TTest.t(double[],double[])	Computes a 2 sample t statistic without the hypothesis of equal subpopulation variances To compute a t statistic assuming equal variances use homoscedasticT double double
AggregateSummaryStatistics.getSumsq()	Returns the sum of the squares of all the aggregated data
Product.evaluate(double[],double[],int,int)	Returns the weighted product of the entries in the specified portion of the input array or Double NaN if the designated subarray is empty
Dfp.log1p()	Shifted natural logarithm
WilcoxonSignedRankTest.wilcoxonSignedRankTest(double[],double[],boolean)	Returns the observed significance level or p value associated with a Wilcoxon signed ranked statistic comparing mean for two related samples or repeated measurements on a single sample
TTest.homoscedasticTTest(double[],double[])	Returns the observed significance level or p value associated with a two sample two tailed t test comparing the means of the input arrays under the assumption that the two samples are drawn from subpopulations with equal variances
DerivativeStructure.DerivativeStructure(int,int,int,double)	Build an instance representing a variable
MatrixUtils.deserializeRealMatrix(Object,String,ObjectInputStream)	Deserialize a RealMatrix field in a class
TriangularDistribution.inverseCumulativeProbability(double)	Description copied from class AbstractRealDistribution
Well1024a.Well1024a(int)	Creates a new random number generator using a single int seed
Identity.derivative()	Returns the derivative of the function
Skewness.increment(double)	Updates the internal state of the statistic to reflect the addition of the new value
Vector3DFormat.parse(String,ParsePosition)	Parses a string to produce a Vector3D object
NumberIsTooLargeException.getMax()	the maximum
RandomData.nextPoisson(double)	Generates a random value from the Poisson distribution with the given mean
SimpleRegression.getXSumSquares()	Returns the sum of squared deviations of the x values about their mean
FractionField.getInstance()	Get the unique instance
MonotoneChain.getTolerance()	Get the tolerance below which points are considered identical
Vector3DFormat.Vector3DFormat()	Create an instance with default settings
RealVector.Entry.setIndex(int)	Set the index of the entry
Well19937a.Well19937a(int[])	Creates a new random number generator using an int array seed
SynchronizedSummaryStatistics.getMean()	Returns the mean of the values that have been added
Well44497a.Well44497a(int)	Creates a new random number generator using a single int seed
SimpleVectorValueChecker.SimpleVectorValueChecker()	Build an instance with default thresholds
FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)	Returns the univariate function h x combiner f x g x
Rotation.getQ2()	Get the second coordinate of the vectorial part of the quaternion
ChiSquareTest.ChiSquareTest()	Construct a ChiSquareTest
RandomGenerator.nextBytes(byte[])	Generates random bytes and places them into a user supplied byte array The number of random bytes produced is equal to the length of the byte array
DerivativeStructure.atan()	Arc tangent operation
ComplexFormat.ComplexFormat(String,NumberFormat,NumberFormat)	Create an instance with a custom imaginary character a custom number format for the real part and a custom number format for the imaginary part
BigFractionField.getRuntimeClass()	Returns the runtime class of the FieldElement
LogisticDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
RandomAdaptor.nextDouble()	Returns the next pseudorandom uniformly distributed double value between 0 0 and 1 0 from this random number generator s sequence
SimpleValueChecker.SimpleValueChecker(double,double,int)	Builds an instance with specified thresholds
MathUtils.hash(double[])	Returns an integer hash code representing the given double array
RealVector.walkInOptimizedOrder(RealVectorChangingVisitor,int,int)	Visits and possibly change some entries of this vector in optimized order The order in which the entries are visited is selected so as to lead to the most efficient implementation it might depend on the concrete implementation of this abstract class
OptimizationProblem.getEvaluationCounter()	Get a independent Incrementor that counts up to the maximum number of evaluations and then throws an exception
FractionFormat.formatFraction(Fraction)	This static method calls formatFraction on a default instance of FractionFormat
FieldRotation.applyTo(double[],RealFieldElement[])	Apply the rotation to a vector stored in an array
PolygonsSet.PolygonsSet(Collection)	Build a polygons set from a Boundary REPresentation B rep
Asinh.Asinh()	
JacobianFunction.value(double[])	Compute the value for the function at the given point
BigFractionFormat.BigFractionFormat(NumberFormat)	Create an improper formatting instance with a custom number format for both the numerator and denominator
BaseUnivariateOptimizer.optimize(int,FUNC,GoalType,double,double)	Find an optimum in the given interval
RealVectorFormat.parse(String)	Parse a string to produce a RealVector object
Network.getNeuron(long)	Retrieves the neuron with the given unique id
OpenIntToDoubleHashMap.OpenIntToDoubleHashMap(int)	Build an empty map with specified size and using NaN for missing entries
FieldMatrix.createMatrix(int,int)	Create a new FieldMatrix of the same type as the instance with the supplied row and column dimensions
Combinations.getK()	Gets the number of elements in each combination
MannWhitneyUTest.MannWhitneyUTest(NaNStrategy,TiesStrategy)	Create a test instance using the given strategies for NaN s and ties
RealMatrixFormat.RealMatrixFormat()	Create an instance with default settings
NonPositiveDefiniteMatrixException.NonPositiveDefiniteMatrixException(double,int,double)	Construct an exception
ResizableDoubleArray.getNumElements()	Returns the number of elements currently in the array Please note that this is different from the length of the internal storage array
FieldVector.mapMultiplyToSelf(FieldElement)	Map a multiplication operation to each entry
OpenMapRealVector.getDimension()	Returns the size of the vector
GaussianCurveFitter.withMaxIterations(int)	Configure the maximum number of iterations
DiagonalMatrix.getColumnDimension()	Returns the number of columns of this matrix
MathArrays.distanceInf(int[],int[])	Calculates the L max of abs distance between two points
Vector1DFormat.Vector1DFormat()	Create an instance with default settings
SummaryStatistics.getSumImpl()	Returns the currently configured Sum implementation
GeneticAlgorithm.setRandomGenerator(RandomGenerator)	Set the static random generator
BaseUnivariateOptimizer.optimize(int,FUNC,GoalType,double,double,double)	Find an optimum in the given interval start at startValue
SimpleRegression.getSlopeStdErr()	Returns the standard error of the slope estimate usually denoted s b1
EigenDecomposition.getVT()	Gets the transpose of the matrix V of the decomposition
DBSCANClusterer.getEps()	Returns the maximum radius of the neighborhood to be considered
RealVector.getMaxIndex()	Get the index of the maximum entry
LearningFactorFunction.value(long)	Computes the learning rate at the current call
WeibullDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
DfpField.getPiSplit()	Get the constant split in two pieces
BSPTree.insertInTree(BSPTree,boolean)	Insert the instance into another tree
VectorialMean.VectorialMean(int)	Constructs a VectorialMean
VectorialMean.equals(Object)	
Well44497a.Well44497a()	Creates a new random number generator
SummaryStatistics.setMaxImpl(StorelessUnivariateStatistic)	Sets the implementation for the maximum
MathArrays.distance1(int[],int[])	Calculates the L1 sum of abs distance between two points
IntegerDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in Z P X x 0
SecondMoment.SecondMoment(SecondMoment)	Copy constructor creates a new SecondMoment identical to the original
MathArrays.copyOf(int[])	Creates a copy of the source array
RandomGenerator.nextDouble()	Returns the next pseudorandom uniformly distributed double value between 0 0 and 1 0 from this random number generator s sequence
PolynomialFunction.polynomialDerivative()	Returns the derivative as a PolynomialFunction
LegendreGaussIntegrator.LegendreGaussIntegrator(int,double,double)	Build a Legendre Gauss integrator with given accuracies
Vector3D.orthogonal()	Get a vector orthogonal to the instance
RandomAdaptor.nextBoolean()	Returns the next pseudorandom uniformly distributed boolean value from this random number generator s sequence
RealMatrixFormat.getPrefix()	Get the format prefix
Fraction.floatValue()	Gets the fraction as a float This calculates the fraction as the numerator divided by denominator
OneWayAnova.anovaPValue(Collection,boolean)	Computes the ANOVA P value for a collection of SummaryStatistics
DerivativeStructure.getField()	Get the Field to which the instance belongs
Vector1D.Vector1D(double,Vector1D)	Multiplicative constructor Build a vector from another one and a scale factor
GumbelDistribution.getScale()	Access the scale parameter beta
ArrayRealVector.ArrayRealVector()	Build a 0 length vector
NoBracketingException.getHi()	Get the higher end of the interval
MatrixUtils.checkAdditionCompatible(AnyMatrix,AnyMatrix)	Check if matrices are addition compatible
UpdatingMultipleLinearRegression.regress()	Performs a regression on data present in buffers and outputs a RegressionResults object
MultivariateSummaryStatistics.MultivariateSummaryStatistics(int,boolean)	Construct a MultivariateSummaryStatistics instance
HermiteRuleFactory.HermiteRuleFactory()	
ResizableDoubleArray.ResizableDoubleArray(int,float)	Creates an instance with the specified initial capacity and expansion factor
Line.contains(Vector3D)	Check if the instance contains a point
Decimal64.isInfinite()	Returns true if this double precision number is infinite Double POSITIVE INFINITY or Double NEGATIVE INFINITY
GillIntegrator.GillIntegrator(double)	Simple constructor
Product.clear()	Clears the internal state of the Statistic
NodesSet.add(BSPTree)	Add a node if not already known
SpearmansCorrelation.correlation(double[],double[])	Computes the Spearman s rank correlation coefficient between the two arrays
MultipleLinearRegression.estimateRegressionParametersVariance()	Estimates the variance of the regression parameters ie Var b
RealMatrix.setColumnMatrix(int,RealMatrix)	Sets the specified column of this matrix to the entries of the specified column matrix Column indices start at 0
BlockRealMatrix.copy()	Returns a deep copy of this
LeastSquaresAdapter.getEvaluationCounter()	Get a independent Incrementor that counts up to the maximum number of evaluations and then throws an exception
ResizableDoubleArray.ResizableDoubleArray()	Creates an instance with default properties
NordsieckStepInterpolator.reinitialize(double[],boolean,EquationsMapper,EquationsMapper[])	Reinitialize the instance
SumOfSquares.evaluate(double[],int,int)	Returns the sum of the squares of the entries in the specified portion of the input array or Double NaN if the designated subarray is empty
SparseFieldVector.subtract(FieldVector)	Compute this minus v
BitsStreamGenerator.setSeed(long)	Sets the seed of the underlying random number generator using a long seed
ArrayRealVector.setSubVector(int,RealVector)	Set a sequence of consecutive elements
Precision.compareTo(double,double,int)	Compares two numbers given some amount of allowed error
Product.Product()	Create a Product instance
MeasurementModel.getMeasurementNoise()	Returns the measurement noise matrix This method is called by the KalmanFilter every correction step so implementations of this interface may return a modified measurement noise depending on the current iteration step
TriangularDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
MathParseException.MathParseException(String,int,Class)	
NotFiniteNumberException.NotFiniteNumberException(Number,)	Construct the exception
TestUtils.kolmogorovSmirnovStatistic(RealDistribution,double[])	
AbstractStepInterpolator.getInterpolatedTime()	Get the time of the interpolated point
OutOfRangeException.OutOfRangeException(Localizable,Number,Number,Number)	Construct an exception from the mismatched dimensions with a specific context information
EnumeratedIntegerDistribution.EnumeratedIntegerDistribution(RandomGenerator,int[],double[])	Create a discrete distribution using the given random number generator and probability mass function definition
GaussIntegrator.getWeight(int)	Gets the weight of the integration point at the given index
SparseFieldVector.SparseFieldVector(Field,int,int)	Build a vector with known the sparseness for advanced use only
AbstractRegion.contains(Region)	Check if the instance entirely contains another region
LeastSquaresBuilder.lazyEvaluation(boolean)	Configure whether evaluation will be lazy or not
SynchronizedMultivariateSummaryStatistics.getMeanImpl()	Returns the currently configured mean implementation
RealMatrix.walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)	Visit but don t change some matrix entries using the fastest possible order
SparseRealVector.SparseRealVector()	
NeuronString.NeuronString(int,boolean,FeatureInitializer[])	Creates a one dimensional network Each neuron not located on the border of the mesh has two neurons linked to it
SparseFieldVector.walkInOptimizedOrder(FieldVectorPreservingVisitor,int,int)	Visits but does not alter some entries of this vector in optimized order The order in which the entries are visited is selected so as to lead to the most efficient implementation it might depend on the concrete implementation of this abstract class
Vector3D.distanceInf(Vector3D,Vector3D)	Compute the distance between two vectors according to the L norm
Sum.copy(Sum,Sum)	Copies source to dest
Array2DRowFieldMatrix.Array2DRowFieldMatrix(Field,FieldElement[][])	Create a new FieldMatrix T using the input array as the underlying data array
FieldHermiteInterpolator.FieldHermiteInterpolator()	Create an empty interpolator
KendallsCorrelation.getCorrelationMatrix()	Returns the correlation matrix
ZipfDistribution.logProbability(int)	For a random variable X whose values are distributed according to this distribution this method returns log P X x where log is the natural logarithm In other words this method represents the logarithm of the probability mass function PMF for the distribution Note that due to the floating point precision and under overflow issues this method will for some distributions be more precise and faster than computing the logarithm of IntegerDistribution probability int
ParetoDistribution.ParetoDistribution(double,double,double)	Create a Pareto distribution using the specified scale shape and inverse cumulative distribution accuracy
FieldVector3D.subtract(Vector3D)	Subtract a vector from the instance
FastMath.acos(double)	Compute the arc cosine of a number
UnivariateSolverUtils.verifyBracketing(UnivariateFunction,double,double)	Check that the endpoints specify an interval and the end points bracket a root
PointVectorValuePair.getValue()	Gets the value of the objective function
NeighbourhoodSizeFunction.value(long)	Computes the neighbourhood size at the current call
VectorialMean.getN()	Get the number of vectors in the sample
ChiSquareTest.chiSquare(long[][])	Computes the Chi Square statistic associated with a chi square test of independence based on the input counts array viewed as a two way table
AdamsMoultonIntegrator.AdamsMoultonIntegrator(int,double,double,double,double)	Build an Adams Moulton integrator with the given order and error control parameters
SumOfLogs.SumOfLogs()	Create a SumOfLogs instance
FirstOrderConverter.computeDerivatives(double,double[],double[])	Get the current time derivative of the state vector
ConstantRealDistribution.sample()	Generate a random value sampled from this distribution
AbstractFieldMatrix.scalarMultiply(FieldElement)	Multiply each entry by d
AbstractLeastSquaresOptimizer.optimize(int,DifferentiableMultivariateVectorFunction,double[],double[],double[])	Optimize an objective function
FieldElement.negate()	Returns the additive inverse of this element
IntegerDistribution.sample(int)	Generate a random sample from the distribution
Vector2D.distance(Vector)	Compute the distance between the instance and another vector according to the L2 norm
RealVector.getDistance(RealVector)	Distance between two vectors
Preconditioner.precondition(double[],double[])	Precondition a search direction
FiniteDifferencesDifferentiator.differentiate(UnivariateFunction)	Create an implementation of a differential from a regular function
DerivativeStructure.divide(DerivativeStructure)	Compute this a
RealVector.SparseEntryIterator.remove()	
DfpField.clearIEEEFlags()	Clears the IEEE 854 status flags
PolynomialFunction.add(PolynomialFunction)	Add a polynomial to the instance
Transform.apply(SubHyperplane,Hyperplane,Hyperplane)	Transform a sub hyperplane embedded in an hyperplane
LeastSquaresConverter.LeastSquaresConverter(MultivariateVectorFunction,double[])	Builds a simple converter for uncorrelated residuals with identical weights
Dfp.newInstance(byte,byte)	Creates an instance with a non finite value
SimpleCurveFitter.create(ParametricUnivariateFunction,double[])	Creates a curve fitter
BoundaryProjection.BoundaryProjection(Point,Point,double)	Constructor from raw elements
OpenIntToFieldHashMap.OpenIntToFieldHashMap(OpenIntToFieldHashMap)	Copy constructor
WeibullDistribution.WeibullDistribution(double,double)	Create a Weibull distribution with the given shape and scale and a location equal to zero
Vector1D.toString()	Get a string representation of this vector
SummaryStatistics.getSummary()	Return a StatisticalSummaryValues instance reporting current statistics
ChiSquareTest.chiSquareTest(long[][],double)	Performs a chi square test of independence evaluating the null hypothesis that the classifications represented by the counts in the columns of the input 2 way table are independent of the rows with significance level alpha
PolynomialSplineFunction.getKnots()	Get an array copy of the knot points
FieldVector3D.crossProduct(Vector3D,FieldVector3D)	Compute the cross product of two vectors
DefaultMeasurementModel.DefaultMeasurementModel(double[][],double[][])	Create a new MeasurementModel taking double arrays as input parameters for the respective measurement matrix and noise
AbstractFieldMatrix.getColumnMatrix(int)	Get the entries in column number column as a column matrix
OpenMapRealVector.OpenMapRealVector(int)	Construct a vector of zeroes
RealFieldElement.sinh()	Hyperbolic sine operation
ListPopulation.setPopulationLimit(int)	Sets the maximal population size
ODEIntegrator.addEventHandler(EventHandler,double,double,int)	Add an event handler to the integrator
TricubicSplineInterpolatingFunction.TricubicSplineInterpolatingFunction(double[],double[],double[],double[][][],double[][][],double[][][],double[][][],double[][][],double[][][],double[][][],double[][][])	
LogNormalDistribution.getShape()	Returns the shape parameter of this distribution
DfpField.getIEEEFlags()	Get the IEEE 854 status flags
TransformerMap.transformers()	Returns the Set of NumberTransformers used as values in the map
SynchronizedRandomGenerator.nextInt()	Returns the next pseudorandom uniformly distributed int value from this random number generator s sequence
ProperBigFractionFormat.format(BigFraction,StringBuffer,FieldPosition)	Formats a BigFraction object to produce a string The BigFraction is output in proper format
MatrixUtils.solveLowerTriangularSystem(RealMatrix,RealVector)	Solve a system of composed of a Lower Triangular Matrix RealMatrix
MathIllegalStateException.getMessage()	
UpdatingMultipleLinearRegression.getN()	Returns the number of observations added to the regression model
WeightedEvaluation.evaluate(double[],double[],int,int)	Returns the result of evaluating the statistic over the specified entries in the input array using corresponding entries in the supplied weights array
BigFraction.bigDecimalValue(int,int)	Gets the fraction as a BigDecimal following the passed scale and rounding mode This calculates the fraction as the numerator divided by denominator
MultiDirectionalSimplex.MultiDirectionalSimplex(double[][],double,double)	Build a multi directional simplex with specified coefficients
OpenIntToFieldHashMap.OpenIntToFieldHashMap(Field,int,FieldElement)	Build an empty map with specified size
FieldMatrix.add(FieldMatrix)	Compute the sum of this and m
StatisticalMultivariateSummary.getGeometricMean()	Returns an array whose ith entry is the geometric mean of the ith entries of the arrays that correspond to each multivariate sample
AbstractListChromosome.getLength()	Returns the length of the chromosome
LimitAngle.copySelf()	Copy the instance
MatrixUtils.deserializeRealVector(Object,String,ObjectInputStream)	Deserialize a RealVector field in a class
OLSMultipleLinearRegression.OLSMultipleLinearRegression()	Create an empty OLSMultipleLinearRegression instance
MapUtils.computeTopographicError(Iterable,Network,DistanceMeasure)	Computes the topographic error
BaseAbstractUnivariateSolver.getMax()	the higher end of the search interval
AggregateSummaryStatistics.getVariance()	Returns the variance of the available values This version returns the variance of all the aggregated data
PiecewiseBicubicSplineInterpolatingFunction.value(double,double)	Compute the value for the function
Vector3D.dotProduct(Vector)	Compute the dot product of the instance and another vector
Vertex.getLocation()	Get Vertex location
DerivativeStructure.cos()	Cosine operation
BSPTree.split(SubHyperplane)	Split a BSP tree by an external sub hyperplane
OutlineExtractor.OutlineExtractor(Vector3D,Vector3D)	Build an extractor for a specific projection plane
WilcoxonSignedRankTest.WilcoxonSignedRankTest()	Create a test instance where NaN s are left in place and ties get the average of applicable ranks Use this unless you are very sure of what you are doing
CentroidCluster.getCenter()	Get the point chosen to be the center of this cluster
AVLTree.AVLTree()	Build an empty tree
BigFraction.reciprocal()	Return the multiplicative inverse of this fraction
SynchronizedSummaryStatistics.getVariance()	Returns the sample variance of the available values
ExpandableStatefulODE.getSecondaryStateDot(int)	Get secondary part of the current state derivative
Vector1D.isNaN()	Returns true if any coordinate of this point is NaN false otherwise
DoublePoint.equals(Object)	
SparseFieldVector.mapDivideToSelf(FieldElement)	Map a division operation to each entry
SynchronizedRandomGenerator.setSeed(int[])	Sets the seed of the underlying random number generator using an int array seed
EmpiricalDistribution.probability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the probability mass function PMF for the distribution
WeightedObservedPoints.toList()	Gets a snapshot of the observed points
Sphere1D.getSubSpace()	Get the n 1 dimension subspace of this space
Array2DRowRealMatrix.multiply(Array2DRowRealMatrix)	Returns the result of postmultiplying this by m
Sqrt.value(DerivativeStructure)	Simple mathematical function
MultivariateFunctionPenaltyAdapter.MultivariateFunctionPenaltyAdapter(MultivariateFunction,double[],double[],double,double[])	Simple constructor
Vector.normalize()	Get a normalized vector aligned with the instance
FastMath.multiplyExact(int,int)	Multiply two numbers detecting overflows
UniformRandomGenerator.UniformRandomGenerator(RandomGenerator)	Create a new generator
ValueServer.ValueServer(RandomGenerator)	Construct a ValueServer instance using a RandomGenerator as its source of random data
LoessInterpolator.interpolate(double[],double[])	Compute an interpolating function by performing a loess fit on the data at the original abscissae and then building a cubic spline with a SplineInterpolator on the resulting fit
RandomDataImpl.nextF(double,double)	Generates a random value from the F Distribution
Region.getTree(boolean)	Get the underlying BSP tree
Frequency.equals(Object)	
SummaryStatistics.SummaryStatistics(SummaryStatistics)	A copy constructor Creates a deep copy of the original
DerivativeStructure.remainder(DerivativeStructure)	IEEE remainder operator
ResizableDoubleArray.addElement(double)	Adds an element to the end of this expandable array
Vector.getNorm()	Get the L2 norm for the vector
UniformIntegerDistribution.UniformIntegerDistribution(int,int)	Creates a new uniform integer distribution using the given lower and upper bounds both inclusive
Decimal64.atanh()	Inverse hyperbolic tangent operation
FieldVector.set(FieldElement)	Set all elements to a single value
AbstractEvaluation.getSigma(double)	Get an estimate of the standard deviation of the parameters The returned values are the square root of the diagonal coefficients of the covariance matrix sd a i sqrt C i i where a i is the optimized value of the i th parameter and C is the covariance matrix
Complex.getArgument()	Compute the argument of this complex number
AbstractIntegerDistribution.sample(int)	Generate a random sample from the distribution
RandomGeneratorFactory.convertToLong(int[])	Converts seed from one representation to another
Vector1D.getSpace()	Get the space to which the point belongs
RealMatrix.setRow(int,double[])	Sets the specified row of this matrix to the entries of the specified array Row indices start at 0
FieldVector3D.FieldVector3D(RealFieldElement,RealFieldElement,RealFieldElement)	Simple constructor
MultivariateFunctionPenaltyAdapter.value(double[])	Computes the underlying function value from an unbounded point
FiniteDifferencesDifferentiator.getStepSize()	Get the step size
OutOfRangeException.getLo()	the lower bound
OutlineExtractor.getOutline(PolyhedronsSet)	Extract the outline of a polyhedrons set
Hyperplane.project(Point)	Project a point to the hyperplane
NaturalRanking.NaturalRanking(TiesStrategy)	Create a NaturalRanking with the given TiesStrategy
RandomDataImpl.nextLong(long,long)	Generates a uniformly distributed random long integer between lower and upper endpoints included
Array2DRowFieldMatrix.setEntry(int,int,FieldElement)	Set the entry in the specified row and column
NonLinearConjugateGradientOptimizer.IdentityPreconditioner.precondition(double[],double[])	Precondition a search direction
MathArrays.shuffle(int[],int,Position)	Shuffle the entries of the given array
SynchronizedMultivariateSummaryStatistics.getMean()	Returns an array whose ith entry is the mean of the ith entries of the arrays that have been added using MultivariateSummaryStatistics addValue double
Hyperplane.sameOrientationAs(Hyperplane)	Check if the instance has the same orientation as another hyperplane
IterationEvent.getIterations()	Returns the number of iterations performed at the time this event is created
Euclidean3D.getSubSpace()	Get the n 1 dimension subspace of this space
Complex.cos()	Compute the cosine of this complex number
Vector1DFormat.parse(String)	Parses a string to produce a Vector object
ArrayRealVector.getL1Distance(RealVector)	Distance between two vectors
Decimal64.reciprocal()	Returns the multiplicative inverse of this element
ProperBigFractionFormat.ProperBigFractionFormat()	Create a proper formatting instance with the default number format for the whole numerator and denominator
OneWayAnova.OneWayAnova()	Default constructor
Erf.erfcInv(double)	Returns the inverse erfc
DfpDec.newInstance(double)	Create an instance from a double value
Variance.evaluate(double[],double[],double)	Returns the weighted variance of the values in the input array using the precomputed weighted mean value
EarthMoversDistance.EarthMoversDistance()	
DescriptiveStatistics.getVariance()	Returns the sample variance of the available values
BitsStreamGenerator.nextDouble()	Returns the next pseudorandom uniformly distributed double value between 0 0 and 1 0 from this random number generator s sequence
ArcsSet.ArcsSet(BSPTree,double)	Build an arcs set from an inside outside BSP tree
MixtureMultivariateNormalDistribution.MixtureMultivariateNormalDistribution(double[],double[][],double[][][])	Creates a multivariate normal mixture distribution
LimitAngle.sameOrientationAs(Hyperplane)	Check if the instance has the same orientation as another hyperplane
Vector2DFormat.format(Vector,StringBuffer,FieldPosition)	Formats a Vector object to produce a string
MidpointIntegrator.MidpointIntegrator(double)	Simple constructor
MathArrays.distanceInf(double[],double[])	Calculates the L max of abs distance between two points
BisectionSolver.BisectionSolver(double,double)	Construct a solver
SubHyperplane.side(Hyperplane)	Compute the relative position of the instance with respect to an hyperplane
SparseGradient.atanh()	Inverse hyperbolic tangent operation
AdaptiveStepsizeIntegrator.getCurrentStepStart()	Get the current value of the step start time ti
Max.clear()	Clears the internal state of the Statistic
SecondMoment.clear()	Clears the internal state of the Statistic
KohonenUpdateAction.getNumberOfCalls()	Retrieves the number of calls to the update method
FiniteDifferencesDifferentiator.differentiate(UnivariateVectorFunction)	Create an implementation of a differential from a regular vector function
DfpField.computeLn(Dfp,Dfp,Dfp)	Compute ln a
NeighbourhoodSizeFunctionFactory.quasiSigmoidDecay(double,double,long)	Creates an sigmoid like NeighbourhoodSizeFunction function
Variance.Variance(boolean)	Constructs a Variance with the specified isBiasCorrected property
ChiSquaredDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
PSquarePercentile.increment(double)	Updates the internal state of the statistic to reflect the addition of the new value The internal state updated due to the new value in this context is basically of the marker positions and computation of the approximate quantile
FieldVector3D.distance(Vector3D,FieldVector3D)	Compute the distance between two vectors according to the L2 norm
SynchronizedDescriptiveStatistics.SynchronizedDescriptiveStatistics(SynchronizedDescriptiveStatistics)	A copy constructor Creates a deep copy of the original
LUDecomposition.getDeterminant()	Return the determinant of the matrix
Complex.equalsWithRelativeTolerance(Complex,Complex,double)	Returns true if both for the real part and for the imaginary part there is no double value strictly between the arguments or the relative difference between them is smaller or equal to the given tolerance
ListPopulation.getPopulationSize()	Access the current population size
Precision.round(double,int,int)	Rounds the given value to the specified number of decimal places
BitsStreamGenerator.setSeed(int[])	Sets the seed of the underlying random number generator using an int array seed
Dfp.subtract(double)	operator
MersenneTwister.setSeed(long)	Reinitialize the generator as if just built with the given long seed
OpenIntToDoubleHashMap.size()	Get the number of elements stored in the map
SynchronizedSummaryStatistics.SynchronizedSummaryStatistics(SynchronizedSummaryStatistics)	A copy constructor Creates a deep copy of the original
BigReal.setScale(int)	Sets the scale for division operations
SimplexSolver.SimplexSolver(double)	Builds a simplex solver with a specified accepted amount of error
CurveFitter.CurveFitter(DifferentiableMultivariateVectorOptimizer)	Simple constructor
Vector2D.Vector2D(double,Vector2D)	Multiplicative constructor Build a vector from another one and a scale factor
ComplexUtils.polar2Complex(double,double)	Creates a complex number from the given polar representation
StatUtils.variance(double[],double)	Returns the variance of the entries in the input array using the precomputed mean value Returns Double NaN if the array is empty
KendallsCorrelation.KendallsCorrelation()	Create a KendallsCorrelation instance without data
Atan.value(DerivativeStructure)	Simple mathematical function
SparseGradient.hypot(SparseGradient,SparseGradient)	Returns the hypotenuse of a triangle with sides x and y sqrt x2 y2 avoiding intermediate overflow or underflow
EquationsMapper.insertEquationData(double[],double[])	Insert equation data into a complete state or derivative array
ZipfDistribution.ZipfDistribution(RandomGenerator,int,double)	Creates a Zipf distribution
RealFieldElement.asin()	Arc sine operation
Encloser.enclose(Iterable)	Find a ball enclosing a list of points
Vector1D.normalize()	Get a normalized vector aligned with the instance
TestUtils.oneWayAnovaTest(Collection,double)	
KMeansPlusPlusClusterer.cluster(Collection)	Runs the K means clustering algorithm
KolmogorovSmirnovTest.cdfExact(double,int)	Calculates P D n d The result is exact in the sense that BigFraction BigReal is used everywhere at the expense of very slow execution time Almost never choose this in real applications unless you are very sure this is almost solely for verification purposes
PSquarePercentile.equals(Object)	Returns true iff o is a PSquarePercentile returning the same values as this for getResult and getN and also having equal markers
Weight.Weight(double[])	Creates a diagonal weight matrix
ParetoDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
PolynomialFunction.hashCode()	
Dfp.getOne()	Get the constant 1
DfpField.newDfp(int)	Create an instance from an int value
KthSelector.getPivotingStrategy()	Get the pivotin strategy
MultivariateNormalMixtureExpectationMaximization.MultivariateNormalMixtureExpectationMaximization(double[][])	Creates an object to fit a multivariate normal mixture model to data
RandomDataGenerator.nextUniform(double,double,boolean)	Generates a uniformly distributed random value from the interval lower upper or the interval lower upper The lower bound is thus optionally included while the upper bound is always excluded
Pair.create(K,V)	Convenience factory method that calls the constructor
KolmogorovSmirnovTest.pelzGood(double,int)	Computes the Pelz Good approximation for P D n d as described in 2 in the class javadoc
MultiDirectionalSimplex.iterate(MultivariateFunction,Comparator)	Compute the next simplex of the algorithm
SummaryStatistics.setSumImpl(StorelessUnivariateStatistic)	Sets the implementation for the Sum
LeastSquaresConverter.LeastSquaresConverter(MultivariateVectorFunction,double[],double[])	Builds a simple converter for uncorrelated residuals with the specified weights
SparseFieldVector.mapSubtract(FieldElement)	Map a subtraction operation to each entry
OpenIntToDoubleHashMap.OpenIntToDoubleHashMap()	Build an empty map with default size and using NaN for missing entries
RealVector.walkInDefaultOrder(RealVectorChangingVisitor,int,int)	Visits and possibly alters some entries of this vector in default order increasing index
ExceptionContextProvider.getContext()	Gets a reference to the rich context data structure that allows to customize error messages and store key value pairs in exceptions
PolygonsSet.PolygonsSet(Collection,double)	Build a polygons set from a Boundary REPresentation B rep
OrientedPoint.copySelf()	Copy the instance
Acos.value(double)	Compute the value of the function
MannWhitneyUTest.MannWhitneyUTest()	Create a test instance using where NaN s are left in place and ties get the average of applicable ranks Use this unless you are very sure of what you are doing
BlockFieldMatrix.getColumnVector(int)	Returns the entries in column number column as a vector
Incrementor.Incrementor(int)	Defines a maximal count
Dfp.multiply(int)	Multiply this by a single digit x
AbstractUnivariateStatistic.evaluate()	Returns the result of evaluating the statistic over the stored data
BigFraction.divide(BigFraction)	Divide the value of this fraction by another returning the result in reduced form
RealVector.mapSubtract(double)	Subtract a value from each entry Returns a new vector
Inverse.derivative()	Returns the derivative of the function
AggregateSummaryStatistics.getMin()	Returns the minimum of the available values This version returns the minimum over all the aggregated data
RandomKey.RandomKey(Double[])	Constructor
Complex.tan()	Compute the tangent of this complex number
AnyMatrix.getColumnDimension()	Returns the number of columns in the matrix
PolygonsSet.PolygonsSet(double,double,double,double,double)	Build a parallellepipedic box
GumbelDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
Chromosome.getFitness()	Access the fitness of this chromosome The bigger the fitness the better the chromosome
MullerSolver.MullerSolver(double)	Construct a solver
ArrayFieldVector.ArrayFieldVector(ArrayFieldVector,boolean)	Construct a vector from another vector
SimpleRegression.SimpleRegression(boolean)	Create a SimpleRegression instance specifying whether or not to estimate an intercept
Dfp.negativeOrNull()	Check if instance is less than or equal to 0
FieldMatrixPreservingVisitor.start(int,int,int,int,int,int)	Start visiting a matrix
RandomDataGenerator.nextExponential(double)	Generates a random value from the exponential distribution with specified mean
EnumeratedRealDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
MultidimensionalCounter.Iterator.getCount(int)	Get the current count in the selected dimension
RealMatrix.copySubMatrix(int,int,int,int,double[][])	Copy a submatrix Rows and columns are indicated counting from 0 to n 1
FieldMatrix.copySubMatrix(int[],int[],FieldElement[][])	Copy a submatrix Rows and columns are indicated counting from 0 to n 1
BitsStreamGenerator.nextInt(int)	Returns a pseudorandom uniformly distributed int value between 0 inclusive and the specified value exclusive drawn from this random number generator s sequence
LeastSquaresProblem.Evaluation.getCovariances(double)	Get the covariance matrix of the optimized parameters Note that this operation involves the inversion of the JTJ matrix where J is the Jacobian matrix The threshold parameter is a way for the caller to specify that the result of this computation should be considered meaningless and thus trigger an exception
Vector3D.isNaN()	Returns true if any coordinate of this point is NaN false otherwise
ArrayRealVector.dotProduct(RealVector)	Compute the dot product of this vector with v
BigFraction.BigFraction(int,int)	Create a BigFraction given the numerator and denominator as simple int The BigFraction is reduced to lowest terms
OpenMapRealVector.OpenMapRealVector(int,double)	Construct a vector of zeroes specifying zero tolerance
PolyhedronsSet.PolyhedronsSet(BSPTree,double)	Build a polyhedrons set from a BSP tree
Point.isNaN()	Returns true if any coordinate of this point is NaN false otherwise
Decimal64.acos()	Arc cosine operation
RealMatrixFormat.RealMatrixFormat(NumberFormat)	Create an instance with a custom number format for components
GaussianCurveFitter.withStartPoint(double[])	Configure the start point initial guess
SparseGradient.cosh()	Hyperbolic cosine operation
Skewness.Skewness(ThirdMoment)	Constructs a Skewness with an external moment
LinearConstraintSet.LinearConstraintSet(Collection)	Creates a set containing the given constraints
ValueServer.fill(int)	Returns an array of length length with values generated using getNext repeatedly
Array2DRowFieldMatrix.add(Array2DRowFieldMatrix)	Add m to this matrix
DescriptiveStatistics.setSkewnessImpl(UnivariateStatistic)	Sets the implementation for the skewness
DoubleArray.getNumElements()	Returns the number of elements currently in the array Please note that this may be different from the length of the internal storage array
BlockRealMatrix.setSubMatrix(double[][],int,int)	Replace the submatrix starting at row column using data in the input subMatrix array Indexes are 0 based
Signum.Signum()	
FieldRotation.getQ0()	Get the scalar coordinate of the quaternion
SumOfClusterVariances.score(List)	Description copied from class ClusterEvaluator
ContinuousOutputModel.getInterpolatedTime()	Get the time of the interpolated point
ArrayFieldVector.set(int,ArrayFieldVector)	Set a set of consecutive elements
BlockRealMatrix.add(BlockRealMatrix)	Compute the sum of this matrix and m
Array2DRowFieldMatrix.getEntry(int,int)	Returns the entry in the specified row and column
Array2DRowRealMatrix.walkInColumnOrder(RealMatrixPreservingVisitor)	Visit but don t change all matrix entries in column order
AbstractCurveFitter.AbstractCurveFitter()	
SummaryStatistics.getMean()	Returns the mean of the values that have been added
SimpleRegression.SimpleRegression()	Create an empty SimpleRegression instance
RealVector.iterator()	Generic dense iterator Iteration is in increasing order of the vector index
DfpField.getRadixDigits()	Get the number of radix digits of the Dfp instances built by this factory
SparseGradient.acos()	Arc cosine operation
BigReal.subtract(BigReal)	Compute this a
StatisticalSummary.getMin()	Returns the minimum of the available values
ChiSquareTest.chiSquareTestDataSetsComparison(long[],long[])	Returns the observed significance level or p value associated with a Chi Square two sample test comparing bin frequency counts in observed1 and observed2
SparseGradient.sqrt()	Square root
AbstractOptimizationProblem.getEvaluationCounter()	Get a independent Incrementor that counts up to the maximum number of evaluations and then throws an exception
SparseGradient.getField()	Get the Field to which the instance belongs
AbstractSubHyperplane.side(Hyperplane)	Compute the relative position of the instance with respect to an hyperplane
Transform.apply(Point)	Transform a point of a space
OpenMapRealVector.getLInfDistance(RealVector)	Distance between two vectors
SimpleUnivariateValueChecker.converged(int,UnivariatePointValuePair,UnivariatePointValuePair)	Check if the optimization algorithm has converged considering the last two points
SynchronizedRandomGenerator.nextFloat()	Returns the next pseudorandom uniformly distributed float value between 0 0 and 1 0 from this random number generator s sequence
Decimal64.divide(double)	operator
DiagonalMatrix.DiagonalMatrix(double[],boolean)	Creates a matrix using the input array as the underlying data
OrientedPoint.isDirect()	Check if the hyperplane orientation is direct
Line.Line(Vector3D,Vector3D,double)	Build a line from two points
RegressionResults.getRSquared()	Returns the coefficient of multiple determination usually denoted r square
RealFieldElement.exp()	Exponential
ArrayRealVector.ArrayRealVector(double[],double[])	Construct a vector by appending one vector to another vector
TrivariateFunction.value(double,double,double)	Compute the value for the function
EventState.evaluateStep(StepInterpolator)	Evaluate the impact of the proposed step on the event handler
ArrayRealVector.hashCode()	This method must be overriden by concrete subclasses of RealVector current implementation throws an exception All NaN values have the same hash code
OLSMultipleLinearRegression.calculateTotalSumOfSquares()	Returns the sum of squared deviations of Y from its mean
FDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer(double,double,double,double,double)	The arguments control the behaviour of the default convergence checking procedure
ChiSquaredDistribution.density(double)	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF
FastMath.pow(double,double)	Power function Compute x y
Variance.evaluate(double[],double[],int,int)	Returns the weighted variance of the entries in the specified portion of the input array or Double NaN if the designated subarray is empty
StorelessCovariance.getN()	This Covariance method is not supported by a StorelessCovariance since the number of bivariate observations does not have to be the same for different pairs of covariates i e N as defined in Covariance getN is undefined
RandomDataGenerator.nextWeibull(double,double)	Generates a random value from the Weibull Distribution
SynchronizedMultivariateSummaryStatistics.setMaxImpl(StorelessUnivariateStatistic[])	Sets the implementation for the maximum
PolynomialFunction.subtract(PolynomialFunction)	Subtract a polynomial from the instance
OpenMapRealVector.sparseIterator()	Create a sparse iterator over the vector which may omit some entries
FuzzyKMeansClusterer.getDataPoints()	Returns an unmodifiable list of the data points used in the last call to cluster Collection
DefaultProcessModel.getControlMatrix()	Returns the control matrix
HaltonSequenceGenerator.skipTo(int)	Skip to the i th point in the Halton sequence
Network.getNeighbours(Neuron)	Retrieves the neighbours of the given neuron
OneWayAnova.anovaTest(Collection,double)	Performs an ANOVA test evaluating the null hypothesis that there is no difference among the means of the data categories
ResizableDoubleArray.ResizableDoubleArray(int,double,double,ExpansionMode,)	Creates an instance with the specified properties
PowellOptimizer.PowellOptimizer(double,double,double,double)	Builds an instance with the default convergence checking procedure
PolynomialFunctionLagrangeForm.value(double)	Calculate the function value at the given point
ArrayFieldVector.ebeMultiply(FieldVector)	Element by element multiplication
Atanh.derivative()	Returns the derivative of the function
EvaluationRmsChecker.EvaluationRmsChecker(double)	Create a convergence checker for the RMS with the same relative and absolute tolerance
FDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
BaseUnivariateSolver.getAbsoluteAccuracy()	Get the absolute accuracy of the solver Solutions returned by the solver should be accurate to this tolerance i e if is the absolute accuracy of the solver and v is a value returned by one of the solve methods then a root of the function should exist somewhere in the interval v v
Decimal64.rint()	Get the whole number that is the nearest to the instance or the even one if x is exactly half way between two integers
SecondaryEquations.getDimension()	Get the dimension of the secondary state parameters
DefaultTransformer.hashCode()	
Multiply.value(double,double)	Compute the value for the function
ContinuousOutputModel.getInterpolatedSecondaryState(int)	Get the interpolated secondary state corresponding to the secondary equations
Power.value(DerivativeStructure)	Simple mathematical function
FastMath.copySign(double,double)	Returns the first argument with the sign of the second argument
AbstractRealMatrix.scalarAdd(double)	Returns the result of adding d to each entry of this
SingularValueDecomposition.getInverseConditionNumber()	Computes the inverse of the condition number
FieldMatrix.multiply(FieldMatrix)	Postmultiply this matrix by m
MathUtils.normalizeAngle(double,double)	Normalize an angle in a 2 wide interval around a center value
IterationListener.terminationPerformed(IterationEvent)	Invoked after completion of the operations which occur after breaking out of the main iteration loop
Array2DRowRealMatrix.Array2DRowRealMatrix(int,int)	Create a new RealMatrix with the supplied row and column dimensions
LeastSquaresBuilder.target(RealVector)	Configure the observed data
SparseGradient.rootN(int)	Nth root
NelderMeadSimplex.NelderMeadSimplex(double[][],double,double,double,double)	Build a Nelder Mead simplex with specified coefficients
Vector2DFormat.parse(String,ParsePosition)	Parses a string to produce a Vector object
DfpMath.pow(Dfp,int)	Raises base to the power a by successive squaring
ArrayFieldVector.ArrayFieldVector(ArrayFieldVector)	Construct a vector from another vector using a deep copy
MultivariateSummaryStatistics.getSumImpl()	Returns the currently configured Sum implementation
GumbelDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
BracketFinder.BracketFinder()	Constructor with default values 100 50 see the other constructor
Dfp.log()	Natural logarithm
SynchronizedSummaryStatistics.getMax()	Returns the maximum of the values that have been added
DoubleArray.setElement(int,double)	Sets the element at the specified index If the specified index is greater than getNumElements 1 the numElements property is increased to index 1 and additional storage is allocated if necessary for the new element and all uninitialized elements between the new element and the previous end of the array
Vector3D.crossProduct(Vector)	Compute the cross product of the instance with another vector
PolynomialFitter.fit(double[])	Get the coefficients of the polynomial fitting the weighted data points
NeuronString.getFeatures(int)	Retrieves the features set from the neuron at location i in the map
KolmogorovSmirnovTest.kolmogorovSmirnovTest(RealDistribution,double[])	Computes the p value or observed significance level of a one sample Kolmogorov Smirnov test evaluating the null hypothesis that data conforms to distribution
LaguerreSolver.LaguerreSolver(double,double,double)	Construct a solver
EmpiricalDistribution.getSampleStats()	Returns a StatisticalSummary describing this distribution
SparseFieldVector.walkInDefaultOrder(FieldVectorPreservingVisitor)	Visits but does not alter all entries of this vector in default order increasing index
Mean.clear()	Clears the internal state of the Statistic
SpearmansCorrelation.getCorrelationMatrix()	Calculate the Spearman Rank Correlation Matrix
TriangularDistribution.TriangularDistribution(RandomGenerator,double,double,double)	Creates a triangular distribution
DimensionMismatchException.DimensionMismatchException(int,int)	Construct an exception from the mismatched dimensions
Fraction.getDenominator()	Access the denominator
SummaryStatistics.getMax()	Returns the maximum of the values that have been added
MathUtils.copySign(long,long)	Returns the first argument with the sign of the second argument
ZipfDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
FastMath.tan(double)	Tangent function
SimpleRegression.removeData(double,double)	Removes the observation x y from the regression data set
TransformerMap.putTransformer(Class,NumberTransformer)	Sets a Class to Transformer Mapping in the Map If the Class is already present this overwrites that mapping
Field.getRuntimeClass()	Returns the runtime class of the FieldElement
TTest.tTest(StatisticalSummary,StatisticalSummary,double)	Performs a two sided t test evaluating the null hypothesis that sampleStats1 and sampleStats2 describe datasets drawn from populations with the same mean with significance level alpha This test does not assume that the subpopulation variances are equal To perform the test under the equal variances assumption use homoscedasticTTest StatisticalSummary StatisticalSummary
RandomDataImpl.nextBinomial(int,double)	Generates a random value from the Binomial Distribution
MidPointIntegrator.MidPointIntegrator(double,double,int,int)	Build a midpoint integrator with given accuracies and iterations counts
EnumeratedRealDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
RealMatrixFormat.format(RealMatrix)	This method calls format RealMatrix StringBuffer FieldPosition
Sqrt.derivative()	Returns the derivative of the function
StandardDeviation.StandardDeviation(boolean)	Contructs a StandardDeviation with the specified value for the isBiasCorrected property If this property is set to true the Variance used in computing results will use the bias corrected or sample formula See Variance for details
RandomAdaptor.nextGaussian()	Returns the next pseudorandom Gaussian normally distributed double value with mean 0 0 and standard deviation 1 0 from this random number generator s sequence
UniformRealDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
BigFraction.getField()	Get the Field to which the instance belongs
MatrixUtils.checkSubMatrixIndex(AnyMatrix,int,int,int,int)	Check if submatrix ranges indices are valid
AdaptiveStepsizeIntegrator.setStepSizeControl(double,double,double[],double[])	Set the adaptive step size control parameters
FractionFormat.format(Object,StringBuffer,FieldPosition)	Formats an object and appends the result to a StringBuffer obj must be either a Fraction object or a Number object Any other type of object will result in an IllegalArgumentException being thrown
Array2DRowRealMatrix.walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)	Visit but don t change some matrix entries in column order
MathUtils.copySign(byte,byte)	Returns the first argument with the sign of the second argument
PowellOptimizer.PowellOptimizer(double,double,ConvergenceChecker)	This constructor allows to specify a user defined convergence checker in addition to the parameters that control the default convergence checking procedure
JDKRandomGenerator.JDKRandomGenerator()	
RealVector.getEntry(int)	Return the entry at the specified index
ResizableDoubleArray.contract()	Contracts the storage array to the size of the element set 1 to avoid a zero length array This function also resets the startIndex to zero
AbstractMultivariateRealDistribution.sample(int)	Generates a list of a random value vectors from the distribution
MultivariateSummaryStatistics.getSumSq()	Returns an array whose ith entry is the sum of squares of the ith entries of the arrays that have been added using addValue double
NormalApproximationInterval.createInterval(int,int,double)	Create a confidence interval for the true probability of success of an unknown binomial distribution with the given observed number of trials successes and confidence level
FixedElapsedTime.FixedElapsedTime(long)	Create a new FixedElapsedTime instance
SynchronizedMultivariateSummaryStatistics.getCovariance()	Returns the covariance matrix of the values that have been added
SpearmansCorrelation.computeCorrelationMatrix(RealMatrix)	Computes the Spearman s rank correlation matrix for the columns of the input matrix
Dfp.newInstance(byte)	Create an instance from a byte value
RealVector.ebeMultiply(RealVector)	Element by element multiplication
VectorFormat.getAvailableLocales()	Get the set of locales for which point vector formats are available
VectorFormat.getSeparator()	Get the format separator between components
StandardDeviation.StandardDeviation(boolean,SecondMoment)	Contructs a StandardDeviation with the specified value for the isBiasCorrected property and the supplied external moment
Segment.Segment(Vector2D,Vector2D,Line)	Build a segment
GeneticAlgorithm.getCrossoverPolicy()	Returns the crossover policy
RealVector.equals(Object)	Test for the equality of two real vectors If all coordinates of two real vectors are exactly the same and none are NaN the two real vectors are considered to be equal NaN coordinates are considered to affect globally the vector and be equals to each other i e if either or all coordinates of the real vector are equal to NaN the real vector is equal to a vector with all NaN coordinates
BracketingNthOrderBrentSolverDFP.getEvaluations()	Get the number of evaluations of the objective function
EmbeddedRungeKuttaIntegrator.getMinReduction()	Get the minimal reduction factor for stepsize control
AggregateSummaryStatistics.getGeometricMean()	Returns the geometric mean of all the aggregated data
DSCompiler.getCompiler(int,int)	Get the compiler for number of free parameters and order
BlockRealMatrix.walkInRowOrder(RealMatrixChangingVisitor)	Visit and possibly change all matrix entries in row order
FieldLUDecomposition.getDeterminant()	Return the determinant of the matrix
RealLinearOperator.getRowDimension()	Returns the dimension of the codomain of this operator
MultiStartUnivariateOptimizer.optimize()	Stores data and performs the optimization
ArrayFieldVector.append(FieldVector)	Construct a vector by appending a vector to this vector
BlockFieldMatrix.BlockFieldMatrix(FieldElement[][])	Create a new dense matrix copying entries from raw layout data
BaseAbstractMultivariateOptimizer.getUpperBound()	
CompositeFormat.getDefaultNumberFormat()	Create a default number format The default number format is based on NumberFormat getInstance with the only customizing that the maximum number of fraction digits is set to 10
AbstractRealMatrix.walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)	Visit but don t change some matrix entries in column order
BigReal.BigReal(String)	Build an instance from a String representation
Constant.Constant(double)	
FieldRotation.getQ3()	Get the third coordinate of the vectorial part of the quaternion
DoubleArray.addElement(double)	Adds an element to the end of this expandable array
SparseGradient.asinh()	Inverse hyperbolic sine operation
BigFraction.multiply(BigInteger)	Multiplies the value of this fraction by the passed BigInteger returning the result in reduced form
EmbeddedRungeKuttaIntegrator.setSafety(double)	Set the safety factor for stepsize control
FunctionUtils.toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction)	Convert a DifferentiableMultivariateVectorFunction into a MultivariateDifferentiableVectorFunction
Sum.evaluate(double[],int,int)	The sum of the entries in the specified portion of the input array or 0 if the designated subarray is empty
RombergIntegrator.RombergIntegrator()	Construct a Romberg integrator with default settings max iteration count set to ROMBERG MAX ITERATIONS COUNT
MathUtils.copySign(short,short)	Returns the first argument with the sign of the second argument
HarmonicFitter.ParameterGuesser.HarmonicFitter.ParameterGuesser(WeightedObservedPoint[])	Simple constructor
MultistepIntegrator.getStarterIntegrator()	Get the starter integrator
RealMatrix.walkInOptimizedOrder(RealMatrixPreservingVisitor)	Visit but don t change all matrix entries using the fastest possible order
Dfp.atanh()	Inverse hyperbolic tangent operation
AbstractStorelessUnivariateStatistic.copy()	Returns a copy of the statistic with the same internal state
Rotation.Rotation(RotationOrder,double,double,double)	Build a rotation from three Cardan or Euler elementary rotations
ParetoDistribution.density(double)	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF
OrientedPoint.OrientedPoint(Vector1D,boolean,double)	Simple constructor
KolmogorovSmirnovDistribution.cdf(double,boolean)	Calculates P D n d using method described in 1 with quick decisions for extreme values given in 2 see above
AbstractRealMatrix.operate(double[])	Returns the result of multiplying this by the vector v
BaseAbstractUnivariateSolver.getEvaluations()	Get the number of evaluations of the objective function
NaturalRanking.NaturalRanking(NaNStrategy,TiesStrategy)	Create a NaturalRanking with the given NaNStrategy and TiesStrategy
PoissonDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
KalmanFilter.correct(RealVector)	Correct the current state estimate with an actual measurement
TestUtils.tTest(double[],double[],double)	
OpenMapRealMatrix.multiplyEntry(int,int,double)	Multiplies in place the specified entry of this matrix by the specified value Row and column indices start at 0
RealFieldElement.pow(T)	Power operation
AbstractRealMatrix.getColumnDimension()	Returns the number of columns of this matrix
Frequency.getCumPct(int)	Returns the cumulative percentage of values less than or equal to v as a proportion between 0 and 1
Vector1D.toString(NumberFormat)	Get a string representation of this vector
DSCompiler.getPartialDerivativeIndex()	Get the index of a partial derivative in the array
AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic()	
ContinuedFraction.evaluate(double,int)	Evaluates the continued fraction at the value x
AbstractStepInterpolator.storeTime(double)	Store the current step time
RealMatrixFormat.getInstance(Locale)	Returns the default real vector format for the given locale
SubHyperplane.copySelf()	Copy the instance
SingularValueDecomposition.getU()	Returns the matrix U of the decomposition
EuclideanIntegerPoint.equals(Object)	
RandomKey.decode(List)	Permutes the sequence of objects of type T according to the permutation this chromosome represents For example if this chromosome represents a permutation 3 0 1 2 and the unpermuted sequence is a b c d this yields d a b c
FieldVector.mapInv()	Map the 1 x function to each entry
HaltonSequenceGenerator.HaltonSequenceGenerator(int,int[],int[])	Construct a new Halton sequence generator with the given base numbers and weights for each dimension
WilcoxonSignedRankTest.wilcoxonSignedRank(double[],double[])	Computes the Wilcoxon signed ranked statistic comparing mean for two related samples or repeated measurements on a single sample
EnumeratedDistribution.sample()	Generate a random value sampled from this distribution
SimpleValueChecker.SimpleValueChecker(double,double)	Build an instance with specified thresholds
Fraction.doubleValue()	Gets the fraction as a double This calculates the fraction as the numerator divided by denominator
MathIllegalStateException.MathIllegalStateException(Localizable,)	Simple constructor
SecondOrderDifferentialEquations.getDimension()	Get the dimension of the problem
CurveFitter.addObservedPoint(WeightedObservedPoint)	Add an observed weighted x y point to the sample
MatrixUtils.createFieldDiagonalMatrix(T[])	Returns a diagonal matrix with specified elements
RealFieldElement.cos()	Cosine operation
SparseFieldVector.append(FieldElement)	Construct a vector by appending a T to this vector
ConvergenceException.ConvergenceException()	Construct the exception
FastMath.copySign(float,float)	Returns the first argument with the sign of the second argument
MathArrays.shuffle(int[])	Shuffle the entries of the given array
AbstractIntegerDistribution.cumulativeProbability(int,int)	For a random variable X whose values are distributed according to this distribution this method returns P x0 X x1
AbstractRealMatrix.walkInColumnOrder(RealMatrixPreservingVisitor)	Visit but don t change all matrix entries in column order
ValueServer.fill(double[])	Fills the input array with values generated using getNext repeatedly
FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)	Convert a UnivariateDifferentiableFunction into a DifferentiableUnivariateFunction
WelzlEncloser.selectFarthest(Iterable,EnclosingBall)	Select the point farthest to the current ball
IterationManager.IterationManager(int)	Creates a new instance of this class
Edge.getPointAt(double)	Get an intermediate point
PolyhedronsSet.PolyhedronsSet()	Build a polyhedrons set representing the whole real line
SphericalCoordinates.getCartesian()	Get the Cartesian coordinates
Log.Log()	
Cos.value(double)	Compute the value of the function
FastMath.min(int,int)	Compute the minimum of two values
MathArrays.equals(double[],double[])	Returns true iff both arguments are null or have same dimensions and all their elements are equal as defined by Precision equals double double
LearningFactorFunctionFactory.exponentialDecay(double,double,long)	Creates an exponential decay function
StatUtils.max(double[])	Returns the maximum of the entries in the input array or Double NaN if the array is empty
FieldVector.projection(FieldVector)	Find the orthogonal projection of this vector onto another vector
MathArithmeticException.getMessage()	
Array2DRowFieldMatrix.Array2DRowFieldMatrix(FieldElement[])	Create a new column FieldMatrix T using v as the data for the unique column of the created matrix
LeastSquaresFactory.weightDiagonal(LeastSquaresProblem,RealVector)	Apply a diagonal weight matrix to the LeastSquaresProblem
RandomDataImpl.nextGamma(double,double)	Generates a random value from the Gamma Distribution
AVLTree.getLargest()	Get the node whose element is the largest one in the tree
Vector2D.distance1(Vector)	Compute the distance between the instance and another vector according to the L1 norm
SemiVariance.SemiVariance()	Constructs a SemiVariance with default true biasCorrected property and default Downside varianceDirection property
StepFunction.StepFunction(double[],double[])	Builds a step function from a list of arguments and the corresponding values Specifically returns the function h x defined by h x y 0 for all x x 1 y 1 for x 1 x x 2
Complex.asin()	Compute the inverse sine of this complex number
MathArrays.copyOfRange(double[],int,int)	Creates a copy of the source array
LinearOptimizer.optimize()	Stores data and performs the optimization
Vector2D.isInfinite()	Returns true if any coordinate of this vector is infinite and none are NaN false otherwise
BlockRealMatrix.setColumn(int,double[])	Sets the specified column of this matrix to the entries of the specified array Column indices start at 0
ExponentialDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
NakagamiDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
StandardDeviation.evaluate(double[])	Returns the Standard Deviation of the entries in the input array or Double NaN if the array is empty
Variance.setBiasCorrected(boolean)	
AbstractRegion.AbstractRegion(Hyperplane,double)	Build a convex region from an array of bounding hyperplanes
LeastSquaresProblem.evaluate(RealVector)	Evaluate the model at the specified point
Interval.Interval(double,double)	Simple constructor
OpenMapRealMatrix.getColumnDimension()	Returns the number of columns of this matrix
AbstractListChromosome.AbstractListChromosome(List,boolean)	Constructor
SynchronizedSummaryStatistics.copy()	Returns a copy of this SynchronizedSummaryStatistics instance with the same internal state
ZipfDistribution.cumulativeProbability(int)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
Frequency.incrementValue(Comparable,long)	Increments the frequency count for v
EnumeratedRealDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
PolynomialCurveFitter.withStartPoint(double[])	Configure the start point initial guess
Weight.Weight(RealMatrix)	
UniformRealDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
FastMath.tanh(double)	Compute the hyperbolic tangent of a number
BigFractionFormat.BigFractionFormat()	Create an improper formatting instance with the default number format for the numerator and denominator
Vector3D.hashCode()	Get a hashCode for the 3D vector
LevenbergMarquardtOptimizer.withParameterRelativeTolerance(double)	a new instance
StatisticalMultivariateSummary.getMax()	Returns an array whose ith entry is the maximum of the ith entries of the arrays that correspond to each multivariate sample
MultidimensionalCounter.Iterator.next()	the unidimensional count after the counter has been incremented by 1
BlockFieldMatrix.setRowMatrix(int,BlockFieldMatrix)	Sets the entries in row number row as a row matrix Row indices start at 0
SparseGradient.atan2(SparseGradient)	Two arguments arc tangent operation
StepInterpolator.getPreviousTime()	Get the previous grid point time
LinearConstraint.LinearConstraint(RealVector,double,Relationship,RealVector,double)	Build a constraint involving two linear equations
Logit.Parametric.Logit.Parametric()	
BesselJ.value(double,double)	Returns the first Bessel function J order x
ResizableDoubleArray.addElements(double[])	Adds several element to the end of this expandable array
ContinuedFraction.evaluate(double)	Evaluates the continued fraction at the value x
Fraction.add(Fraction)	Adds the value of this fraction to another returning the result in reduced form
ValueServer.computeDistribution()	Computes the empirical distribution using values from the file in valuesFileURL using the default number of bins
AbstractRealMatrix.transpose()	Returns the transpose of this matrix
PSquarePercentile.quantile()	Returns the quantile estimated by this statistic in the range 0 0 1 0
Sin.Sin()	
ArrayFieldVector.equals(Object)	Test for the equality of two vectors
DerivativeStructure.tan()	Tangent operation
Fraction.getReducedFraction(int,int)	Creates a Fraction instance with the 2 parts of a fraction Y Z
Precision.equalsWithRelativeTolerance(double,double,double)	Returns true if there is no double value strictly between the arguments or the relative difference between them is smaller or equal to the given tolerance
Sphere2D.getInstance()	Get the unique instance
NakagamiDistribution.getScale()	Access the scale parameter omega
DoublePoint.DoublePoint(int[])	Build an instance wrapping an integer array
ArrayFieldVector.walkInOptimizedOrder(FieldVectorChangingVisitor)	Visits and possibly alters all entries of this vector in optimized order The order in which the entries are visited is selected so as to lead to the most efficient implementation it might depend on the concrete implementation of this abstract class
Line.closestPoint(Line)	Compute the point of the instance closest to another line
Complex.Complex(double,double)	Create a complex number given the real and imaginary parts
StatUtils.populationVariance(double[],double,int,int)	Returns the population variance of the entries in the specified portion of the input array using the precomputed mean value Returns Double NaN if the designated subarray is empty
BaseAbstractMultivariateOptimizer.getConvergenceChecker()	Get the convergence checker
Plane.project(Point)	Project a point to the hyperplane
BlockRealMatrix.createMatrix(int,int)	Create a new RealMatrix of the same type as the instance with the supplied row and column dimensions
BlockRealMatrix.BlockRealMatrix(int,int,double[][],boolean)	Create a new dense matrix copying entries from block layout data
Acos.value(DerivativeStructure)	Simple mathematical function
DescriptiveStatistics.getSumsqImpl()	Returns the currently configured sum of squares implementation
DerivativeStructure.add(double)	operator
MersenneTwister.MersenneTwister()	Creates a new random number generator
AbstractFieldMatrix.walkInRowOrder(FieldMatrixChangingVisitor)	Visit and possibly change all matrix entries in row order
Vector3D.distance(Point)	Compute the distance between the instance and another point
DescriptiveStatistics.DescriptiveStatistics()	Construct a DescriptiveStatistics instance with an infinite window
Quaternion.add(Quaternion,Quaternion)	Computes the sum of two quaternions
OpenIntToFieldHashMap.OpenIntToFieldHashMap(Field,FieldElement)	Build an empty map with default size
BicubicSplineInterpolatingFunction.partialDerivativeX(double,double)	
WeibullDistribution.logDensity(double)	Returns the natural logarithm of the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF If the derivative does not exist at x then an appropriate replacement should be returned e g Double POSITIVE INFINITY Double NaN or the limit inferior or limit superior of the difference quotient Note that due to the floating point precision and under overflow issues this method will for some distributions be more precise and faster than computing the logarithm of RealDistribution density double The default implementation simply computes the logarithm of density x
Vector1DFormat.Vector1DFormat(String,String,NumberFormat)	Create an instance with custom prefix suffix separator and format for components
UnivariateMultiStartOptimizer.optimize(int,FUNC,GoalType,double,double)	Find an optimum in the given interval
DerivativeStructure.DerivativeStructure(double,DerivativeStructure,double,DerivativeStructure,double,DerivativeStructure)	Linear combination constructor
StandardDeviation.evaluate(double[],double)	Returns the Standard Deviation of the entries in the input array using the precomputed mean value Returns Double NaN if the designated subarray is empty
Hyperplane.getTolerance()	Get the tolerance below which points are considered to belong to the hyperplane
ArrayFieldVector.mapDivideToSelf(FieldElement)	Map a division operation to each entry
AbstractIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	Integrate the differential equations up to the given time
NakagamiDistribution.density(double)	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF
LevyDistribution.LevyDistribution(RandomGenerator,double,double)	Creates a LevyDistribution
GaussNewtonOptimizer.GaussNewtonOptimizer(boolean,ConvergenceChecker)	
SubLimitAngle.side(Hyperplane)	Compute the relative position of the instance with respect to an hyperplane
OpenIntToDoubleHashMap.Iterator.key()	Get the key of current entry
ArrayFieldVector.mapMultiply(FieldElement)	Map a multiplication operation to each entry
OpenMapRealMatrix.subtract(OpenMapRealMatrix)	Subtract m from this matrix
DescriptiveStatistics.DescriptiveStatistics(double[])	Construct a DescriptiveStatistics instance with an infinite window and the initial data values in double initialDoubleArray
Region.projectToBoundary(Point)	Project a point on the boundary of the region
FieldVectorChangingVisitor.end()	End visiting a vector This method is called once after all entries of the vector have been visited
RealMatrix.getColumnVector(int)	Get the entries at the given column index as a vector Column indices start at 0
SynchronizedSummaryStatistics.addValue(double)	Add a value to the data
AbstractWell.setSeed(int)	Reinitialize the generator as if just built with the given int seed
Plane.translate(Vector3D)	Translate the plane by the specified amount
PolynomialFunction.PolynomialFunction(double[])	Construct a polynomial with the given coefficients The first element of the coefficients array is the constant term Higher degree coefficients follow in sequence The degree of the resulting polynomial is the index of the last non null element of the array or 0 if all elements are null
FuzzyKMeansClusterer.getMembershipMatrix()	Returns the nxk membership matrix where n is the number of data points and k the number of clusters
ODEIntegrator.getEvaluations()	Get the number of evaluations of the differential equations function
NumberTransformer.transform(Object)	Implementing this interface provides a facility to transform from Object to Double
NumberIsTooSmallException.getMin()	the minimum
AggregateSummaryStatistics.createContributingStatistics()	Creates and returns a SummaryStatistics whose data will be aggregated with those of this AggregateSummaryStatistics
DerivativeStructure.floor()	Get the largest whole number smaller than instance
DescriptiveStatistics.setSumImpl(UnivariateStatistic)	Sets the implementation for the sum
ArrayFieldVector.ArrayFieldVector(FieldElement[],FieldElement[])	Construct a vector by appending one vector to another vector
Vertex.getIncoming()	Get incoming edge
AbstractRegion.copySelf()	Copy the instance
SimpleBounds.getLower()	Gets the lower bounds
SimpleRegression.getR()	Returns Pearson s product moment correlation coefficient usually denoted r
Quaternion.getQ1()	Gets the second component of the quaternion first component of the vector part
Circle.getXAxis()	Get the X axis of the circle
BaseAbstractMultivariateSimpleBoundsOptimizer.optimize(int,FUNC,GoalType,double[])	Optimize an objective function
EnumeratedRealDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
ArrayFieldVector.setEntry(int,FieldElement)	Set a single element
MatrixUtils.createRealIdentityMatrix(int)	Returns dimension x dimension identity matrix
AbstractCurveFitter.TheoreticalValuesFunction.AbstractCurveFitter.TheoreticalValuesFunction(ParametricUnivariateFunction,Collection)	
Arc.getInf()	Get the lower angular bound of the arc
Network.getNeighbours(Iterable)	Retrieves the neurons in the neighbourhood of any neuron in the neurons list
SemiVariance.SemiVariance(Direction)	Constructs a SemiVariance with the specified Direction property and default true biasCorrected property
LeastSquaresFactory.model(MultivariateVectorFunction,MultivariateMatrixFunction)	Combine a MultivariateVectorFunction with a MultivariateMatrixFunction to produce a MultivariateJacobianFunction
Log10.value(double)	Compute the value of the function
Array2DRowRealMatrix.getDataRef()	Get a reference to the underlying data array
DiagonalMatrix.operate(double[])	Returns the result of multiplying this by the vector v
SimpleVectorValueChecker.SimpleVectorValueChecker(double,double)	Build an instance with specified thresholds
HypergeometricDistribution.getPopulationSize()	Access the population size
BaseAbstractUnivariateOptimizer.getMaxEvaluations()	Get the maximal number of function evaluations
SummaryStatistics.getMeanImpl()	Returns the currently configured mean implementation
SynchronizedRandomGenerator.nextBytes(byte[])	Generates random bytes and places them into a user supplied byte array The number of random bytes produced is equal to the length of the byte array
BinomialDistribution.logProbability(int)	For a random variable X whose values are distributed according to this distribution this method returns log P X x where log is the natural logarithm In other words this method represents the logarithm of the probability mass function PMF for the distribution Note that due to the floating point precision and under overflow issues this method will for some distributions be more precise and faster than computing the logarithm of IntegerDistribution probability int
SynchronizedSummaryStatistics.getSumsqImpl()	Returns the currently configured sum of squares implementation
AbstractMultipleLinearRegression.setNoIntercept(boolean)	
SynchronizedMultivariateSummaryStatistics.getSumLogImpl()	Returns the currently configured sum of logs implementation
StepNormalizer.init(double,double[],double)	Initialize step handler at the start of an ODE integration
ExpandableStatefulODE.ExpandableStatefulODE(FirstOrderDifferentialEquations)	Build an expandable set from its primary ODE set
ParetoDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
EmpiricalDistribution.getGeneratorUpperBounds()	Returns a fresh copy of the array of upper bounds of the subintervals of 0 1 used in generating data from the empirical distribution
BlockFieldMatrix.BlockFieldMatrix(int,int,FieldElement[][],boolean)	Create a new dense matrix copying entries from block layout data
UnivariateIntegrator.getIterations()	Get the number of iterations of the last run of the integrator
Arc.getSize()	Get the angular size of the arc
SubOrientedPoint.SubOrientedPoint(Hyperplane,Region)	Simple constructor
FieldMatrix.getColumnMatrix(int)	Get the entries in column number column as a column matrix
UnivariateOptimizer.getMax()	the upper bounds
Primes.nextPrime(int)	Return the smallest prime greater than or equal to n
ClusterEvaluator.score(List)	Computes the evaluation score for the given list of clusters
BigFraction.percentageValue()	Gets the fraction percentage as a double This calculates the fraction as the numerator divided by denominator multiplied by 100
RandomDataGenerator.RandomDataGenerator(RandomGenerator)	Construct a RandomDataGenerator using the supplied RandomGenerator as the source of non secure random data
MillerUpdatingRegression.getDiagonalOfHatMatrix(double[])	Gets the diagonal of the Hat matrix also known as the leverage matrix
Plane.toSubSpace(Point)	Transform a 3D space point into an in plane point
ValueServer.setValuesFileURL(String)	Sets the values file URL using a string URL representation
S2Point.isNaN()	Returns true if any coordinate of this point is NaN false otherwise
LeastSquaresProblem.Evaluation.getPoint()	Get the abscissa independent variables of this evaluation
DfpMath.asin(Dfp)	computes the arc sine of the argument
FractionFormat.getAvailableLocales()	Get the set of locales for which complex formats are available This is the same set as the NumberFormat set
ArrayRealVector.ArrayRealVector(Double[],int,int)	Construct a vector from part of an array
BigReal.bigDecimalValue()	Get the BigDecimal value corresponding to the instance
Decimal64.cbrt()	Cubic root
FastMath.nextDown(float)	Compute next number towards negative infinity
AbstractRegion.isEmpty()	Check if the instance is empty
Network.getNeighbours(Iterable,Iterable)	Retrieves the neurons in the neighbourhood of any neuron in the neurons list
PolyhedronsSet.PolyhedronsSet(double,double,double,double,double,double)	Build a parallellepipedic box
FieldVector3D.FieldVector3D(RealFieldElement,FieldVector3D,RealFieldElement,FieldVector3D,RealFieldElement,FieldVector3D,RealFieldElement,FieldVector3D)	Linear constructor Build a vector from four other ones and corresponding scale factors
AbstractListChromosome.AbstractListChromosome(List)	Constructor copying the input representation
MathArrays.buildArray(Field,int,int)	Build a double dimension array of elements
Circle.copySelf()	Copy the instance
StepFunction.value(double)	Compute the value of the function
BitsStreamGenerator.nextInt()	Returns the next pseudorandom uniformly distributed int value from this random number generator s sequence
GeneticAlgorithm.getCrossoverRate()	Returns the crossover rate
Sum.increment(double)	Updates the internal state of the statistic to reflect the addition of the new value
CauchyDistribution.CauchyDistribution()	Creates a Cauchy distribution with the median equal to zero and scale equal to one
BigFraction.hashCode()	Gets a hashCode for the fraction
AbstractStepInterpolator.getInterpolatedSecondaryState(int)	Get the interpolated secondary state corresponding to the secondary equations
BigReal.BigReal(String,MathContext)	Build an instance from a String representation
DescriptiveStatistics.getMeanImpl()	Returns the currently configured mean implementation
Kurtosis.copy()	Returns a copy of the statistic with the same internal state
BlockRealMatrix.setColumnVector(int,RealVector)	Sets the specified column of this matrix to the entries of the specified vector Column indices start at 0
EmpiricalDistribution.reSeed(long)	Reseeds the random number generator used by getNextValue
Frequency.incrementValue(char,long)	Increments the frequency count for v
MultivariateSummaryStatistics.equals(Object)	Returns true iff object is a MultivariateSummaryStatistics instance and all statistics have the same values as this
OpenMapRealVector.OpenMapEntry.getIndex()	Get the index of the entry
Tanh.Tanh()	
DescriptiveStatistics.getMean()	Returns the arithmetic mean of the available values
RealVector.projection(RealVector)	Find the orthogonal projection of this vector onto another vector
PoissonDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in Z P X x 0
SpearmansCorrelation.SpearmansCorrelation(RealMatrix,RankingAlgorithm)	Create a SpearmansCorrelation with the given input data matrix and ranking algorithm
Array2DRowRealMatrix.walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)	Visit and possibly change some matrix entries in column order
PolynomialSplineFunction.getPolynomials()	Get a copy of the interpolating polynomials array
RealVector.append(RealVector)	Construct a new vector by appending a vector to this vector
PoissonDistribution.PoissonDistribution(double,double)	Creates a new Poisson distribution with the specified mean and convergence criterion
Fraction.Fraction(double,double,int)	Create a fraction given the double value and maximum error allowed
DerivativeStructure.getExponent()	Return the exponent of the instance value removing the bias
OpenIntToDoubleHashMap.Iterator.hasNext()	Check if there is a next element in the map
PolynomialsUtils.createLegendrePolynomial(int)	Create a Legendre polynomial
OpenMapRealVector.subtract(RealVector)	Subtract v from this vector
RankingAlgorithm.rank(double[])	Performs a rank transformation on the input data returning an array of ranks
Variance.evaluate(double[],double)	Returns the variance of the entries in the input array using the precomputed mean value Returns Double NaN if the array is empty
Euclidean1D.getInstance()	Get the unique instance
MullerSolver2.MullerSolver2()	Construct a solver with default accuracy 1e 6
MultistepIntegrator.setMaxGrowth(double)	Set the maximal growth factor for stepsize control
SimplexOptimizer.SimplexOptimizer(ConvergenceChecker)	
SparseGradient.multiply(double)	operator
DistanceMeasure.compute(double[],double[])	Compute the distance between two n dimensional vectors
SecondMoment.copy(SecondMoment,SecondMoment)	Copies source to dest
Complex.multiply(Complex)	Returns a Complex whose value is this factor
FieldVector3D.FieldVector3D(double,FieldVector3D,double,FieldVector3D)	Linear constructor Build a vector from two other ones and corresponding scale factors
AbstractStorelessUnivariateStatistic.evaluate(double[],int,int)	This default implementation calls clear then invokes increment double in a loop over the specified portion of the input array and then uses getResult to compute the return value
RandomAdaptor.setSeed(long)	Sets the seed of the underlying random number generator using a long seed
AbstractParameterizable.complainIfNotSupported(String)	Check if a parameter is supported and throw an IllegalArgumentException if not
NakagamiDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
ExpandableStatefulODE.setSecondaryState(int,double[])	Set secondary part of the current state
AbstractIntegrator.setMaxEvaluations(int)	Set the maximal number of differential equations function evaluations
LinearOptimizer.optimize(LinearObjectiveFunction,Collection,GoalType,boolean)	Optimizes an objective function
EigenDecomposition.getV()	Gets the matrix V of the decomposition
OpenMapRealVector.equals(Object)	Test for the equality of two real vectors If all coordinates of two real vectors are exactly the same and none are NaN the two real vectors are considered to be equal NaN coordinates are considered to affect globally the vector and be equals to each other i e if either or all coordinates of the real vector are equal to NaN the real vector is equal to a vector with all NaN coordinates
DefaultTransformer.transform(Object)	Description copied from interface NumberTransformer
BitsStreamGenerator.nextGaussian()	Returns the next pseudorandom Gaussian normally distributed double value with mean 0 0 and standard deviation 1 0 from this random number generator s sequence
MultivariateNormalDistribution.MultivariateNormalDistribution(double[],double[][])	Creates a multivariate normal distribution with the given mean vector and covariance matrix
LearningFactorFunctionFactory.quasiSigmoidDecay(double,double,long)	Creates an sigmoid like LearningFactorFunction function
DBSCANClusterer.cluster(Collection)	Performs DBSCAN cluster analysis
Complex.equals(Complex,Complex)	Returns true iff the values are equal as defined by equals x y 1
Product.evaluate(double[],int,int)	Returns the product of the entries in the specified portion of the input array or Double NaN if the designated subarray is empty
Population.getPopulationLimit()	Access the maximum population size
GumbelDistribution.GumbelDistribution(double,double)	Build a new instance
MullerSolver2.MullerSolver2(double)	Construct a solver
SynchronizedSummaryStatistics.getN()	Returns the number of available values
Network.getFeaturesSize()	Gets the size of the neurons features set
FieldVector3D.getNorm1()	Get the L1 norm for the vector
RealVector.walkInOptimizedOrder(RealVectorPreservingVisitor)	Visits but does not alter all entries of this vector in optimized order The order in which the entries are visited is selected so as to lead to the most efficient implementation it might depend on the concrete implementation of this abstract class
AggregateSummaryStatistics.getStandardDeviation()	Returns the standard deviation of the available values This version returns the standard deviation of all the aggregated data
MultivariateSummaryStatistics.setMeanImpl(StorelessUnivariateStatistic[])	Sets the implementation for the mean
DescriptiveStatistics.getPopulationVariance()	Returns the population variance of the available values
SummaryStatistics.setVarianceImpl(StorelessUnivariateStatistic)	Sets the implementation for the variance
Region.intersection(SubHyperplane)	Get the parts of a sub hyperplane that are contained in the region
SymmLQ.solve(RealLinearOperator,RealVector)	Returns an estimate of the solution to the linear system A x b
TricubicInterpolatingFunction.isValidPoint(double,double,double)	Indicates whether a point is within the interpolation range
GeometricDistribution.cumulativeProbability(int)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
Vector1D.Vector1D(double,Vector1D,double,Vector1D)	Linear constructor Build a vector from two other ones and corresponding scale factors
SparseGradient.equals(Object)	Test for the equality of two sparse gradients
Inverse.value(double)	Compute the value of the function
DerivativeStructure.getPartialDerivative()	Get a partial derivative
MatrixUtils.inverse(RealMatrix)	Computes the inverse of the given matrix
ResizableDoubleArray.ResizableDoubleArray(int,float,float)	Creates an instance with the specified initialCapacity expansionFactor and contractionCriterion
PreconditionedIterativeLinearSolver.solve(RealLinearOperator,RealVector,RealVector)	Returns an estimate of the solution to the linear system A x b
TestUtils.approximateP(double,int,int)	
AbstractSubHyperplane.copySelf()	Copy the instance
AbstractFieldMatrix.walkInOptimizedOrder(FieldMatrixPreservingVisitor)	Visit but don t change all matrix entries using the fastest possible order
ClusterEvaluator.ClusterEvaluator(DistanceMeasure)	Creates a new cluster evaluator with the given distance measure
GaussIntegrator.GaussIntegrator(double[],double[])	Creates an integrator from the given points and weights
JacobiPreconditioner.create(RealLinearOperator)	Creates a new instance of this class This method extracts the diagonal coefficients of the specified linear operator If a does not extend AbstractRealMatrix then the coefficients of the underlying matrix are not accessible coefficient extraction is made by matrix vector products with the basis vectors and might therefore take some time With matrices direct entry access is carried out
MultistepIntegrator.NordsieckTransformer.initializeHighOrderDerivatives(double,double[],double[][],double[][])	Initialize the high order scaled derivatives at step start
AbstractRealMatrix.walkInColumnOrder(RealMatrixChangingVisitor)	Visit and possibly change all matrix entries in column order
ArrayFieldVector.mapSubtractToSelf(FieldElement)	Map a subtraction operation to each entry
GTest.GTest()	
DerivativeStructure.DerivativeStructure(double,DerivativeStructure,double,DerivativeStructure)	Linear combination constructor
BigFraction.add(int)	Adds the value of this fraction to the passed integer returning the result in reduced form
Decimal64.Decimal64(double)	Creates a new instance of this class
OpenMapRealVector.unitize()	Converts this vector into a unit vector
RegressionResults.getErrorSumSquares()	Returns the sum of squared errors SSE associated with the regression model
BaseMultiStartMultivariateOptimizer.optimize()	Stores data and performs the optimization
DescriptiveStatistics.getSum()	Returns the sum of the values that have been added to Univariate
Erf.erfc(double)	Returns the complementary error function
Vector3D.toString(NumberFormat)	Get a string representation of this vector
ArithmeticUtils.binomialCoefficientDouble(int,int)	Returns a double representation of the Binomial Coefficient n choose k the number of k element subsets that can be selected from an n element set
SparseFieldMatrix.SparseFieldMatrix(Field,int,int)	Create a new SparseFieldMatrix with the supplied row and column dimensions
BlockFieldMatrix.setColumn(int,FieldElement[])	Set the entries in column number column as a column matrix
Constant.derivative()	Returns the derivative of the function
Gamma.logGamma(double)	Returns the value of log x for x 0
FieldRotation.applyTo(Rotation,FieldRotation)	Apply a rotation to another rotation
EigenDecomposition.getRealEigenvalues()	Gets a copy of the real parts of the eigenvalues of the original matrix
Variance.Variance()	Constructs a Variance with default true isBiasCorrected property
PoissonDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all integers between the lower and upper bound of the support are included in the support
FieldVector3D.FieldVector3D(RealFieldElement,FieldVector3D,RealFieldElement,FieldVector3D)	Linear constructor Build a vector from two other ones and corresponding scale factors
RootsOfUnity.getNumberOfRoots()	Returns the number of roots of unity currently stored If computeRoots int was called with n then this method returns abs n If no roots of unity have been computed yet this method returns 0
BaseMultivariateMultiStartOptimizer.getConvergenceChecker()	Get the convergence checker
PolyhedronsSet.PolyhedronsSet(double)	Build a polyhedrons set representing the whole real line
OpenMapRealMatrix.multiply(OpenMapRealMatrix)	Postmultiply this matrix by m
ArrayFieldVector.outerProduct(FieldVector)	Compute the outer product
Array2DRowFieldMatrix.walkInRowOrder(FieldMatrixChangingVisitor)	Visit and possibly change all matrix entries in row order
BlockFieldMatrix.setColumnMatrix(int,FieldMatrix)	Set the entries in column number column as a column matrix
SimpleRegression.getSlopeConfidenceInterval(double)	Returns the half width of a 100 100 alpha confidence interval for the slope estimate
DescriptiveStatistics.DescriptiveStatistics(int)	Construct a DescriptiveStatistics instance with the specified window
SubHyperplane.SplitSubHyperplane.getPlus()	Get the part of the sub hyperplane on the plus side of the splitting hyperplane
UnivariatePointValuePair.getValue()	Get the value of the objective function
RealVector.unitize()	Converts this vector into a unit vector
DerivativeStructure.ceil()	Get the smallest whole number larger than instance
BigFraction.pow(double)	Returns a double whose value is thisexponent returning the result in reduced form
CMAESOptimizer.CMAESOptimizer(int,double[])	
AbstractLinearOptimizer.getMaxIterations()	Get the maximal number of iterations of the algorithm
DescriptiveStatistics.getElement(int)	Returns the element at the specified index
GammaDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
KohonenTrainingTask.run()	
Erf.erf(double,double)	Returns the difference between erf x1 and erf x2
FieldMatrix.setColumn(int,FieldElement[])	Set the entries in column number column as a column matrix
BSPTree.visit(BSPTreeVisitor)	Visit the BSP tree nodes
BigReal.BigReal(char[])	Build an instance from a characters representation
DSCompiler.expm1(double[],int,double[],int)	Compute exp x 1 of a derivative structure
S2Point.getPhi()	Get the polar angle varphi
AbstractFormat.getNumeratorFormat()	Access the numerator format
KMeansPlusPlusClusterer.KMeansPlusPlusClusterer(Random,EmptyClusterStrategy)	Build a clusterer
SingularValueDecomposition.getUT()	Returns the transpose of the matrix U of the decomposition
ProperFractionFormat.setWholeFormat(NumberFormat)	Modify the whole format
ArrayRealVector.ArrayRealVector(double[])	Construct a vector from an array copying the input array
LaplaceDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
RealMatrix.walkInRowOrder(RealMatrixChangingVisitor)	Visit and possibly change all matrix entries in row order
KohonenUpdateAction.KohonenUpdateAction(DistanceMeasure,LearningFactorFunction,NeighbourhoodSizeFunction)	
FieldMatrix.preMultiply(FieldElement[])	Returns the row vector result of premultiplying this by the vector v
RandomDataImpl.nextInversionDeviate(RealDistribution)	Generate a random deviate from the given distribution using the inversion method
PolynomialFunction.negate()	Negate the instance
Complex.sinh()	Compute the hyperbolic sine of this complex number
AbstractStepInterpolator.finalizeStep()	Finalize the step
Pair.hashCode()	Compute a hash code
FieldMatrix.walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)	Visit and possibly change some matrix entries using the fastest possible order
MannWhitneyUTest.mannWhitneyU(double[],double[])	Computes the Mann Whitney U statistic comparing mean for two independent samples possibly of different length
AbstractLeastSquaresOptimizer.getCovariances()	Get the covariance matrix of the optimized parameters
ComplexFormat.parse(String,ParsePosition)	Parses a string to produce a Complex object
ValueServer.getMu()	Returns the mean used when operating in GAUSSIAN MODE EXPONENTIAL MODE or UNIFORM MODE When operating in CONSTANT MODE this is the constant value always returned Calling computeDistribution sets this value to the overall mean of the values in the values file
SimpleRegression.addObservations(double[][],double[])	Adds a series of observations to the regression model The lengths of x and y must be the same and x must be rectangular
RealVectorFormat.format(RealVector)	This method calls format RealVector StringBuffer FieldPosition
SummaryStatistics.setSumsqImpl(StorelessUnivariateStatistic)	Sets the implementation for the sum of squares
DefaultIterativeLinearSolverEvent.getRightHandSideVector()	Returns the current right hand side of the linear system to be solved
BigReal.compareTo(BigReal)	
LevenbergMarquardtOptimizer.withCostRelativeTolerance(double)	a new instance
Array2DRowRealMatrix.Array2DRowRealMatrix(double[])	Create a new column RealMatrix using v as the data for the unique column of the created matrix
DfpField.getLn5()	Get the constant ln 5
ArrayFieldVector.toArray()	Convert the vector to a T array
AbstractStorelessUnivariateStatistic.hashCode()	Returns hash code based on getResult and getN
ValueServer.getMode()	Returns the data generation mode See the class javadoc for description of the valid values of this property
TransformerMap.clear()	Clears all the Class to Transformer mappings
MutationPolicy.mutate(Chromosome)	Mutate the given chromosome
ArithmeticUtils.lcm(long,long)	Returns the least common multiple of the absolute value of two numbers using the formula lcm a b a gcd a b b
Quaternion.getNorm()	Computes the norm of the quaternion
Dfp.negate()	Returns a number that is this number with the sign bit reversed
FieldMatrix.getColumn(int)	Get the entries in column number col as an array
FastMath.asin(double)	Compute the arc sine of a number
BaseMultiStartMultivariateOptimizer.getEvaluations()	Gets the number of evaluations of the objective function
WeibullDistribution.WeibullDistribution(RandomGenerator,double,double,double)	Creates a Weibull distribution
HarmonicOscillator.value(double)	Compute the value of the function
TestUtils.gTestDataSetsComparison(long[],long[],double)	
Tan.value(double)	Compute the value of the function
LoessInterpolator.smooth(double[],double[])	Compute a loess fit on the data at the original abscissae
LevyDistribution.LevyDistribution(double,double)	Build a new instance
LeastSquaresFactory.evaluationChecker(ConvergenceChecker)	View a convergence checker specified for a PointVectorValuePair as one specified for an LeastSquaresProblem Evaluation
CombinatoricsUtils.factorial(int)	Returns n Shorthand for n Factorial the product of the numbers 1 n
StatUtils.mean(double[],int,int)	Returns the arithmetic mean of the entries in the specified portion of the input array or Double NaN if the designated subarray is empty
IntegerDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
Region.checkPoint(Point)	Check a point with respect to the region
MultidimensionalCounter.getSizes()	Get the number of multidimensional counter slots in each dimension
RealFieldElement.pow(double)	Power operation
MullerSolver.MullerSolver()	Construct a solver with default accuracy 1e 6
Vector.dotProduct(Vector)	Compute the dot product of the instance and another vector
PascalDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all integers between the lower and upper bound of the support are included in the support
ChiSquaredDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
MathArrays.verifyValues(double[],double[],int,int)	This method is used to verify that the begin and length parameters designate a subarray of positive length and the weights are all non negative non NaN finite and not all zero
PegasusSolver.PegasusSolver(double)	Construct a solver
Dfp.isNaN()	Check if instance is not a number
Sigmoid.Parametric.gradient(double,)	Computes the value of the gradient at x
Complex.log()	Compute the natural logarithm of this complex number
OrientedPoint.wholeHyperplane()	Build a region covering the whole hyperplane
DerivativeStructure.DerivativeStructure(int,int,double)	Build an instance representing a constant value
CurveFitter.CurveFitter(MultivariateDifferentiableVectorOptimizer)	Simple constructor
RegionFactory.intersection(Region,Region)	Compute the intersection of two regions
Covariance.Covariance(RealMatrix)	Create a covariance matrix from a matrix whose columns represent covariates
Vector2D.Vector2D(double,double)	Simple constructor
LinearConstraint.LinearConstraint(double[],Relationship,double)	Build a constraint involving a single linear equation
SingularValueDecomposition.SingularValueDecomposition(RealMatrix)	Calculates the compact Singular Value Decomposition of the given matrix
RealVector.setSubVector(int,RealVector)	Set a sequence of consecutive elements
SymmLQ.solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector)	Returns an estimate of the solution to the linear system A x b The solution is computed in place initial guess is modified
SparseGradient.addInPlace(SparseGradient)	Add in place
BigReal.BigReal(char[],MathContext)	Build an instance from a characters representation
NonLinearConjugateGradientOptimizer.NonLinearConjugateGradientOptimizer(Formula,ConvergenceChecker,double,double,double)	Constructor with default preconditioner
DifferentiableUnivariateFunction.derivative()	Returns the derivative of the function
InvalidRepresentationException.InvalidRepresentationException(Localizable,)	Construct an InvalidRepresentationException with a specialized message
SecondMoment.increment(double)	Updates the internal state of the statistic to reflect the addition of the new value
ArcsSet.Split.getMinus()	Get the part of the arcs set on the minus side of the splitting arc
PoissonDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
KolmogorovSmirnovTest.exactP(double,int,int,boolean)	Computes P D n m d if strict is true otherwise P D n m ge d where D n m is the 2 sample Kolmogorov Smirnov statistic See kolmogorovSmirnovStatistic double double for the definition of D n m
Cos.derivative()	Returns the derivative of the function
GeometricDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
MultivariateFunction.value(double[])	Compute the value for the function at the given point
LimitAngle.getTolerance()	Get the tolerance below which points are considered to belong to the hyperplane
KohonenTrainingTask.KohonenTrainingTask(Network,Iterator,KohonenUpdateAction)	Creates a sequential trainer for the given network
IterativeLinearSolver.getIterationManager()	Returns the iteration manager attached to this solver
NeuronString.getNetwork()	Retrieves the underlying network
AdamsBashforthIntegrator.AdamsBashforthIntegrator(int,double,double,double[],double[])	Build an Adams Bashforth integrator with the given order and step control parameters
PearsonsCorrelation.computeCorrelationMatrix(RealMatrix)	Computes the correlation matrix for the columns of the input matrix using correlation double double
FieldMatrix.operate(FieldElement[])	Returns the result of multiplying this by the vector v
FirstOrderConverter.getDimension()	Get the dimension of the problem
BSPTree.BSPTree(SubHyperplane,BSPTree,BSPTree,Object)	Build a BSPTree from its underlying elements
AbstractRealMatrix.setColumn(int,double[])	Sets the specified column of this matrix to the entries of the specified array Column indices start at 0
Interval.getMidPoint()	Get the midpoint of the interval
Vector1D.getNorm1()	Get the L1 norm for the vector
OrientedPoint.sameOrientationAs(Hyperplane)	Check if the instance has the same orientation as another hyperplane
OrientedPoint.OrientedPoint(Vector1D,boolean)	Simple constructor
Sigmoid.derivative()	Returns the derivative of the function
PermutationChromosome.decode(List)	Permutes the sequence of objects of type T according to the permutation this chromosome represents For example if this chromosome represents a permutation 3 0 1 2 and the unpermuted sequence is a b c d this yields d a b c
ArrayRealVector.getDistance(RealVector)	Distance between two vectors
SparseGradient.atan2(SparseGradient,SparseGradient)	Two arguments arc tangent operation
GaussNewtonOptimizer.GaussNewtonOptimizer(boolean)	Simple constructor with default settings
OLSMultipleLinearRegression.calculateHat()	Compute the hat matrix
BaseMultivariateOptimizer.optimize()	Stores data and performs the optimization
UncorrelatedRandomVectorGenerator.UncorrelatedRandomVectorGenerator(int,NormalizedRandomGenerator)	Simple constructor
CompositeFormat.parseFixedstring(String,String,ParsePosition)	Parse source for an expected fixed string
Gaussian.Gaussian(double,double,double)	Gaussian with given normalization factor mean and standard deviation
Fitness.fitness()	Compute the fitness This is usually very time consuming so the value should be cached
Quaternion.dotProduct(Quaternion)	Computes the dot product of the instance by a quaternion
PearsonsCorrelation.PearsonsCorrelation(double[][])	Create a PearsonsCorrelation from a rectangular array whose columns represent values of variables to be correlated
Region.buildNew(BSPTree)	Build a region using the instance as a prototype
FieldVector3D.distanceSq(Vector3D,FieldVector3D)	Compute the square of the distance between two vectors
BSPTree.getCloseCuts(Point,double)	Get the cells whose cut sub hyperplanes are close to the point
SparseFieldVector.mapDivide(FieldElement)	Map a division operation to each entry
RealMatrixFormat.RealMatrixFormat(String,String,String,String,String,String)	Create an instance with custom prefix suffix and separator
FieldVector3D.getAlpha()	Get the azimuth of the vector
SummaryStatistics.getGeometricMean()	Returns the geometric mean of the values that have been added
Vector1DFormat.parse(String,ParsePosition)	Parses a string to produce a Vector object
MersenneTwister.MersenneTwister(long)	Creates a new random number generator using a single long seed
StandardDeviation.getN()	Returns the number of values that have been added
GraggBulirschStoerIntegrator.setInterpolationControl(boolean,int)	Set the interpolation order control parameter
DerivativeStructure.expm1()	Exponential minus 1
BracketFinder.search(UnivariateFunction,GoalType,double,double)	Search new points that bracket a local optimum of the function
AbstractRealMatrix.getRowDimension()	Returns the number of rows of this matrix
ParameterizedODE.setParameter(String,double)	Set the value for a given parameter
BesselJ.BesselJResult.getVals()	the computed function values
RandomDataImpl.nextHypergeometric(int,int,int)	Generates a random value from the Hypergeometric Distribution
EmpiricalDistribution.EmpiricalDistribution()	Creates a new EmpiricalDistribution with the default bin count
SearchInterval.SearchInterval(double,double,double)	
SparseFieldVector.dotProduct(FieldVector)	Compute the dot product
Array2DRowRealMatrix.getRowDimension()	Returns the number of rows of this matrix
FieldRotation.applyInverseTo(FieldVector3D)	Apply the inverse of the rotation to a vector
OpenMapRealVector.OpenMapSparseIterator.next()	
SingularValueDecomposition.getSolver()	Get a solver for finding the A X B solution in least square sense
Decimal64.pow(double)	Power operation
LaplaceDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
AggregateSummaryStatistics.getMean()	Returns the arithmetic mean of the available values This version returns the mean of all the aggregated data
Percentile.copy(Percentile,Percentile)	Copies source to dest
Dfp.hashCode()	Gets a hashCode for the instance
Asin.value(double)	Compute the value of the function
JDKRandomGenerator.setSeed(int)	Sets the seed of the underlying random number generator using an int seed
StatUtils.mean(double[])	Returns the arithmetic mean of the entries in the input array or Double NaN if the array is empty
BSPTreeVisitor.visitOrder(BSPTree)	Determine the visit order for this node
FastMath.max(long,long)	Compute the maximum of two values
AbstractRegion.getBarycenter()	Get the barycenter of the instance
DfpMath.sin(Dfp)	computes the sine of the argument
DfpDec.nextAfter(Dfp)	Returns the next number greater than this one in the direction of x
Array2DRowFieldMatrix.walkInRowOrder(FieldMatrixPreservingVisitor)	Visit but don t change all matrix entries in row order
AdamsNordsieckTransformer.updateHighOrderDerivativesPhase1(Array2DRowRealMatrix)	Update the high order scaled derivatives for Adams integrators phase 1
BaseAbstractUnivariateSolver.getStartValue()	the initial guess
S2Point.distance(Point)	Compute the distance between the instance and another point
LevenbergMarquardtOptimizer.getCostRelativeTolerance()	Gets the value of a tuning parameter
Line.getTolerance()	Get the tolerance below which points are considered to belong to the hyperplane
UnivariateMultiStartOptimizer.getEvaluations()	Get the number of evaluations of the objective function
AbstractFieldMatrix.preMultiply(FieldMatrix)	Premultiply this matrix by m
SimplePointChecker.converged(int,PAIR,PAIR)	Check if the optimization algorithm has converged considering the last two points
Array2DRowRealMatrix.preMultiply(double[])	Returns the row vector result of premultiplying this by the vector v
RandomData.nextExponential(double)	Generates a random value from the exponential distribution with specified mean
DSCompiler.checkCompatibility(DSCompiler)	Check rules set compatibility
HermiteInterpolator.value(double)	Interpolate value at a specified abscissa
MatrixUtils.createFieldIdentityMatrix(Field,int)	Returns dimension x dimension identity matrix
RandomDataGenerator.nextCauchy(double,double)	Generates a random value from the Cauchy Distribution
ExceptionContext.setValue(String,Object)	Sets the context key value pair
PolynomialsUtils.shift(double[],double)	Compute the coefficients of the polynomial Ps x whose values at point x will be the same as the those from the original polynomial P x when computed at x shift
ArrayFieldVector.subtract(ArrayFieldVector)	Compute this minus v
ArithmeticUtils.addAndCheck(int,int)	Add two integers checking for overflow
FieldVector3D.orthogonal()	Get a vector orthogonal to the instance
AbstractStepInterpolator.setInterpolatedTime(double)	Set the time of the interpolated point
NotARotationMatrixException.NotARotationMatrixException(Localizable,)	Simple constructor
StatUtils.populationVariance(double[])	Returns the population variance of the entries in the input array or Double NaN if the array is empty
MathArrays.shuffle(int[],int,Position,RandomGenerator)	Shuffle the entries of the given array using the Fisher Yates algorithm
DiagonalMatrix.add(DiagonalMatrix)	Compute the sum of this and m
BisectionSolver.BisectionSolver()	Construct a solver with default accuracy 1e 6
SimpleUnivariateValueChecker.SimpleUnivariateValueChecker()	Build an instance with default thresholds
Vector3D.getNormSq()	Get the square of the norm for the vector
SphericalCoordinates.getTheta()	Get the azimuthal angle in x y plane
DummyLocalizable.DummyLocalizable(String)	Simple constructor
StandardDeviation.copy()	Returns a copy of the statistic with the same internal state
AbstractUnivariateStatistic.evaluate(double[],int,int)	Returns the result of evaluating the statistic over the specified entries in the input array
DerivativeStructure.rootN(int)	Nth root
RealVector.walkInOptimizedOrder(RealVectorPreservingVisitor,int,int)	Visits but does not alter some entries of this vector in optimized order The order in which the entries are visited is selected so as to lead to the most efficient implementation it might depend on the concrete implementation of this abstract class
RealFieldElement.linearCombination(double,T,double,T,double,T)	Compute a linear combination
SparseFieldVector.set(FieldElement)	Set all elements to a single value
AbstractRealMatrix.setColumnMatrix(int,RealMatrix)	Sets the specified column of this matrix to the entries of the specified column matrix Column indices start at 0
LimitAngle.isDirect()	Check if the hyperplane orientation is direct
ArrayFieldVector.subtract(FieldVector)	Compute this minus v
LeastSquaresBuilder.start(RealVector)	Configure the initial guess
BaseOptimizer.getConvergenceChecker()	Gets the convergence checker
RealVector.walkInDefaultOrder(RealVectorChangingVisitor)	Visits and possibly alters all entries of this vector in default order increasing index
RealFieldElement.log1p()	Shifted natural logarithm
S1Point.distance(S1Point,S1Point)	Compute the distance angular separation between two points
FastMath.toIntExact(long)	Convert a long to interger detecting overflows
NotPositiveException.NotPositiveException(Number)	Construct the exception
MultistepIntegrator.setStarterIntegrator(FirstOrderIntegrator)	Set the starter integrator
SecantSolver.SecantSolver()	Construct a solver with default accuracy 1e 6
GaussIntegratorFactory.legendre(int,double,double)	Creates a Gauss Legendre integrator of the given order
BSPTreeVisitor.visitLeafNode(BSPTree)	Visit a leaf BSP tree node node having a null sub hyperplane
ProperFractionFormat.ProperFractionFormat(NumberFormat,NumberFormat,NumberFormat)	Create a proper formatting instance with a custom number format for each of the whole numerator and denominator
BigFraction.BigFraction(double,int)	Create a fraction given the double value and maximum denominator
AdamsIntegrator.updateHighOrderDerivativesPhase2(double[],double[],Array2DRowRealMatrix)	Update the high order scaled derivatives Adams integrators phase 2
Combinations.comparator()	Defines a lexicographic ordering of combinations
MultivariateFunctionMappingAdapter.unboundedToBounded(double[])	Maps an array from unbounded to bounded
KMeansPlusPlusClusterer.cluster(Collection,int,int)	Runs the K means clustering algorithm
ZeroException.ZeroException(Localizable,)	Construct the exception with a specific context
AbstractRealMatrix.walkInOptimizedOrder(RealMatrixChangingVisitor)	Visit and possibly change all matrix entries using the fastest possible order
DerivativeStructure.DerivativeStructure(double,DerivativeStructure,double,DerivativeStructure,double,DerivativeStructure,double,DerivativeStructure)	Linear combination constructor
FieldVector.mapInvToSelf()	Map the 1 x function to each entry
S1Point.getVector()	Get the corresponding normalized vector in the 2D euclidean space
LogNormalDistribution.LogNormalDistribution(RandomGenerator,double,double,double)	Creates a log normal distribution
ISAACRandom.setSeed(int[])	Sets the seed of the underlying random number generator using an int array seed
KalmanFilter.getStateDimension()	Returns the dimension of the state estimation vector
SynchronizedMultivariateSummaryStatistics.clear()	Resets all statistics and storage
Decimal64.getReal()	Get the real value of the number
AbstractStorelessUnivariateStatistic.equals(Object)	Returns true iff object is an AbstractStorelessUnivariateStatistic returning the same values as this for getResult and getN
Mean.Mean()	Constructs a Mean
MatrixUtils.createFieldVector(T[])	Creates a FieldVector using the data from the input array
TTest.t(double,StatisticalSummary)	Computes a t statistic to use in comparing the mean of the dataset described by sampleStats to mu
IntervalsSet.IntervalsSet(BSPTree)	Build an intervals set from an inside outside BSP tree
SparseGradient.getReal()	Get the real value of the number
SecondMoment.SecondMoment()	Create a SecondMoment instance
ConvergenceChecker.converged(int,PAIR,PAIR)	Check if the optimization algorithm has converged
BlockFieldMatrix.createMatrix(int,int)	Create a new FieldMatrix of the same type as the instance with the supplied row and column dimensions
DefaultFieldMatrixPreservingVisitor.end()	End visiting a matrix
Vector1D.add(Vector)	Add a vector to the instance
SparseGradient.hypot(SparseGradient)	Returns the hypotenuse of a triangle with sides this and y sqrt this2 y2 avoiding intermediate overflow or underflow
ContinuousOutputModel.handleStep(StepInterpolator,boolean)	Handle the last accepted step
RandomGenerator.nextBoolean()	Returns the next pseudorandom uniformly distributed boolean value from this random number generator s sequence
AbstractStepInterpolator.setSoftPreviousTime(double)	Restrict step range to a limited part of the global step
BrentSolver.BrentSolver(double,double)	Construct a solver
SparseFieldVector.walkInDefaultOrder(FieldVectorPreservingVisitor,int,int)	Visits but does not alter some entries of this vector in default order increasing index
MultivariateDifferentiableVectorMultiStartOptimizer.MultivariateDifferentiableVectorMultiStartOptimizer(MultivariateDifferentiableVectorOptimizer,int,RandomVectorGenerator)	Create a multi start optimizer from a single start optimizer
Line.setOriginOffset(double)	Set the offset of the origin
StatisticalSummary.getSum()	Returns the sum of the values that have been added to Univariate
UnivariateSolverUtils.solve(UnivariateFunction,double,double,double)	Convenience method to find a zero of a univariate real function A default solver is used
FastMath.max(double,double)	Compute the maximum of two values
Rotation.getQ0()	Get the scalar coordinate of the quaternion
StorelessUnivariateStatistic.getN()	Returns the number of values that have been added
Array2DRowFieldMatrix.walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)	Visit but don t change some matrix entries in column order
LeastSquaresBuilder.parameterValidator(ParameterValidator)	Configure the validator of the model parameters
NordsieckStepInterpolator.reinitialize(double,double,double[],Array2DRowRealMatrix)	Reinitialize the instance
FastMath.sin(double)	Sine function
FieldVector3D.distanceInf(FieldVector3D,Vector3D)	Compute the distance between two vectors according to the L norm
ValueServer.ValueServer(RandomDataImpl)	Construct a ValueServer instance using a RandomDataImpl as its source of random data
AbstractRealMatrix.addToEntry(int,int,double)	Adds in place the specified value to the specified entry of this matrix Row and column indices start at 0
RandomDataGenerator.nextUniform(double,double)	Generates a uniformly distributed random value from the open interval lower upper i e endpoints excluded
SparseFieldVector.getData()	Returns vector entries as a T array
AklToussaintHeuristic.reducePoints(Collection)	Returns a point set that is reduced by all points for which it is safe to assume that they are not part of the convex hull
BSPTree.pruneAroundConvexCell(Object,Object,Object)	Prune a tree around a cell
ExceptionContext.ExceptionContext(Throwable)	Simple constructor
RealVector.getDimension()	Returns the size of the vector
ArrayRealVector.mapDivideToSelf(double)	Divide each entry by the argument
Dfp.acosh()	Inverse hyperbolic cosine operation
BinaryChromosome.BinaryChromosome(List)	Constructor
ArrayRealVector.getLInfNorm()	Returns the L norm of the vector
Complex.acos()	Compute the inverse cosine of this complex number
StorelessCovariance.getCovarianceMatrix()	Returns the covariance matrix
EnumeratedIntegerDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in Z P X x 0
Vector3D.getNorm()	Get the L2 norm for the vector
UnivariateDifferentiableVectorFunction.value(DerivativeStructure)	Compute the value for the function
EnumeratedIntegerDistribution.sample()	Generate a random value sampled from this distribution
RRQRDecomposition.getSolver()	Get a solver for finding the A X B solution in least square sense
TestUtils.gDataSetsComparison(long[],long[])	
Vector1D.getNormInf()	Get the L norm for the vector
EnumeratedDistribution.sample(int)	Generate a random sample from the distribution
AbstractRandomGenerator.nextInt(int)	Returns a pseudorandom uniformly distributed int value between 0 inclusive and the specified value exclusive drawn from this random number generator s sequence
OpenIntToDoubleHashMap.put(int,double)	Put a value associated with a key in the map
ListPopulation.getFittestChromosome()	Access the fittest chromosome in this population
Dfp.divide(Dfp)	Divide this by divisor
Complex.+(b/2t)i)	
Well19937c.Well19937c()	Creates a new random number generator
SymmetricGaussIntegrator.SymmetricGaussIntegrator(Pair)	Creates an integrator from the given pair of points first element of the pair and weights second element of the pair
Skewness.clear()	Clears the internal state of the Statistic
Dfp.sinh()	Hyperbolic sine operation
DfpDec.newInstance(byte,byte)	Creates an instance with a non finite value
DescriptiveStatistics.setMinImpl(UnivariateStatistic)	Sets the implementation for the minimum
DefaultIterativeLinearSolverEvent.DefaultIterativeLinearSolverEvent(Object,int,RealVector,RealVector,double)	Creates a new instance of this class This implementation does not deep copy the specified vectors x b
StatisticalMultivariateSummary.getMin()	Returns an array whose ith entry is the minimum of the ith entries of the arrays that correspond to each multivariate sample
ResizableDoubleArray.substituteMostRecentElement(double)	Substitutes value for the most recently added value
UniformIntegerDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
LogNormalDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
DerivativeStructure.asin()	Arc sine operation
SubCircle.SubCircle(Hyperplane,Region)	Simple constructor
UnivariateOptimizer.optimize()	Stores data and performs the optimization
SynchronizedSummaryStatistics.getMeanImpl()	Returns the currently configured mean implementation
VectorFormat.format(Vector)	Formats a Vector object to produce a string
BracketingNthOrderBrentSolverDFP.getMaxEvaluations()	Get the maximal number of function evaluations
LogisticDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
Quaternion.getQ2()	Gets the third component of the quaternion second component of the vector part
PascalDistribution.logProbability(int)	For a random variable X whose values are distributed according to this distribution this method returns log P X x where log is the natural logarithm In other words this method represents the logarithm of the probability mass function PMF for the distribution Note that due to the floating point precision and under overflow issues this method will for some distributions be more precise and faster than computing the logarithm of IntegerDistribution probability int
Logistic.Parametric.gradient(double,)	Computes the value of the gradient at x
SumOfLogs.clear()	Clears the internal state of the Statistic
Tan.derivative()	Returns the derivative of the function
BigFraction.add(long)	Adds the value of this fraction to the passed long returning the result in reduced form
TooManyEvaluationsException.TooManyEvaluationsException(Number)	Construct the exception
MathArrays.convolve(double[],double[])	Calculates the convolution between two sequences
DescriptiveStatistics.setGeometricMeanImpl(UnivariateStatistic)	Sets the implementation for the gemoetric mean
Dfp.isInfinite()	Check if instance is infinite
NormalDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
IntervalUtils.getAgrestiCoullInterval(int,int,double)	Create an Agresti Coull binomial confidence interval for the true probability of success of an unknown binomial distribution with the given observed number of trials successes and confidence level
BinomialTest.binomialTest(int,int,double,AlternativeHypothesis,double)	Returns whether the null hypothesis can be rejected with the given confidence level
ArrayFieldVector.ArrayFieldVector(FieldVector,FieldVector)	Construct a vector by appending one vector to another vector
WeibullDistribution.WeibullDistribution(double,double,double)	Create a Weibull distribution with the given shape scale and inverse cumulative probability accuracy and a location equal to zero
OrderedTuple.getComponents()	Get the components array
AbstractRealDistribution.sample()	Generate a random value sampled from this distribution
Well19937a.Well19937a(long)	Creates a new random number generator using a single long seed
Plane.getPointAt(Vector2D,double)	Get one point from the 3D space
EmpiricalDistribution.getUpperBounds()	Returns a fresh copy of the array of upper bounds for the bins
ODEIntegrator.getEventHandlers()	Get all the event handlers that have been added to the integrator
Line.wholeLine()	Build a sub line covering the whole line
EarthMoversDistance.compute(double[],double[])	Compute the distance between two n dimensional vectors
RealMatrixPreservingVisitor.end()	End visiting a matrix
DfpField.getSqr3Reciprocal()	Get the constant 3 3
ArrayFieldVector.projection(FieldVector)	Find the orthogonal projection of this vector onto another vector
Plane.copySelf()	Copy the instance
ArcsSet.InconsistentStateAt2PiWrapping.ArcsSet.InconsistentStateAt2PiWrapping()	Simple constructor
Segment.Segment(Vector3D,Vector3D,Line)	Build a segment
MathUnsupportedOperationException.getMessage()	
BigReal.BigReal(long,MathContext)	Build an instance from a long
FunctionUtils.sample(UnivariateFunction,double,double,int)	Samples the specified univariate real function on the specified interval
CombinatoricsUtils.factorialLog(int)	Compute the natural logarithm of the factorial of n
MathArrays.checkPositive(double[])	Check that all entries of the input array are strictly positive
DefaultRealMatrixPreservingVisitor.end()	End visiting a matrix
RealVector.mapDivide(double)	Divide each entry by the argument Returns a new vector
RandomGenerator.nextLong()	Returns the next pseudorandom uniformly distributed long value from this random number generator s sequence All 264 possible long values should be produced with approximately equal probability
StepInterpolator.getCurrentTime()	Get the current grid point time
SynchronizedSummaryStatistics.equals(Object)	Returns true iff object is a SummaryStatistics instance and all statistics have the same values as this
FuzzyKMeansClusterer.getClusters()	Returns the list of clusters resulting from the last call to cluster Collection
FastMath.min(double,double)	Compute the minimum of two values
Percentile.Percentile(double)	Constructs a Percentile with the specific quantile value and the following default method type Percentile EstimationType LEGACY default NaN strategy NaNStrategy REMOVED a Kth Selector KthSelector
ConstantRealDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
Frequency.getCumFreq(int)	Returns the cumulative frequency of values less than or equal to v
DescriptiveStatistics.getKurtosis()	Returns the Kurtosis of the available values Kurtosis is a measure of the peakedness of a distribution
DerivativeStructure.reciprocal()	Returns the multiplicative inverse of this element
ArcsSet.Split.getPlus()	Get the part of the arcs set on the plus side of the splitting arc
LegendreRuleFactory.LegendreRuleFactory()	
SubLine.SubLine(Line,IntervalsSet)	Simple constructor
FieldRotation.getAngle()	Get the angle of the rotation
BigReal.reciprocal()	Returns the multiplicative inverse of this element
DerivativeStructure.linearCombination(DerivativeStructure,DerivativeStructure,DerivativeStructure,DerivativeStructure,DerivativeStructure,DerivativeStructure,DerivativeStructure,DerivativeStructure)	Compute a linear combination
TricubicSplineInterpolator.interpolate(double[],double[],double[],double[][][])	Compute an interpolating function for the dataset
JacobianMatrices.setInitialParameterJacobian(String,double[])	Set the initial value of a column of the Jacobian matrix with respect to one parameter
Frequency.hashCode()	
EigenDecomposition.EigenDecomposition(double[],double[])	Calculates the eigen decomposition of the symmetric tridiagonal matrix The Householder matrix is assumed to be the identity matrix
Vector3D.distanceInf(Vector)	Compute the distance between the instance and another vector according to the L norm
FuzzyKMeansClusterer.getEpsilon()	Returns the convergence criteria used by this instance
StatUtils.min(double[])	Returns the minimum of the entries in the input array or Double NaN if the array is empty
Well44497a.Well44497a(long)	Creates a new random number generator using a single long seed
StatisticalSummary.getStandardDeviation()	Returns the standard deviation of the available values
IterationManager.IterationManager(int,MaxCountExceededCallback)	Creates a new instance of this class
DiagonalMatrix.inverse(double)	Computes the inverse of this diagonal matrix
DSCompiler.taylor(double[],int,)	Evaluate Taylor expansion of a derivative structure
MathArrays.equalsIncludingNaN(double[],double[])	Returns true iff both arguments are null or have same dimensions and all their elements are equal as defined by this method
Max.getN()	Returns the number of values that have been added
BinomialDistribution.getNumberOfTrials()	Access the number of trials for this distribution
SimpleRegression.getMeanSquareError()	Returns the sum of squared errors divided by the degrees of freedom usually abbreviated MSE
BlockRealMatrix.walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)	Visit but don t change some matrix entries using the fastest possible order
SynchronizedSummaryStatistics.setSumImpl(StorelessUnivariateStatistic)	Sets the implementation for the Sum
HarmonicCurveFitter.withStartPoint(double[])	Configure the start point initial guess
DescriptiveStatistics.replaceMostRecentValue(double)	Replaces the most recently stored value with the given value
MultivariateNormalMixtureExpectationMaximization.fit(MixtureMultivariateNormalDistribution)	Fit a mixture model to the data supplied to the constructor
OrientedPoint.getTolerance()	Get the tolerance below which points are considered to belong to the hyperplane
LogNormalDistribution.LogNormalDistribution(double,double)	Create a log normal distribution using the specified scale and shape
Line.getOriginOffset()	Get the offset of the origin
DerivativeStructure.log()	Natural logarithm
UnivariatePeriodicInterpolator.UnivariatePeriodicInterpolator(UnivariateInterpolator,double)	Builds an interpolator
Covariance.Covariance(RealMatrix,boolean)	Create a covariance matrix from a matrix whose columns represent covariates
TDistribution.density(double)	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF
SynchronizedMultivariateSummaryStatistics.getSumSq()	Returns an array whose ith entry is the sum of squares of the ith entries of the arrays that have been added using MultivariateSummaryStatistics addValue double
GeneticAlgorithm.getGenerationsEvolved()	Returns the number of generations evolved to reach StoppingCondition in the last run
Plane.Plane(Vector3D)	Build a plane normal to a given direction and containing the origin
AbstractFieldMatrix.walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)	Visit and possibly change some matrix entries in row order
MathArrays.normalizeArray(double[],double)	Normalizes an array to make it sum to a specified value
ArrayRealVector.ArrayRealVector(ArrayRealVector)	Construct a vector from another vector using a deep copy
QRDecomposition.QRDecomposition(RealMatrix,double)	Calculates the QR decomposition of the given matrix
FieldVector3D.crossProduct(FieldVector3D,Vector3D)	Compute the cross product of two vectors
DoublePoint.DoublePoint(double[])	Build an instance wrapping an double array
Vector3D.isInfinite()	Returns true if any coordinate of this vector is infinite and none are NaN false otherwise
FastMath.random()	Returns a pseudo random number between 0 0 and 1 0
Neuron.getIdentifier()	Gets the neuron s identifier
AbstractStepInterpolator.getGlobalCurrentTime()	Get the current global grid point time
CorrelatedRandomVectorGenerator.getRootMatrix()	Get the root of the covariance matrix
TriangularDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
SynchronizedMultivariateSummaryStatistics.setSumImpl(StorelessUnivariateStatistic[])	Sets the implementation for the Sum
KalmanFilter.getMeasurementDimension()	Returns the dimension of the measurement vector
RandomDataGenerator.nextSample(Collection,int)	Returns an array of k objects selected randomly from the Collection c
StatUtils.product(double[])	Returns the product of the entries in the input array or Double NaN if the array is empty
ComplexFormat.ComplexFormat()	Create an instance with the default imaginary character i and the default number format for both real and imaginary parts
BSPTree.merge(BSPTree,LeafMerger)	Merge a BSP tree with the instance
GeometricDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
S1Point.hashCode()	Get a hashCode for the 2D vector
DerivativeStructure.rint()	Get the whole number that is the nearest to the instance or the even one if x is exactly half way between two integers
MultipleLinearRegression.estimateRegressionParameters()	Estimates the regression parameters b
Acosh.value(double)	Compute the value of the function
FieldVector3D.dotProduct(FieldVector3D,Vector3D)	Compute the dot product of two vectors
MathArrays.equals(float[],float[])	Returns true iff both arguments are null or have same dimensions and all their elements are equal as defined by Precision equals float float
Decimal64.toString()	The returned String is equal to Double toString this doubleValue
OutOfRangeException.getHi()	the higher bound
EnumeratedDistribution.sample(int,T[])	Generate a random sample from the distribution
IterationManager.incrementIterationCount()	Increments the iteration count by one and throws an exception if the maximum number of iterations is reached This method should be called at the beginning of a new iteration
FieldRotation.applyInverseTo(Rotation,FieldVector3D)	Apply the inverse of a rotation to a vector
ResizableDoubleArray.ResizableDoubleArray(int)	Creates an instance with the specified initial capacity
VectorialCovariance.clear()	Clears the internal state of the Statistic
DefaultMeasurementModel.DefaultMeasurementModel(RealMatrix,RealMatrix)	Create a new MeasurementModel taking RealMatrix objects as input parameters for the respective measurement matrix and noise
Atan.value(double)	Compute the value of the function
BigReal.BigReal(BigDecimal)	Build an instance from a BigDecimal
ArrayRealVector.map(UnivariateFunction)	Acts as if implemented as return copy mapToSelf function Returns a new vector Does not change instance data
EmpiricalDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
ClusterEvaluator.isBetterScore(double,double)	Returns whether the first evaluation score is considered to be better than the second one by this evaluator
AbstractMultipleLinearRegression.estimateRegressionParameters()	Estimates the regression parameters b
FieldVector3D.FieldVector3D(RealFieldElement,Vector3D,RealFieldElement,Vector3D)	Linear constructor Build a vector from two other ones and corresponding scale factors
ExceptionContext.getValue(String)	Gets the value associated to the given context key
CombinatoricsUtils.binomialCoefficient(int,int)	Returns an exact representation of the Binomial Coefficient n choose k the number of k element subsets that can be selected from an n element set
RealVectorFormat.getPrefix()	Get the format prefix
SummaryStatistics.getVariance()	Returns the sample variance of the available values
MatrixUtils.checkSubtractionCompatible(AnyMatrix,AnyMatrix)	Check if matrices are subtraction compatible
Variance.Variance(boolean,SecondMoment)	Constructs a Variance with the specified isBiasCorrected property and the supplied external second moment
FieldVector3D.add(RealFieldElement,Vector3D)	Add a scaled vector to the instance
SynchronizedSummaryStatistics.setGeoMeanImpl(StorelessUnivariateStatistic)	Sets the implementation for the geometric mean
TestUtils.t(double,double[])	
RandomDataImpl.RandomDataImpl(RandomGenerator)	Construct a RandomDataImpl using the supplied RandomGenerator as the source of non secure random data
RealDistribution.density(double)	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF
RealFieldElement.reciprocal()	Returns the multiplicative inverse of this element
BetaDistribution.BetaDistribution(RandomGenerator,double,double,double)	Creates a distribution
EigenDecomposition.getDeterminant()	Computes the determinant of the matrix
HarmonicFitter.fit(double[])	Fit an harmonic function to the observed points
CauchyDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
EuclideanIntegerPoint.getPoint()	Get the n dimensional point in integer space
HarmonicOscillator.value(DerivativeStructure)	Simple mathematical function
Dfp.asinh()	Inverse hyperbolic sine operation
ArrayRealVector.walkInDefaultOrder(RealVectorChangingVisitor)	Visits and possibly alters all entries of this vector in default order increasing index
Decimal64.hypot(Decimal64)	Returns the hypotenuse of a triangle with sides this and y sqrt this2 y2 avoiding intermediate overflow or underflow
BOBYQAOptimizer.BOBYQAOptimizer(int,double,double)	
Array2DRowRealMatrix.getData()	Returns matrix entries as a two dimensional array
BigFractionField.getZero()	Get the additive identity of the field
PolynomialFunction.derivative()	Returns the derivative as a UnivariateFunction
LinearConstraint.LinearConstraint(RealVector,Relationship,double)	Build a constraint involving a single linear equation
Median.withNaNStrategy(NaNStrategy)	Build a new instance similar to the current one except for the NaN handling strategy
DiagonalMatrix.inverse()	Computes the inverse of this diagonal matrix
OpenIntToFieldHashMap.Iterator.advance()	Advance iterator one step further
SparseFieldVector.outerProduct(FieldVector)	Compute the outer product
LeastSquaresBuilder.model(MultivariateVectorFunction,MultivariateMatrixFunction)	Configure the model function
Variance.evaluate(double[],double[],double,int,int)	Returns the weighted variance of the entries in the specified portion of the input array using the precomputed weighted mean value Returns Double NaN if the designated subarray is empty
NelderMeadSimplex.NelderMeadSimplex(int,double,double,double,double,double)	Build a Nelder Mead simplex with specified coefficients
TestUtils.chiSquareTestDataSetsComparison(long[],long[])	
ChromosomePair.getFirst()	Access the first chromosome
FastMath.toRadians(double)	Convert degrees to radians with error of less than 0 5 ULP
IterationListener.initializationPerformed(IterationEvent)	Invoked after completion of the initial phase of the iterative algorithm prior to the main iteration loop
OpenIntToDoubleHashMap.iterator()	Get an iterator over map elements
AbstractRegion.buildNew(BSPTree)	Build a region using the instance as a prototype
OpenIntToDoubleHashMap.OpenIntToDoubleHashMap(double)	Build an empty map with default size
AbstractRealMatrix.setRowVector(int,RealVector)	Sets the specified row of this matrix to the entries of the specified vector Row indices start at 0
FeatureInitializerFactory.uniform(double,double)	Uniform sampling of the given range
KolmogorovSmirnovTest.cdf(double,int)	Calculates P D n d using the method described in 1 with quick decisions for extreme values given in 2 see above The result is not exact as with cdfExact double int because calculations are based on double rather than BigFraction
MultistepIntegrator.getSafety()	Get the safety factor for stepsize control
RealFieldElement.atanh()	Inverse hyperbolic tangent operation
NelderMeadSimplex.iterate(MultivariateFunction,Comparator)	Compute the next simplex of the algorithm
ResizableDoubleArray.addElementRolling(double)	Adds an element to the end of the array and removes the first element in the array Returns the discarded first element
CMAESOptimizer.getStatisticsDHistory()	History of D matrix
Well512a.Well512a(int[])	Creates a new random number generator using an int array seed
FieldMatrix.walkInOptimizedOrder(FieldMatrixPreservingVisitor)	Visit but don t change all matrix entries using the fastest possible order
ArrayRealVector.getDataRef()	Get a reference to the underlying data array
ConvexHullGenerator.generate(Collection)	Builds the convex hull from the set of input points
ProperFractionFormat.ProperFractionFormat(NumberFormat)	Create a proper formatting instance with a custom number format for the whole numerator and denominator
Complex.equals(Complex,Complex,int)	Test for the floating point equality between Complex objects
BracketingNthOrderBrentSolver.BracketingNthOrderBrentSolver(double,int)	Construct a solver
SparseGradient.ceil()	Get the smallest whole number larger than instance
FastFourierTransformer.mdfft(Object,TransformType)	Performs a multi dimensional Fourier transform on a given array Use transform Complex TransformType in a row column implementation in any number of dimensions with O N log N complexity with N n1 n2 n3
BlockFieldMatrix.walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)	Visit but don t change some matrix entries using the fastest possible order
Plane.Plane(Vector3D,double)	Build a plane normal to a given direction and containing the origin
BigFraction.BigFraction(long,long)	Create a BigFraction given the numerator and denominator as simple long The BigFraction is reduced to lowest terms
StatUtils.sumSq(double[],int,int)	Returns the sum of the squares of the entries in the specified portion of the input array or Double NaN if the designated subarray is empty
NakagamiDistribution.NakagamiDistribution(double,double,double)	Build a new instance
FastFourierTransformer.FastFourierTransformer(DftNormalization)	Creates a new instance of this class with various normalization conventions
DerivativeStructure.copySign(DerivativeStructure)	Returns the instance with the sign of the argument
BlockFieldMatrix.walkInRowOrder(FieldMatrixChangingVisitor)	Visit and possibly change all matrix entries in row order
LogisticDistribution.inverseCumulativeProbability(double)	Description copied from class AbstractRealDistribution
IterationEvent.IterationEvent(Object,int)	Creates a new instance of this class
FieldMatrix.walkInRowOrder(FieldMatrixPreservingVisitor)	Visit but don t change all matrix entries in row order
MultivariateNormalDistribution.sample()	Generates a random value vector sampled from this distribution
KMeansPlusPlusClusterer.KMeansPlusPlusClusterer(int,int,DistanceMeasure,RandomGenerator)	Build a clusterer
ExpandableStatefulODE.getPrimaryStateDot()	Get primary part of the current state derivative
SynchronizedSummaryStatistics.toString()	Generates a text report displaying summary statistics from values that have been added
Decimal64.compareTo(Decimal64)	The current implementation returns the same value as new Double this doubleValue compareTo new Double o doubleValue
Quaternion.Quaternion(double[])	Builds a pure quaternion from a vector assuming that the scalar part is zero
DfpDec.newInstance(int)	Create an instance from an int value
RandomDataImpl.nextPoisson(double)	Generates a random value from the Poisson distribution with the given mean
MultidimensionalCounter.iterator()	Create an iterator over this counter
AbstractStorelessUnivariateStatistic.evaluate(double[])	This default implementation calls clear then invokes increment double in a loop over the the input array and then uses getResult to compute the return value
KMeansPlusPlusClusterer.getMaxIterations()	Returns the maximum number of iterations this instance will use
CauchyDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
AbstractIntegrator.getMaxEvaluations()	Get the maximal number of functions evaluations
Gaussian.Parametric.gradient(double,)	Computes the value of the gradient at x
BigFractionFormat.getAvailableLocales()	Get the set of locales for which complex formats are available This is the same set as the NumberFormat set
AbstractCurveFitter.TheoreticalValuesFunction.getModelFunctionJacobian()	the model function Jacobian
Kurtosis.Kurtosis(FourthMoment)	Construct a Kurtosis from an external moment
MultiStartMultivariateOptimizer.MultiStartMultivariateOptimizer(MultivariateOptimizer,int,RandomVectorGenerator)	Create a multi start optimizer from a single start optimizer
MultipleLinearRegression.estimateRegressandVariance()	Returns the variance of the regressand ie Var y
OpenMapRealVector.OpenMapRealVector()	Build a 0 length vector
OpenMapRealVector.OpenMapRealVector(int,int,double)	Build a vector with known the sparseness and zero tolerance setting for advanced use only
Sum.getN()	Returns the number of values that have been added
Fraction.negate()	Return the additive inverse of this fraction
ExpandableStatefulODE.getSecondaryState(int)	Get secondary part of the current state
MultiStartUnivariateOptimizer.MultiStartUnivariateOptimizer(UnivariateOptimizer,int,RandomGenerator)	Create a multi start optimizer from a single start optimizer
LeastSquaresFactory.create(MultivariateJacobianFunction,RealVector,RealVector,RealMatrix,ConvergenceChecker,int,int,boolean,ParameterValidator)	Create a LeastSquaresProblem from the given elements There will be no weights applied unit weights
Vector1D.getX()	Get the abscissa of the vector
Covariance.covariance(double[],double[])	Computes the covariance between the two arrays using the bias corrected formula
DSCompiler.acosh(double[],int,double[],int)	Compute inverse hyperbolic cosine of a derivative structure
Dfp.log10()	Get the exponent of the greatest power of 10 that is less than or equal to abs this
Min.evaluate(double[],int,int)	Returns the minimum of the entries in the specified portion of the input array or Double NaN if the designated subarray is empty
MultivariateRealDistribution.reseedRandomGenerator(long)	Reseeds the random generator used to generate samples
AbstractMultipleLinearRegression.estimateRegressionStandardError()	Estimates the standard error of the regression
FieldVector3D.getY()	Get the ordinate of the vector
Array2DRowRealMatrix.operate(double[])	Returns the result of multiplying this by the vector v
RealFieldElement.acos()	Arc cosine operation
BracketingNthOrderBrentSolverDFP.solve(int,UnivariateDfpFunction,Dfp,Dfp,AllowedSolution)	Solve for a zero in the given interval
Complex.subtract(double)	Returns a Complex whose value is this subtrahend
RealVector.copy()	Returns a deep copy of this vector
UnivariateMatrixFunctionDifferentiator.differentiate(UnivariateMatrixFunction)	Create an implementation of a differential from a regular matrix function
UnivariatePointValuePair.getPoint()	Get the point
AbstractIntegrator.getEventHandlers()	Get all the event handlers that have been added to the integrator
LevyDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
FieldVector.copy()	Returns a deep copy of this
NeuronSquareMesh2D.NeuronSquareMesh2D(int,boolean,int,boolean,SquareNeighbourhood,FeatureInitializer[])	Creates a two dimensional network composed of square cells Each neuron not located on the border of the mesh has four neurons linked to it
Vector3DFormat.getInstance(Locale)	Returns the default 3D vector format for the given locale
CycleCrossover.CycleCrossover()	Creates a new CycleCrossover policy
RandomDataImpl.nextPascal(int,double)	Generates a random value from the Pascal Distribution
RealVector.mapToSelf(UnivariateFunction)	Acts as if it is implemented as Entry e null for Iterator it iterator it hasNext e it next e setValue function value e getValue Entries of this vector are modified in place by this method
SecondMoment.getResult()	Returns the current value of the Statistic
OrientedPoint.wholeSpace()	Build a region covering the whole space
BigFraction.subtract(long)	Subtracts the value of a long from the value of this BigFraction returning the result in reduced form
Decimal64.longValue()	The current implementation performs casting to a long
GaussianCurveFitter.ParameterGuesser.GaussianCurveFitter.ParameterGuesser(Collection)	Constructs instance with the specified observed points
FieldVector3D.FieldVector3D(RealFieldElement,Vector3D,RealFieldElement,Vector3D,RealFieldElement,Vector3D,RealFieldElement,Vector3D)	Linear constructor Build a vector from four other ones and corresponding scale factors
CombinatoricsUtils.stirlingS2(int,int)	Returns the Stirling number of the second kind S n k the number of ways of partitioning an n element set into k non empty subsets
ProcessModel.getInitialStateEstimate()	Returns the initial state estimation vector
SpearmansCorrelation.SpearmansCorrelation(RankingAlgorithm)	Create a SpearmansCorrelation with the given ranking algorithm
LogisticDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
FastMath.nextUp(double)	Compute next number towards positive infinity
CholeskyDecomposition.getLT()	Returns the transpose of the matrix L of the decomposition
FieldVector3D.dotProduct(Vector3D)	Compute the dot product of the instance and another vector
Logit.value(DerivativeStructure)	Simple mathematical function
JacobianMatrices.JacobianMatrices(FirstOrderDifferentialEquations,double[],)	Simple constructor for a secondary equations set computing Jacobian matrices
ArrayFieldVector.ArrayFieldVector(FieldElement[],ArrayFieldVector)	Construct a vector by appending one vector to another vector
PolynomialFunction.value(double)	Compute the value of the function for the given argument
Fraction.compareTo(Fraction)	Compares this object to another based on size
TooManyIterationsException.TooManyIterationsException(Number)	Construct the exception
ExpandableStatefulODE.getPrimaryState()	Get primary part of the current state
NevilleInterpolator.NevilleInterpolator()	
GaussNewtonOptimizer.GaussNewtonOptimizer(ConvergenceChecker)	Simple constructor with default settings
RealMatrix.operate(RealVector)	Returns the result of multiplying this by the vector v
SingularMatrixException.SingularMatrixException()	Construct an exception
AbstractRealMatrix.getColumnVector(int)	Get the entries at the given column index as a vector Column indices start at 0
AbstractRandomGenerator.nextFloat()	Returns the next pseudorandom uniformly distributed float value between 0 0 and 1 0 from this random number generator s sequence
SparseGradient.round()	Get the closest long to instance value
Well512a.Well512a(int)	Creates a new random number generator using a single int seed
GammaDistribution.getScale()	Returns the scale parameter of this distribution
DescriptiveStatistics.getN()	Returns the number of available values
FastMath.scalb(double,int)	Multiply a double number by a power of 2
Dfp.sqrt()	Compute the square root
StatisticalMultivariateSummary.getMean()	Returns an array whose ith entry is the mean of the ith entries of the arrays that correspond to each multivariate sample
KolmogorovSmirnovDistribution.cdf(double)	Calculates P D n d using method described in 1 with quick decisions for extreme values given in 2 see above The result is not exact as with cdfExact double because calculations are based on double rather than BigFraction
RealDistribution.inverseCumulativeProbability(double)	Computes the quantile function of this distribution For a random variable X distributed according to this distribution the returned value is inf x in R P X x p for 0 p 1 inf x in R P X x 0 for p 0
DummyStepHandler.handleStep(StepInterpolator,boolean)	Handle the last accepted step
Line.revert()	Get a line with reversed direction
SimpleRegression.getSlopeConfidenceInterval()	Returns the half width of a 95 confidence interval for the slope estimate
LUDecomposition.getPivot()	Returns the pivot permutation vector
GaussianFitter.ParameterGuesser.GaussianFitter.ParameterGuesser(WeightedObservedPoint[])	Constructs instance with the specified observed points
OpenMapRealVector.getSparsity()	the percentage of none zero elements as a decimal percent
ArrayRealVector.ebeMultiply(RealVector)	Element by element multiplication
AbstractFieldMatrix.getRow(int)	Get the entries in row number row as an array
EigenDecomposition.getSquareRoot()	Computes the square root of the matrix
TestUtils.homoscedasticTTest(StatisticalSummary,StatisticalSummary)	
KalmanFilter.getStateEstimation()	Returns the current state estimation vector
MathArrays.ebeSubtract(double[],double[])	Creates an array whose contents will be the element by element subtraction of the second argument from the first
OpenMapRealVector.OpenMapRealVector(double[])	Create from an array
Fraction.multiply(int)	Multiply the fraction by an integer
RegressionResults.getParameterEstimate(int)	Returns the parameter estimate for the regressor at the given index
RealFieldElement.add(double)	operator
MultiKMeansPlusPlusClusterer.getClusterEvaluator()	Returns the ClusterEvaluator used to determine the best clustering
LeastSquaresAdapter.LeastSquaresAdapter(LeastSquaresProblem)	Delegate the LeastSquaresProblem interface to the given implementation
Array2DRowRealMatrix.walkInRowOrder(RealMatrixChangingVisitor)	Visit and possibly change all matrix entries in row order
RealFieldElement.cbrt()	Cubic root
Vector.subtract(Vector)	Subtract a vector from the instance
ArrayRealVector.combineToSelf(double,double,RealVector)	Updates this with the linear combination of this and y
TestUtils.homoscedasticTTest(double[],double[],double)	
OrientedPoint.getOffset(Vector)	Get the offset oriented distance of a vector
Precision.equals(double,double,int)	Returns true if both arguments are equal or within the range of allowed error inclusive
FastMath.incrementExact(long)	Increment a number detecting overflows
Logistic.value(DerivativeStructure)	Simple mathematical function
DiskGenerator.ballOnSupport(List)	Create a ball whose boundary lies on prescribed support points
FieldMatrixPreservingVisitor.visit(int,int,FieldElement)	Visit one matrix entry
BaseAbstractUnivariateOptimizer.optimize(int,UnivariateFunction,GoalType,double,double)	Find an optimum in the given interval
AbstractStorelessUnivariateStatistic.increment(double)	Updates the internal state of the statistic to reflect the addition of the new value
LeastSquaresBuilder.LeastSquaresBuilder()	
Max.increment(double)	Updates the internal state of the statistic to reflect the addition of the new value
RegressionResults.getParameterEstimates()	Returns a copy of the regression parameters estimates
ArrayFieldVector.add(ArrayFieldVector)	Compute the sum of this and v
BlockRealMatrix.createBlocksLayout(int,int)	Create a data array in blocks layout
Product.getN()	Returns the number of values that have been added
FieldMatrix.getRowVector(int)	Get the entries in row number row as a vector
SolutionCallback.isSolutionOptimal()	Returns if the found solution is optimal
Vector1D.scalarMultiply(double)	Multiply the instance by a scalar
StorelessCovariance.append(StorelessCovariance)	Appends sc to this effectively aggregating the computations in sc with this After invoking this method covariances returned should be close to what would have been obtained by performing all of the increment double operations in sc directly on this
Skewness.Skewness()	Constructs a Skewness
SummaryStatistics.copy(SummaryStatistics,SummaryStatistics)	Copies source to dest
MaxIter.MaxIter(int)	
MaxIter.getMaxIter()	Gets the maximum number of evaluations
OpenIntToDoubleHashMap.containsKey(int)	Check if a value is associated with a key
WeibullDistribution.WeibullDistribution(RandomGenerator,double,double)	Creates a Weibull distribution
AbstractIntegerDistribution.logProbability(int)	For a random variable X whose values are distributed according to this distribution this method returns log P X x where log is the natural logarithm In other words this method represents the logarithm of the probability mass function PMF for the distribution Note that due to the floating point precision and under overflow issues this method will for some distributions be more precise and faster than computing the logarithm of IntegerDistribution probability int
ChebyshevDistance.compute(double[],double[])	Compute the distance between two n dimensional vectors
AbstractMultipleLinearRegression.estimateResiduals()	Estimates the residuals ie u y X b
NordsieckStepInterpolator.NordsieckStepInterpolator(NordsieckStepInterpolator)	Copy constructor
FunctionUtils.multiply()	Multiplies functions
AbstractRandomGenerator.nextLong()	Returns the next pseudorandom uniformly distributed long value from this random number generator s sequence All 264 possible long values should be produced with approximately equal probability
LevyDistribution.density(double)	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF
SimpleBounds.getUpper()	Gets the upper bounds
TriangularDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
BaseAbstractUnivariateSolver.solve(int,FUNC,double,double,double)	Solve for a zero in the given interval start at startValue
SmoothingPolynomialBicubicSplineInterpolator.SmoothingPolynomialBicubicSplineInterpolator(int)	
SynchronizedDescriptiveStatistics.apply(UnivariateStatistic)	Apply the given statistic to the data associated with this set of statistics
FastMath.rint(double)	Get the whole number that is the nearest to x or the even one if x is exactly half way between two integers
ParetoDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
BlockFieldMatrix.BlockFieldMatrix(Field,int,int)	Create a new matrix with the supplied row and column dimensions
SparseFieldVector.getDimension()	Returns the size of the vector
ChiSquaredDistribution.getDegreesOfFreedom()	Access the number of degrees of freedom
FDistribution.getNumeratorDegreesOfFreedom()	Access the numerator degrees of freedom
DerivativeStructure.cbrt()	Cubic root
PearsonsCorrelation.getCorrelationMatrix()	Returns the correlation matrix
Dfp.nextAfter(Dfp)	Returns the next number greater than this one in the direction of x
SynchronizedSummaryStatistics.getPopulationVariance()	Returns the population variance of the values that have been added
StepInterpolator.setInterpolatedTime(double)	Set the time of the interpolated point
StatUtils.sum(double[],int,int)	Returns the sum of the entries in the specified portion of the input array or Double NaN if the designated subarray is empty
PolynomialFunction.toString()	Returns a string representation of the polynomial
Skewness.getResult()	Returns the value of the statistic based on the values that have been added
KthSelector.KthSelector(PivotingStrategyInterface)	Constructor with specified pivoting strategy
MicrosphereInterpolator.MicrosphereInterpolator()	Create a microsphere interpolator with default settings
Frequency.getPct(int)	Returns the percentage of values that are equal to v as a proportion between 0 and 1
Variance.getN()	Returns the number of values that have been added
LeastSquaresAdapter.getConvergenceChecker()	Gets the convergence checker
Mean.getResult()	Returns the current value of the Statistic
Frequency.Frequency(Comparator)	Constructor allowing values Comparator to be specified
Vector3D.getNormInf()	Get the L norm for the vector
SynchronizedDescriptiveStatistics.getStandardDeviation()	Returns the standard deviation of the available values
LaplaceDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
FixedGenerationCount.isSatisfied(Population)	Determine whether or not the given number of generations have passed Increments the number of generations counter if the maximum has not been reached
ParameterizedODE.getParameter(String)	Get parameter value from its name
DefaultIterativeLinearSolverEvent.getSolution()	Returns the current estimate of the solution to the linear system to be solved This method should return an unmodifiable view or a deep copy of the actual current solution in order not to compromise subsequent iterations of the source IterativeLinearSolver
RealDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
IterationListener.iterationStarted(IterationEvent)	Invoked each time a new iteration is completed in the main iteration loop
Clusterable.getPoint()	Gets the n dimensional point
MaxCountExceededException.getMax()	the maximum number of evaluations
StorelessCovariance.StorelessCovariance(int,boolean)	Create a covariance matrix with a given number of rows and columns and the indicated bias correction
Chromosome.Chromosome()	
FastSineTransformer.FastSineTransformer(DstNormalization)	Creates a new instance of this class with various normalization conventions
SparseGradient.pow(int)	Integer power operation
Dfp.signum()	Compute the signum of the instance
IterationManager.getIterations()	Returns the number of iterations of this solver 0 if no iterations has been performed yet
MathArithmeticException.MathArithmeticException()	Default constructor
Well44497b.Well44497b(int[])	Creates a new random number generator using an int array seed
Decimal64.add(double)	operator
BlockRealMatrix.getColumn(int)	Get the entries at the given column index as an array Column indices start at 0
LogisticDistribution.LogisticDistribution(double,double)	Build a new instance
Add.Add()	
ArrayFieldVector.mapAdd(FieldElement)	Map an addition operation to each entry
Inverse.Inverse()	
DifferentiableMultivariateVectorFunction.jacobian()	Returns the jacobian function
BaseMultivariateOptimizer.getUpperBound()	the upper bounds or null if not set
FieldRotation.getAxis()	Get the normalized axis of the rotation
ConstantRealDistribution.density(double)	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF
Hyperplane.wholeHyperplane()	Build a sub hyperplane covering the whole hyperplane
WeightedEvaluation.evaluate(double[],double[])	Returns the result of evaluating the statistic over the input array using the supplied weights
KthSelector.select(double[],int[],int)	Select Kth value in the array
FieldRotation.applyTo(Rotation)	Apply the instance to another rotation
PearsonsCorrelation.covarianceToCorrelation(RealMatrix)	Derives a correlation matrix from a covariance matrix
Well512a.Well512a()	Creates a new random number generator
LinearObjectiveFunction.getConstantTerm()	Gets the constant of the linear equation being optimized
Percentile.withKthSelector(KthSelector)	Build a new instance similar to the current one except for the kthSelector instance specifically set
OpenMapRealMatrix.getRowDimension()	Returns the number of rows of this matrix
EnumeratedRealDistribution.inverseCumulativeProbability(double)	Computes the quantile function of this distribution For a random variable X distributed according to this distribution the returned value is inf x in R P X x p for 0 p 1 inf x in R P X x 0 for p 0
EuclideanDoublePoint.getPoint()	Get the n dimensional point in integer space
BlockRealMatrix.setRowMatrix(int,BlockRealMatrix)	Sets the entries in row number row as a row matrix Row indices start at 0
GraggBulirschStoerIntegrator.addEventHandler(EventHandler,double,double,int,UnivariateSolver)	Add an event handler to the integrator
SimplexSolver.SimplexSolver(double,int,double)	Builds a simplex solver with a specified accepted amount of error
LeastSquaresConverter.LeastSquaresConverter(MultivariateVectorFunction,double[],RealMatrix)	Builds a simple converter for correlated residuals with the specified weights
Array2DRowRealMatrix.walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)	Visit but don t change some matrix entries in row order
TrivariateGridInterpolator.interpolate(double[],double[],double[],double[][][])	Compute an interpolating function for the dataset
EuclideanIntegerPoint.EuclideanIntegerPoint(int[])	Build an instance wrapping an integer array
DormandPrince54Integrator.DormandPrince54Integrator(double,double,double,double)	Simple constructor
BSPTree.insertCut(Hyperplane)	Insert a cut sub hyperplane in a node
LeastSquaresBuilder.weight(RealMatrix)	Configure the weight matrix
QuasiSigmoidDecayFunction.QuasiSigmoidDecayFunction(double,double,long)	Creates an instance
RandomDataGenerator.reSeed(long)	Reseeds the random number generator with the supplied seed
EnclosingBall.EnclosingBall(P,double,)	Simple constructor
Frequency.Frequency()	Default constructor
EnumeratedRealDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
AbstractIntegrator.getName()	Get the name of the method
Rotation.applyInverseTo(Vector3D)	Apply the inverse of the rotation to a vector
S2Point.distance(S2Point,S2Point)	Compute the distance angular separation between two points
DescriptiveStatistics.addValue(double)	Adds the value to the dataset If the dataset is at the maximum size i e the number of stored elements equals the currently configured windowSize the first oldest element in the dataset is discarded to make room for the new value
BSPTree.BSPTree()	Build a tree having only one root cell representing the whole space
ExponentialDistribution.sample()	Generate a random value sampled from this distribution
LeastSquaresProblem.getObservationSize()	Get the number of observations rows in the Jacobian in this problem
LineSearch.LineSearch(MultivariateOptimizer,double,double,double)	The BrentOptimizer default stopping criterion uses the tolerances to check the domain point values not the function values
NormalDistribution.NormalDistribution(RandomGenerator,double,double,double)	Creates a normal distribution
Vector2D.Vector2D(double,Vector2D,double,Vector2D,double,Vector2D)	Linear constructor Build a vector from three other ones and corresponding scale factors
AbstractIntegrator.getEvaluations()	Get the number of evaluations of the differential equations function
HarmonicCurveFitter.ParameterGuesser.HarmonicCurveFitter.ParameterGuesser(Collection)	Simple constructor
NormalizedRandomGenerator.nextNormalizedDouble()	Generate a random scalar with null mean and unit standard deviation
Vector2D.distanceInf(Vector2D,Vector2D)	Compute the distance between two vectors according to the L norm
DescriptiveStatistics.getSortedValues()	Returns the current set of values in an array of double primitives sorted in ascending order The returned array is a fresh copy of the underlying data i e it is not a reference to the stored data
CMAESOptimizer.getStatisticsFitnessHistory()	History of fitness values
AbstractFieldMatrix.operate(FieldElement[])	Returns the result of multiplying this by the vector v
Circle.project(Point)	Project a point to the hyperplane
Dfp.tanh()	Hyperbolic tangent operation
BrentOptimizer.BrentOptimizer(double,double,ConvergenceChecker)	The arguments are used implement the original stopping criterion of Brent s algorithm
Vector2D.getNormInf()	Get the L norm for the vector
SimpsonIntegrator.SimpsonIntegrator()	Construct an integrator with default settings
BigFraction.bigDecimalValue()	Gets the fraction as a BigDecimal This calculates the fraction as the numerator divided by denominator
Frequency.getCumFreq(long)	Returns the cumulative frequency of values less than or equal to v
Identity.value(double)	Compute the value of the function
WeibullDistribution.getScale()	Access the scale parameter beta
ExponentialDecayFunction.ExponentialDecayFunction(double,double,long)	Creates an instance It will be such that a initValue b numCall ln valueAtNumCall initValue
RealFieldElement.atan()	Arc tangent operation
S1Point.distance(Point)	Compute the distance between the instance and another point
TriangularDistribution.density(double)	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF
SynchronizedSummaryStatistics.setSumLogImpl(StorelessUnivariateStatistic)	Sets the implementation for the sum of logs
FieldVector.getSubVector(int,int)	Get a subvector from consecutive elements
RealMatrix.walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)	Visit and possibly change some matrix entries using the fastest possible order
SummaryStatistics.getVarianceImpl()	Returns the currently configured variance implementation
ArrayRealVector.getDimension()	Returns the size of the vector
Vector2D.hashCode()	Get a hashCode for the 2D vector
Region.isFull()	Check if the instance covers the full space
AbstractLinearOptimizer.getIterations()	Get the number of iterations realized by the algorithm
AdamsIntegrator.AdamsIntegrator(String,int,int,double,double,double,double)	Build an Adams integrator with the given order and step control parameters
Acosh.value(DerivativeStructure)	Simple mathematical function
SparseGradient.multiplyInPlace(SparseGradient)	Multiply in place
FastMath.sinh(double)	Compute the hyperbolic sine of a number
FieldVector3D.FieldVector3D(double,FieldVector3D,double,FieldVector3D,double,FieldVector3D)	Linear constructor Build a vector from three other ones and corresponding scale factors
TestUtils.kolmogorovSmirnovTest(RealDistribution,double[])	
StatUtils.sumSq(double[])	Returns the sum of the squares of the entries in the input array or Double NaN if the array is empty
DescriptiveStatistics.getGeometricMeanImpl()	Returns the currently configured geometric mean implementation
FieldVector3D.distance(Vector3D)	Compute the distance between the instance and another vector according to the L2 norm
NormalDistribution.density(double)	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF
AdamsBashforthIntegrator.integrate(ExpandableStatefulODE,double)	Integrate a set of differential equations up to the given time
Precision.equalsIncludingNaN(float,float)	Returns true if both arguments are NaN or neither is NaN and they are equal as defined by equals x y 1
ContinuousOutputModel.getInitialTime()	Get the initial integration time
StatUtils.geometricMean(double[],int,int)	Returns the geometric mean of the entries in the specified portion of the input array or Double NaN if the designated subarray is empty
SecantSolver.SecantSolver(double,double)	Construct a solver
KolmogorovSmirnovTest.kolmogorovSmirnovStatistic(double[],double[])	Computes the two sample Kolmogorov Smirnov test statistic D n m sup x F n x F m x where n is the length of x m is the length of y F n is the empirical distribution that puts mass 1 n at each of the values in x and F m is the empirical distribution of the y values
HarmonicOscillator.Parametric.gradient(double,)	Computes the value of the gradient at x
SummaryStatistics.copy()	Returns a copy of this SummaryStatistics instance with the same internal state
Vector2D.toString()	Get a string representation of this vector
DescriptiveStatistics.setMeanImpl(UnivariateStatistic)	Sets the implementation for the mean
Vector3D.Vector3D(double,double)	Simple constructor
FieldVector3D.add(RealFieldElement,FieldVector3D)	Add a scaled vector to the instance
SingularValueDecomposition.getS()	Returns the diagonal matrix of the decomposition
BesselJ.value(double)	Returns the value of the constructed Bessel function of the first kind for the passed argument
AbstractRegion.checkPoint(Point)	Check a point with respect to the region
NormalDistribution.NormalDistribution(RandomGenerator,double,double)	Creates a normal distribution
GTest.gTestIntrinsic(double[],long[])	Returns the intrinsic Hardy Weinberg proportions p Value as described in p64 69 of McDonald J H 2009 Handbook of Biological Statistics 2nd ed Sparky House Publishing Baltimore Maryland
FieldVector.setEntry(int,FieldElement)	Set a single element
LogNormalDistribution.getScale()	Returns the scale parameter of this distribution
KalmanFilter.getErrorCovarianceMatrix()	Returns a copy of the current error covariance matrix
NakagamiDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
BigFraction.compareTo(BigFraction)	Compares this object to another based on size
DescriptiveStatistics.setSumsqImpl(UnivariateStatistic)	Sets the implementation for the sum of squares
LinearObjectiveFunction.value(RealVector)	Computes the value of the linear equation at the current point
ArcsSet.split(Arc)	Split the instance in two parts by an arc
SphericalCoordinates.toCartesianHessian(double[][],double[])	Convert a Hessian with respect to spherical coordinates into a Hessian with respect to Cartesian coordinates
DiagonalMatrix.multiply(DiagonalMatrix)	Returns the result of postmultiplying this by m
SynchronizedMultivariateSummaryStatistics.getN()	Returns the number of available values
SimplexOptimizer.SimplexOptimizer()	Constructor using a default convergence checker
SparseFieldVector.walkInDefaultOrder(FieldVectorChangingVisitor)	Visits and possibly alters all entries of this vector in default order increasing index
Percentile.setData(double[])	Set the data array
RectangularCholeskyDecomposition.RectangularCholeskyDecomposition(RealMatrix)	Decompose a symmetric positive semidefinite matrix
Fraction.Fraction(double,int)	Create a fraction given the double value and maximum denominator
BigFraction.getDenominatorAsLong()	Access the denominator as a long
AbstractFormat.setDenominatorFormat(NumberFormat)	Modify the denominator format
NonPositiveDefiniteMatrixException.getRow()	the row index
BlockFieldMatrix.walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)	Visit and possibly change some matrix entries using the fastest possible order
S2Point.negate()	Get the opposite of the instance
MultivariateNormalMixtureExpectationMaximization.getLogLikelihood()	Gets the log likelihood of the data under the fitted model
PearsonsCorrelation.correlation(double[],double[])	Computes the Pearson s product moment correlation coefficient between two arrays
RealFieldElement.remainder(T)	IEEE remainder operator
MatrixUtils.bigFractionMatrixToRealMatrix(FieldMatrix)	Convert a FieldMatrix BigFraction matrix to a RealMatrix
UpdatingMultipleLinearRegression.addObservations(double[][],double[])	Adds a series of observations to the regression model The lengths of x and y must be the same and x must be rectangular
RealMatrixFormat.getInstance()	Returns the default real vector format for the current locale
Dfp.newInstance(double)	Create an instance from a double value
NumberIsTooLargeException.NumberIsTooLargeException(Localizable,Number,Number,boolean)	Construct the exception with a specific context
Log1p.value(double)	Compute the value of the function
IntegerDistribution.cumulativeProbability(int,int)	For a random variable X whose values are distributed according to this distribution this method returns P x0 X x1
Cluster.Cluster()	Build a cluster centered at a specified point
DerivativeStructure.acos()	Arc cosine operation
SynchronizedSummaryStatistics.copy(SynchronizedSummaryStatistics,SynchronizedSummaryStatistics)	Copies source to dest
SynchronizedMultivariateSummaryStatistics.getSumLog()	Returns an array whose ith entry is the sum of logs of the ith entries of the arrays that have been added using MultivariateSummaryStatistics addValue double
BesselJ.BesselJResult.BesselJ.BesselJResult(double[],int)	Create a new BesselJResult with the given values and valid value count
LegendreHighPrecisionRuleFactory.LegendreHighPrecisionRuleFactory(MathContext)	
FieldVector3D.getX()	Get the abscissa of the vector
Network.getNeurons(Comparator)	Creates a list of the neurons sorted in a custom order
SimpleValueChecker.SimpleValueChecker()	Build an instance with default thresholds
Vector1DFormat.Vector1DFormat(NumberFormat)	Create an instance with a custom number format for components
CentralPivotingStrategy.pivotIndex(double[],int,int)	Find pivot index of the array so that partition and Kth element selection can be made This in particular picks a average of begin and end indices
EnumeratedRealDistribution.density(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the probability mass function PMF for the distribution
DecompositionSolver.solve(RealMatrix)	Solve the linear equation A X B for matrices A
GraggBulirschStoerIntegrator.setStabilityCheck(boolean,int,int,double)	Set the stability check controls
OpenIntToFieldHashMap.Iterator.hasNext()	Check if there is a next element in the map
StandardDeviation.getResult()	Returns the current value of the Statistic
HighamHall54Integrator.getOrder()	Get the order of the method
ValueServer.setSigma(double)	Sets the standard deviation used in GAUSSIAN MODE
MathArrays.ebeMultiply(double[],double[])	Creates an array whose contents will be the element by element multiplication of the arguments
GaussianRandomGenerator.GaussianRandomGenerator(RandomGenerator)	Create a new generator
CauchyDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
JacobianMatrices.getCurrentParameterJacobian(String,double[])	Get the current value of the Jacobian matrix with respect to one parameter
Dfp.pow(Dfp)	Power operation
AggregateSummaryStatistics.getN()	Returns the number of available values This version returns a count of all the aggregated data
DfpField.getLn5Split()	Get the constant ln 5 split in two pieces
SummaryStatistics.getMinImpl()	Returns the currently configured minimum implementation
FastFourierTransformer.transform(Complex[],TransformType)	Returns the forward inverse transform of the specified complex data set
Vector3D.angle(Vector3D,Vector3D)	Compute the angular separation between two vectors
ObjectiveFunction.ObjectiveFunction(MultivariateFunction)	
RealMatrix.walkInOptimizedOrder(RealMatrixChangingVisitor)	Visit and possibly change all matrix entries using the fastest possible order
BaseMultivariateSimpleBoundsOptimizer.optimize(int,FUNC,GoalType,double[],double[],double[])	Optimize an objective function
HypergeometricDistribution.HypergeometricDistribution(int,int,int)	Construct a new hypergeometric distribution with the specified population size number of successes in the population and sample size
RealMatrix.getColumnMatrix(int)	Get the entries at the given column index as a column matrix Column indices start at 0
FieldVector3D.distanceSq(FieldVector3D)	Compute the square of the distance between the instance and another vector
OpenMapRealMatrix.add(OpenMapRealMatrix)	Compute the sum of this matrix and m
RRQRDecomposition.RRQRDecomposition(RealMatrix)	Calculates the QR decomposition of the given matrix
Tanh.derivative()	Returns the derivative of the function
Max.Max(Max)	Copy constructor creates a new Max identical to the original
RungeKuttaIntegrator.singleStep(FirstOrderDifferentialEquations,double,double[],double)	Fast computation of a single step of ODE integration
SubHyperplane.reunite(SubHyperplane)	Compute the union of the instance and another sub hyperplane
UpdatingMultipleLinearRegression.addObservation(double[],double)	Adds one observation to the regression model
FastFourierTransformer.transform(double[],TransformType)	Returns the forward inverse transform of the specified real data set
AbstractRealMatrix.walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)	Visit and possibly change some matrix entries in row order
FastMath.subtractExact(long,long)	Subtract two numbers detecting overflows
RealVector.mapAdd(double)	Add a value to each entry
DerivativeStructure.DerivativeStructure(int,int,)	Build an instance from all its derivatives
FieldVector3D.normalize()	Get a normalized vector aligned with the instance
FieldVector3D.subtract(double,Vector3D)	Subtract a scaled vector from the instance
NakagamiDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
Decimal64.linearCombination(double,Decimal64,double,Decimal64)	Compute a linear combination
RealFieldElement.copySign(T)	Returns the instance with the sign of the argument
OpenIntToDoubleHashMap.OpenIntToDoubleHashMap(int,double)	Build an empty map with specified size
ArrayRealVector.setSubVector(int,double[])	Set a set of consecutive elements
EnumeratedDistribution.EnumeratedDistribution(RandomGenerator,List)	Create an enumerated distribution using the given random number generator and probability mass function enumeration
Well1024a.Well1024a(long)	Creates a new random number generator using a single long seed
DefaultRealMatrixPreservingVisitor.DefaultRealMatrixPreservingVisitor()	
EmpiricalDistribution.load(double[])	Computes the empirical distribution from the provided array of numbers
Vector3D.getDelta()	Get the elevation of the vector
MathArrays.natural(int)	Returns an array representing the natural number n
BracketingNthOrderBrentSolverDFP.getMaximalOrder()	Get the maximal order
FieldVector3D.dotProduct(Vector3D,FieldVector3D)	Compute the dot product of two vectors
AbstractLeastSquaresOptimizer.getCovariances(double)	Get the covariance matrix of the optimized parameters
Quaternion.getQ3()	Gets the fourth component of the quaternion third component of the vector part
Cosh.value(DerivativeStructure)	Simple mathematical function
TestUtils.gTestDataSetsComparison(long[],long[])	
FunctionUtils.collector(BivariateFunction,double)	Returns a MultivariateFunction h x defined by h x combiner combiner combiner initialValue x 0 x 1 x x length 1
MultivariateRealDistribution.density(double[])	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the cumulative distribution function If the derivative does not exist at x then an appropriate replacement should be returned e g Double POSITIVE INFINITY Double NaN or the limit inferior or limit superior of the difference quotient
AbstractRealMatrix.subtract(RealMatrix)	Returns this minus m
RealMatrixChangingVisitor.start(int,int,int,int,int,int)	Start visiting a matrix
MathUtils.copySign(int,int)	Returns the first argument with the sign of the second argument
Logistic.derivative()	Returns the derivative of the function
MaxEval.unlimited()	Factory method that creates instance of this class that represents a virtually unlimited number of evaluations
RealFieldElement.pow(int)	Integer power operation
TournamentSelection.getArity()	Gets the arity number of chromosomes drawn to the tournament
RotationOrder.getA1()	Get the axis of the first rotation
LogNormalDistribution.LogNormalDistribution(double,double,double)	Create a log normal distribution using the specified scale shape and inverse cumulative distribution accuracy
SymmLQ.getCheck()	Returns true if symmetry of the matrix and symmetry as well as positive definiteness of the preconditioner should be checked
Vector.getNormInf()	Get the L norm for the vector
BetaDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
TestUtils.chiSquareTest(double[],long[])	
Dfp.linearCombination(Dfp,Dfp,Dfp,Dfp,Dfp,Dfp)	Compute a linear combination
AbstractRealMatrix.setEntry(int,int,double)	Set the entry in the specified row and column Row and column indices start at 0
AbstractSubHyperplane.isEmpty()	Check if the instance is empty
BlockFieldMatrix.walkInOptimizedOrder(FieldMatrixPreservingVisitor)	Visit but don t change all matrix entries using the fastest possible order
BicubicSplineInterpolatingFunction.partialDerivativeY(double,double)	
LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer(double,double,double)	Build an optimizer for least squares problems with default values for some of the tuning parameters see the other contructor
MathArrays.distance1(double[],double[])	Calculates the L1 sum of abs distance between two points
ArrayFieldVector.set(FieldElement)	Set all elements to a single value
OpenMapRealVector.unitVector()	Creates a unit vector pointing in the direction of this vector
LaguerreSolver.doSolve()	Method for implementing actual optimization algorithms in derived classes
DormandPrince853Integrator.getOrder()	Get the order of the method
MultivariateSummaryStatistics.getN()	Returns the number of available values
Vector3D.getZero()	Get the null vector of the vectorial space or origin point of the affine space
DescriptiveStatistics.getValues()	Returns the current set of values in an array of double primitives
NordsieckStepInterpolator.getInterpolatedStateVariation()	Get the state vector variation from current to interpolated state
RealFieldElement.log()	Natural logarithm
OrderedCrossover.OrderedCrossover()	
FieldRotation.FieldRotation(RealFieldElement,RealFieldElement,RealFieldElement,RealFieldElement,boolean)	Build a rotation from the quaternion coordinates
S2Point.getTheta()	Get the azimuthal angle theta in the x y plane
EnumeratedIntegerDistribution.probability(int)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the probability mass function PMF for the distribution
ExpandableStatefulODE.setPrimaryState(double[])	Set primary part of the current state
SparseFieldVector.append(FieldVector)	Construct a vector by appending a vector to this vector
SynchronizedSummaryStatistics.getSumLogImpl()	Returns the currently configured sum of logs implementation
RealVector.SparseEntryIterator.hasNext()	
ElitisticListPopulation.nextGeneration()	Start the population for the next generation The elitismRate percents of the best chromosomes are directly copied to the next generation
DoubleArray.addElements(double[])	Adds elements to the end of this expandable array
UnivariateVectorFunctionDifferentiator.differentiate(UnivariateVectorFunction)	Create an implementation of a differential from a regular vector function
BlockRealMatrix.addToEntry(int,int,double)	Adds in place the specified value to the specified entry of this matrix Row and column indices start at 0
RandomData.nextInt(int,int)	Generates a uniformly distributed random integer between lower and upper endpoints included
SparseGradient.add(SparseGradient)	Compute this a
RealVector.walkInDefaultOrder(RealVectorPreservingVisitor,int,int)	Visits but does not alter some entries of this vector in default order increasing index
RandomDataGenerator.nextHexString(int)	Generates a random string of hex characters of length len
StatUtils.mode(double[])	Returns the sample mode s The mode is the most frequently occurring value in the sample If there is a unique value with maximum frequency this value is returned as the only element of the output array Otherwise the returned array contains the maximum frequency elements in increasing order For example if sample is 0 12 5 6 0 13 5 17 the returned array will have length two with 0 in the first element and 5 in the second
DividedDifferenceInterpolator.DividedDifferenceInterpolator()	
Plane.intersection(Plane)	Build the line shared by the instance and another plane
ParameterJacobianProvider.computeParameterJacobian(double,double[],double[],String,double[])	Compute the Jacobian matrix of ODE with respect to one parameter
MathArrays.scaleInPlace(double,double[])	Multiply each element of an array by a value
Constant.value(double)	Compute the value of the function
Median.Median(Median)	Copy constructor creates a new Median identical to the original
NonMonotonicSequenceException.getIndex()	Get the index of the wrong value
SubLine.SubLine(Vector3D,Vector3D,double)	Create a sub line from two endpoints
GaussIntegrator.integrate(UnivariateFunction)	Returns an estimate of the integral of f x w x where w is a weight function that depends on the actual flavor of the Gauss integration scheme
Plane.reset(Plane)	Reset the instance from another one
CauchyDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
GammaDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
SynchronizedRandomGenerator.setSeed(int)	Sets the seed of the underlying random number generator using an int seed
BracketingNthOrderBrentSolver.getMaximalOrder()	Get the maximal order
Dfp.Dfp(Dfp)	Copy constructor
UniformRealDistribution.UniformRealDistribution(double,double)	Create a uniform real distribution using the given lower and upper bounds
DefaultRealMatrixChangingVisitor.end()	End visiting a matrix
Dfp.remainder(double)	IEEE remainder operator
InitialGuess.getInitialGuess()	Gets the initial guess
WeibullDistribution.inverseCumulativeProbability(double)	Computes the quantile function of this distribution For a random variable X distributed according to this distribution the returned value is inf x in R P X x p for 0 p 1 inf x in R P X x 0 for p 0
Log1p.value(DerivativeStructure)	Simple mathematical function
Acos.Acos()	
Network.addLink(Neuron,Neuron)	Adds a link from neuron a to neuron b
RandomAdaptor.createAdaptor(RandomGenerator)	Factory method to create a Random using the supplied RandomGenerator
AbstractFieldMatrix.setSubMatrix(FieldElement[][],int,int)	Replace the submatrix starting at row column using data in the input subMatrix array Indexes are 0 based
MultivariateNormalDistribution.getCovariances()	Gets the covariance matrix
ZipfDistribution.ZipfDistribution(int,double)	Create a new Zipf distribution with the given number of elements and exponent
DfpDec.newInstance(Dfp)	Create an instance by copying an existing one
DoubleArray.addElementRolling(double)	Adds an element to the end of the array and removes the first element in the array Returns the discarded first element
Arc.getSup()	Get the upper angular bound of the arc
SumOfLogs.SumOfLogs(SumOfLogs)	Copy constructor creates a new SumOfLogs identical to the original
IntervalsSet.IntervalsSet(double)	Build an intervals set representing the whole real line
DescriptiveStatistics.apply(UnivariateStatistic)	Apply the given statistic to the data associated with this set of statistics
SparseGradient.linearCombination(double,SparseGradient,double,SparseGradient,double,SparseGradient)	Compute a linear combination
DefaultFieldMatrixPreservingVisitor.DefaultFieldMatrixPreservingVisitor(FieldElement)	Build a new instance
FieldVector3D.distance(FieldVector3D,Vector3D)	Compute the distance between two vectors according to the L2 norm
RealFieldElement.multiply(double)	operator
NormalDistribution.probability(double,double)	For a random variable X whose values are distributed according to this distribution this method returns P x0 X x1
Line.wholeSpace()	Build a region covering the whole space
NullArgumentException.NullArgumentException()	Default constructor
TestUtils.chiSquareTest(long[][],double)	
TestUtils.homoscedasticT(StatisticalSummary,StatisticalSummary)	
DSCompiler.remainder(double[],int,double[],int,double[],int)	Perform remainder of two derivative structures
DiagonalMatrix.getRowDimension()	Returns the number of rows of this matrix
LevyDistribution.getLocation()	Get the location parameter of the distribution
OrientedPoint.project(Point)	Project a point to the hyperplane
RealVector.cosine(RealVector)	Computes the cosine of the angle between this vector and the argument
FastMath.cos(double)	Cosine function
ExpandableStatefulODE.getPrimaryMapper()	Get an equations mapper for the primary equations set
GeneticAlgorithm.getMutationPolicy()	Returns the mutation policy
BlockRealMatrix.multiply(RealMatrix)	Returns the result of postmultiplying this by m
AbstractFieldMatrix.setRowVector(int,FieldVector)	Set the entries in row number row as a vector
SimplePointChecker.SimplePointChecker(double,double,int)	Builds an instance with specified thresholds
SumOfLogs.copy(SumOfLogs,SumOfLogs)	Copies source to dest
SparseGradient.remainder(double)	IEEE remainder operator
RealVector.Entry.RealVector.Entry()	Simple constructor
TestUtils.tTest(double,double[],double)	
Decimal64.exp()	Exponential
StatisticalSummaryValues.hashCode()	Returns hash code based on values of statistics
EmbeddedRungeKuttaIntegrator.integrate(ExpandableStatefulODE,double)	Integrate a set of differential equations up to the given time
MultivariateMultiStartOptimizer.MultivariateMultiStartOptimizer(MultivariateOptimizer,int,RandomVectorGenerator)	Create a multi start optimizer from a single start optimizer
GaussNewtonOptimizer.getDecomposition()	Get the matrix decomposition algorithm used to solve the normal equations
GammaDistribution.GammaDistribution(RandomGenerator,double,double,double)	Creates a Gamma distribution
FastMath.signum(double)	Compute the signum of a number
Array2DRowFieldMatrix.getRowDimension()	Returns the number of rows in the matrix
ValueServer.getEmpiricalDistribution()	Returns the EmpiricalDistribution used when operating in 0
PolynomialSplineFunction.polynomialSplineDerivative()	Get the derivative of the polynomial spline function
Vector3DFormat.Vector3DFormat(String,String,String)	Create an instance with custom prefix suffix and separator
Tan.Tan()	
TTest.homoscedasticTTest(double[],double[],double)	Performs a two sided t test evaluating the null hypothesis that sample1 and sample2 are drawn from populations with the same mean with significance level alpha assuming that the subpopulation variances are equal Use tTest double double double to perform the test without the assumption of equal variances
OpenIntToDoubleHashMap.get(int)	Get the stored value associated with the given key
FDistribution.FDistribution(double,double,double)	Creates an F distribution using the given degrees of freedom and inverse cumulative probability accuracy
OpenIntToFieldHashMap.Iterator.key()	Get the key of current entry
BaseAbstractMultivariateVectorOptimizer.getConvergenceChecker()	Get the convergence checker
RandomDataGenerator.nextPermutation(int,int)	Generates an integer array of length k whose entries are selected randomly without repetition from the integers 0 n 1 inclusive
AbstractEvaluation.getCovariances(double)	Get the covariance matrix of the optimized parameters Note that this operation involves the inversion of the JTJ matrix where J is the Jacobian matrix The threshold parameter is a way for the caller to specify that the result of this computation should be considered meaningless and thus trigger an exception
Ceil.Ceil()	
Dfp.linearCombination(double[],Dfp[])	Compute a linear combination
BSPTree.getPlus()	Get the tree on the plus side of the cut hyperplane
RealVector.mapDivideToSelf(double)	Divide each entry by the argument
DefaultFieldMatrixPreservingVisitor.start(int,int,int,int,int,int)	Start visiting a matrix
Sinh.Sinh()	
FieldMatrix.operate(FieldVector)	Returns the result of multiplying this by the vector v
Abs.Abs()	
ChiSquaredDistribution.ChiSquaredDistribution(RandomGenerator,double,double)	Create a Chi Squared distribution with the given degrees of freedom and inverse cumulative probability accuracy
UniformRealDistribution.UniformRealDistribution()	Create a standard uniform real distribution with lower bound inclusive equal to zero and upper bound exclusive equal to one
RandomDataImpl.reSeed(long)	Reseeds the random number generator with the supplied seed
Complex.add(Complex)	Returns a Complex whose value is this addend
IntervalsSet.IntervalsSet(double,double)	Build an intervals set corresponding to a single interval
FDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
MultivariateSummaryStatistics.setSumLogImpl(StorelessUnivariateStatistic[])	Sets the implementation for the sum of logs
Dfp.subtract(Dfp)	Subtract x from this
Decimal64Field.getInstance()	Returns the unique instance of this class
RotationOrder.toString()	Get a string representation of the instance
DescriptiveStatistics.getMin()	Returns the minimum of the available values
DefaultFieldMatrixChangingVisitor.DefaultFieldMatrixChangingVisitor(FieldElement)	Build a new instance
KalmanFilter.predict(RealVector)	Predict the internal state estimation one time step ahead
NonLinearConjugateGradientOptimizer.BracketingStep.NonLinearConjugateGradientOptimizer.BracketingStep(double)	
RealFieldElement.ceil()	Get the smallest whole number larger than instance
EmpiricalDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
Cosh.value(double)	Compute the value of the function
SynchronizedMultivariateSummaryStatistics.setGeoMeanImpl(StorelessUnivariateStatistic[])	Sets the implementation for the geometric mean
ComplexField.getOne()	Get the multiplicative identity of the field
NonPositiveDefiniteMatrixException.getThreshold()	the absolute positivity threshold
FieldRotation.getQ2()	Get the second coordinate of the vectorial part of the quaternion
CauchyDistribution.density(double)	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF
IntervalsSet.asList()	Build an ordered list of intervals representing the instance
SparseFieldVector.subtract(SparseFieldVector)	Optimized method to compute this minus v
SubLine.SubLine(Hyperplane,Region)	Simple constructor
Array2DRowFieldMatrix.getColumnDimension()	Returns the number of columns in the matrix
FastMath.nextAfter(float,double)	Get the next machine representable number after a number moving in the direction of another number
WeightedObservedPoint.WeightedObservedPoint(double,double,double)	Simple constructor
AbstractStepInterpolator.getInterpolatedDerivatives()	Get the derivatives of the state vector of the interpolated point
Tanh.value(double)	Compute the value of the function
FixedElapsedTime.isSatisfied(Population)	Determine whether or not the maximum allowed time has passed
Vector3D.Vector3D(double,Vector3D,double,Vector3D,double,Vector3D)	Linear constructor Build a vector from three other ones and corresponding scale factors
LogisticDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
Atanh.value(DerivativeStructure)	Simple mathematical function
Frequency.toString()	Return a string representation of this frequency distribution
Complex.Complex(double)	Create a complex number given only the real part
FirstOrderIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])	Integrate the differential equations up to the given time
MatrixUtils.checkSymmetric(RealMatrix,double)	Checks whether a matrix is symmetric
SimplePointChecker.SimplePointChecker(double,double)	Build an instance with specified thresholds
PreconditionedIterativeLinearSolver.solveInPlace(RealLinearOperator,RealVector,RealVector)	Returns an estimate of the solution to the linear system A x b The solution is computed in place initial guess is modified
DerivativeStructure.linearCombination(double[],DerivativeStructure[])	Compute a linear combination
Line.distance(Vector2D)	Compute the distance between the instance and a point
AbstractRealMatrix.getSubMatrix(int[],int[])	Gets a submatrix Rows and columns are indicated counting from 0 to n 1
AbstractFieldMatrix.walkInColumnOrder(FieldMatrixChangingVisitor)	Visit and possibly change all matrix entries in column order
BaseAbstractUnivariateIntegrator.getAbsoluteAccuracy()	Get the actual absolute accuracy
FastMath.floorDiv(long,long)	Finds q such that a q b r with 0 r b if b 0 and b r 0 if b 0
PointVectorValuePair.getPoint()	Gets the point
PolynomialFunctionNewtonForm.evaluate(double[],double[],double)	Evaluate the Newton polynomial using nested multiplication It is also called Horner s Rule and takes O N time
ResizableDoubleArray.setElement(int,double)	Sets the element at the specified index If the specified index is greater than getNumElements 1 the numElements property is increased to index 1 and additional storage is allocated if necessary for the new element and all uninitialized elements between the new element and the previous end of the array
OpenIntToFieldHashMap.Iterator.value()	Get the value of current entry
Vector3DFormat.Vector3DFormat(String,String,String,NumberFormat)	Create an instance with custom prefix suffix separator and format for components
FunctionUtils.compose()	Composes functions
HypergeometricDistribution.cumulativeProbability(int)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
FastMath.incrementExact(int)	Increment a number detecting overflows
IllinoisSolver.IllinoisSolver(double)	Construct a solver
TestUtils.tTest(double,StatisticalSummary)	
Incrementor.incrementCount()	Adds one to the current iteration count
Identity.Identity()	
Percentile.getQuantile()	Returns the value of the quantile field determines what percentile is computed when evaluate is called with no quantile argument
Atan2.value(double,double)	Compute the value for the function
IntervalsSet.iterator()	The iterator returns the limit values of sub intervals in ascending order
RealMatrix.getColumn(int)	Get the entries at the given column index as an array Column indices start at 0
ArrayRealVector.subtract(RealVector)	Subtract v from this vector
RealVector.unitVector()	Creates a unit vector pointing in the direction of this vector
Dfp.getZero()	Get the constant 0
FDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
Complex.tanh()	Compute the hyperbolic tangent of this complex number
AggregateSummaryStatistics.AggregateSummaryStatistics(SummaryStatistics)	Initializes a new AggregateSummaryStatistics with the specified statistics object as a prototype for contributing statistics and for the internal aggregate statistics This provides for customized statistics implementations to be used by contributing and aggregate statistics
SynchronizedMultivariateSummaryStatistics.getMin()	Returns an array whose ith entry is the minimum of the ith entries of the arrays that have been added using MultivariateSummaryStatistics addValue double
RealVectorFormat.getSuffix()	Get the format suffix
SelectionPolicy.select(Population)	Select two chromosomes from the population
Identity.value(DerivativeStructure)	Simple mathematical function
VectorialCovariance.hashCode()	
BicubicSplineInterpolatingFunction.BicubicSplineInterpolatingFunction(double[],double[],double[][],double[][],double[][],double[][])	
Interval.getLower()	Get the lower bound of the interval
PolynomialSplineFunction.derivative()	Get the derivative of the polynomial spline function
Frequency.getCumFreq(Comparable)	Returns the cumulative frequency of values less than or equal to v
FieldHermiteInterpolator.value(FieldElement)	Interpolate value at a specified abscissa
LevenbergMarquardtOptimizer.getParameterRelativeTolerance()	Gets the value of a tuning parameter
NullArgumentException.NullArgumentException(Localizable,)	
NormalDistribution.sample()	Generate a random value sampled from this distribution
Frequency.getSumFreq()	Returns the sum of all frequencies
VectorialCovariance.getResult()	Get the covariance matrix
AbstractSimplex.getPoint(int)	Get the simplex point stored at the requested index
Expm1.Expm1()	
FirstOrderDifferentialEquations.computeDerivatives(double,double[],double[])	Get the current time derivative of the state vector
AbstractFieldMatrix.getData()	Returns matrix entries as a two dimensional array
Variance.evaluate(double[])	Returns the variance of the entries in the input array or Double NaN if the array is empty
BSPTreeVisitor.visitInternalNode(BSPTree)	Visit a BSP tree node node having a non null sub hyperplane
LinearConstraint.getRelationship()	Gets the relationship between left and right hand sides
Ulp.value(double)	Compute the value of the function
Vector2D.crossProduct(Vector2D,Vector2D)	Compute the cross product of the instance and the given points
Fraction.hashCode()	Gets a hashCode for the fraction
MonotoneChain.isIncludeCollinearPoints()	Returns if collinear points on the hull will be added as hull vertices
NonSymmetricMatrixException.getRow()	the row index of the entry
NonLinearConjugateGradientOptimizer.NonLinearConjugateGradientOptimizer(Formula,ConvergenceChecker,UnivariateSolver,Preconditioner)	
TestUtils.tTest(double[],double[])	
Max.copy()	Returns a copy of the statistic with the same internal state
ElitisticListPopulation.ElitisticListPopulation(List,int,double)	Creates a new ElitisticListPopulation instance
PolynomialFitter.fit()	Get the polynomial fitting the weighted x y points
BigRealField.getInstance()	Get the unique instance
Atan.Atan()	
FastMath.toDegrees(double)	Convert radians to degrees with error of less than 0 5 ULP
BigReal.hashCode()	
HermiteInterpolator.getPolynomials()	Compute the interpolation polynomials
Dfp.linearCombination(Dfp,Dfp,Dfp,Dfp,Dfp,Dfp,Dfp,Dfp)	Compute a linear combination
AbstractStepInterpolator.isForward()	Check if the natural integration direction is forward
SemiVariance.copy()	Returns a copy of the statistic with the same internal state
FieldVector3D.add(double,Vector3D)	Add a scaled vector to the instance
MultiDirectionalSimplex.MultiDirectionalSimplex(int,double)	Build a multi directional simplex with default coefficients
S2Point.getSpace()	Get the space to which the point belongs
ArithmeticUtils.gcd(long,long)	Gets the greatest common divisor of the absolute value of two numbers using the binary gcd method which avoids division and modulo operations See Knuth 4 5 2 algorithm B This algorithm is due to Josef Stein 1961
DfpField.newDfp()	Makes a Dfp with a value of 0
FieldVector.setSubVector(int,FieldVector)	Set a set of consecutive elements
OpenMapRealVector.add(RealVector)	Compute the sum of this vector and v
AbstractConvergenceChecker.getRelativeThreshold()	the relative threshold
RootsOfUnity.getReal(int)	Get the real part of the k th n th root of unity
Array2DRowFieldMatrix.setSubMatrix(FieldElement[][],int,int)	Replace the submatrix starting at row column using data in the input subMatrix array Indexes are 0 based
Incrementor.incrementCount(int)	Performs multiple increments
ArithmeticUtils.subAndCheck(long,long)	Subtract two long integers checking for overflow
UnivariateDfpFunction.value(Dfp)	Compute the value of the function
MapUtils.computeU(NeuronSquareMesh2D,DistanceMeasure)	Computes the U matrix of a two dimensional map
ValueServer.resetReplayFile()	Resets REPLAY MODE file pointer to the beginning of the valuesFileURL
Decimal64.cosh()	Hyperbolic cosine operation
IntervalUtils.getClopperPearsonInterval(int,int,double)	Create a Clopper Pearson binomial confidence interval for the true probability of success of an unknown binomial distribution with the given observed number of trials successes and confidence level
RealFieldElement.linearCombination(T,T,T,T)	Compute a linear combination
AbstractListChromosome.AbstractListChromosome(T[])	Constructor copying the input representation
Beta.logBeta(double,double)	Returns the value of log B p q for 0 x 1 and p q 0 Based on the NSWC Library of Mathematics Subroutines implementation DBETLN
ArrayFieldVector.projection(ArrayFieldVector)	Find the orthogonal projection of this vector onto another vector
LogNormalDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
Dfp.linearCombination(Dfp[],Dfp[])	Compute a linear combination
Array2DRowFieldMatrix.Array2DRowFieldMatrix(Field,FieldElement[][],boolean)	Create a new FieldMatrix T using the input array as the underlying data array
Hyperplane.getOffset(Point)	Get the offset oriented distance of a point
ElitisticListPopulation.getElitismRate()	Access the elitism rate
SynchronizedMultivariateSummaryStatistics.getGeometricMean()	Returns an array whose ith entry is the geometric mean of the ith entries of the arrays that have been added using MultivariateSummaryStatistics addValue double
BigFraction.getDenominator()	Access the denominator as a BigInteger
TestUtils.pairedTTest(double[],double[])	
DefaultIterativeLinearSolverEvent.getNormOfResidual()	Returns the norm of the residual The returned value is not required to be exact Instead the norm of the so called updated residual if available should be returned For example the conjugate gradient method computes a sequence of residuals the norm of which is cheap to compute However due to accumulation of round off errors this residual might differ from the true residual after some iterations See e g A Greenbaum and Z Strakos Predicting the Behavior of Finite Precision Lanzos and Conjugate Gradient Computations Technical Report 538 Department of Computer Science New York University 1991 available here
MathRuntimeException.MathRuntimeException(Localizable,)	
NPointCrossover.NPointCrossover(int)	Creates a new NPointCrossover policy using the given number of points
MillerUpdatingRegression.regress(int)	Conducts a regression on the data in the model using a subset of regressors
GammaDistribution.density(double)	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF
SparseFieldVector.walkInOptimizedOrder(FieldVectorPreservingVisitor)	Visits but does not alter all entries of this vector in optimized order The order in which the entries are visited is selected so as to lead to the most efficient implementation it might depend on the concrete implementation of this abstract class
RandomVectorGenerator.nextVector()	Generate a random vector
Cbrt.Cbrt()	
SynchronizedDescriptiveStatistics.getElement(int)	Returns the element at the specified index
MultidimensionalCounter.getSize()	Get the total number of elements
PolynomialFunctionNewtonForm.degree()	Returns the degree of the polynomial
ExponentialDistribution.ExponentialDistribution(RandomGenerator,double,double)	Creates an exponential distribution
Vector3D.dotProduct(Vector3D,Vector3D)	Compute the dot product of two vectors
LeastSquaresFactory.create(MultivariateVectorFunction,MultivariateMatrixFunction,double[],double[],RealMatrix,ConvergenceChecker,int,int)	Create a LeastSquaresProblem from the given elements
Sum.getResult()	Returns the current value of the Statistic
Variance.isBiasCorrected()	Returns the isBiasCorrected
HaltonSequenceGenerator.getNextIndex()	Returns the index i of the next point in the Halton sequence that will be returned by calling nextVector
PiecewiseBicubicSplineInterpolatingFunction.isValidPoint(double,double)	Indicates whether a point is within the interpolation range
SparseGradient.divide(double)	operator
GaussNewtonOptimizer.withDecomposition(Decomposition)	Configure the decomposition algorithm
ParametricUnivariateFunction.value(double,)	Compute the value of the function
FastMath.abs(int)	Absolute value
BaseAbstractUnivariateIntegrator.integrate(int,UnivariateFunction,double,double)	Integrate the function in the given interval
BracketingNthOrderBrentSolverDFP.BracketingNthOrderBrentSolverDFP(Dfp,Dfp,Dfp,int)	Construct a solver
DividedDifferenceInterpolator.interpolate(double[],double[])	Compute an interpolating function for the dataset
CauchyDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
ODEIntegrator.getStepHandlers()	Get all the step handlers that have been added to the integrator
SemiVariance.getVarianceDirection()	Returns the varianceDirection property
LegendreGaussIntegrator.LegendreGaussIntegrator(int,double,double,int,int)	Build a Legendre Gauss integrator with given accuracies and iterations counts
RealMatrix.walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)	Visit and possibly change some matrix entries in row order
Sinh.derivative()	Returns the derivative of the function
FieldMatrix.walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)	Visit but don t change some matrix entries using the fastest possible order
Quaternion.add(Quaternion)	Computes the sum of the instance and another quaternion
BigFraction.multiply(int)	Multiply the value of this fraction by the passed int returning the result in reduced form
Quaternion.getQ0()	Gets the first component of the quaternion scalar part
PSquarePercentile.PSquarePercentile(double)	Constructs a PSquarePercentile with the specific percentile value
RegionFactory.union(Region,Region)	Compute the union of two regions
RealVector.Entry.getIndex()	Get the index of the entry
BicubicSplineInterpolatingFunction.partialDerivativeXX(double,double)	
PearsonsCorrelation.getCorrelationPValues()	Returns a matrix of p values associated with the two sided null hypothesis that the corresponding correlation coefficient is zero
SumOfLogs.copy()	Returns a copy of the statistic with the same internal state
OpenIntToDoubleHashMap.remove(int)	Remove the value associated with a key
TestUtils.kolmogorovSmirnovStatistic(double[],double[])	
BitsStreamGenerator.nextBoolean()	Returns the next pseudorandom uniformly distributed boolean value from this random number generator s sequence
GTest.gTestDataSetsComparison(long[],long[],double)	Performs a G Test Log Likelihood Ratio Test comparing two binned data sets The test evaluates the null hypothesis that the two lists of observed counts conform to the same frequency distribution with significance level alpha Returns true iff the null hypothesis can be rejected with 100 1 alpha percent confidence
GaussNewtonOptimizer.optimize(LeastSquaresProblem)	Solve the non linear least squares problem
Decimal64.negate()	Returns the additive inverse of this element
Decimal64.subtract(Decimal64)	Compute this a
Dfp.dotrap(int,String,Dfp,Dfp)	Raises a trap This does not set the corresponding flag however
Atanh.value(double)	Compute the value of the function
AbstractConvergenceChecker.AbstractConvergenceChecker(double,double)	Build an instance with a specified thresholds
UnivariatePeriodicInterpolator.interpolate(double[],double[])	Compute an interpolating function for the dataset
Line.project(Point)	Project a point to the hyperplane
OrderedTuple.hashCode()	
Dfp.newInstance()	Create an instance with a value of 0
Decimal64.log1p()	Shifted natural logarithm
MultivariateDifferentiableVectorFunction.value(DerivativeStructure[])	Compute the value for the function at the given point
Fraction.reciprocal()	Return the multiplicative inverse of this fraction
OrientedPoint.getOffset(Point)	Get the offset oriented distance of a point
SubHyperplane.getSize()	Get the size of the instance
Quaternion.isUnitQuaternion(double)	Checks whether the instance is a unit quaternion within a given tolerance
SummaryStatistics.getGeoMeanImpl()	Returns the currently configured geometric mean implementation
ModelFunctionJacobian.getModelFunctionJacobian()	Gets the Jacobian of the model function to be optimized
OpenMapRealMatrix.OpenMapRealMatrix(OpenMapRealMatrix)	Build a matrix by copying another one
StandardDeviation.evaluate(double[],int,int)	Returns the Standard Deviation of the entries in the specified portion of the input array or Double NaN if the designated subarray is empty
Beta.regularizedBeta(double,double,double,int)	Returns the regularized beta function I x a b
PolynomialFitter.fit(int,double[])	Get the coefficients of the polynomial fitting the weighted data points
LaplaceDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
SynchronizedSummaryStatistics.getMaxImpl()	Returns the currently configured maximum implementation
Quaternion.getPositivePolarForm()	Returns the polar form of the quaternion
FastMath.cosh(double)	Compute the hyperbolic cosine of a number
AbstractConvergenceChecker.AbstractConvergenceChecker()	Build an instance with default thresholds
FieldLUDecomposition.getP()	Returns the P rows permutation matrix
PolynomialsUtils.createHermitePolynomial(int)	Create a Hermite polynomial
EnclosingBall.getCenter()	Get the center of the ball
Sum.copy()	Returns a copy of the statistic with the same internal state
WeibullDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
NonLinearConjugateGradientOptimizer.optimize()	Stores data and performs the optimization
AbstractFormat.setNumeratorFormat(NumberFormat)	Modify the numerator format
EmpiricalDistribution.EmpiricalDistribution(int)	Creates a new EmpiricalDistribution with the specified bin count
Decimal64.scalb(int)	Multiply the instance by a power of 2
IterativeLinearSolverEvent.providesResidual()	Returns true if getResidual is supported The default implementation returns false
ProcessModel.getControlMatrix()	Returns the control matrix
Gaussian.value(DerivativeStructure)	Simple mathematical function
AVLTree.Node.getPrevious()	Get the node containing the next smaller or equal element
JacobiPreconditioner.JacobiPreconditioner(double[],boolean)	Creates a new instance of this class
WeightedObservedPoints.add(double,double)	Adds a point to the sample
SynchronizedSummaryStatistics.getSumsq()	Returns the sum of the squares of the values that have been added
RandomDataImpl.nextZipf(int,double)	Generates a random value from the Zipf Distribution
LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer(double,ConvergenceChecker,double,double,double,double)	Constructor that allows the specification of a custom convergence checker in addition to the standard ones
Complex.conjugate()	Return the conjugate of this complex number
EnclosingBall.contains(P)	Check if a point is within the ball or at boundary
SparseGradient.pow(double,SparseGradient)	Compute ax where a is a double and x a SparseGradient
Sigmoid.Parametric.Sigmoid.Parametric()	
AbstractSubHyperplane.applyTransform(Transform)	Apply a transform to the instance
SummaryStatistics.setGeoMeanImpl(StorelessUnivariateStatistic)	Sets the implementation for the geometric mean
Product.increment(double)	Updates the internal state of the statistic to reflect the addition of the new value
Circle.getTolerance()	Get the tolerance below which points are considered to belong to the hyperplane
RandomDataGenerator.nextSecureLong(long,long)	Generates a uniformly distributed random long integer between lower and upper endpoints included from a secure random sequence
BigFraction.add(BigFraction)	Adds the value of this fraction to another returning the result in reduced form
MathArrays.equalsIncludingNaN(float[],float[])	Returns true iff both arguments are null or have same dimensions and all their elements are equal as defined by this method
AbstractRealMatrix.walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)	Visit and possibly change some matrix entries using the fastest possible order
PolyhedronsSet.PolyhedronsSet(BSPTree)	Build a polyhedrons set from a BSP tree
RandomData.nextHexString(int)	Generates a random string of hex characters of length len
DoublePoint.toString()	
FractionConversionException.FractionConversionException(double,long,long)	Constructs an exception with specified formatted detail message
GumbelDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
BlockFieldMatrix.getColumnMatrix(int)	Get the entries in column number column as a column matrix
OutOfRangeException.OutOfRangeException(Number,Number,Number)	Construct an exception from the mismatched dimensions
MultiStartMultivariateVectorOptimizer.getOptima()	Gets all the optima found during the last call to optimize
AbstractStepInterpolator.getPreviousTime()	Get the previous soft grid point time
AbstractRandomGenerator.AbstractRandomGenerator()	Construct a RandomGenerator
AbstractLinearOptimizer.optimize(LinearObjectiveFunction,Collection,GoalType,boolean)	Optimizes an objective function
AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(String,double,double,double[],double[])	Build an integrator with the given stepsize bounds
PolynomialFunction.value(DerivativeStructure)	Simple mathematical function
OpenMapRealVector.set(double)	Set all elements to a single value
ResizableDoubleArray.getExpansionFactor()	The expansion factor controls the size of a new array when an array needs to be expanded The expansionMode determines whether the size of the array is multiplied by the expansionFactor MULTIPLICATIVE MODE or if the expansion is additive ADDITIVE MODE expansionFactor storage locations added The default expansionMode is MULTIPLICATIVE MODE and the default expansionFactor is 2 0
AggregateSummaryStatistics.getSummary()	Return a StatisticalSummaryValues instance reporting current aggregate statistics
Array2DRowRealMatrix.walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)	Visit and possibly change some matrix entries in row order
MatrixUtils.blockInverse(RealMatrix,int)	Computes the inverse of the given matrix by splitting it into 4 sub matrices
MultivariateOptimizer.computeObjectiveValue(double[])	Computes the objective function value
SummaryStatistics.getSumsqImpl()	Returns the currently configured sum of squares implementation
UnivariateSolverUtils.verifySequence(double,double,double)	Check that lower initial upper
LaplaceDistribution.getScale()	Access the scale parameter beta
KMeansPlusPlusClusterer.KMeansPlusPlusClusterer(Random)	Build a clusterer
OpenIntToDoubleHashMap.OpenIntToDoubleHashMap(OpenIntToDoubleHashMap)	Copy constructor
BesselJ.rjBesl(double,double,int)	Calculates Bessel functions J n alpha x for non negative argument x and non negative order n alpha
SynchronizedMultivariateSummaryStatistics.hashCode()	Returns hash code based on values of statistics
SumOfSquares.SumOfSquares()	Create a SumOfSquares instance
MatrixUtils.createColumnFieldMatrix(T[])	Creates a column FieldMatrix using the data from the input array
GaussianCurveFitter.ParameterGuesser.guess()	Gets an estimation of the parameters
BlockFieldMatrix.add(FieldMatrix)	Compute the sum of this and m
EigenDecomposition.getRealEigenvalue(int)	Returns the real part of the ith eigenvalue of the original matrix
KMeansPlusPlusClusterer.KMeansPlusPlusClusterer(int,int,DistanceMeasure)	Build a clusterer
Gamma.trigamma(double)	Computes the trigamma function of x
BigReal.setRoundingMode(RoundingMode)	Sets the rounding mode for decimal divisions
SummaryStatistics.setSumLogImpl(StorelessUnivariateStatistic)	Sets the implementation for the sum of logs
ArrayRealVector.walkInOptimizedOrder(RealVectorChangingVisitor)	Visits and possibly alters all entries of this vector in optimized order The order in which the entries are visited is selected so as to lead to the most efficient implementation it might depend on the concrete implementation of this abstract class
Dfp.power10(int)	Return the specified power of 10
TDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
EuclideanIntegerPoint.toString()	
ThreeEighthesIntegrator.ThreeEighthesIntegrator(double)	Simple constructor
Dfp.atan()	Arc tangent operation
Rotation.getAngle()	Get the angle of the rotation
AbstractFieldMatrix.walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)	Visit but don t change some matrix entries using the fastest possible order
PolynomialCurveFitter.withMaxIterations(int)	Configure the maximum number of iterations
RegionFactory.difference(Region,Region)	Compute the difference of two regions
SparseGradient.tanh()	Hyperbolic tangent operation
TransformUtils.createRealImaginaryArray(Complex[])	Builds a new two dimensional array of double filled with the real and imaginary parts of the specified Complex numbers In the returned array dataRI the data is laid out as follows dataRI 0 i dataC i getReal dataRI 1 i dataC i getImaginary
HermiteInterpolator.HermiteInterpolator()	Create an empty interpolator
PolynomialSplineFunction.value(double)	Compute the value for the function
FieldVector3D.add(Vector3D)	Add a vector to the instance
NordsieckStepInterpolator.readExternal(ObjectInput)	
HighamHall54Integrator.HighamHall54Integrator(double,double,double[],double[])	Simple constructor
Quaternion.getInverse()	Returns the inverse of this instance
ResizableDoubleArray.ResizableDoubleArray(int,float,float,int)	Create a ResizableArray with the specified properties
Dfp.classify()	Returns the type one of FINITE INFINITE SNAN QNAN
Rotation.applyTo(Rotation)	Apply the instance to another rotation
SparseGradient.subtract(SparseGradient)	Compute this a
LeastSquaresAdapter.getParameterSize()	Get the number of parameters columns in the Jacobian in this problem
Vector1D.distanceSq(Vector)	Compute the square of the distance between the instance and another vector
OpenMapRealMatrix.createMatrix(int,int)	Create a new RealMatrix of the same type as the instance with the supplied row and column dimensions
Plane.toSubSpace(Vector)	Transform a space point into a sub space point
ConjugateGradient.ConjugateGradient(IterationManager,double,boolean)	Creates a new instance of this class with default stopping criterion and custom iteration manager
RealVector.isInfinite()	Check whether any coordinate of this vector is infinite and none are NaN
BaseMultivariateOptimizer.optimize(int,FUNC,GoalType,double[])	Optimize an objective function
RandomAdaptor.nextInt()	Returns the next pseudorandom uniformly distributed int value from this random number generator s sequence
Rotation.getAxis()	Get the normalized axis of the rotation
Line.pointAt(double)	Get one point from the line
FDistribution.logDensity(double)	Returns the natural logarithm of the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF If the derivative does not exist at x then an appropriate replacement should be returned e g Double POSITIVE INFINITY Double NaN or the limit inferior or limit superior of the difference quotient Note that due to the floating point precision and under overflow issues this method will for some distributions be more precise and faster than computing the logarithm of RealDistribution density double The default implementation simply computes the logarithm of density x
Line.Line(Vector2D,Vector2D,double)	Build a line from two points
Cbrt.value(DerivativeStructure)	Simple mathematical function
ArrayRealVector.ArrayRealVector(ArrayRealVector,double[])	Construct a vector by appending one vector to another vector
Dfp.equals(Object)	Check if instance is equal to x
BigRealField.getOne()	Get the multiplicative identity of the field
Vector3D.getNorm1()	Get the L1 norm for the vector
Dfp.scalb(int)	Multiply the instance by a power of 2
AbstractRealMatrix.getSubMatrix(int,int,int,int)	Gets a submatrix Rows and columns are indicated counting from 0 to n 1
BlockFieldMatrix.getSubMatrix(int,int,int,int)	Get a submatrix Rows and columns are indicated counting from 0 to n 1
LoessInterpolator.smooth(double[],double[],double[])	Compute a weighted loess fit on the data at the original abscissae
Decimal64.subtract(double)	operator
Line.toSubSpace(Vector)	Transform a space point into a sub space point
RealDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
MultivariateSummaryStatistics.toString()	Generates a text report displaying summary statistics from values that have been added
Dfp.toSplitDouble()	Convert the instance into a split double
PolynomialFunctionLagrangeForm.verifyInterpolationArray(double[],double[],boolean)	Check that the interpolation arrays are valid
AbstractMultivariateRealDistribution.getDimension()	Gets the number of random variables of the distribution
PSquarePercentile.getResult()	Returns the current value of the Statistic
ComplexFormat.format(Object,StringBuffer,FieldPosition)	Formats a object to produce a string obj must be either a Complex object or a Number object Any other type of object will result in an IllegalArgumentException being thrown
MultiDimensionMismatchException.getExpectedDimension(int)	the expected dimension stored at index
AbstractIntegerDistribution.reseedRandomGenerator(long)	Reseed the random generator used to generate samples
AbstractRealMatrix.getFrobeniusNorm()	Returns the Frobenius norm of the matrix
DerivativeStructure.remainder(double)	IEEE remainder operator
KalmanFilter.KalmanFilter(ProcessModel,MeasurementModel)	Creates a new Kalman filter with the given process and measurement models
SynchronizedRandomGenerator.SynchronizedRandomGenerator(RandomGenerator)	Creates a synchronized wrapper for the given RandomGenerator instance
PolynomialFunctionLagrangeForm.degree()	Returns the degree of the polynomial
PascalDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in Z P X x 0
WeibullDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
TransformUtils.scaleArray(double[],double)	Multiply every component in the given real array by the given real number The change is made in place
Array2DRowFieldMatrix.operate(FieldElement[])	Returns the result of multiplying this by the vector v
StatUtils.sum(double[])	Returns the sum of the values in the input array or Double NaN if the array is empty
FastMath.log(double)	Natural logarithm
LaplaceDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
SimpleBounds.unbounded(int)	Factory method that creates instance of this class that represents unbounded ranges
Complex.nthRoot(int)	Computes the n th roots of this complex number
Gamma.digamma(double)	Computes the digamma function of x
SparseGradient.linearCombination(double[],SparseGradient[])	Compute a linear combination
ResizableDoubleArray.hashCode()	Returns a hash code consistent with equals
FastMath.asinh(double)	Compute the inverse hyperbolic sine of a number
GTest.gTest(double[],long[],double)	Performs a G Test Log Likelihood Ratio Test for goodness of fit evaluating the null hypothesis that the observed counts conform to the frequency distribution described by the expected counts with significance level alpha Returns true iff the null hypothesis can be rejected with 100 1 alpha percent confidence
TransformerMap.equals(Object)	
Beta.regularizedBeta(double,double,double,double,int)	Returns the regularized beta function I x a b
Vector2D.distanceInf(Vector)	Compute the distance between the instance and another vector according to the L norm
SparseGradient.toRadians()	Convert degrees to radians with error of less than 0 5 ULP
MultivariateSummaryStatistics.getMin()	Returns an array whose ith entry is the minimum of the ith entries of the arrays that have been added using addValue double
SparseFieldVector.hashCode()	
GeneticAlgorithm.getMutationRate()	Returns the mutation rate
RandomDataImpl.nextSample(Collection,int)	Returns an array of k objects selected randomly from the Collection c
MatrixUtils.checkRowIndex(AnyMatrix,int)	Check if a row index is valid
FractionField.getOne()	Get the multiplicative identity of the field
NormalDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
Well19937c.Well19937c(int[])	Creates a new random number generator using an int array seed
DfpField.computeExp(Dfp,Dfp)	Compute exp a
TTest.tTest(double[],double[])	Returns the observed significance level or p value associated with a two sample two tailed t test comparing the means of the input arrays
BlockFieldMatrix.getData()	Returns matrix entries as a two dimensional array
RandomDataGenerator.RandomDataGenerator()	Construct a RandomDataGenerator using a default random generator as the source of randomness
IntegerDistribution.reseedRandomGenerator(long)	Reseed the random generator used to generate samples
StatUtils.populationVariance(double[],int,int)	Returns the population variance of the entries in the specified portion of the input array or Double NaN if the designated subarray is empty
SimpleRegression.getRegressionSumSquares()	Returns the sum of squared deviations of the predicted y values about their mean which equals the mean of y
SumOfSquares.SumOfSquares(SumOfSquares)	Copy constructor creates a new SumOfSquares identical to the original
MathUtils.checkNotNull(Object)	Checks that an object is not null
FieldVector.getEntry(int)	Returns the entry in the specified index
FieldVector.mapAddToSelf(FieldElement)	Map an addition operation to each entry
Decimal64.doubleValue()	
KendallsCorrelation.computeCorrelationMatrix(double[][])	Computes the Kendall s Tau rank correlation matrix for the columns of the input rectangular array The columns of the array represent values of variables to be correlated
MultistepIntegrator.setSafety(double)	Set the safety factor for stepsize control
EmpiricalDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
UniformRealDistribution.UniformRealDistribution(RandomGenerator,double,double)	Creates a uniform distribution
BlockFieldMatrix.setRowMatrix(int,FieldMatrix)	Set the entries in row number row as a row matrix
NelderMeadSimplex.NelderMeadSimplex(int,double,double,double,double)	Build a Nelder Mead simplex with specified coefficients
PiecewiseBicubicSplineInterpolator.interpolate(double[],double[],double[][])	Compute an interpolating function for the dataset
CurveFitter.fit(ParametricUnivariateFunction>,double[])	Fit a curve
Line.sameOrientationAs(Hyperplane)	Check if the instance has the same orientation as another hyperplane
AbstractFieldMatrix.getSubMatrix(int,int,int,int)	Get a submatrix Rows and columns are indicated counting from 0 to n 1
FieldRotation.getAngles(RotationOrder)	Get the Cardan or Euler angles corresponding to the instance
Vector3D.getSpace()	Get the space to which the point belongs
AbstractFieldMatrix.add(FieldMatrix)	Compute the sum of this and m
Mean.increment(double)	Updates the internal state of the statistic to reflect the addition of the new value
BigFraction.getDenominatorAsInt()	Access the denominator as a int
DerivativeStructure.negate()	Returns the additive inverse of this element
SparseGradient.multiply(int)	Compute n this Multiplication by an integer number is defined as the following sum n this i 1n this
Region.copySelf()	Copy the instance
EmpiricalDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
EnumeratedRealDistribution.EnumeratedRealDistribution(double[],double[])	Create a discrete distribution using the given probability mass function enumeration
Gaussian.Parametric.Gaussian.Parametric()	
Vector.toString(NumberFormat)	Get a string representation of this vector
PoissonDistribution.PoissonDistribution(double,int)	Creates a new Poisson distribution with the specified mean and maximum number of iterations
KendallsCorrelation.KendallsCorrelation(RealMatrix)	Create a KendallsCorrelation from a RealMatrix whose columns represent variables to be correlated
BitsStreamGenerator.setSeed(int)	Sets the seed of the underlying random number generator using an int seed
Vector2D.distanceSq(Vector2D,Vector2D)	Compute the square of the distance between two vectors
LeastSquaresAdapter.getStart()	Gets the initial guess
StepInterpolator.getInterpolatedSecondaryState(int)	Get the interpolated secondary state corresponding to the secondary equations
DerivativeStructure.toDegrees()	Convert radians to degrees with error of less than 0 5 ULP
TestUtils.gTest(double[],long[])	
Circle.getPole()	Get the pole of the circle
ODEIntegrator.setMaxEvaluations(int)	Set the maximal number of differential equations function evaluations
RootsOfUnity.getImaginary(int)	Get the imaginary part of the k th n th root of unity
BetaDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
WelzlEncloser.enclose(Iterable)	Find a ball enclosing a list of points
UnivariateStatistic.evaluate(double[])	Returns the result of evaluating the statistic over the input array
FDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
FieldVector3D.toString()	Get a string representation of this vector
GeometricDistribution.probability(int)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the probability mass function PMF for the distribution
FirstOrderConverter.FirstOrderConverter(SecondOrderDifferentialEquations)	Simple constructor
CompositeFormat.parseNumber(String,NumberFormat,ParsePosition)	Parses source for a number This method can parse normal numeric values as well as special values These special values include Double NaN Double POSITIVE INFINITY Double NEGATIVE INFINITY
Plane.getV()	Get the plane second canonical vector
RealMatrix.setColumnVector(int,RealVector)	Sets the specified column of this matrix to the entries of the specified vector Column indices start at 0
Well19937c.Well19937c(long)	Creates a new random number generator using a single long seed
DSCompiler.tan(double[],int,double[],int)	Compute tangent of a derivative structure
FuzzyKMeansClusterer.FuzzyKMeansClusterer(int,double,int,DistanceMeasure)	Creates a new instance of a FuzzyKMeansClusterer
Acosh.derivative()	Returns the derivative of the function
Primes.isPrime(int)	Primality test tells if the argument is a provable prime or not
EmpiricalDistribution.density(double)	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF
MathUtils.reduce(double,double,double)	Reduce a offset to the primary interval 0 period
Covariance.covariance(double[],double[],boolean)	Computes the covariance between the two arrays
LevyDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
StatisticalSummary.getMean()	Returns the arithmetic mean of the available values
BaseAbstractUnivariateOptimizer.getStartValue()	
MultidimensionalCounter.toString()	
FieldRotation.applyTo(FieldVector3D)	Apply the rotation to a vector
ODEIntegrator.addEventHandler(EventHandler,double,double,int,UnivariateSolver)	Add an event handler to the integrator
Neuron.getFeatures()	Gets the neuron s features
FastFourierTransformer.transform(UnivariateFunction,double,double,int,TransformType)	Returns the forward inverse transform of the specified real function sampled on the specified interval
FieldRotation.applyInverseTo(Rotation,FieldRotation)	Apply the inverse of a rotation to another rotation
Array2DRowFieldMatrix.walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)	Visit and possibly change some matrix entries in row order
MultivariateSummaryStatistics.getGeometricMean()	Returns an array whose ith entry is the geometric mean of the ith entries of the arrays that have been added using addValue double
MapUtils.findBest(double[],Iterable,DistanceMeasure)	Finds the neuron that best matches the given features
OpenMapRealMatrix.OpenMapRealMatrix(int,int)	Build a sparse matrix with the supplied row and column dimensions
EmpiricalDistribution.inverseCumulativeProbability(double)	Computes the quantile function of this distribution For a random variable X distributed according to this distribution the returned value is inf x in R P X x p for 0 p 1 inf x in R P X x 0 for p 0
OpenMapRealMatrix.getEntry(int,int)	Get the entry in the specified row and column Row and column indices start at 0
Vector2DFormat.Vector2DFormat()	Create an instance with default settings
QRDecomposition.QRDecomposition(RealMatrix)	Calculates the QR decomposition of the given matrix
ComplexFormat.getAvailableLocales()	Get the set of locales for which complex formats are available
SmoothingPolynomialBicubicSplineInterpolator.interpolate(double[],double[],double[][])	Compute an interpolating function for the dataset
MatrixUtils.checkSubMatrixIndex(AnyMatrix,int[],int[])	Check if submatrix ranges indices are valid
MixtureMultivariateRealDistribution.reseedRandomGenerator(long)	Reseeds the random generator used to generate samples
Parameterizable.getParametersNames()	Get the names of the supported parameters
AbstractRealMatrix.equals(Object)	Returns true iff object is a RealMatrix instance with the same dimensions as this and all corresponding matrix entries are equal
FieldMatrix.walkInColumnOrder(FieldMatrixPreservingVisitor)	Visit but don t change all matrix entries in column order
JacobianMatrices.setInitialMainStateJacobian(double[][])	Set the initial value of the Jacobian matrix with respect to state
StatUtils.geometricMean(double[])	Returns the geometric mean of the entries in the input array or Double NaN if the array is empty
Beta.regularizedBeta(double,double,double)	Returns the regularized beta function I x a b
DifferentiableUnivariateMatrixFunction.derivative()	Returns the derivative of the function
Vector2D.normalize()	Get a normalized vector aligned with the instance
TTest.pairedTTest(double[],double[],double)	Performs a paired t test evaluating the null hypothesis that the mean of the paired differences between sample1 and sample2 is 0 in favor of the two sided alternative that the mean paired difference is not equal to 0 with significance level alpha
Add.value(double,double)	Compute the value for the function
Well44497b.Well44497b()	Creates a new random number generator
NaturalRanking.getTiesStrategy()	Return the TiesStrategy
Line.toSubSpace(Point)	Transform a space point into a sub space point
SynchronizedSummaryStatistics.clear()	Resets all statistics and storage
Inverse.value(DerivativeStructure)	Simple mathematical function
Complex.pow(Complex)	Returns of value of this complex number raised to the power of x
Array2DRowFieldMatrix.Array2DRowFieldMatrix(Field,FieldElement[])	Create a new column FieldMatrix T using v as the data for the unique column of the created matrix
Frequency.getCumPct(long)	Returns the cumulative percentage of values less than or equal to v as a proportion between 0 and 1
ZipfDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
Frequency.getMode()	Returns the mode value s in comparator order
BaseAbstractMultivariateOptimizer.getGoalType()	
TestUtils.t(double[],double[])	
BigReal.divide(BigReal)	Compute this a
SparseGradient.floor()	Get the largest whole number smaller than instance
Decimal64.copySign(double)	Returns the instance with the sign of the argument
RealMatrix.copySubMatrix(int[],int[],double[][])	Copy a submatrix Rows and columns are indicated counting from 0 to n 1
ParetoDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
LUDecomposition.LUDecomposition(RealMatrix,double)	Calculates the LU decomposition of the given matrix
TDistribution.getDegreesOfFreedom()	Access the degrees of freedom
TricubicInterpolator.interpolate(double[],double[],double[],double[][][])	Compute an interpolating function for the dataset
MultiDimensionMismatchException.MultiDimensionMismatchException(Localizable,Integer[],Integer[])	Construct an exception from the mismatched dimensions
AdamsIntegrator.updateHighOrderDerivativesPhase1(Array2DRowRealMatrix)	Update the high order scaled derivatives for Adams integrators phase 1
BaseUnivariateSolver.getEvaluations()	Get the number of evaluations of the objective function
Dfp.divide(double)	operator
StandardDeviation.increment(double)	Updates the internal state of the statistic to reflect the addition of the new value
SynchronizedSummaryStatistics.getVarianceImpl()	Returns the currently configured variance implementation
DfpField.setIEEEFlagsBits(int)	Sets some bits in the IEEE 854 status flags without changing the already set bits
MapUtils.computeQuantizationError(Iterable,Iterable,DistanceMeasure)	Computes the quantization error
Array2DRowRealMatrix.add(Array2DRowRealMatrix)	Compute the sum of this and m
FDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
Kurtosis.evaluate(double[],int,int)	Returns the kurtosis of the entries in the specified portion of the input array
AbstractFieldMatrix.multiplyEntry(int,int,FieldElement)	Change an entry in the specified row and column
Dfp.unequal(Dfp)	Check if instance is not equal to x
Vector3D.Vector3D(double,Vector3D,double,Vector3D)	Linear constructor Build a vector from two other ones and corresponding scale factors
Fraction.Fraction(int)	Create a fraction from an int
MathUnsupportedOperationException.MathUnsupportedOperationException(Localizable,)	
AbstractRealMatrix.walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)	Visit but don t change some matrix entries using the fastest possible order
VectorialMean.increment(double[])	Add a new vector to the sample
MathArrays.copyOf(double[])	Creates a copy of the source array
ArrayRealVector.ArrayRealVector(double[],int,int)	Construct a vector from part of a array
ParetoDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
BigFractionFormat.getProperInstance(Locale)	Returns the default complex format for the given locale
ArrayFieldVector.walkInDefaultOrder(FieldVectorChangingVisitor)	Visits and possibly alters all entries of this vector in default order increasing index
StatUtils.populationVariance(double[],double)	Returns the population variance of the entries in the input array using the precomputed mean value Returns Double NaN if the array is empty
FastMath.max(int,int)	Compute the maximum of two values
LogNormalDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
OpenMapRealVector.isInfinite()	Check whether any coordinate of this vector is infinite and none are NaN
BlockRealMatrix.getColumnVector(int)	Get the entries at the given column index as a vector Column indices start at 0
BigReal.BigReal(BigInteger)	Build an instance from a BigInteger
FieldMatrix.setSubMatrix(FieldElement[][],int,int)	Replace the submatrix starting at row column using data in the input subMatrix array Indexes are 0 based
Decimal64.floor()	Get the largest whole number smaller than instance
IterationManager.fireInitializationEvent(IterationEvent)	Informs all registered listeners that the initial phase prior to the main iteration loop has been completed
Vector2D.subtract(Vector)	Subtract a vector from the instance
ArithmeticUtils.subAndCheck(int,int)	Subtract two integers checking for overflow
MillerUpdatingRegression.clear()	As the name suggests clear wipes the internals and reorders everything in the canonical order
Quaternion.isPureQuaternion(double)	Checks whether the instance is a pure quaternion within a given tolerance
SimpleRegression.getSumSquaredErrors()	Returns the sum of squared errors SSE associated with the regression model
KolmogorovSmirnovTest.approximateP(double,int,int)	Uses the Kolmogorov Smirnov distribution to approximate P D n m d where D n m is the 2 sample Kolmogorov Smirnov statistic See kolmogorovSmirnovStatistic double double for the definition of D n m
UniformRealDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
MaxEval.MaxEval(int)	
Variance.evaluate(double[],int,int)	Returns the variance of the entries in the specified portion of the input array or Double NaN if the designated subarray is empty Note that Double NaN may also be returned if the input includes NaN and or infinite values
OrderedTuple.compareTo(OrderedTuple)	Compares this ordered T uple with the specified object
FastFourierTransformer.transformInPlace(double[][],DftNormalization,TransformType)	Computes the standard transform of the specified complex data The computation is done in place The input data is laid out as follows dataRI 0 i is the real part of the i th data point dataRI 1 i is the imaginary part of the i th data point
OpenMapRealMatrix.copy()	Returns a deep copy of this
FastMath.getExponent(float)	Return the exponent of a float number removing the bias
KolmogorovSmirnovDistribution.cdfExact(double)	Calculates P D n d using method described in 1 with quick decisions for extreme values given in 2 see above The result is exact in the sense that BigFraction BigReal is used everywhere at the expense of very slow execution time Almost never choose this in real applications unless you are very sure this is almost solely for verification purposes Normally you would choose cdf double
Circle.toSpace(Point)	Transform a sub space point into a space point
IntervalsSet.IntervalsSet()	Build an intervals set representing the whole real line
BlockRealMatrix.getColumnDimension()	Returns the number of columns of this matrix
MathArrays.safeNorm(double[])	Returns the Cartesian norm 2 norm handling both overflow and underflow
StepInterpolator.getInterpolatedTime()	Get the time of the interpolated point
Complex.getField()	Get the Field to which the instance belongs
Line.reset(Vector2D,Vector2D)	Reset the instance as if built from two points
ComplexFormat.ComplexFormat(String,NumberFormat)	Create an instance with a custom imaginary character and a custom number format for both real and imaginary parts
Frequency.getCount(long)	Returns the number of values equal to v
OpenMapRealVector.subtract(OpenMapRealVector)	Optimized method to subtract OpenMapRealVectors
DimensionMismatchException.getDimension()	the expected dimension
CauchyDistribution.inverseCumulativeProbability(double)	Computes the quantile function of this distribution For a random variable X distributed according to this distribution the returned value is inf x in R P X x p for 0 p 1 inf x in R P X x 0 for p 0
ConvexHull.createRegion()	Returns a new region that is enclosed by the convex hull
Complex.subtract(Complex)	Returns a Complex whose value is this subtrahend
SummaryStatistics.addValue(double)	Add a value to the data
SubPlane.split(Hyperplane)	Split the instance in two parts by an hyperplane
MultivariateNormalDistribution.density(double[])	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the cumulative distribution function If the derivative does not exist at x then an appropriate replacement should be returned e g Double POSITIVE INFINITY Double NaN or the limit inferior or limit superior of the difference quotient
BesselJ.BesselJ(double)	Create a new BesselJ with the given order
MathArrays.checkOrder(double[])	Check that the given array is sorted in strictly increasing order
ArrayFieldVector.getSubVector(int,int)	Get a subvector from consecutive elements
Dfp.linearCombination(double,Dfp,double,Dfp,double,Dfp,double,Dfp)	Compute a linear combination
NormalDistribution.NormalDistribution(double,double)	Create a normal distribution using the given mean and standard deviation
RealLinearOperator.operateTranspose(RealVector)	Returns the result of multiplying the transpose of this operator by the vector x optional operation The default implementation throws an UnsupportedOperationException Users overriding this method must also override isTransposable
Decimal64.hashCode()	The current implementation returns the same value as new Double this doubleValue hashCode
BSPTree.getCell(Point,double)	Get the cell to which a point belongs
MultivariateSummaryStatistics.getMeanImpl()	Returns the currently configured mean implementation
OpenIntToFieldHashMap.OpenIntToFieldHashMap(Field,int)	Build an empty map with specified size and using zero for missing entries
AbstractMultipleLinearRegression.estimateRegressandVariance()	Returns the variance of the regressand ie Var y
DfpField.newDfp(long)	Create an instance from a long value
WilcoxonSignedRankTest.WilcoxonSignedRankTest(NaNStrategy,TiesStrategy)	Create a test instance using the given strategies for NaN s and ties
GumbelDistribution.density(double)	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF
RealFieldElement.linearCombination(T,T,T,T,T,T,T,T)	Compute a linear combination
Parameterizable.isSupported(String)	Check if a parameter is supported
BlockRealMatrix.scalarMultiply(double)	Returns the result of multiplying each entry of this by d
AbstractParameterizable.isSupported(String)	Check if a parameter is supported
BigReal.BigReal(BigInteger,MathContext)	Build an instance from a BigInteger
SynchronizedSummaryStatistics.setSumsqImpl(StorelessUnivariateStatistic)	Sets the implementation for the sum of squares
AbstractRealDistribution.cumulativeProbability(double,double)	For a random variable X whose values are distributed according to this distribution this method returns P x0 X x1
Logistic.Parametric.value(double,)	Computes the value of the sigmoid at x
DescriptiveStatistics.setKurtosisImpl(UnivariateStatistic)	Sets the implementation for the kurtosis
Fraction.divide(Fraction)	Divide the value of this fraction by another
SimpleRegression.regress()	Performs a regression on data present in buffers and outputs a RegressionResults object
SparseGradient.copySign(double)	Returns the instance with the sign of the argument
Frequency.addValue(int)	Adds 1 to the frequency count for v
Vector3D.equals(Object)	Test for the equality of two 3D vectors
MultiKMeansPlusPlusClusterer.cluster(Collection)	Runs the K means clustering algorithm
Skewness.copy(Skewness,Skewness)	Copies source to dest
DfpField.newDfp(double)	Create an instance from a double value
Decimal64.remainder(Decimal64)	IEEE remainder operator
DiagonalMatrix.multiply(RealMatrix)	Returns the result of postmultiplying this by m
AbstractIntegrator.addEventHandler(EventHandler,double,double,int,UnivariateSolver)	Add an event handler to the integrator
ParetoDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
PolyhedronsSet.firstIntersection(Vector3D,Line)	Get the first sub hyperplane crossed by a semi infinite line
StepNormalizer.handleStep(StepInterpolator,boolean)	Handle the last accepted step
EventHandler.eventOccurred(double,double[],boolean)	Handle an event and choose what to do next
EigenDecomposition.getImagEigenvalue(int)	Gets the imaginary part of the ith eigenvalue of the original matrix
FieldRotation.applyTo(Vector3D)	Apply the rotation to a vector
RealVectorFormat.RealVectorFormat(NumberFormat)	Create an instance with a custom number format for components
DfpField.getESplit()	Get the constant e split in two pieces
Complex.atan()	Compute the inverse tangent of this complex number
DescriptiveStatistics.DescriptiveStatistics(DescriptiveStatistics)	Copy constructor Construct a new DescriptiveStatistics instance that is a copy of original
SparseFieldVector.mapAddToSelf(FieldElement)	Map an addition operation to each entry
MixtureMultivariateRealDistribution.MixtureMultivariateRealDistribution(RandomGenerator,List)	Creates a mixture model from a list of distributions and their associated weights
MultivariateVectorOptimizer.getTargetSize()	Gets the number of observed values
LimitAngle.getOffset(Point)	Get the offset oriented distance of a point
Dfp.greaterThan(Dfp)	Check if instance is greater than x
StatUtils.percentile(double[],int,int,double)	Returns an estimate of the pth percentile of the values in the values array starting with the element in 0 based position begin in the array and including length values
AbstractFieldMatrix.walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)	Visit but don t change some matrix entries in column order
BetaDistribution.getAlpha()	Access the first shape parameter alpha
OpenMapRealVector.append(RealVector)	Construct a new vector by appending a vector to this vector
IterativeLinearSolverEvent.IterativeLinearSolverEvent(Object,int)	Creates a new instance of this class
BicubicInterpolator.BicubicInterpolator()	
MultivariateVectorOptimizer.getWeight()	Gets the weight matrix of the observations
BinomialDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
RealMatrixFormat.parse(String)	Parse a string to produce a RealMatrix object
ContinuousOutputModel.getInterpolatedSecondaryDerivatives(int)	Get the interpolated secondary derivatives corresponding to the secondary equations
MultivariateSummaryStatistics.getMax()	Returns an array whose ith entry is the maximum of the ith entries of the arrays that have been added using addValue double
GumbelDistribution.inverseCumulativeProbability(double)	Description copied from class AbstractRealDistribution
Line.setAngle(double)	Set the angle of the line
Sum.clear()	Clears the internal state of the Statistic
UnivariateIntegrator.integrate(int,UnivariateFunction,double,double)	Integrate the function in the given interval
BigReal.getRoundingMode()	Gets the rounding mode for division operations The default is RoundingMode HALF UP
TestUtils.kolmogorovSmirnovTest(double[],double[])	
SparseGradient.signum()	Compute the signum of the instance
KalmanFilter.predict(double[])	Predict the internal state estimation one time step ahead
Product.copy(Product,Product)	Copies source to dest
FuzzyKMeansClusterer.getRandomGenerator()	Returns the random generator this instance will use
AbstractRealDistribution.probability(double,double)	For a random variable X whose values are distributed according to this distribution this method returns P x0 X x1
RandomDataImpl.nextT(double)	Generates a random value from the T Distribution
FieldDecompositionSolver.getInverse()	Get the inverse or pseudo inverse of the decomposed matrix
PolynomialFunction.degree()	Returns the degree of the polynomial
GammaDistribution.getBeta()	Returns the scale parameter of this distribution
FiniteDifferencesDifferentiator.differentiate(UnivariateMatrixFunction)	Create an implementation of a differential from a regular matrix function
ProcessModel.getInitialErrorCovariance()	Returns the initial error covariance matrix
FieldLUDecomposition.FieldLUDecomposition(FieldMatrix)	Calculates the LU decomposition of the given matrix
RealVector.getMinValue()	Get the value of the minimum entry
DSCompiler.linearCombination(double,double[],int,double,double[],int,double,double[],int,double,double[],int,double[],int)	Compute linear combination
VectorFormat.getPrefix()	Get the format prefix
SparseGradient.divide(SparseGradient)	Compute this a
Combinations.iterator()	
NonPositiveDefiniteOperatorException.NonPositiveDefiniteOperatorException()	Creates a new instance of this class
JacobianMultivariateVectorOptimizer.optimize()	Stores data and performs the optimization
BlockFieldMatrix.getRowDimension()	Returns the number of rows in the matrix
ConjugateGradient.ConjugateGradient(int,double,boolean)	Creates a new instance of this class with default stopping criterion
SummaryStatistics.equals(Object)	Returns true iff object is a SummaryStatistics instance and all statistics have the same values as this
ArithmeticUtils.pow(BigInteger,int)	Raise a BigInteger to an int power
BigRealField.getRuntimeClass()	Returns the runtime class of the FieldElement
LinearInterpolator.LinearInterpolator()	
CMAESOptimizer.CMAESOptimizer(int,double,boolean,int,int,RandomGenerator,boolean,ConvergenceChecker)	
FractionFormat.parse(String)	Parses a string to produce a Fraction object
MersenneTwister.MersenneTwister(int)	Creates a new random number generator using a single int seed
ConfidenceInterval.getUpperBound()	the upper endpoint of the interval
ArrayRealVector.ArrayRealVector(ArrayRealVector,boolean)	Construct a vector from another vector
SmoothingPolynomialBicubicSplineInterpolator.SmoothingPolynomialBicubicSplineInterpolator(int,int)	
NormalDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
FieldVector3D.getNormSq()	Get the square of the norm for the vector
FieldMatrixPreservingVisitor.end()	End visiting a matrix
BigFraction.toString()	Returns the String representing this fraction ie num dem or just num if the denominator is one
DormandPrince54Integrator.getOrder()	Get the order of the method
FastMath.decrementExact(int)	Decrement a number detecting overflows
OpenMapRealMatrix.setEntry(int,int,double)	Set the entry in the specified row and column Row and column indices start at 0
SmoothingPolynomialBicubicSplineInterpolator.SmoothingPolynomialBicubicSplineInterpolator()	Default constructor The degree of the fitting polynomials is set to 3
CauchyDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
LUDecomposition.getL()	Returns the matrix L of the decomposition
RealMatrixChangingVisitor.end()	End visiting a matrix
BigFraction.abs()	Returns the absolute value of this BigFraction
Fraction.subtract(Fraction)	Subtracts the value of another fraction from the value of this one returning the result in reduced form
MultivariateSummaryStatistics.getMinImpl()	Returns the currently configured minimum implementation
SparseFieldMatrix.addToEntry(int,int,FieldElement)	Change an entry in the specified row and column
FastCosineTransformer.FastCosineTransformer(DctNormalization)	Creates a new instance of this class with various normalization conventions
Dfp.newInstance(long)	Create an instance from a long value
MillerUpdatingRegression.regress(int[])	Conducts a regression on the data in the model using regressors in array Calling this method will change the internal order of the regressors and care is required in interpreting the hatmatrix
Line.revertSelf()	Revert the instance
Floor.value(double)	Compute the value of the function
Decimal64.rootN(int)	Nth root
Max.evaluate(double[],int,int)	Returns the maximum of the entries in the specified portion of the input array or Double NaN if the designated subarray is empty
Plane.getTolerance()	Get the tolerance below which points are considered to belong to the hyperplane
Decimal64.expm1()	Exponential minus 1
LegendreHighPrecisionRuleFactory.LegendreHighPrecisionRuleFactory()	Default precision is DECIMAL128
SynchronizedSummaryStatistics.getGeometricMean()	Returns the geometric mean of the values that have been added
RealMatrix.preMultiply(double[])	Returns the row vector result of premultiplying this by the vector v
SparseFieldVector.mapAdd(FieldElement)	Map an addition operation to each entry
AnyMatrix.isSquare()	Is this a square matrix
DimensionMismatchException.DimensionMismatchException(Localizable,int,int)	Construct an exception from the mismatched dimensions
AbstractFieldMatrix.getSubMatrix(int[],int[])	Get a submatrix Rows and columns are indicated counting from 0 to n 1
FieldMatrix.getTrace()	Returns the trace of the matrix the sum of the elements on the main diagonal
Interval.getSize()	Get the size of the interval
AbstractStepInterpolator.shift()	Shift one step forward
RandomData.nextSecureHexString(int)	Generates a random string of hex characters from a secure random sequence
NaturalRanking.NaturalRanking(RandomGenerator)	Create a NaturalRanking with TiesStrategy RANDOM and the given RandomGenerator as the source of random data
ComplexFormat.getInstance(String,Locale)	Returns the default complex format for the given locale
Sinh.value(DerivativeStructure)	Simple mathematical function
DescriptiveStatistics.getKurtosisImpl()	Returns the currently configured kurtosis implementation
IterationManager.resetIterationCount()	Sets the iteration count to 0 This method must be called during the initial phase
PSquarePercentile.copy()	Returns a copy of the statistic with the same internal state
GraggBulirschStoerIntegrator.integrate(ExpandableStatefulODE,double)	Integrate a set of differential equations up to the given time
Dfp.copysign(Dfp,Dfp)	Creates an instance that is the same as x except that it has the sign of y
AbstractCurveFitter.fit(Collection)	Fits a curve
RealTransformer.transform(double[],TransformType)	Returns the forward inverse transform of the specified real data set
SimpleRegression.hasIntercept()	Returns true if the model includes an intercept term
Asinh.derivative()	Returns the derivative of the function
BigFraction.add(BigInteger)	Adds the value of this fraction to the passed BigInteger returning the result in reduced form
Gaussian.Parametric.value(double,)	Computes the value of the Gaussian at x
Quaternion.multiply(Quaternion)	Returns the Hamilton product of the instance by a quaternion
Complex.divide(double)	Returns a Complex whose value is this divisor with divisor interpreted as a real number
PolynomialFitter.PolynomialFitter(DifferentiableMultivariateVectorOptimizer)	Simple constructor
AbstractRealMatrix.getTrace()	Returns the trace of the matrix the sum of the elements on the main diagonal
DiagonalMatrix.getData()	Returns matrix entries as a two dimensional array
DfpField.getTwo()	Get the constant 2
Primes.primeFactors(int)	Prime factors decomposition
BlockRealMatrix.preMultiply(double[])	Returns the row vector result of premultiplying this by the vector v
UniformRealDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
RealMatrix.add(RealMatrix)	Returns the sum of this and m
RealVectorFormat.format(RealVector,StringBuffer,FieldPosition)	Formats a RealVector object to produce a string
FDistribution.FDistribution(RandomGenerator,double,double,double)	Creates an F distribution
Sphere1D.NoSubSpaceException.Sphere1D.NoSubSpaceException()	Simple constructor
RandomDataImpl.reSeed()	Reseeds the random number generator with System currentTimeMillis System identityHashCode this
Array2DRowFieldMatrix.Array2DRowFieldMatrix(Field,int,int)	Create a new FieldMatrix T with the supplied row and column dimensions
ChiSquaredDistribution.ChiSquaredDistribution(double)	Create a Chi Squared distribution with the given degrees of freedom
SimpleRegression.regress(int[])	Performs a regression on data present in buffers including only regressors indexed in variablesToInclude and outputs a RegressionResults object
AbstractRealMatrix.add(RealMatrix)	Returns the sum of this and m
MathArithmeticException.getLocalizedMessage()	
BigFraction.getReducedFraction(int,int)	Creates a BigFraction instance with the 2 parts of a fraction Y Z
ConstantRealDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
BlockFieldMatrix.getColumnDimension()	Returns the number of columns in the matrix
BigReal.equals(Object)	
LaguerreSolver.LaguerreSolver(double)	Construct a solver
DiagonalMatrix.getDataRef()	Gets a reference to the underlying data array
TestUtils.t(double,StatisticalSummary)	
AbstractFieldMatrix.setColumnMatrix(int,FieldMatrix)	Set the entries in column number column as a column matrix
PointVectorValuePair.PointVectorValuePair(double[],double[],boolean)	Build a point objective function value pair
SymmLQ.SymmLQ(int,double,boolean)	Creates a new instance of this class with default stopping criterion Note that setting check to true entails an extra matrix vector product in the initial phase
RegressionResults.getRegressionSumSquares()	Returns the sum of squared deviations of the predicted y values about their mean which equals the mean of y
BaseAbstractMultivariateOptimizer.optimize(int,FUNC,GoalType,double[])	Optimize an objective function
BaseRuleFactory.getRule(int)	Gets a copy of the quadrature rule with the given number of integration points
Rotation.Rotation(Vector3D,Vector3D,Vector3D,Vector3D)	Build the rotation that transforms a pair of vector into another pair
ArithmeticUtils.gcd(int,int)	Computes the greatest common divisor of the absolute value of two numbers using a modified version of the binary gcd method
AbstractRegion.checkPoint(Vector)	Check a point with respect to the region
BlockRealMatrix.scalarAdd(double)	Returns the result of adding d to each entry of this
FieldVector.outerProduct(FieldVector)	Compute the outer product
Circle.getInsideArc(Circle)	Get the arc of the instance that lies inside the other circle
MathArithmeticException.getContext()	Gets a reference to the rich context data structure that allows to customize error messages and store key value pairs in exceptions
GeometricMean.copy(GeometricMean,GeometricMean)	Copies source to dest
LUDecomposition.LUDecomposition(RealMatrix)	Calculates the LU decomposition of the given matrix
Vector1D.distance(Vector1D,Vector1D)	Compute the distance between two vectors according to the L2 norm
Decimal64Field.getZero()	Get the additive identity of the field
Decimal64.shortValue()	The current implementation performs casting to a short
StatUtils.product(double[],int,int)	Returns the product of the entries in the specified portion of the input array or Double NaN if the designated subarray is empty
EnumeratedIntegerDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
AVLTree.getSmallest()	Get the node whose element is the smallest one in the tree
Rotation.applyTo(double[],double[])	Apply the rotation to a vector stored in an array
GaussIntegrator.GaussIntegrator(Pair)	Creates an integrator from the given pair of points first element of the pair and weights second element of the pair
BitsStreamGenerator.nextLong()	Returns the next pseudorandom uniformly distributed long value from this random number generator s sequence All 264 possible long values should be produced with approximately equal probability
Line.reset(Vector2D,double)	Reset the instance as if built from a line and an angle
NodesSet.NodesSet()	Simple constructor
WeibullDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
AbstractLeastSquaresOptimizer.optimize()	Stores data and performs the optimization
Product.Product(Product)	Copy constructor creates a new Product identical to the original
StatisticalMultivariateSummary.getDimension()	Returns the dimension of the data
Quaternion.subtract(Quaternion,Quaternion)	Subtracts two quaternions
Dfp.getField()	Get the Field really a DfpField to which the instance belongs
FieldDecompositionSolver.solve(FieldVector)	Solve the linear equation A X B for matrices A
TDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
AbstractLinearOptimizer.setMaxIterations(int)	Set the maximal number of iterations of the algorithm
RandomDataGenerator.reSeedSecure()	Reseeds the secure random number generator with the current time in milliseconds
ZipfDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in Z P X x 0
NodesSet.addAll(Iterable)	Add nodes if they are not already known
SumOfSquares.clear()	Clears the internal state of the Statistic
HypergeometricDistribution.upperCumulativeProbability(int)	For this distribution X this method returns P X x
RootsOfUnity.computeRoots(int)	Computes the n th roots of unity The roots are stored in omega such that omega k w k where k 0 n 1 w exp 2 pi i n and i sqrt 1
RealFieldElement.linearCombination(double[],T[])	Compute a linear combination
DSCompiler.multiply(double[],int,double[],int,double[],int)	Perform multiplication of two derivative structures
DfpMath.log(Dfp)	Returns the natural logarithm of a
GeometricMean.GeometricMean()	Create a GeometricMean instance
DerivativeStructure.linearCombination(double,DerivativeStructure,double,DerivativeStructure,double,DerivativeStructure,double,DerivativeStructure)	Compute a linear combination
AbstractRegion.isFull()	Check if the instance covers the full space
UnivariateMultiStartOptimizer.getOptima()	Get all the optima found during the last call to optimize
ConstantRealDistribution.ConstantRealDistribution(double)	Create a constant real distribution with the given value
PreconditionedIterativeLinearSolver.solve(RealLinearOperator,RealVector)	Returns an estimate of the solution to the linear system A x b
Percentile.getPivotingStrategy()	Get the PivotingStrategyInterface used in KthSelector for computation
StatUtils.normalize(double[])	Normalize standardize the sample so it is has a mean of 0 and a standard deviation of 1
SpearmansCorrelation.SpearmansCorrelation()	Create a SpearmansCorrelation without data
EigenDecomposition.getSolver()	Gets a solver for finding the A X B solution in exact linear sense
SparseFieldVector.mapSubtractToSelf(FieldElement)	Map a subtraction operation to each entry
AbstractLeastSquaresOptimizer.getRMS()	Gets the root mean square RMS value
BlockFieldMatrix.toBlocksLayout(FieldElement[][])	Convert a data array from raw layout to blocks layout
Vector1D.isInfinite()	Returns true if any coordinate of this vector is infinite and none are NaN false otherwise
OpenMapRealVector.getSubVector(int,int)	Get a subvector from consecutive elements
LevenbergMarquardtOptimizer.getInitialStepBoundFactor()	Gets the value of a tuning parameter
BSPTree.getCut()	Get the cut sub hyperplane
ISAACRandom.ISAACRandom(int[])	Creates a new ISAAC random number generator using an int array seed
RealLinearOperator.RealLinearOperator()	
Pair.getFirst()	Get the first element of the pair
TestUtils.chiSquare(long[][])	
BetaDistribution.density(double)	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF
ArrayRealVector.isInfinite()	Check whether any coordinate of this vector is infinite and none are NaN
Rotation.applyInverseTo(Rotation)	Apply the inverse of the instance to another rotation
SparseGradient.scalb(int)	Multiply the instance by a power of 2
TransformerMap.transform(Object)	Attempts to transform the Object against the map of NumberTransformers Otherwise it returns Double NaN
SimplexOptimizer.setSimplex(AbstractSimplex)	Set the simplex algorithm
BinomialDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
TTest.tTest(double,StatisticalSummary)	Returns the observed significance level or p value associated with a one sample two tailed t test comparing the mean of the dataset described by sampleStats with the constant mu
CMAESOptimizer.PopulationSize.getPopulationSize()	the population size
NPointCrossover.crossover(Chromosome,Chromosome)	Performs a N point crossover N random crossover points are selected and are used to divide the parent chromosomes into segments The segments are copied in alternate order from the two parents to the corresponding child chromosomes
ArrayRealVector.mapSubtractToSelf(double)	Subtract a value from each entry
EuclideanIntegerPoint.distanceFrom(EuclideanIntegerPoint)	Returns the distance from the given point
NotStrictlyPositiveException.NotStrictlyPositiveException(Number)	Construct the exception
BracketFinder.getEvaluations()	the number of evalutations
TestUtils.tTest(StatisticalSummary,StatisticalSummary,double)	
BaseAbstractMultivariateOptimizer.getEvaluations()	Get the number of evaluations of the objective function
ArrayFieldVector.append(ArrayFieldVector)	Construct a vector by appending a vector to this vector
Quaternion.getConjugate()	Returns the conjugate quaternion of the instance
MultiStartMultivariateVectorOptimizer.MultiStartMultivariateVectorOptimizer(MultivariateVectorOptimizer,int,RandomVectorGenerator)	Create a multi start optimizer from a single start optimizer
TricubicSplineInterpolatingFunction.value(double,double,double)	Compute the value for the function
RandomDataGenerator.nextBeta(double,double)	Generates a random value from the Beta Distribution
MathIllegalStateException.MathIllegalStateException(Throwable,Localizable,)	Simple constructor
Decimal64Field.getRuntimeClass()	Returns the runtime class of the FieldElement
SplineInterpolator.SplineInterpolator()	
DiskGenerator.DiskGenerator()	
ParetoDistribution.getScale()	Returns the scale parameter of this distribution
StatUtils.max(double[],int,int)	Returns the maximum of the entries in the specified portion of the input array or Double NaN if the designated subarray is empty
GeometricDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
AbstractRealMatrix.createMatrix(int,int)	Create a new RealMatrix of the same type as the instance with the supplied row and column dimensions
UnivariateOptimizer.getStartValue()	the initial guess
DescriptiveStatistics.getSumsq()	Returns the sum of the squares of the available values
FastMath.IEEEremainder(double,double)	Computes the remainder as prescribed by the IEEE 754 standard
HarmonicFitter.ParameterGuesser.guess()	Gets an estimation of the parameters
Plane.Plane(Vector3D,Vector3D,double)	Build a plane from a point and a normal
MultistepIntegrator.setMinReduction(double)	Set the minimal reduction factor for stepsize control
AbstractMultipleLinearRegression.estimateRegressionParametersVariance()	Estimates the variance of the regression parameters ie Var b
HypergeometricDistribution.logProbability(int)	For a random variable X whose values are distributed according to this distribution this method returns log P X x where log is the natural logarithm In other words this method represents the logarithm of the probability mass function PMF for the distribution Note that due to the floating point precision and under overflow issues this method will for some distributions be more precise and faster than computing the logarithm of IntegerDistribution probability int
Fraction.add(int)	Add an integer to the fraction
HermiteInterpolator.value(DerivativeStructure)	Interpolate value at a specified abscissa
SparseGradient.tan()	Tangent operation
AbstractMultivariateRealDistribution.sample()	Generates a random value vector sampled from this distribution
Min.increment(double)	Updates the internal state of the statistic to reflect the addition of the new value
EnumeratedRealDistribution.probability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the probability mass function PMF for the distribution
BaseAbstractUnivariateIntegrator.getIterations()	Get the number of iterations of the last run of the integrator
ArithmeticUtils.pow(int,long)	Raise an int to a long power
FieldVector3D.add(FieldVector3D)	Add a vector to the instance
SubLine.SubLine(Vector2D,Vector2D,double)	Create a sub line from two endpoints
Fraction.percentageValue()	Gets the fraction percentage as a double This calculates the fraction as the numerator divided by denominator multiplied by 100
Decimal64.linearCombination(double,Decimal64,double,Decimal64,double,Decimal64)	Compute a linear combination
Line.Line(Vector2D,Vector2D)	Build a line from two points
JacobianMatrices.JacobianMatrices(MainStateJacobianProvider,)	Simple constructor for a secondary equations set computing Jacobian matrices
Rint.value(double)	Compute the value of the function
BracketingNthOrderBrentSolver.BracketingNthOrderBrentSolver(double,double,double,int)	Construct a solver
ArithmeticUtils.isPowerOfTwo(long)	Returns true if the argument is a power of two
BlockRealMatrix.toBlocksLayout(double[][])	Convert a data array from raw layout to blocks layout
BlockRealMatrix.getNorm()	Returns the maximum absolute row sum norm of the matrix
AbstractRealMatrix.copySubMatrix(int[],int[],double[][])	Copy a submatrix Rows and columns are indicated counting from 0 to n 1
FieldVector3D.distanceSq(FieldVector3D,FieldVector3D)	Compute the square of the distance between two vectors
MultivariateNormalDistribution.MultivariateNormalDistribution(RandomGenerator,double[],double[][])	Creates a multivariate normal distribution with the given mean vector and covariance matrix
Min.clear()	Clears the internal state of the Statistic
FastMath.ceil(double)	Get the smallest whole number larger than x
SparseFieldVector.setEntry(int,FieldElement)	Set a single element
ComplexFormat.format(Complex)	This method calls format Object StringBuffer FieldPosition
AbstractFormat.getDenominatorFormat()	Access the denominator format
Array2DRowRealMatrix.getEntry(int,int)	Get the entry in the specified row and column Row and column indices start at 0
RealVectorFormat.RealVectorFormat(String,String,String,NumberFormat)	Create an instance with custom prefix suffix separator and format for components
UnivariateSolverUtils.forceSide(int,UnivariateFunction,BracketedUnivariateSolver,double,double,double,AllowedSolution)	Force a root found by a non bracketing solver to lie on a specified side as if the solver was a bracketing one
FieldMatrix.getEntry(int,int)	Returns the entry in the specified row and column
Array2DRowRealMatrix.Array2DRowRealMatrix(double[][])	Create a new RealMatrix using the input array as the underlying data array
AbstractRandomGenerator.clear()	Clears the cache used by the default implementation of nextGaussian Implementations that do not override the default implementation of nextGaussian should call this method in the implementation of setSeed long
Array2DRowRealMatrix.walkInRowOrder(RealMatrixPreservingVisitor)	Visit but don t change all matrix entries in row order
MathRuntimeException.getLocalizedMessage()	
IntervalUtils.getNormalApproximationInterval(int,int,double)	Create a binomial confidence interval for the true probability of success of an unknown binomial distribution with the given observed number of trials successes and confidence level using the Normal approximation to the binomial distribution
ProperFractionFormat.parse(String,ParsePosition)	Parses a string to produce a Fraction object This method expects the string to be formatted as a proper fraction
Dfp.floor()	Round to an integer using the round floor mode
UnboundedSolutionException.UnboundedSolutionException()	Simple constructor using a default message
BigFraction.multiply(BigFraction)	Multiplies the value of this fraction by another returning the result in reduced form
Vector3D.getZ()	Get the height of the vector
PSquarePercentile.PSquareMarkers.estimate(int)	An Estimate of the percentile value of a given Marker
BetaDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
GeometricDistribution.GeometricDistribution(RandomGenerator,double)	Creates a geometric distribution
BlockRealMatrix.getData()	Returns matrix entries as a two dimensional array
PoissonDistribution.logProbability(int)	For a random variable X whose values are distributed according to this distribution this method returns log P X x where log is the natural logarithm In other words this method represents the logarithm of the probability mass function PMF for the distribution Note that due to the floating point precision and under overflow issues this method will for some distributions be more precise and faster than computing the logarithm of IntegerDistribution probability int
Vector2D.equals(Object)	Test for the equality of two 2D vectors
RealVector.mapMultiply(double)	Multiply each entry by the argument Returns a new vector
EmpiricalDistribution.EmpiricalDistribution(int,RandomDataImpl)	Creates a new EmpiricalDistribution with the specified bin count using the provided RandomDataImpl instance as the source of random data
GammaDistribution.logDensity(double)	Returns the natural logarithm of the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF If the derivative does not exist at x then an appropriate replacement should be returned e g Double POSITIVE INFINITY Double NaN or the limit inferior or limit superior of the difference quotient Note that due to the floating point precision and under overflow issues this method will for some distributions be more precise and faster than computing the logarithm of RealDistribution density double The default implementation simply computes the logarithm of density x
GammaDistribution.GammaDistribution(double,double)	Creates a new gamma distribution with specified values of the shape and scale parameters
Mean.copy()	Returns a copy of the statistic with the same internal state
BigReal.BigReal(double)	Build an instance from a double
BigFraction.pow(long)	Returns a BigFraction whose value is thisexponent returning the result in reduced form
Precision.equals(float,float,int)	Returns true if both arguments are equal or within the range of allowed error inclusive
Complex.add(double)	Returns a Complex whose value is this addend with addend interpreted as a real number
SecantSolver.SecantSolver(double)	Construct a solver
Minus.derivative()	Returns the derivative of the function
BaseUnivariateSolver.getFunctionValueAccuracy()	Get the function value accuracy of the solver If v is a value returned by the solver for a function f then by contract f v should be less than or equal to the function value accuracy configured for the solver
TestUtils.gTestIntrinsic(double[],long[])	
FieldVector.append(FieldVector)	Construct a vector by appending a vector to this vector
SubLine.intersection(SubLine,boolean)	Get the intersection of the instance and another sub line
SparseFieldVector.add(FieldVector)	Compute the sum of this and v
OpenMapRealVector.OpenMapSparseIterator.remove()	
MultidimensionalCounter.Iterator.remove()	
Arc.checkPoint(double)	Check a point with respect to the arc
UniformCrossover.UniformCrossover(double)	Creates a new UniformCrossover policy using the given mixing ratio
DerivativeStructure.getValue()	Get the value part of the derivative structure
Complex.equals(Object)	Test for equality with another object
ComplexField.getZero()	Get the additive identity of the field
TDistribution.logDensity(double)	Returns the natural logarithm of the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF If the derivative does not exist at x then an appropriate replacement should be returned e g Double POSITIVE INFINITY Double NaN or the limit inferior or limit superior of the difference quotient Note that due to the floating point precision and under overflow issues this method will for some distributions be more precise and faster than computing the logarithm of RealDistribution density double The default implementation simply computes the logarithm of density x
LaguerreSolver.LaguerreSolver()	Construct a solver with default accuracy 1e 6
IterationManager.fireIterationPerformedEvent(IterationEvent)	Informs all registered listeners that a new iteration in the main iteration loop has been performed
SubLimitAngle.isEmpty()	Check if the instance is empty
Precision.round(float,int,int)	Rounds the given value to the specified number of decimal places
Vector3D.toString()	Get a string representation of this vector
LogisticDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
Max.getResult()	Returns the current value of the Statistic
SearchInterval.getMin()	Gets the lower bound
MultivariateNormalDistribution.getMeans()	Gets the mean vector
Sum.evaluate(double[],double[],int,int)	The weighted sum of the entries in the specified portion of the input array or 0 if the designated subarray is empty
AbstractSubHyperplane.getHyperplane()	Get the underlying hyperplane
FractionFormat.getImproperInstance()	Returns the default complex format for the current locale
BicubicInterpolatingFunction.value(double,double)	Compute the value for the function
OpenMapRealVector.append(double)	Construct a new vector by appending a double to this vector
Rotation.Rotation(Vector3D,double)	Build a rotation from an axis and an angle
UniformRealDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
MillerUpdatingRegression.hasIntercept()	A getter method which determines whether a constant is included
GeometricMean.copy()	Returns a copy of the statistic with the same internal state
SymmLQ.SymmLQ(IterationManager,double,boolean)	Creates a new instance of this class with default stopping criterion and custom iteration manager Note that setting check to true entails an extra matrix vector product in the initial phase
Vector2D.Vector2D(double[])	Simple constructor
FieldVector.ebeMultiply(FieldVector)	Element by element multiplication
PearsonsCorrelation.computeCorrelationMatrix(double[][])	Computes the correlation matrix for the columns of the input rectangular array The columns of the array represent values of variables to be correlated
BracketingNthOrderBrentSolverDFP.getRelativeAccuracy()	Get the relative accuracy
TestUtils.t(StatisticalSummary,StatisticalSummary)	
BigFraction.bigDecimalValue(int)	Gets the fraction as a BigDecimal following the passed rounding mode This calculates the fraction as the numerator divided by denominator
NormalDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
Line.reset(Vector3D,Vector3D)	Reset the instance as if built from two points
AbstractFieldMatrix.walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)	Visit and possibly change some matrix entries in column order
MathArrays.shuffle(int[],RandomGenerator)	Shuffle the entries of the given array
OpenMapRealVector.add(OpenMapRealVector)	Optimized method to add two OpenMapRealVectors
GaussIntegrator.getPoint(int)	Gets the integration point at the given index
SynchronizedDescriptiveStatistics.toString()	Generates a text report displaying univariate statistics from values that have been added Each statistic is displayed on a separate line
Quaternion.getScalarPart()	Gets the scalar part of the quaternion
BlockFieldMatrix.walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)	Visit and possibly change some matrix entries in row order
DSCompiler.getOrder()	Get the derivation order
DfpField.newDfp(String)	Create a Dfp given a String representation
SparseFieldVector.getEntry(int)	Returns the entry in the specified index
SubLine.getSegments()	Get the endpoints of the sub line
RealMatrix.multiplyEntry(int,int,double)	Multiplies in place the specified entry of this matrix by the specified value Row and column indices start at 0
RandomDataGenerator.nextZipf(int,double)	Generates a random value from the Zipf Distribution
NotStrictlyPositiveException.NotStrictlyPositiveException(Localizable,Number)	Construct the exception with a specific context
NPointCrossover.getCrossoverPoints()	Returns the number of crossover points used by this CrossoverPolicy
AbstractStepInterpolator.copy()	Copy the instance
SynchronizedSummaryStatistics.getMin()	Returns the minimum of the values that have been added
SpearmansCorrelation.SpearmansCorrelation(RealMatrix)	Create a SpearmansCorrelation from the given data matrix
TestUtils.chiSquareTest(long[][])	
RegressionResults.getStdErrorOfEstimates()	Returns the standard error of the parameter estimates usually denoted s bi
FieldVector.getData()	Returns vector entries as a T array
IterativeLinearSolverEvent.getNormOfResidual()	Returns the norm of the residual The returned value is not required to be exact Instead the norm of the so called updated residual if available should be returned For example the conjugate gradient method computes a sequence of residuals the norm of which is cheap to compute However due to accumulation of round off errors this residual might differ from the true residual after some iterations See e g A Greenbaum and Z Strakos Predicting the Behavior of Finite Precision Lanzos and Conjugate Gradient Computations Technical Report 538 Department of Computer Science New York University 1991 available here
BigFraction.longValue()	Gets the fraction as a long This returns the whole number part of the fraction
NumberIsTooSmallException.getBoundIsAllowed()	true if the minimum is included in the allowed range
InsufficientDataException.InsufficientDataException(Localizable,)	Construct the exception with a specific context
AbstractRealMatrix.setSubMatrix(double[][],int,int)	Replace the submatrix starting at row column using data in the input subMatrix array Indexes are 0 based
MatrixUtils.checkMultiplicationCompatible(AnyMatrix,AnyMatrix)	Check if matrices are multiplication compatible
BaseAbstractUnivariateOptimizer.getMin()	
BracketedUnivariateSolver.solve(int,FUNC,double,double,double,AllowedSolution)	Solve for a zero in the given interval start at startValue
DSCompiler.compose(double[],int,double[],double[],int)	Compute composition of a derivative structure by a function
MathArrays.linearCombination(double,double,double,double)	Compute a linear combination accurately
Array2DRowRealMatrix.copy()	Returns a deep copy of this
Line.Line(Line)	Copy constructor
IterativeLegendreGaussIntegrator.IterativeLegendreGaussIntegrator(int,double,double,int,int)	Builds an integrator with given accuracies and iterations counts
RealMatrixPreservingVisitor.start(int,int,int,int,int,int)	Start visiting a matrix
SummaryStatistics.hashCode()	Returns hash code based on values of statistics
MixtureMultivariateRealDistribution.sample()	Generates a random value vector sampled from this distribution
Pair.equals(Object)	Compare the specified object with this entry for equality
ConvexHull2D.getLineSegments()	Get the line segments of the convex hull ordered
Quaternion.equals(Object)	
Precision.equals(float,float)	Returns true iff they are equal as defined by equals x y 1
ArithmeticUtils.pow(long,int)	Raise a long to an int power
OpenIntToFieldHashMap.remove(int)	Remove the value associated with a key
MultivariateOptimizer.getGoalType()	the optimization type
MathUnsupportedOperationException.MathUnsupportedOperationException()	Default constructor
KalmanFilter.correct(double[])	Correct the current state estimate with an actual measurement
SparseGradient.rint()	Get the whole number that is the nearest to the instance or the even one if x is exactly half way between two integers
ResizableDoubleArray.ResizableDoubleArray(ResizableDoubleArray)	Copy constructor Creates a new ResizableDoubleArray that is a deep fresh copy of the original Needs to acquire synchronization lock on original Original may not be null otherwise a NullArgumentException is thrown
GaussianFitter.GaussianFitter(DifferentiableMultivariateVectorOptimizer)	Constructs an instance using the specified optimizer
OpenMapRealMatrix.addToEntry(int,int,double)	Adds in place the specified value to the specified entry of this matrix Row and column indices start at 0
RandomAdaptor.nextFloat()	Returns the next pseudorandom uniformly distributed float value between 0 0 and 1 0 from this random number generator s sequence
MultiKMeansPlusPlusClusterer.MultiKMeansPlusPlusClusterer(KMeansPlusPlusClusterer,int,ClusterEvaluator)	Build a clusterer
ParetoDistribution.ParetoDistribution(RandomGenerator,double,double,double)	Creates a Pareto distribution
LeastSquaresBuilder.maxEvaluations(int)	Configure the max evaluations
FeatureInitializerFactory.randomize(RealDistribution,FeatureInitializer)	Adds some amount of random data to the given initializer
OpenMapRealVector.mapAddToSelf(double)	Add a value to each entry
SummaryStatistics.setMinImpl(StorelessUnivariateStatistic)	Sets the implementation for the minimum
AbstractFieldMatrix.getColumn(int)	Get the entries in column number col as an array
CorrelatedRandomVectorGenerator.CorrelatedRandomVectorGenerator(double[],RealMatrix,double,NormalizedRandomGenerator)	Builds a correlated random vector generator from its mean vector and covariance matrix
ISAACRandom.ISAACRandom(long)	Creates a new ISAAC random number generator using a single long seed
IntervalsSet.projectToBoundary(Point)	Project a point on the boundary of the region
FractionFormat.FractionFormat()	Create an improper formatting instance with the default number format for the numerator and denominator
FastMath.expm1(double)	Compute exp x 1
ResizableDoubleArray.getElements()	Returns a double array containing the elements of this ResizableArray This method returns a copy not a reference to the underlying array so that changes made to the returned array have no effect on this ResizableArray
MathUnsupportedOperationException.getContext()	Gets a reference to the rich context data structure that allows to customize error messages and store key value pairs in exceptions
OpenMapRealVector.getDistance(OpenMapRealVector)	Optimized method to compute distance
LaplaceDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
RealFieldElement.remainder(double)	IEEE remainder operator
FieldVector3D.FieldVector3D(RealFieldElement,FieldVector3D,RealFieldElement,FieldVector3D,RealFieldElement,FieldVector3D)	Linear constructor Build a vector from three other ones and corresponding scale factors
AbstractRandomGenerator.nextDouble()	Returns the next pseudorandom uniformly distributed double value between 0 0 and 1 0 from this random number generator s sequence
Plane.wholeSpace()	Build a region covering the whole space
BigReal.BigReal(int,MathContext)	Build an instance from an int
Precision.equalsIncludingNaN(double,double,int)	Returns true if both arguments are NaN or if they are equal as defined by equals x y maxUlps
LeastSquaresProblem.Evaluation.getJacobian()	Get the weighted Jacobian matrix
SphericalCoordinates.getPhi()	Get the polar co latitude angle
SummaryStatistics.getSecondMoment()	Returns a statistic related to the Second Central Moment Specifically what is returned is the sum of squared deviations from the sample mean among the values that have been added
QRDecomposition.getSolver()	Get a solver for finding the A X B solution in least square sense
EmpiricalDistribution.getBinStats()	Returns a List of SummaryStatistics instances containing statistics describing the values in each of the bins The list is indexed on the bin number
SpearmansCorrelation.getRankCorrelation()	Returns a PearsonsCorrelation instance constructed from the ranked input data That is new SpearmansCorrelation matrix getRankCorrelation is equivalent to new PearsonsCorrelation rankTransform matrix where rankTransform matrix is the result of applying the configured RankingAlgorithm to each of the columns of matrix
DummyStepHandler.getInstance()	Get the only instance
StepInterpolator.getInterpolatedSecondaryDerivatives(int)	Get the interpolated secondary derivatives corresponding to the secondary equations
UniformIntegerDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all integers between the lower and upper bound of the support are included in the support
RealFieldElement.linearCombination(T,T,T,T,T,T)	Compute a linear combination
ArithmeticUtils.lcm(int,int)	Returns the least common multiple of the absolute value of two numbers using the formula lcm a b a gcd a b b
CholeskyDecomposition.getL()	Returns the matrix L of the decomposition
DerivativeStructure.createConstant(double)	Create a constant compatible with instance order and number of parameters
ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)	Copies source to dest copying the underlying data so dest is a new independent copy of source Does not contract before the copy
FastMath.exp(double)	Exponential function
LogisticDistribution.cumulativeProbability(double)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the cumulative distribution function CDF for this distribution
FieldHermiteInterpolator.derivatives(FieldElement,int)	Interpolate value and first derivatives at a specified abscissa
AbstractFieldMatrix.walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)	Visit but don t change some matrix entries in row order
FieldMatrix.walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)	Visit and possibly change some matrix entries in column order
Minus.value(double)	Compute the value of the function
GeometricDistribution.GeometricDistribution(double)	Create a geometric distribution with the given probability of success
Dfp.cosh()	Hyperbolic cosine operation
FieldVector3D.crossProduct(Vector3D)	Compute the cross product of the instance with another vector
QRDecomposition.getR()	Returns the matrix R of the decomposition
BlockRealMatrix.getRow(int)	Get the entries at the given row index Row indices start at 0
AVLTree.Node.delete()	Delete the node from the tree
RealFieldElement.tan()	Tangent operation
IterationManager.fireTerminationEvent(IterationEvent)	Informs all registered listeners that the final phase post iterations has been completed
FieldVector3D.subtract(RealFieldElement,Vector3D)	Subtract a scaled vector from the instance
MultivariateSummaryStatistics.setSumsqImpl(StorelessUnivariateStatistic[])	Sets the implementation for the sum of squares
CauchyDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
RectangularCholeskyDecomposition.RectangularCholeskyDecomposition(RealMatrix,double)	Decompose a symmetric positive semidefinite matrix
RealVector.map(UnivariateFunction)	Acts as if implemented as return copy mapToSelf function Returns a new vector Does not change instance data
PolygonsSet.PolygonsSet(double,)	Build a polygon from a simple list of vertices
PascalDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
BaseAbstractUnivariateOptimizer.getMax()	
MathUtils.checkFinite(double)	Check that the argument is a real number
CauchyDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
Decimal64.asin()	Arc sine operation
DescriptiveStatistics.getMinImpl()	Returns the currently configured minimum implementation
MicrosphereInterpolator.MicrosphereInterpolator(int,int)	Create a microsphere interpolator
Plane.intersection(Line)	Get the intersection of a line with the instance
LinearConstraintSet.LinearConstraintSet()	Creates a set containing the given constraints
StorelessUnivariateStatistic.getResult()	Returns the current value of the Statistic
RealFieldElement.divide(double)	operator
AbstractRegion.applyTransform(Transform)	Transform a region
ModelSpecificationException.ModelSpecificationException(Localizable,)	
FastMath.abs(long)	Absolute value
Clusterable.centroidOf(Collection)	Returns the centroid of the given Collection of points
AbstractFieldMatrix.scalarAdd(FieldElement)	Increment each entry of this matrix
Complex.multiply(double)	Returns a Complex whose value is this factor with factor interpreted as a real number
SparseFieldMatrix.copy()	Make a deep copy of this
BinomialDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all integers between the lower and upper bound of the support are included in the support
BinomialTest.binomialTest(int,int,double,AlternativeHypothesis)	Returns the observed significance level or p value associated with a Binomial test
DSCompiler.getSize()	Get the array size required for holding partial derivatives data
Well1024a.Well1024a()	Creates a new random number generator
CentralPivotingStrategy.CentralPivotingStrategy()	
DfpField.getRuntimeClass()	Returns the runtime class of the FieldElement
Circle.getOffset(Point)	Get the offset oriented distance of a point
LeastSquaresFactory.create(MultivariateJacobianFunction,RealVector,RealVector,ConvergenceChecker,int,int)	Create a LeastSquaresProblem from the given elements There will be no weights applied unit weights
FieldVector3D.add(double,FieldVector3D)	Add a scaled vector to the instance
MathArrays.Function.evaluate(double[])	Operates on an entire array
BracketFinder.BracketFinder(double,int)	Create a bracketing interval finder
RandomGenerator.setSeed(int)	Sets the seed of the underlying random number generator using an int seed
FastSineTransformer.transform(double[],TransformType)	Returns the forward inverse transform of the specified real data set
BlockFieldMatrix.walkInOptimizedOrder(FieldMatrixChangingVisitor)	Visit and possibly change all matrix entries using the fastest possible order
Vector3D.subtract(Vector)	Subtract a vector from the instance
DescriptiveStatistics.getMaxImpl()	Returns the currently configured maximum implementation
StatUtils.sumLog(double[],int,int)	Returns the sum of the natural logs of the entries in the specified portion of the input array or Double NaN if the designated subarray is empty
Frequency.clear()	Clears the frequency table
Vector1D.add(double,Vector)	Add a scaled vector to the instance
Precision.equals(double,double)	Returns true iff they are equal as defined by equals x y 1
EmpiricalDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
Min.Min()	Create a Min instance
OLSMultipleLinearRegression.calculateAdjustedRSquared()	Returns the adjusted R squared statistic defined by the formula R2adj 1 SSR n 1 SSTO n p where SSR is the sum of squared residuals SSTO is the total sum of squares n is the number of observations and p is the number of parameters estimated including the intercept
SemiVariance.evaluate(double[],double,Direction,boolean,int,int)	Returns the SemiVariance of the designated values against the cutoff in the given direction with the provided bias correction
BSPTree.VanishingCutHandler.fixNode(BSPTree)	Fix a node with both vanished cut and children
AdaptiveStepsizeIntegrator.integrate(ExpandableStatefulODE,double)	Integrate a set of differential equations up to the given time
UniformRealDistribution.density(double)	Returns the probability density function PDF of this distribution evaluated at the specified point x In general the PDF is the derivative of the CDF
NoBracketingException.getFHi()	Get the value at the higher end of the interval
Dfp.getReal()	Get the real value of the number
Power.value(double)	Compute the value of the function
Percentile.evaluate(double[],int,int)	Returns an estimate of the quantileth percentile of the designated values in the values array The quantile estimated is determined by the quantile property
SphericalCoordinates.toCartesianGradient(double[])	Convert a gradient with respect to spherical coordinates into a gradient with respect to Cartesian coordinates
GammaDistribution.isSupportConnected()	Use this method to get information about whether the support is connected i e whether all values between the lower and upper bound of the support are included in the support
DSCompiler.atan2(double[],int,double[],int,double[],int)	Compute two arguments arc tangent of a derivative structure
JacobianMatrices.setParameterizedODE(ParameterizedODE)	Set a parameter Jacobian provider
Decimal64.intValue()	The current implementation performs casting to a int
LaguerreSolver.solveAllComplex(double[],double)	Find all complex roots for the polynomial with the given coefficients starting from the given initial value
DerivativeStructure.signum()	Compute the signum of the instance
ComplexFormat.ComplexFormat(String)	Create an instance with a custom imaginary character and the default number format for both real and imaginary parts
Plane.isSimilarTo(Plane)	Check if the instance is similar to another plane
MillerUpdatingRegression.MillerUpdatingRegression(int,boolean)	Primary constructor for the MillerUpdatingRegression
OpenIntToFieldHashMap.put(int,FieldElement)	Put a value associated with a key in the map
BlockFieldMatrix.scalarAdd(FieldElement)	Increment each entry of this matrix
AggregateSummaryStatistics.getSum()	Returns the sum of the values that have been added to Univariate This version returns a sum of all the aggregated data
ResizableDoubleArray.getContractionCriteria()	The contraction criteria defines when the internal array will contract to store only the number of elements in the element array
DSCompiler.pow(double[],int,double,double[],int)	Compute power of a derivative structure
QRDecomposition.getH()	Returns the Householder reflector vectors
StatisticalSummary.getN()	Returns the number of available values
Frequency.valuesIterator()	Returns an Iterator over the set of values that have been added
AbstractStorelessUnivariateStatistic.incrementAll(double[])	This default implementation just calls increment double in a loop over the input array
Line.isParallelTo(Line)	Check the instance is parallel to another line
RealFieldElement.subtract(double)	operator
AbstractFieldMatrix.copySubMatrix(int,int,int,int,FieldElement[][])	Copy a submatrix Rows and columns are indicated counting from 0 to n 1
Median.withEstimationType(EstimationType)	Build a new instance similar to the current one except for the estimation type
SynchronizedMultivariateSummaryStatistics.getMax()	Returns an array whose ith entry is the maximum of the ith entries of the arrays that have been added using MultivariateSummaryStatistics addValue double
PolynomialFunctionLagrangeForm.PolynomialFunctionLagrangeForm(double[],double[])	Construct a Lagrange polynomial with the given abscissas and function values The order of interpolating points are not important
UniformRealDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
BaseMultivariateVectorMultiStartOptimizer.getEvaluations()	Get the number of evaluations of the objective function
DSCompiler.sinh(double[],int,double[],int)	Compute hyperbolic sine of a derivative structure
Rotation.Rotation(double,double,double,double,boolean)	Build a rotation from the quaternion coordinates
AbstractOptimizationProblem.getConvergenceChecker()	Gets the convergence checker
AbstractRealMatrix.preMultiply(RealVector)	Returns the row vector result of premultiplying this by the vector v
FDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
FastMath.ulp(double)	Compute least significant bit Unit in Last Position for a number
AbstractIntegrator.integrate(ExpandableStatefulODE,double)	Integrate a set of differential equations up to the given time
Region.side(Hyperplane)	Compute the relative position of the instance with respect to an hyperplane
Logistic.Parametric.Logistic.Parametric()	
Divide.Divide()	
OpenMapRealVector.OpenMapSparseIterator.hasNext()	
NonMonotonicSequenceException.NonMonotonicSequenceException(Number,Number,int,OrderDirection,boolean)	Construct the exception
Edge.getEnd()	Get end vertex
RealMatrixFormat.getRowSuffix()	Get the format suffix
TestUtils.homoscedasticTTest(double[],double[])	
MersenneTwister.setSeed(int[])	Reinitialize the generator as if just built with the given int array seed
Arc.getTolerance()	Get the tolerance below which angles are considered identical
BlockFieldMatrix.getRowVector(int)	Get the entries in row number row as a vector
Mean.Mean(Mean)	Copy constructor creates a new Mean identical to the original
CauchyDistribution.CauchyDistribution(RandomGenerator,double,double,double)	Creates a Cauchy distribution
MultidimensionalCounter.getCount()	Convert to unidimensional counter
AbstractMultipleLinearRegression.isNoIntercept()	true if the model has no intercept term false otherwise
FieldVector3D.subtract(FieldVector3D)	Subtract a vector from the instance
BlockFieldMatrix.setSubMatrix(FieldElement[][],int,int)	Replace the submatrix starting at row column using data in the input subMatrix array Indexes are 0 based
SparseFieldMatrix.SparseFieldMatrix(Field)	Create a matrix with no data
SimplexOptimizer.optimize()	Stores data and performs the optimization
Population.getPopulationSize()	Access the current population size
Precision.equalsIncludingNaN(double,double)	Returns true if both arguments are NaN or neither is NaN and they are equal as defined by equals x y 1
DefaultProcessModel.DefaultProcessModel(double[][],double[][],double[][],double[],double[][])	Create a new ProcessModel taking double arrays as input parameters
TestUtils.oneWayAnovaPValue(Collection)	
RealFieldElement.acosh()	Inverse hyperbolic cosine operation
DerivativeStructure.getFreeParameters()	Get the number of free parameters
FastMath.cbrt(double)	Compute the cubic root of a number
Dfp.atan2(Dfp)	Two arguments arc tangent operation
BinaryMutation.BinaryMutation()	
NonSelfAdjointOperatorException.NonSelfAdjointOperatorException()	Creates a new instance of this class
Plane.getOffset(Point)	Get the offset oriented distance of a point
SimpleValueChecker.converged(int,PointValuePair,PointValuePair)	Check if the optimization algorithm has converged considering the last two points
Point.getSpace()	Get the space to which the point belongs
RandomKey.identityPermutation(int)	Generates a representation corresponding to an identity permutation of length l which can be passed to the RandomKey constructor
RandomDataGenerator.nextInt(int,int)	Generates a uniformly distributed random integer between lower and upper endpoints included
RealMatrixFormat.getSuffix()	Get the format suffix
RealMatrix.getSubMatrix(int,int,int,int)	Gets a submatrix Rows and columns are indicated counting from 0 to n 1
ArrayRealVector.walkInOptimizedOrder(RealVectorChangingVisitor,int,int)	Visits and possibly change some entries of this vector in optimized order The order in which the entries are visited is selected so as to lead to the most efficient implementation it might depend on the concrete implementation of this abstract class
RealVectorFormat.parse(String,ParsePosition)	Parse a string to produce a RealVector object
BigFractionFormat.getImproperInstance()	Returns the default complex format for the current locale
MathArrays.sortInPlace(double[],)	Sort an array in ascending order in place and perform the same reordering of entries on other arrays For example if x 3 1 2 y 1 2 3 and z 0 5 7 then sortInPlace x y z will update x to 1 2 3 y to 2 3 1 and z to 5 7 0
Circle.getTransform(Rotation)	Get a Transform embedding a 3D rotation
AdamsBashforthIntegrator.AdamsBashforthIntegrator(int,double,double,double,double)	Build an Adams Bashforth integrator with the given order and step control parameters
FieldVector3D.FieldVector3D(RealFieldElement[])	Simple constructor
DfpField.newDfp(byte,byte)	Creates a Dfp with a non finite value
PreconditionedIterativeLinearSolver.PreconditionedIterativeLinearSolver(IterationManager)	Creates a new instance of this class with custom iteration manager
LinearObjectiveFunction.value(double[])	Computes the value of the linear equation at the current point
LinearInterpolator.interpolate(double[],double[])	Computes a linear interpolating function for the data set
Dfp.copySign(Dfp)	Returns the instance with the sign of the argument
MatrixUtils.serializeRealVector(RealVector,ObjectOutputStream)	Serialize a RealVector
Complex.negate()	Returns a Complex whose value is this
AbstractFieldMatrix.setColumnVector(int,FieldVector)	Set the entries in column number column as a vector
BigReal.BigReal(double,MathContext)	Build an instance from a double
ResizableDoubleArray.ResizableDoubleArray(int,double,double)	Creates an instance with the specified initial capacity expansion factor and contraction criteria
RealDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
AbstractStepInterpolator.getCurrentTime()	Get the current soft grid point time
PolygonsSet.getVertices()	Get the vertices of the polygon
ArrayFieldVector.walkInDefaultOrder(FieldVectorPreservingVisitor,int,int)	Visits but does not alter some entries of this vector in default order increasing index
SynchronizedDescriptiveStatistics.SynchronizedDescriptiveStatistics()	Construct an instance with infinite window
SynchronizedRandomGenerator.nextGaussian()	Returns the next pseudorandom Gaussian normally distributed double value with mean 0 0 and standard deviation 1 0 from this random number generator s sequence
Vector2D.getY()	Get the ordinate of the vector
AbstractRegion.projectToBoundary(Point)	Project a point on the boundary of the region
NewtonRaphsonSolver.NewtonRaphsonSolver()	Construct a solver
DecompositionSolver.getInverse()	Get the pseudo inverse of the decomposed matrix
TransformerMap.containsTransformer(NumberTransformer)	Tests if a NumberTransformer is present in the TransformerMap
FastMath.abs(double)	Absolute value
PascalDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
AbstractMultipleLinearRegression.estimateRegressionParametersStandardErrors()	Returns the standard errors of the regression parameters
MatrixDimensionMismatchException.getExpectedColumnDimension()	the expected column dimension
ArrayFieldVector.ArrayFieldVector(Field,FieldElement[])	Construct a vector from an array copying the input array
SecondMoment.copy()	Returns a copy of the statistic with the same internal state
Dfp.expm1()	Exponential minus 1
RealVector.SparseEntryIterator.next()	
ConfidenceInterval.toString()	String representation of the confidence interval
Region.isEmpty(BSPTree)	Check if the sub tree starting at a given node is empty
FieldDecompositionSolver.solve(FieldMatrix)	Solve the linear equation A X B for matrices A
SemiVariance.evaluate(double[],Direction)	This method calculates SemiVariance for the entire array against the mean using the current value of the biasCorrection instance property
FieldVector3D.distance1(FieldVector3D)	Compute the distance between the instance and another vector according to the L1 norm
UnivariateIntegrator.getAbsoluteAccuracy()	Get the actual absolute accuracy
TricubicInterpolator.TricubicInterpolator()	
CholeskyDecomposition.CholeskyDecomposition(RealMatrix,double,double)	Calculates the Cholesky decomposition of the given matrix
BlockRealMatrix.getRowMatrix(int)	Get the entries at the given row index as a row matrix Row indices start at 0
WeibullDistribution.getShape()	Access the shape parameter alpha
EventState.getConvergence()	Get the convergence threshold for event localization
RandomDataImpl.nextInversionDeviate(IntegerDistribution)	Generate a random deviate from the given distribution using the inversion method
ConstantRealDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
AbstractStorelessUnivariateStatistic.incrementAll(double[],int,int)	This default implementation just calls increment double in a loop over the specified portion of the input array
ArrayFieldVector.ArrayFieldVector(FieldElement[],int,int)	Construct a vector from part of a array
AbstractFieldMatrix.copySubMatrix(int[],int[],FieldElement[][])	Copy a submatrix Rows and columns are indicated counting from 0 to n 1
FieldMatrix.copy()	Make a deep copy of this
RealVector.mapMultiplyToSelf(double)	Multiply each entry
MultivariateSummaryStatistics.getDimension()	Returns the dimension of the data
BigReal.BigReal(BigInteger,int,MathContext)	Build an instance from an unscaled BigInteger
FiniteDifferencesDifferentiator.getNbPoints()	Get the number of points to use
CauchyDistribution.getScale()	Access the scale parameter
SingularValueDecomposition.getNorm()	Returns the L2 norm of the matrix
Dfp.ceil()	Round to an integer using the round ceil mode
HarmonicCurveFitter.ParameterGuesser.guess()	Gets an estimation of the parameters
Sqrt.value(double)	Compute the value of the function
RealMatrix.scalarMultiply(double)	Returns the result of multiplying each entry of this by d
AbstractFieldMatrix.walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)	Visit and possibly change some matrix entries using the fastest possible order
BlockRealMatrix.setRow(int,double[])	Sets the specified row of this matrix to the entries of the specified array Row indices start at 0
FractionConversionException.FractionConversionException(double,int)	Constructs an exception with specified formatted detail message
RealDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
BinomialTest.BinomialTest()	
Percentile.getEstimationType()	Get the estimation type used for computation
SparseFieldVector.SparseFieldVector(SparseFieldVector)	Copy constructor
EnumeratedDistribution.reseedRandomGenerator(long)	Reseed the random generator used to generate samples
FieldVectorChangingVisitor.visit(int,FieldElement)	Visit one entry of the vector
DSCompiler.log10(double[],int,double[],int)	Computes base 10 logarithm of a derivative structure
SimpleUnivariateValueChecker.SimpleUnivariateValueChecker(double,double,int)	Builds an instance with specified thresholds
RungeKuttaIntegrator.integrate(ExpandableStatefulODE,double)	Integrate a set of differential equations up to the given time
DerivativeStructure.linearCombination(DerivativeStructure,DerivativeStructure,DerivativeStructure,DerivativeStructure)	Compute a linear combination
AbstractStepInterpolator.setSoftCurrentTime(double)	Restrict step range to a limited part of the global step
StatUtils.meanDifference(double[],double[])	Returns the mean of the signed differences between corresponding elements of the input arrays i e sum sample1 i sample2 i sample1 length
RealFieldElement.floor()	Get the largest whole number smaller than instance
TestUtils.chiSquareTestDataSetsComparison(long[],long[],double)	
GammaDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
StatisticalSummaryValues.getSum()	Description copied from interface StatisticalSummary
FieldMatrix.preMultiply(FieldMatrix)	Premultiply this matrix by m
OpenIntToFieldHashMap.iterator()	Get an iterator over map elements
Plane.reset(Vector3D,Vector3D)	Reset the instance as if built from a point and a normal
WeibullDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
TDistribution.TDistribution(double)	Create a t distribution using the given degrees of freedom
DescriptiveStatistics.clear()	Resets all statistics and storage
Population.addChromosome(Chromosome)	Add the given chromosome to the population
UnivariateSolverUtils.isBracketing(UnivariateFunction,double,double)	Check whether the interval bounds bracket a root That is if the values at the endpoints are not equal to zero then the function takes opposite signs at the endpoints
RegionFactory.RegionFactory()	Simple constructor
PolyhedronsSet.PolyhedronsSet(List,List,double)	Build a polyhedrons set from a Boundary REPresentation B rep specified by connected vertices
NonLinearConjugateGradientOptimizer.NonLinearConjugateGradientOptimizer(Formula,ConvergenceChecker,double,double,double,Preconditioner)	
ArrayFieldVector.dotProduct(FieldVector)	Compute the dot product
SphericalPolygonsSet.SphericalPolygonsSet(Vector3D,Vector3D,double,int,double)	Build a polygons set representing a regular polygon
Percentile.setData(double[],int,int)	Set the data array The input array is copied not referenced
Percentile.Percentile(Percentile)	Copy constructor creates a new Percentile identical to the original
AbstractRealMatrix.getColumn(int)	Get the entries at the given column index as an array Column indices start at 0
RealFieldElement.hypot(T)	Returns the hypotenuse of a triangle with sides this and y sqrt this2 y2 avoiding intermediate overflow or underflow
SemiVariance.SemiVariance(boolean,Direction)	Constructs a SemiVariance with the specified isBiasCorrected property and the specified Direction property
PolynomialFitter.PolynomialFitter(MultivariateVectorOptimizer)	Simple constructor
ContinuedFraction.evaluate(double,double,int)	Evaluates the continued fraction at the value x
JacobianMatrices.MismatchedEquations.JacobianMatrices.MismatchedEquations()	Simple constructor
VectorialCovariance.getN()	Get the number of vectors in the sample
SimpleRegression.getInterceptStdErr()	Returns the standard error of the intercept estimate usually denoted s b0
FastMath.hypot(double,double)	Returns the hypotenuse of a triangle with sides x and y sqrt x2 y2 avoiding intermediate overflow or underflow
GumbelDistribution.isSupportUpperBoundInclusive()	Whether or not the upper bound of support is in the domain of the density function Returns true iff getSupportUpperBound is finite and density getSupportUpperBound returns a non NaN non infinite value
DummyLocalizable.toString()	
DSCompiler.getFreeParameters()	Get the number of free parameters
SubLimitAngle.split(Hyperplane)	Split the instance in two parts by an hyperplane
SumOfSquares.getN()	Returns the number of values that have been added
MultidimensionalCounter.getCounts(int)	Convert to multidimensional counter
Network.NeuronIdentifierComparator.Network.NeuronIdentifierComparator()	
MultivariateSummaryStatistics.getSum()	Returns an array whose ith entry is the sum of the ith entries of the arrays that have been added using addValue double
Vector2DFormat.getInstance(Locale)	Returns the default 2D vector format for the given locale
Precision.equalsIncludingNaN(double,double,double)	Returns true if both arguments are NaN or are equal or within the range of allowed error inclusive
RealVector.isNaN()	Check whether any coordinate of this vector is NaN
SparseGradient.linearCombination(SparseGradient,SparseGradient,SparseGradient,SparseGradient,SparseGradient,SparseGradient,SparseGradient,SparseGradient)	Compute a linear combination
SparseGradient.exp()	Exponential
HermiteInterpolator.addSamplePoint(double,)	Add a sample point
MathInternalError.MathInternalError(Localizable,)	Constructor accepting a localized message
AbstractSubHyperplane.reunite(SubHyperplane)	Compute the union of the instance and another sub hyperplane
RandomDataImpl.RandomDataImpl()	Construct a RandomDataImpl using a default random generator as the source of randomness
UncorrelatedRandomVectorGenerator.UncorrelatedRandomVectorGenerator(double[],double[],NormalizedRandomGenerator)	Simple constructor
StepInterpolator.getInterpolatedState()	Get the state vector of the interpolated point
DBSCANClusterer.DBSCANClusterer(double,int,DistanceMeasure)	Creates a new instance of a DBSCANClusterer
ArrayRealVector.walkInOptimizedOrder(RealVectorPreservingVisitor,int,int)	Visits but does not alter some entries of this vector in optimized order The order in which the entries are visited is selected so as to lead to the most efficient implementation it might depend on the concrete implementation of this abstract class
ExpandableStatefulODE.addSecondaryEquations(SecondaryEquations)	Add a set of secondary equations to be integrated along with the primary set
SparseFieldVector.getField()	Get the type of field elements of the vector
Percentile.getKthSelector()	Get the kthSelector used for computation
BlockFieldMatrix.setColumnVector(int,FieldVector)	Set the entries in column number column as a vector
NormalDistribution.NormalDistribution(double,double,double)	Create a normal distribution using the given mean standard deviation and inverse cumulative distribution accuracy
Line.Line(Vector3D,Vector3D)	Build a line from two points
NotANumberException.NotANumberException()	Construct the exception
DfpMath.atan(Dfp)	computes the arc tangent of the argument Uses the typical taylor series but may reduce arguments using the following identity tan x y tan x tan y 1 tan x tan y since tan PI 8 sqrt 2 1 atan x atan x sqrt 2 1 1 x sqrt 2 x PI 8 0
PolynomialFunctionLagrangeForm.getInterpolatingPoints()	Returns a copy of the interpolating points array
BinaryMutation.mutate(Chromosome)	Mutate the given chromosome Randomly changes one gene
ManhattanDistance.ManhattanDistance()	
ProperBigFractionFormat.parse(String,ParsePosition)	Parses a string to produce a BigFraction object This method expects the string to be formatted as a proper BigFraction
RealMatrix.walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)	Visit but don t change some matrix entries in row order
AbstractFieldMatrix.getField()	Get the type of field elements of the matrix
DerivativeStructure.add(DerivativeStructure)	Compute this a
LogNormalDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in R P X x 0
LaguerreSolver.laguerre(double,double,double,double)	Find a real root in the given interval
VectorFormat.format(Vector,StringBuffer,FieldPosition)	Formats a Vector object to produce a string
OpenIntToFieldHashMap.get(int)	Get the stored value associated with the given key
RootsOfUnity.RootsOfUnity()	Build an engine for computing the n th roots of unity
MathArrays.isMonotonic(double[],OrderDirection,boolean)	Check that an array is monotonically increasing or decreasing
KolmogorovSmirnovTest.kolmogorovSmirnovStatistic(RealDistribution,double[])	Computes the one sample Kolmogorov Smirnov test statistic D n sup x F n x F x where F is the distribution cdf function associated with distribution n is the length of data and F n is the empirical distribution that puts mass 1 n at each of the values in data
EuclideanIntegerPoint.centroidOf(Collection)	Returns the centroid of the given Collection of points
RealLinearOperator.getColumnDimension()	Returns the dimension of the domain of this operator
Decimal64.linearCombination(Decimal64,Decimal64,Decimal64,Decimal64,Decimal64,Decimal64,Decimal64,Decimal64)	Compute a linear combination
DescriptiveStatistics.toString()	Generates a text report displaying univariate statistics from values that have been added Each statistic is displayed on a separate line
RectangularCholeskyDecomposition.getRank()	Get the rank of the symmetric positive semidefinite matrix
KolmogorovSmirnovTest.kolmogorovSmirnovTest(double[],double[],boolean)	Computes the p value or observed significance level of a two sample Kolmogorov Smirnov test evaluating the null hypothesis that x and y are samples drawn from the same probability distribution Specifically what is returned is an estimate of the probability that the kolmogorovSmirnovStatistic double double associated with a randomly selected partition of the combined sample into subsamples of sizes x length and y length will strictly exceed if strict is true or be at least as large as strict false as kolmogorovSmirnovStatistic x y
LeastSquaresProblem.Evaluation.getSigma(double)	Get an estimate of the standard deviation of the parameters The returned values are the square root of the diagonal coefficients of the covariance matrix sd a i sqrt C i i where a i is the optimized value of the i th parameter and C is the covariance matrix
UnivariateSolverUtils.bracket(UnivariateFunction,double,double,double,int)	This method simply calls bracket function initial lowerBound upperBound q r maximumIterations with q and r set to 1 0
LinearObjectiveFunction.LinearObjectiveFunction(RealVector,double)	
MultivariateFunctionMappingAdapter.value(double[])	Compute the underlying function value from an unbounded point
HarmonicOscillator.HarmonicOscillator(double,double,double)	Harmonic oscillator function
PSquarePercentile.PSquareMarkers.getPercentileValue()	Returns Percentile value computed thus far
SummaryStatistics.getSumLogImpl()	Returns the currently configured sum of logs implementation
FastMath.abs(float)	Absolute value
HarmonicCurveFitter.create()	Creates a default curve fitter
LinearConstraint.hashCode()	
DfpField.getLn2Split()	Get the constant ln 2 split in two pieces
RandomDataImpl.nextSecureHexString(int)	Generates a random string of hex characters from a secure random sequence
ResizableDoubleArray.discardFrontElements(int)	Discards the i initial elements of the array For example if the array contains the elements 1 2 3 4 invoking discardFrontElements 2 will cause the first two elements to be discarded leaving 3 4 in the array Throws illegalArgumentException if i exceeds numElements
PoissonDistribution.sample()	Generate a random value sampled from this distribution
WeibullDistribution.getSupportUpperBound()	Access the upper bound of the support This method must return the same value as inverseCumulativeProbability 1 In other words this method must return inf x in R P X x 1
PoissonDistribution.normalApproximateProbability(int)	Calculates the Poisson distribution function using a normal approximation The N mean sqrt mean distribution is used to approximate the Poisson distribution The computation uses half correction evaluating the normal distribution function at x 0 5
Interval.getBarycenter()	Get the barycenter of the interval
DoubleArray.getElements()	Returns a double array containing the elements of this DoubleArray If the underlying implementation is array based this method should always return a copy rather than a reference to the underlying array so that changes made to the returned array have no effect on the DoubleArray
Region.isFull(BSPTree)	Check if the sub tree starting at a given node covers the full space
GumbelDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
BaseMultivariateVectorMultiStartOptimizer.optimize(int,FUNC,double[],double[],double[])	Optimize an objective function
RandomDataImpl.nextPermutation(int,int)	Generates an integer array of length k whose entries are selected randomly without repetition from the integers 0 n 1 inclusive
SphericalCoordinates.getR()	Get the radius
ExceptionContext.getThrowable()	Get a reference to the exception to which the context relates
AkimaSplineInterpolator.interpolate(double[],double[])	Computes an interpolating function for the data set
OpenMapRealVector.getDistance(RealVector)	Distance between two vectors
Point.distance(Point)	Compute the distance between the instance and another point
StandardDeviation.isBiasCorrected()	Returns the isBiasCorrected
SubLine.SubLine(Segment)	Create a sub line from a segment
DormandPrince853Integrator.DormandPrince853Integrator(double,double,double,double)	Simple constructor
RealMatrix.walkInColumnOrder(RealMatrixPreservingVisitor)	Visit but don t change all matrix entries in column order
TransformerMap.removeTransformer(Class)	Removes a Class to Transformer Mapping in the Map
OneWayAnova.anovaPValue(Collection)	Computes the ANOVA P value for a collection of double arrays
Line.getTransform(AffineTransform)	Get a Transform embedding an affine transform
Acosh.Acosh()	
Complex.valueOf(double,double)	Create a complex number given the real and imaginary parts
SynchronizedMultivariateSummaryStatistics.getSumImpl()	Returns the currently configured Sum implementation
DBSCANClusterer.DBSCANClusterer(double,int)	Creates a new instance of a DBSCANClusterer
TricubicInterpolatingFunction.value(double,double,double)	Compute the value for the function
PolynomialFunction.equals(Object)	
FieldVector.dotProduct(FieldVector)	Compute the dot product
PearsonsCorrelation.PearsonsCorrelation()	Create a PearsonsCorrelation instance without data
Line.Line(Vector2D,double)	Build a line from a point and an angle
AbstractSimplex.iterate(MultivariateFunction,Comparator)	Compute the next simplex of the algorithm
DfpField.newDfp(byte)	Create an instance from a byte value
RegressionResults.RegressionResults(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)	Constructor for Regression Results
Vector1D.equals(Object)	Test for the equality of two 1D vectors
RandomData.nextUniform(double,double)	Generates a uniformly distributed random value from the open interval lower upper i e endpoints excluded
JacobianMatrices.addParameterJacobianProvider(ParameterJacobianProvider)	Add a parameter Jacobian provider
StepNormalizer.StepNormalizer(double,FixedStepHandler,StepNormalizerBounds)	Simple constructor Uses INCREMENT mode
ComplexFormat.getImaginaryFormat()	Access the imaginaryFormat
MultivariateInterpolator.interpolate(double[][],double[])	Computes an interpolating function for the data set
StepNormalizer.StepNormalizer(double,FixedStepHandler,StepNormalizerMode,StepNormalizerBounds)	Simple constructor
RealVector.getL1Norm()	Returns the L1 norm of the vector
MathRuntimeException.getContext()	Gets a reference to the rich context data structure that allows to customize error messages and store key value pairs in exceptions
EuclideanDoublePoint.distanceFrom(EuclideanDoublePoint)	Returns the distance from the given point
Precision.compareTo(double,double,double)	Compares two numbers given some amount of allowed error
MatrixDimensionMismatchException.getWrongRowDimension()	the expected row dimension
SynchronizedSummaryStatistics.getSum()	Returns the sum of the values that have been added
FieldVector.mapSubtract(FieldElement)	Map a subtraction operation to each entry
FieldVector3D.distance(FieldVector3D,FieldVector3D)	Compute the distance between two vectors according to the L2 norm
StorelessCovariance.increment(double[])	Increment the covariance matrix with one row of data
DefaultRealMatrixPreservingVisitor.start(int,int,int,int,int,int)	Start visiting a matrix
Array2DRowRealMatrix.multiplyEntry(int,int,double)	Multiplies in place the specified entry of this matrix by the specified value Row and column indices start at 0
Incrementor.resetCount()	Resets the counter to 0
BaseAbstractUnivariateSolver.getRelativeAccuracy()	Get the relative accuracy of the solver The contract for relative accuracy is the same as BaseUnivariateSolver getAbsoluteAccuracy but using relative rather than absolute error If is the relative accuracy configured for a solver and v is a value returned then a root of the function should exist somewhere in the interval v v v v
RealMatrixFormat.getColumnSeparator()	Get the format separator between components
NonSymmetricMatrixException.NonSymmetricMatrixException(int,int,double)	Construct an exception
Dfp.reciprocal()	Returns the multiplicative inverse of this element
MersenneTwister.MersenneTwister(int[])	Creates a new random number generator using an int array seed
RealMatrixFormat.format(RealMatrix,StringBuffer,FieldPosition)	Formats a RealMatrix object to produce a string
ValueServer.getSigma()	Returns the standard deviation used when operating in GAUSSIAN MODE
Log1p.Log1p()	
ResizableDoubleArray.setExpansionMode(ExpansionMode)	Sets the expansion mode
BlockFieldMatrix.walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)	Visit but don t change some matrix entries in row order
ArrayFieldVector.walkInOptimizedOrder(FieldVectorPreservingVisitor,int,int)	Visits but does not alter some entries of this vector in optimized order The order in which the entries are visited is selected so as to lead to the most efficient implementation it might depend on the concrete implementation of this abstract class
SynchronizedMultivariateSummaryStatistics.getSumsqImpl()	Returns the currently configured sum of squares implementation
EnumeratedRealDistribution.isSupportLowerBoundInclusive()	Whether or not the lower bound of support is in the domain of the density function Returns true iff getSupporLowerBound is finite and density getSupportLowerBound returns a non NaN non infinite value
FieldVector.mapDivide(FieldElement)	Map a division operation to each entry
SparseGradient.getValue()	Get the value of the function
FieldVector.getField()	Get the type of field elements of the vector
Cos.value(DerivativeStructure)	Simple mathematical function
NeuronSquareMesh2D.getNumberOfColumns()	Gets the number of neurons in each column of this map
SparseGradient.compose(double,double)	Compute composition of the instance by a univariate function
FieldVector3D.toArray()	Get the vector coordinates as a dimension 3 array
ArrayRealVector.set(double)	Set all elements to a single value
LinearConstraint.LinearConstraint(double[],double,Relationship,double[],double)	Build a constraint involving two linear equations
ArrayFieldVector.ebeMultiply(ArrayFieldVector)	Element by element multiplication
RealMatrix.getEntry(int,int)	Get the entry in the specified row and column Row and column indices start at 0
Dfp.remainder(Dfp)	Returns the IEEE remainder
BigReal.getField()	Get the Field to which the instance belongs
MatrixDimensionMismatchException.getExpectedRowDimension()	the expected row dimension
Sin.value(DerivativeStructure)	Simple mathematical function
DerivativeStructure.pow(double)	Power operation
BlockFieldMatrix.subtract(FieldMatrix)	Subtract m from this matrix
SparseGradient.acosh()	Inverse hyperbolic cosine operation
ListPopulation.toString()	
BoundaryProjection.getOffset()	Offset of the point with respect to the boundary it is projected on
SparseGradient.createConstant(double)	Factory method creating a constant
Array2DRowFieldMatrix.Array2DRowFieldMatrix(Field)	Creates a matrix with no data
Precision.round(float,int)	Rounds the given value to the specified number of decimal places
BaseMultivariateVectorMultiStartOptimizer.getConvergenceChecker()	Get the convergence checker
BigFraction.BigFraction(int)	Create a BigFraction equivalent to the passed int ie num 1
AbstractListChromosome.toString()	
NonPositiveDefiniteMatrixException.getColumn()	the column index
AbstractStorelessUnivariateStatistic.getResult()	Returns the current value of the Statistic
DerivativeStructure.linearCombination(double,DerivativeStructure,double,DerivativeStructure)	Compute a linear combination
MathIllegalArgumentException.getLocalizedMessage()	
DfpField.getLn2()	Get the constant ln 2
RandomDataImpl.nextUniform(double,double,boolean)	Generates a uniformly distributed random value from the interval lower upper or the interval lower upper The lower bound is thus optionally included while the upper bound is always excluded
StepNormalizer.StepNormalizer(double,FixedStepHandler)	Simple constructor Uses INCREMENT mode and FIRST bounds setting for backwards compatibility
PearsonsCorrelation.PearsonsCorrelation(Covariance)	Create a PearsonsCorrelation from a Covariance The correlation matrix is computed by scaling the Covariance s covariance matrix
MatrixDimensionMismatchException.getWrongColumnDimension()	the wrong column dimension
RegressionResults.getCovarianceOfParameters(int,int)	Returns the covariance between regression parameters i and j
MultivariateOptimizer.optimize()	Stores data and performs the optimization
BlockRealMatrix.getRowVector(int)	Returns the entries in row number row as a vector Row indices start at 0
BigFraction.subtract(BigInteger)	Subtracts the value of an BigInteger from the value of this BigFraction returning the result in reduced form
MathArithmeticException.MathArithmeticException(Localizable,)	Constructor with a specific message
NewtonSolver.solve(int,DifferentiableUnivariateFunction,double,double)	Find a zero near the midpoint of min and max
UnivariateOptimizer.getGoalType()	the optimization type
GumbelDistribution.getLocation()	Access the location parameter mu
NonNegativeConstraint.NonNegativeConstraint(boolean)	
GeometricMean.GeometricMean(SumOfLogs)	Create a GeometricMean instance using the given SumOfLogs instance
SymmLQ.solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector,boolean,double)	Returns an estimate of the solution to the linear system A shift I x b The solution is computed in place
RealVector.append(double)	Construct a new vector by appending a double to this vector
EuclideanDoublePoint.equals(Object)	
FieldVector3D.distanceInf(FieldVector3D,FieldVector3D)	Compute the distance between two vectors according to the L norm
BetaDistribution.BetaDistribution(double,double)	Build a new instance
LevenbergMarquardtOptimizer.getOrthoTolerance()	Gets the value of a tuning parameter
RootsOfUnity.isCounterClockWise()	Returns true if computeRoots int was called with a positive value of its argument n If true then counter clockwise ordering of the roots of unity should be used
Vector3D.crossProduct(Vector3D,Vector3D)	Compute the cross product of two vectors
SubHyperplane.SplitSubHyperplane.SubHyperplane.SplitSubHyperplane(SubHyperplane,SubHyperplane)	Build a SplitSubHyperplane from its parts
OLSMultipleLinearRegression.calculateResidualSumOfSquares()	Returns the sum of squared residuals
MultivariateSummaryStatistics.setSumImpl(StorelessUnivariateStatistic[])	Sets the implementation for the Sum
Vector1D.distanceInf(Vector1D,Vector1D)	Compute the distance between two vectors according to the L norm
BlockRealMatrix.walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)	Visit but don t change some matrix entries in row order
ArrayFieldVector.ArrayFieldVector(ArrayFieldVector,FieldElement[])	Construct a vector by appending one vector to another vector
TestUtils.g(double[],long[])	
AbstractRealMatrix.getNorm()	Returns the maximum absolute row sum norm of the matrix
PolyhedronsSet.PolyhedronsSet(double,double,double,double,double,double,double)	Build a parallellepipedic box
Quaternion.normalize()	Computes the normalized quaternion the versor of the instance
HypergeometricDistribution.getNumericalMean()	Use this method to get the numerical value of the mean of this distribution
SparseFieldVector.ebeMultiply(FieldVector)	Element by element multiplication
ArrayFieldVector.walkInOptimizedOrder(FieldVectorChangingVisitor,int,int)	Visits and possibly change some entries of this vector in optimized order The order in which the entries are visited is selected so as to lead to the most efficient implementation it might depend on the concrete implementation of this abstract class
Beta.regularizedBeta(double,double,double,double)	Returns the regularized beta function I x a b
UnivariateStatistic.evaluate(double[],int,int)	Returns the result of evaluating the statistic over the specified entries in the input array
SemiVariance.SemiVariance(SemiVariance)	Copy constructor creates a new SemiVariance identical to the original
MultivariateVectorFunction.value(double[])	Compute the value for the function at the given point
NonLinearConjugateGradientOptimizer.NonLinearConjugateGradientOptimizer(Formula,ConvergenceChecker)	Constructor with default tolerances for the line search 1e 8 and preconditioner
ResizableDoubleArray.compute(Function)	Performs an operation on the addressable elements of the array
PolynomialsUtils.createJacobiPolynomial(int,int,int)	Create a Jacobi polynomial
FastMath.log10(double)	Compute the base 10 logarithm
SymmLQ.solveInPlace(RealLinearOperator,RealVector,RealVector)	Returns an estimate of the solution to the linear system A x b The solution is computed in place initial guess is modified
TestUtils.kolmogorovSmirnovTest(RealDistribution,double[],boolean)	
AbstractFieldMatrix.multiply(FieldMatrix)	Postmultiply this matrix by m
MathUnsupportedOperationException.getLocalizedMessage()	
SparseGradient.cos()	Cosine operation
AbstractRealMatrix.getData()	Returns matrix entries as a two dimensional array
CauchyDistribution.CauchyDistribution(double,double,double)	Creates a Cauchy distribution using the given median and scale
HighamHall54Integrator.HighamHall54Integrator(double,double,double,double)	Simple constructor
AggregateSummaryStatistics.getSecondMoment()	Returns a statistic related to the Second Central Moment Specifically what is returned is the sum of squared deviations from the sample mean among the all of the aggregated data
Cluster.getCenter()	Get the point chosen to be the center of this cluster
BlockFieldMatrix.createBlocksLayout(Field,int,int)	Create a data array in blocks layout
ContinuousOutputModel.getInterpolatedState()	Get the state vector of the interpolated point
AbstractFieldMatrix.setEntry(int,int,FieldElement)	Set the entry in the specified row and column
RandomKeyMutation.RandomKeyMutation()	
PolygonsSet.PolygonsSet(BSPTree,double)	Build a polygons set from a BSP tree
ContinuousOutputModel.append(ContinuousOutputModel)	Append another model at the end of the instance
BaseAbstractUnivariateOptimizer.optimize(int,UnivariateFunction,GoalType,double,double,double)	Find an optimum in the given interval start at startValue
FieldRotation.getQ1()	Get the first coordinate of the vectorial part of the quaternion
Segment.getEnd()	Get the end point of the segment
FixedGenerationCount.getNumGenerations()	Returns the number of generations that have already passed
ArgUtils.flatten(Object[])	Transform a multidimensional array into a one dimensional list
Complex.cosh()	Compute the hyperbolic cosine of this complex number
LimitAngle.wholeSpace()	Build a region covering the whole space
RotationOrder.getA3()	Get the axis of the second rotation
LinearObjectiveFunction.equals(Object)	
KMeansPlusPlusClusterer.getK()	Return the number of clusters this instance will use
SummaryStatistics.SummaryStatistics()	Construct a SummaryStatistics instance
HypergeometricDistribution.probability(int)	For a random variable X whose values are distributed according to this distribution this method returns P X x In other words this method represents the probability mass function PMF for the distribution
SemiVariance.evaluate(double[],double,Direction)	Returns the SemiVariance of the designated values against the cutoff in the given direction using the current value of the biasCorrection instance property
Precision.equals(float,float,float)	Returns true if both arguments are equal or within the range of allowed error inclusive
ListPopulation.getChromosomes()	Returns an unmodifiable list of the chromosomes in this population
MannWhitneyUTest.mannWhitneyUTest(double[],double[])	Returns the asymptotic observed significance level or p value associated with a Mann Whitney U statistic comparing mean for two independent samples
ODEIntegrator.getMaxEvaluations()	Get the maximal number of functions evaluations
GTest.rootLogLikelihoodRatio(long,long,long,long)	Calculates the root log likelihood ratio for 2 state Datasets See gDataSetsComparison long long
Vector.subtract(double,Vector)	Subtract a scaled vector from the instance
BigFractionFormat.getImproperInstance(Locale)	Returns the default complex format for the given locale
AbstractFieldMatrix.preMultiply(FieldVector)	Returns the row vector result of premultiplying this by the vector v
FieldRotation.getMatrix()	Get the 3X3 matrix corresponding to the instance
Dfp.multiply(Dfp)	Multiply this by x
Min.getN()	Returns the number of values that have been added
BoundaryProjection.getProjected()	Projected point
VectorFormat.getSuffix()	Get the format suffix
TTest.pairedT(double[],double[])	Computes a paired 2 sample t statistic based on the data in the input arrays The t statistic returned is equivalent to what would be returned by computing the one sample t statistic t double double with mu 0 and the sample array consisting of the signed differences between corresponding entries in sample1 and sample2
SimplexSolver.optimize()	Stores data and performs the optimization
RealDistribution.reseedRandomGenerator(long)	Reseed the random generator used to generate samples
BaseAbstractMultivariateSimpleBoundsOptimizer.optimize(int,FUNC,GoalType,double[],double[],double[])	Optimize an objective function
ArrayRealVector.setEntry(int,double)	Set a single element
GeometricMean.increment(double)	Updates the internal state of the statistic to reflect the addition of the new value
NewtonSolver.NewtonSolver()	Construct a solver
AbstractFieldMatrix.setColumn(int,FieldElement[])	Set the entries in column number column as a column matrix
Quaternion.equals(Quaternion,double)	Checks whether this instance is equal to another quaternion within a given tolerance
EventState.setExpandable(ExpandableStatefulODE)	Set the equation
RealMatrix.getNorm()	Returns the maximum absolute row sum norm of the matrix
DerivativeStructure.linearCombination(DerivativeStructure,DerivativeStructure,DerivativeStructure,DerivativeStructure,DerivativeStructure,DerivativeStructure)	Compute a linear combination
Well512a.Well512a(long)	Creates a new random number generator using a single long seed
LutherIntegrator.LutherIntegrator(double)	Simple constructor
StoppingCondition.isSatisfied(Population)	Determine whether or not the given population satisfies the stopping condition
BlockFieldMatrix.getRow(int)	Get the entries in row number row as an array
ResizableDoubleArray.equals(Object)	Returns true iff object is a ResizableDoubleArray with the same properties as this and an identical internal storage array
PolynomialsUtils.createLaguerrePolynomial(int)	Create a Laguerre polynomial
Dfp.asin()	Arc sine operation
SparseFieldVector.setSubVector(int,FieldVector)	Set a set of consecutive elements
UnivariateDifferentiableMatrixFunction.value(DerivativeStructure)	Compute the value for the function
Dfp.intValue()	Convert this to an integer
IntervalsSet.IntervalsSet(Collection,double)	Build an intervals set from a Boundary REPresentation B rep
ArrayFieldVector.ArrayFieldVector(ArrayFieldVector,ArrayFieldVector)	Construct a vector by appending one vector to another vector
HarmonicOscillator.derivative()	Returns the derivative of the function
Vector.distance1(Vector)	Compute the distance between the instance and another vector according to the L1 norm
HypergeometricDistribution.getSupportLowerBound()	Access the lower bound of the support This method must return the same value as inverseCumulativeProbability 0 In other words this method must return inf x in Z P X x 0
EventState.getMaxIterationCount()	Get the upper limit in the iteration count for event localization
AbstractRealMatrix.hashCode()	Computes a hashcode for the matrix
PolynomialFunctionNewtonForm.value(DerivativeStructure)	Simple mathematical function
ChiSquaredDistribution.ChiSquaredDistribution(double,double)	Create a Chi Squared distribution with the given degrees of freedom and inverse cumulative probability accuracy
Vector2D.scalarMultiply(double)	Multiply the instance by a scalar
LeastSquaresOptimizer.Optimum.getEvaluations()	Get the number of times the model was evaluated in order to produce this optimum
BaseUnivariateSolver.getRelativeAccuracy()	Get the relative accuracy of the solver The contract for relative accuracy is the same as getAbsoluteAccuracy but using relative rather than absolute error If is the relative accuracy configured for a solver and v is a value returned then a root of the function should exist somewhere in the interval v v v v
BigFraction.floatValue()	Gets the fraction as a float This calculates the fraction as the numerator divided by denominator
SemiVariance.setBiasCorrected(boolean)	Sets the biasCorrected property
CombinatoricsUtils.binomialCoefficientDouble(int,int)	Returns a double representation of the Binomial Coefficient n choose k the number of k element subsets that can be selected from an n element set
DSCompiler.divide(double[],int,double[],int,double[],int)	Perform division of two derivative structures
BOBYQAOptimizer.BOBYQAOptimizer(int)	
CMAESOptimizer.optimize()	Stores data and performs the optimization
BlockFieldMatrix.getRowMatrix(int)	Get the entries in row number row as a row matrix
ArrayFieldVector.ebeDivide(ArrayFieldVector)	Element by element division
EventHandler.g(double,double[])	Compute the value of the switching function
HaltonSequenceGenerator.HaltonSequenceGenerator(int)	Construct a new Halton sequence generator for the given space dimension
AbstractFieldMatrix.setRow(int,FieldElement[])	Set the entries in row number row as a row matrix
GaussNewtonOptimizer.GaussNewtonOptimizer()	Simple constructor with default settings
NonSymmetricMatrixException.getColumn()	the column index of the entry
Expm1.derivative()	Returns the derivative of the function
UnivariateObjectiveFunction.getObjectiveFunction()	Gets the function to be optimized
InsufficientDataException.InsufficientDataException()	Construct the exception
FieldVector3D.FieldVector3D(RealFieldElement,RealFieldElement)	Simple constructor
Plane.toSpace(Point)	Transform an in plane point into a 3D space point
BetaDistribution.getNumericalVariance()	Use this method to get the numerical value of the variance of this distribution
MultiDirectionalSimplex.MultiDirectionalSimplex(int)	Build a multi directional simplex with default coefficients
OpenIntToDoubleHashMap.Iterator.value()	Get the value of current entry
LinearConstraint.getCoefficients()	Gets the coefficients of the constraint left hand side
FastMath.nextUp(float)	Compute next number towards positive infinity
Precision.equalsIncludingNaN(float,float,float)	Returns true if both arguments are NaN or are equal or within the range of allowed error inclusive
BicubicSplineInterpolatingFunction.BicubicSplineInterpolatingFunction(double[],double[],double[][],double[][],double[][],double[][],boolean)	
RegressionResults.getStdErrorOfEstimate(int)	Returns the standard error of the parameter estimate at index usually denoted s bindex
ParetoDistribution.getShape()	Returns the shape parameter of this distribution
FastMath.subtractExact(int,int)	Subtract two numbers detecting overflows
EuclideanIntegerPoint.hashCode()	
