Calendar.set(int,int)	Sets the given calendar field to the given value The value is not interpreted by this method regardless of the leniency mode
Calendar.equals(Object)	Compares this Calendar to the specified Object The result is true if and only if the argument is a Calendar object of the same calendar system that represents the same time value millisecond offset from the Epoch under the same Calendar parameters as this object
Calendar.getDisplayNames(int,int,Locale)	Returns a Map containing all names of the calendar field in the given style and locale and their corresponding field values For example if this Calendar is a GregorianCalendar the returned map would contain Jan to JANUARY Feb to FEBRUARY and so on in the short style in an English locale
Calendar.setMinimalDaysInFirstWeek(int)	Sets what the minimal days required in the first week of the year are For example if the first week is defined as one that contains the first day of the first month of a year call this method with value 1 If it must be a full week use value 7
Calendar.set(int,int,int,int,int,int)	Sets the values for the fields YEAR MONTH DAY OF MONTH HOUR MINUTE and SECOND
Calendar.clear(int)	Sets the given calendar field value and the time value millisecond offset from the Epoch of this Calendar undefined This means that isSet field will return false and the date and time calculations will treat the field as if it had never been set A Calendar implementation class may use the field s specific default value for date and time calculations
Calendar.clear()	Sets all the calendar field values and the time value millisecond offset from the Epoch of this Calendar undefined This means that isSet will return false for all the calendar fields and the date and time calculations will treat the fields as if they had never been set A Calendar implementation class may use its specific default field values for date time calculations For example GregorianCalendar uses 1970 if the YEAR field value is undefined
Calendar.getGreatestMinimum(int)	Returns the highest minimum value for the given calendar field of this Calendar instance The highest minimum value is defined as the largest value returned by getActualMinimum int for any possible time value The greatest minimum value depends on calendar system specific parameters of the instance
Calendar.after(Object)	Returns whether this Calendar represents a time after the time represented by the specified Object This method is equivalent to compareTo when 0 if and only if when is a Calendar instance Otherwise the method returns false
Calendar.get(int)	Returns the value of the given calendar field In lenient mode all calendar fields are normalized In non lenient mode all calendar fields are validated and this method throws an exception if any calendar fields have out of range values The normalization and validation are handled by the complete method which process is calendar system dependent
Calendar.add(int,int)	Adds or subtracts the specified amount of time to the given calendar field based on the calendar s rules For example to subtract 5 days from the current time of the calendar you can achieve it by calling add Calendar DAY OF MONTH 5
Calendar.getLeastMaximum(int)	Returns the lowest maximum value for the given calendar field of this Calendar instance The lowest maximum value is defined as the smallest value returned by getActualMaximum int for any possible time value The least maximum value depends on calendar system specific parameters of the instance For example a Calendar for the Gregorian calendar system returns 28 for the DAY OF MONTH field because the 28th is the last day of the shortest month of this calendar February in a common year
Calendar.setTimeInMillis(long)	Sets this Calendar s current time from the given long value
Calendar.setTime(Date)	Sets this Calendar s time with the given Date
Calendar.setTimeZone(TimeZone)	Sets the time zone with the given time zone value
Calendar.isSet(int)	Determines if the given calendar field has a value set including cases that the value has been set by internal fields calculations triggered by a get method call
Calendar.getMinimalDaysInFirstWeek()	Gets what the minimal days required in the first week of the year are e g if the first week is defined as one that contains the first day of the first month of a year this method returns 1 If the minimal days required must be a full week this method returns 7
Calendar.set(int,int,int)	Sets the values for the calendar fields YEAR MONTH and DAY OF MONTH
Calendar.getInstance()	Gets a calendar using the default time zone and locale The Calendar returned is based on the current time in the default time zone with the default locale
Calendar.getDisplayName(int,int,Locale)	Returns the string representation of the calendar field value in the given style and locale If no string representation is applicable null is returned This method calls get field to get the calendar field value if the string representation is applicable to the given calendar field
Calendar.getAvailableLocales()	Returns an array of all locales for which the getInstance methods of this class can return localized instances
Calendar.setFirstDayOfWeek(int)	Sets what the first day of the week is e g SUNDAY in the U S MONDAY in France
Calendar.getActualMinimum(int)	Returns the minimum value that the specified calendar field could have given the time value of this Calendar
Calendar.isWeekDateSupported()	Returns whether this Calendar supports week dates
Calendar.set(int,int,int,int,int)	Sets the values for the calendar fields YEAR MONTH DAY OF MONTH HOUR OF DAY and MINUTE
Calendar.getInstance(Locale)	Gets a calendar using the default time zone and specified locale
Calendar.getWeeksInWeekYear()	Returns the number of weeks in the week year represented by this Calendar
Calendar.getMinimum(int)	Returns the minimum value for the given calendar field of this Calendar instance The minimum value is defined as the smallest value returned by the get method for any possible time value The minimum value depends on calendar system specific parameters of the instance
Calendar.getActualMaximum(int)	Returns the maximum value that the specified calendar field could have given the time value of this Calendar For example the actual maximum value of the MONTH field is 12 in some years and 13 in other years in the Hebrew calendar system
Calendar.isLenient()	Tells whether date time interpretation is to be lenient
Calendar.setWeekDate(int,int,int)	Sets the date of this Calendar with the the given date specifiers week year week of year and day of week
Calendar.getFirstDayOfWeek()	Gets what the first day of the week is e g SUNDAY in the U S MONDAY in France
Calendar.setLenient(boolean)	Specifies whether or not date time interpretation is to be lenient With lenient interpretation a date such as February 942 1996 will be treated as being equivalent to the 941st day after February 1 1996
Calendar.getTimeInMillis()	Returns this Calendar s time value in milliseconds
Calendar.getInstance(TimeZone,Locale)	Gets a calendar with the specified time zone and locale
Calendar.roll(int,boolean)	Adds or subtracts up down a single unit of time on the given time field without changing larger fields For example to roll the current date up by one day you can achieve it by calling roll Calendar DATE true
Calendar.getInstance(TimeZone)	Gets a calendar using the specified time zone and default locale
Calendar.roll(int,int)	Adds the specified signed amount to the specified calendar field without changing larger fields A negative amount means to roll down
Calendar.getTimeZone()	Gets the time zone
Calendar.before(Object)	Returns whether this Calendar represents a time before the time represented by the specified Object This method is equivalent to compareTo when 0 if and only if when is a Calendar instance Otherwise the method returns false
Calendar.getWeekYear()	Returns the week year represented by this Calendar The week year is in sync with the week cycle The first day of the first week is the first day of the week year
Calendar.hashCode()	Returns a hash code for this calendar
Calendar.getMaximum(int)	Returns the maximum value for the given calendar field of this Calendar instance The maximum value is defined as the largest value returned by the get method for any possible time value The maximum value depends on calendar system specific parameters of the instance
Calendar.clone()	Creates and returns a copy of this object
Calendar.toString()	Return a string representation of this calendar This method is intended to be used only for debugging purposes and the format of the returned string may vary between implementations
Calendar.getTime()	Returns a Date object representing this Calendar s time value millisecond offset from the Epoch
Calendar.compareTo(Calendar)	Compares the time values millisecond offsets from the Epoch represented by two Calendar objects
