URLStreamHandler.URLStreamHandler()	
SocketPermission.hashCode()	Returns the hash code value for this object
MulticastSocket.joinGroup(SocketAddress,NetworkInterface)	Joins the specified multicast group at the specified interface
ServerSocket.ServerSocket()	Creates an unbound server socket
IDN.toUnicode(String,int)	Translates a string from ASCII Compatible Encoding ACE to Unicode as defined by the ToUnicode operation of RFC 3490
Inet4Address.isLoopbackAddress()	Description copied from class InetAddress
URI.isOpaque()	Tells whether or not this URI is opaque
Socket.Socket(String,int,boolean)	Creates a stream socket and connects it to the specified port number on the named host
SocketOptions.setOption(int,Object)	Enable disable the option specified by optID If the option is to be enabled and it takes an option specific value this is passed in value The actual type of value is option specific and it is an error to pass something that isn t of the expected type SocketImpl s
HttpCookie.clone()	Create and return a copy of this object
Socket.isOutputShutdown()	Returns whether the write half of the socket connection is closed
DatagramSocket.getChannel()	Returns the unique DatagramChannel object associated with this datagram socket if any
InetSocketAddress.getHostString()	Returns the hostname or the String form of the address if it doesn t have a hostname it was created using a literal
SocketPermission.getActions()	Returns the canonical string representation of the actions
DatagramPacket.getData()	Returns the data buffer The data received or the data to be sent starts from the offset in the buffer and runs for length long
URL.openConnection()	Returns a URLConnection instance that represents a connection to the remote object referred to by the URL
URL.sameFile(URL)	Compares two URLs excluding the fragment component
URL.URL(String,String,String)	Creates a URL from the specified protocol name host name and file name The default port for the specified protocol is used
Socket.setSoLinger(boolean,int)	Enable disable SO LINGER with the specified linger time in seconds
UnknownHostException.UnknownHostException()	Constructs a new UnknownHostException with no detail message
URI.normalize()	Normalizes this URI s path
DatagramPacket.DatagramPacket(byte[],int,InetAddress,int)	Constructs a datagram packet for sending packets of length length to the specified port number on the specified host The length argument must be less than or equal to buf length
ProtocolFamily.name()	Returns the name of the protocol family
HttpURLConnection.setFixedLengthStreamingMode(int)	This method is used to enable streaming of a HTTP request body without internal buffering when the content length is known in advance
HttpURLConnection.usingProxy()	Indicates if the connection is going through a proxy
URLConnection.guessContentTypeFromStream(InputStream)	Tries to determine the type of an input stream based on the characters at the beginning of the input stream This method can be used by subclasses that override the getContentType method
Socket.shutdownOutput()	Disables the output stream for this socket
DatagramSocket.getSoTimeout()	Retrieve setting for SO TIMEOUT 0 returns implies that the option is disabled i e timeout of infinity
URLConnection.setDefaultRequestProperty(String,String)	Sets the default value of a general request property When a URLConnection is created it is initialized with these properties
DatagramSocket.isConnected()	Returns the connection state of the socket
URLConnection.getRequestProperties()	Returns an unmodifiable Map of general request properties for this connection The Map keys are Strings that represent the request header field names Each Map value is a unmodifiable List of Strings that represents the corresponding field values
SocketPermission.SocketPermission(String,String)	Creates a new SocketPermission object with the specified actions
HttpURLConnection.getRequestMethod()	Get the request method
InetSocketAddress.getAddress()	Gets the InetAddress
Socket.isConnected()	Returns the connection state of the socket
URLConnection.getHeaderFields()	Returns an unmodifiable Map of the header fields
MulticastSocket.leaveGroup(SocketAddress,NetworkInterface)	Leave a multicast group on a specified local interface
URI.isAbsolute()	Tells whether or not this URI is absolute
Inet6Address.isMCSiteLocal()	Utility routine to check if the multicast address has site scope
URLClassLoader.findResource(String)	Finds the resource with the specified name on the URL search path
URI.getRawAuthority()	Returns the raw authority component of this URI
InetSocketAddress.InetSocketAddress(String,int)	Creates a socket address from a hostname and a port number
URL.URL(String,String,int,String,URLStreamHandler)	Creates a URL object from the specified protocol host port number file and handler Specifying a port number of 1 indicates that the URL should use the default port for the protocol Specifying a handler of null indicates that the URL should use a default stream handler for the protocol as outlined for java net URL URL java lang String java lang String int java lang String If the handler is not null and there is a security manager the security manager s checkPermission method is called with a NetPermission specifyStreamHandler permission
DatagramSocket.receive(DatagramPacket)	Receives a datagram packet from this socket When this method returns the DatagramPacket s buffer is filled with the data received The datagram packet also contains the sender s IP address and the port number on the sender s machine
ServerSocket.setPerformancePreferences(int,int,int)	Sets performance preferences for this ServerSocket
NetworkInterface.getByInetAddress(InetAddress)	Convenience method to search for a network interface that has the specified Internet Protocol IP address bound to it
Socket.getTrafficClass()	Gets traffic class or type of service in the IP header for packets sent from this Socket As the underlying network implementation may ignore the traffic class or type of service set using setTrafficClass int this method may return a different value than was previously set using the setTrafficClass int method on this Socket
URI.getScheme()	Returns the scheme component of this URI
FileNameMap.getContentTypeFor(String)	Gets the MIME type for the specified file name
ProtocolException.ProtocolException()	Constructs a new ProtocolException with no detail message
HttpCookie.getPortlist()	Return the port list attribute of the cookie
ContentHandler.getContent(URLConnection,Class[])	Given a URL connect stream positioned at the beginning of the representation of an object this method reads that stream and creates an object that matches one of the types specified
Socket.getKeepAlive()	Tests if SO KEEPALIVE is enabled
UnknownHostException.UnknownHostException(String)	Constructs a new UnknownHostException with the specified detail message
ServerSocket.setSoTimeout(int)	Enable disable SO TIMEOUT with the specified timeout in milliseconds With this option set to a non zero timeout a call to accept for this ServerSocket will block for only this amount of time If the timeout expires a java net SocketTimeoutException is raised though the ServerSocket is still valid The option must be enabled prior to entering the blocking operation to have effect The timeout must be 0
HttpCookie.getPath()	Returns the path on the server to which the browser returns this cookie The cookie is visible to all subpaths on the server
ServerSocket.bind(SocketAddress,int)	Binds the ServerSocket to a specific address IP address and port number
InterfaceAddress.hashCode()	Returns a hashcode for this Interface address
DatagramSocket.DatagramSocket(SocketAddress)	Creates a datagram socket bound to the specified local socket address
BindException.BindException(String)	Constructs a new BindException with the specified detail message as to why the bind error occurred
HttpCookie.setDomain(String)	Specifies the domain within which this cookie should be presented
Inet6Address.isMCLinkLocal()	Utility routine to check if the multicast address has link scope
MulticastSocket.getInterface()	Retrieve the address of the network interface used for multicast packets
CacheRequest.getBody()	Returns an OutputStream to which the response body can be written
HttpURLConnection.setChunkedStreamingMode(int)	This method is used to enable streaming of a HTTP request body without internal buffering when the content length is not known in advance In this mode chunked transfer encoding is used to send the request body Note not all HTTP servers support this mode
Socket.isBound()	Returns the binding state of the socket
InetSocketAddress.InetSocketAddress(InetAddress,int)	Creates a socket address from an IP address and a port number
HttpCookie.setSecure(boolean)	Indicates whether the cookie should only be sent using a secure protocol such as HTTPS or SSL
ContentHandlerFactory.createContentHandler(String)	Creates a new ContentHandler to read an object from a URLStreamHandler
HttpRetryException.getLocation()	Returns the value of the Location header field if the error resulted from redirection
DatagramSocket.getTrafficClass()	Gets traffic class or type of service in the IP datagram header for packets sent from this DatagramSocket
URLEncoder.encode(String,String)	Translates a string into application x www form urlencoded format using a specific encoding scheme This method uses the supplied encoding scheme to obtain the bytes for unsafe characters
Authenticator.requestPasswordAuthentication(InetAddress,int,String,String,String)	Ask the authenticator that has been registered with the system for a password
InetSocketAddress.InetSocketAddress(int)	Creates a socket address where the IP address is the wildcard address and the port number a specified value
MulticastSocket.leaveGroup(InetAddress)	Leave a multicast group Its behavior may be affected by setInterface or setNetworkInterface
URI.URI(String,String,String,String)	Constructs a hierarchical URI from the given components
CookieManager.setCookiePolicy(CookiePolicy)	To set the cookie policy of this cookie manager
Socket.Socket(InetAddress,int)	Creates a stream socket and connects it to the specified port number at the specified IP address
NoRouteToHostException.NoRouteToHostException()	Construct a new NoRouteToHostException with no detailed message
ServerSocket.getChannel()	Returns the unique ServerSocketChannel object associated with this socket if any
URLConnection.getPermission()	Returns a permission object representing the permission necessary to make the connection represented by this object This method returns null if no permission is required to make the connection By default this method returns java security AllPermission Subclasses should override this method and return the permission that best represents the permission required to make a a connection to the URL For example a URLConnection representing a file URL would return a java io FilePermission object
MalformedURLException.MalformedURLException(String)	Constructs a MalformedURLException with the specified detail message
Socket.getSoTimeout()	Returns setting for SO TIMEOUT 0 returns implies that the option is disabled i e timeout of infinity
HttpURLConnection.setRequestMethod(String)	Set the method for the URL request one of GET POST HEAD OPTIONS PUT DELETE TRACE are legal subject to protocol restrictions The default method is GET
Socket.getTcpNoDelay()	Tests if TCP NODELAY is enabled
URLClassLoader.newInstance(URL[])	Creates a new instance of URLClassLoader for the specified URLs and default parent class loader If a security manager is installed the loadClass method of the URLClassLoader returned by this method will invoke the SecurityManager checkPackageAccess before loading the class
UnknownServiceException.UnknownServiceException()	Constructs a new UnknownServiceException with no detail message
ProxySelector.select(URI)	Selects all the applicable proxies based on the protocol to access the resource with and a destination address to access the resource at
Socket.setReuseAddress(boolean)	Enable disable the SO REUSEADDR socket option
NetworkInterface.supportsMulticast()	Returns whether a network interface supports multicasting or not
ConnectException.ConnectException()	Construct a new ConnectException with no detailed message
Inet6Address.isLoopbackAddress()	Utility routine to check if the InetAddress is a loopback address
MulticastSocket.setTimeToLive(int)	Set the default time to live for multicast packets sent out on this MulticastSocket in order to control the scope of the multicasts
HttpRetryException.getReason()	Returns a string explaining why the http request could not be retried
NetworkInterface.getParent()	Returns the parent NetworkInterface of this interface if this is a subinterface or null if it is a physical non virtual interface or has no parent
HttpCookie.hasExpired()	Reports whether this http cookie has expired or not
SecureCacheResponse.getCipherSuite()	Returns the cipher suite in use on the original connection that retrieved the network resource
URL.toURI()	Returns a URI equivalent to this URL
SocketException.SocketException()	Constructs a new SocketException with no detail message
NetworkInterface.hashCode()	Description copied from class Object
Socket.Socket(InetAddress,int,InetAddress,int)	Creates a socket and connects it to the specified remote address on the specified remote port The Socket will also bind to the local address and port supplied
MulticastSocket.joinGroup(InetAddress)	Joins a multicast group Its behavior may be affected by setInterface or setNetworkInterface
HttpURLConnection.disconnect()	Indicates that other requests to the server are unlikely in the near future Calling disconnect should not imply that this HttpURLConnection instance can be reused for other requests
URLConnection.setContentHandlerFactory(ContentHandlerFactory)	Sets the ContentHandlerFactory of an application It can be called at most once by an application
URLConnection.getLastModified()	Returns the value of the last modified header field
HttpURLConnection.getFollowRedirects()	Returns a boolean indicating whether or not HTTP redirects 3xx should be automatically followed
ServerSocket.getSoTimeout()	Retrieve setting for SO TIMEOUT 0 returns implies that the option is disabled i e timeout of infinity
URI.resolve(String)	Constructs a new URI by parsing the given string and then resolving it against this URI
ProtocolException.ProtocolException(String)	Constructs a new ProtocolException with the specified detail message
URLConnection.getIfModifiedSince()	Returns the value of this object s ifModifiedSince field
ResponseCache.put(URI,URLConnection)	The protocol handler calls this method after a resource has been retrieved and the ResponseCache must decide whether or not to store the resource in its cache If the resource is to be cached then put must return a CacheRequest object which contains an OutputStream that the protocol handler will use to write the resource into the cache If the resource is not to be cached then put must return null
InterfaceAddress.getAddress()	Returns an InetAddress for this address
URI.relativize(URI)	Relativizes the given URI against this URI
DatagramSocket.isClosed()	Returns whether the socket is closed or not
PortUnreachableException.PortUnreachableException()	Construct a new PortUnreachableException with no detailed message
DatagramSocket.setSendBufferSize(int)	Sets the SO SNDBUF option to the specified value for this DatagramSocket The SO SNDBUF option is used by the network implementation as a hint to size the underlying network I O buffers The SO SNDBUF setting may also be used by the network implementation to determine the maximum size of the packet that can be sent on this socket
MulticastSocket.MulticastSocket(SocketAddress)	Create a MulticastSocket bound to the specified socket address
URL.getPath()	Gets the path part of this URL
URLConnection.setDoOutput(boolean)	Sets the value of the doOutput field for this URLConnection to the specified value
URLConnection.getUseCaches()	Returns the value of this URLConnection s useCaches field
URI.URI(String)	Constructs a URI by parsing the given string
InetAddress.isAnyLocalAddress()	Utility routine to check if the InetAddress in a wildcard address
HttpCookie.setDiscard(boolean)	Specify whether user agent should discard the cookie unconditionally
HttpURLConnection.getHeaderFieldKey(int)	Returns the key for the nth header field
Inet4Address.equals(Object)	Compares this object against the specified object
URLConnection.setReadTimeout(int)	Sets the read timeout to a specified timeout in milliseconds A non zero value specifies the timeout when reading from Input stream when a connection is established to a resource If the timeout expires before there is data available for read a java net SocketTimeoutException is raised A timeout of zero is interpreted as an infinite timeout
HttpRetryException.HttpRetryException(String,int,String)	Constructs a new HttpRetryException with detail message responseCode and the contents of the Location response header field
Authenticator.requestPasswordAuthentication(String,InetAddress,int,String,String,String)	Ask the authenticator that has been registered with the system for a password This is the preferred method for requesting a password because the hostname can be provided in cases where the InetAddress is not available
HttpURLConnection.getResponseMessage()	Gets the HTTP response message if any returned along with the response code from a server From responses like HTTP 1 0 200 OK HTTP 1 0 404 Not Found Extracts the Strings OK and Not Found respectively
InetSocketAddress.getHostName()	Gets the hostname
SocketImplFactory.createSocketImpl()	Creates a new SocketImpl instance
InetSocketAddress.hashCode()	Returns a hashcode for this socket address
DatagramPacket.setPort(int)	Sets the port number on the remote host to which this datagram is being sent
HttpURLConnection.setInstanceFollowRedirects(boolean)	Sets whether HTTP redirects requests with response code 3xx should be automatically followed by this HttpURLConnection instance
UnknownServiceException.UnknownServiceException(String)	Constructs a new UnknownServiceException with the specified detail message
ServerSocket.setReuseAddress(boolean)	Enable disable the SO REUSEADDR socket option
URI.getPort()	Returns the port number of this URI
Inet6Address.getScopedInterface()	Returns the scoped interface if this instance was created with with a scoped interface
URL.getContent()	Gets the contents of this URL This method is a shorthand for openConnection getContent
InetAddress.getByAddress(byte[])	Returns an InetAddress object given the raw IP address
ServerSocket.ServerSocket(int,int)	Creates a server socket and binds it to the specified local port number with the specified backlog
URLConnection.getDefaultRequestProperty(String)	Returns the value of the default request property Default request properties are set for every connection
MalformedURLException.MalformedURLException()	Constructs a MalformedURLException with no detail message
DatagramPacket.setSocketAddress(SocketAddress)	Sets the SocketAddress usually IP address port number of the remote host to which this datagram is being sent
HttpRetryException.responseCode()	Returns the http response code
ServerSocket.close()	Closes this socket
Inet4Address.getHostAddress()	Returns the IP address string in textual presentation form
URI.getFragment()	Returns the decoded fragment component of this URI
SocketAddress.SocketAddress()	
InterfaceAddress.toString()	Converts this Interface address to a String The string returned is of the form InetAddress prefix length broadcast address
MulticastSocket.MulticastSocket()	Create a multicast socket
URI.compareTo(URI)	Compares this URI to another object which must be a URI
URL.getPort()	Gets the port number of this URL
URLConnection.getDefaultUseCaches()	Returns the default value of a URLConnection s useCaches flag
MulticastSocket.getLoopbackMode()	Get the setting for local loopback of multicast datagrams
HttpURLConnection.getPermission()	Returns a SocketPermission object representing the permission necessary to connect to the destination host and port
ServerSocket.bind(SocketAddress)	Binds the ServerSocket to a specific address IP address and port number
CacheResponse.getHeaders()	Returns the response headers as a Map
HttpURLConnection.setFollowRedirects(boolean)	Sets whether HTTP redirects requests with response code 3xx should be automatically followed by this class True by default Applets cannot change this variable
HttpURLConnection.getHeaderFieldDate(String,long)	Description copied from class URLConnection
Inet6Address.getAddress()	Returns the raw IP address of this InetAddress object The result is in network byte order the highest order byte of the address is in getAddress 0
NetworkInterface.getName()	Get the name of this network interface
DatagramPacket.DatagramPacket(byte[],int,int,SocketAddress)	Constructs a datagram packet for sending packets of length length with offset ioffsetto the specified port number on the specified host The length argument must be less than or equal to buf length
Inet6Address.isIPv4CompatibleAddress()	Utility routine to check if the InetAddress is an IPv4 compatible IPv6 address
SecureCacheResponse.getLocalPrincipal()	Returns the principal that was sent to the server during handshaking in the original connection that retrieved the network resource
CookieHandler.setDefault(CookieHandler)	Sets or unsets the system wide cookie handler
URLConnection.getContentType()	Returns the value of the content type header field
DatagramSocket.getBroadcast()	Tests if SO BROADCAST is enabled
DatagramPacket.DatagramPacket(byte[],int)	Constructs a DatagramPacket for receiving packets of length length
URL.toString()	Constructs a string representation of this URL The string is created by calling the toExternalForm method of the stream protocol handler for this object
Socket.shutdownInput()	Places the input stream for this socket at end of stream
URI.getUserInfo()	Returns the decoded user information component of this URI
Socket.getPort()	Returns the remote port number to which this socket is connected
DatagramSocket.setReceiveBufferSize(int)	Sets the SO RCVBUF option to the specified value for this DatagramSocket The SO RCVBUF option is used by the the network implementation as a hint to size the underlying network I O buffers The SO RCVBUF setting may also be used by the network implementation to determine the maximum size of the packet that can be received on this socket
URL.URL(URL,String)	Creates a URL by parsing the given spec within a specified context
PasswordAuthentication.getUserName()	Returns the user name
URLConnection.setUseCaches(boolean)	Sets the value of the useCaches field of this URLConnection to the specified value
ContentHandler.ContentHandler()	
URLConnection.getHeaderFieldLong(String,long)	Returns the value of the named field parsed as a number
Socket.connect(SocketAddress)	Connects this socket to the server
InetAddress.getLoopbackAddress()	Returns the loopback address
Inet6Address.isMulticastAddress()	Utility routine to check if the InetAddress is an IP multicast address 11111111 at the start of the address identifies the address as being a multicast address
URLConnection.getAllowUserInteraction()	Returns the value of the allowUserInteraction field for this object
Inet6Address.isMCGlobal()	Utility routine to check if the multicast address has global scope
InetAddress.getAddress()	Returns the raw IP address of this InetAddress object The result is in network byte order the highest order byte of the address is in getAddress 0
Socket.sendUrgentData(int)	Send one byte of urgent data on the socket The byte to be sent is the lowest eight bits of the data parameter The urgent byte is sent after any preceding writes to the socket OutputStream and before any future writes to the OutputStream
Socket.getChannel()	Returns the unique SocketChannel object associated with this socket if any
PasswordAuthentication.getPassword()	Returns the user password
CookieHandler.CookieHandler()	
HttpRetryException.HttpRetryException(String,int)	Constructs a new HttpRetryException from the specified response code and exception detail message
ServerSocket.getLocalPort()	Returns the port number on which this socket is listening
HttpCookie.equals(Object)	Test the equality of two http cookies
URISyntaxException.getIndex()	Returns an index into the input string of the position at which the parse error occurred or 1 if this position is not known
HttpCookie.getMaxAge()	Returns the maximum age of the cookie specified in seconds
DatagramPacket.getSocketAddress()	Gets the SocketAddress usually IP address port number of the remote host that this packet is being sent to or is coming from
URLConnection.setFileNameMap(FileNameMap)	Sets the FileNameMap
IDN.toUnicode(String)	Translates a string from ASCII Compatible Encoding ACE to Unicode as defined by the ToUnicode operation of RFC 3490
InetSocketAddress.toString()	Constructs a string representation of this InetSocketAddress
URL.getFile()	Gets the file name of this URL
JarURLConnection.getMainAttributes()	Returns the main Attributes for the JAR file for this connection
Inet6Address.isAnyLocalAddress()	Utility routine to check if the InetAddress in a wildcard address
SocketOption.type()	Returns the type of the socket option value
NetworkInterface.isLoopback()	Returns whether a network interface is a loopback interface
ResponseCache.get(URI,String,Map)	Retrieve the cached response based on the requesting uri request method and request headers Typically this method is called by the protocol handler before it sends out the request to get the network resource If a cached response is returned that resource is used instead
Proxy.type()	Returns the proxy type
URI.hashCode()	Returns a hash code value for this URI The hash code is based upon all of the URI s components and satisfies the general contract of the Object hashCode method
HttpCookie.getDomain()	Returns the domain name set for this cookie The form of the domain name is set by RFC 2965
InetAddress.isMCSiteLocal()	Utility routine to check if the multicast address has site scope
HttpCookie.getVersion()	Returns the version of the protocol this cookie complies with Version 1 complies with RFC 2965 2109 and version 0 complies with the original cookie specification drafted by Netscape Cookies provided by a browser use and identify the browser s cookie version
URLConnection.getContentLengthLong()	Returns the value of the content length header field as a long
InetAddress.isMCOrgLocal()	Utility routine to check if the multicast address has organization scope
Socket.setPerformancePreferences(int,int,int)	Sets performance preferences for this socket
MulticastSocket.send(DatagramPacket,byte)	Sends a datagram packet to the destination with a TTL time to live other than the default for the socket This method need only be used in instances where a particular TTL is desired otherwise it is preferable to set a TTL once on the socket and use that default TTL for all packets This method does not alter the default TTL for the socket Its behavior may be affected by setInterface
ServerSocket.accept()	Listens for a connection to be made to this socket and accepts it The method blocks until a connection is made
URLConnection.getContent()	Retrieves the contents of this URL connection
DatagramSocket.getPort()	Returns the port number to which this socket is connected
URLConnection.getRequestProperty(String)	Returns the value of the named general request property for this connection
DatagramPacket.getOffset()	Returns the offset of the data to be sent or the offset of the data received
NetworkInterface.getByName(String)	Searches for the network interface with the specified name
NetworkInterface.getIndex()	Returns the index of this network interface The index is an integer greater or equal to zero or 1 for unknown This is a system specific value and interfaces with the same name can have different indexes on different machines
InetAddress.isMCLinkLocal()	Utility routine to check if the multicast address has link scope
URLConnection.setDefaultAllowUserInteraction(boolean)	Sets the default value of the allowUserInteraction field for all future URLConnection objects to the specified value
URLConnection.getHeaderFieldKey(int)	Returns the key for the nth header field
PasswordAuthentication.PasswordAuthentication(String,char[])	Creates a new PasswordAuthentication object from the given user name and password
InetAddress.getCanonicalHostName()	Gets the fully qualified domain name for this IP address
Socket.setSocketImplFactory(SocketImplFactory)	Sets the client socket implementation factory for the application The factory can be specified only once
CookieManager.CookieManager(CookieStore,CookiePolicy)	Create a new cookie manager with specified cookie store and cookie policy
URI.getAuthority()	Returns the decoded authority component of this URI
NetworkInterface.equals(Object)	Compares this object against the specified object
DatagramSocket.getReceiveBufferSize()	Get value of the SO RCVBUF option for this DatagramSocket that is the buffer size used by the platform for input on this DatagramSocket
JarURLConnection.getJarFile()	Return the JAR file for this connection
CookieStore.removeAll()	Remove all cookies in this cookie store
MulticastSocket.setNetworkInterface(NetworkInterface)	Specify the network interface for outgoing multicast datagrams sent on this socket
ResponseCache.ResponseCache()	
Inet6Address.getScopeId()	Returns the numeric scopeId if this instance is associated with an interface If no scoped id is set the returned value is zero
NetworkInterface.getInetAddresses()	Convenience method to return an Enumeration with all or a subset of the InetAddresses bound to this network interface
SocketOptions.getOption(int)	Fetch the value of an option
ServerSocket.getLocalSocketAddress()	Returns the address of the endpoint this socket is bound to or null if it is not bound yet
URLConnection.getFileNameMap()	Loads filename map a mimetable from a data file It will first try to load the user specific table defined by content types user table property If that fails it tries to load the default built in table at lib content types properties under java home
MulticastSocket.getTTL()	Get the default time to live for multicast packets sent out on the socket
InetAddress.isReachable(int)	Test whether that address is reachable Best effort is made by the implementation to try to reach the host but firewalls and server configuration may block requests resulting in a unreachable status while some specific ports may be accessible
InetSocketAddress.createUnresolved(String,int)	Creates an unresolved socket address from a hostname and a port number
CacheRequest.CacheRequest()	
HttpCookie.toString()	Constructs a cookie header string representation of this cookie which is in the format defined by corresponding cookie specification but without the leading Cookie token
URI.getPath()	Returns the decoded path component of this URI
URLConnection.getHeaderField(String)	Returns the value of the named header field
CookieManager.put(URI,Map)	Description copied from class CookieHandler
PortUnreachableException.PortUnreachableException(String)	Constructs a new PortUnreachableException with a detail message
Inet4Address.isMCSiteLocal()	Utility routine to check if the multicast address has site scope
URLConnection.getHeaderFieldDate(String,long)	Returns the value of the named field parsed as date
Socket.setTcpNoDelay(boolean)	Enable disable TCP NODELAY disable enable Nagle s algorithm
IDN.toASCII(String)	Translates a string from Unicode to ASCII Compatible Encoding ACE as defined by the ToASCII operation of RFC 3490
JarURLConnection.getJarEntry()	Return the JAR entry object for this connection if any This method returns null if the JAR file URL corresponding to this connection points to a JAR file and not a JAR file entry
URLClassLoader.newInstance(URL[],ClassLoader)	Creates a new instance of URLClassLoader for the specified URLs and parent class loader If a security manager is installed the loadClass method of the URLClassLoader returned by this method will invoke the SecurityManager checkPackageAccess method before loading the class
Socket.bind(SocketAddress)	Binds the socket to a local address
Socket.isClosed()	Returns the closed state of the socket
InetAddress.getLocalHost()	Returns the address of the local host This is achieved by retrieving the name of the host from the system then resolving that name into an InetAddress
Inet4Address.isMCOrgLocal()	Utility routine to check if the multicast address has organization scope
URISyntaxException.URISyntaxException(String,String)	Constructs an instance from the given input string and reason The resulting object will have an error index of 1
URLClassLoader.URLClassLoader(URL[])	Constructs a new URLClassLoader for the specified URLs using the default delegation parent ClassLoader The URLs will be searched in the order specified for classes and resources after first searching in the parent class loader Any URL that ends with a is assumed to refer to a directory Otherwise the URL is assumed to refer to a JAR file which will be downloaded and opened as needed
URLConnection.getExpiration()	Returns the value of the expires header field
ServerSocket.getReceiveBufferSize()	Gets the value of the SO RCVBUF option for this ServerSocket that is the proposed buffer size that will be used for Sockets accepted from this ServerSocket
URLDecoder.decode(String)	Decodes a x www form urlencoded string
SocketPermission.implies(Permission)	Checks if this socket permission object implies the specified permission
ResponseCache.setDefault(ResponseCache)	Sets or unsets the system wide cache
ResponseCache.getDefault()	Gets the system wide response cache
URL.hashCode()	Creates an integer suitable for hash table indexing
CookieStore.getCookies()	Get all not expired cookies in cookie store
URLConnection.setDoInput(boolean)	Sets the value of the doInput field for this URLConnection to the specified value
URL.URL(String,String,int,String)	Creates a URL object from the specified protocol host port number and file
Socket.setSendBufferSize(int)	Sets the SO SNDBUF option to the specified value for this Socket The SO SNDBUF option is used by the platform s networking code as a hint for the size to set the underlying network I O buffers
HttpCookie.getDiscard()	Return the discard attribute of the cookie
ProxySelector.ProxySelector()	
URLConnection.getHeaderFieldInt(String,int)	Returns the value of the named field parsed as a number
URLConnection.setIfModifiedSince(long)	Sets the value of the ifModifiedSince field of this URLConnection to the specified value
HttpURLConnection.getInstanceFollowRedirects()	Returns the value of this HttpURLConnection s instanceFollowRedirects field
InetAddress.getByAddress(String,byte[])	Creates an InetAddress based on the provided host name and IP address
HttpCookie.setValue(String)	Assigns a new value to a cookie after the cookie is created
Inet6Address.isLinkLocalAddress()	Utility routine to check if the InetAddress is an link local address
URLConnection.guessContentTypeFromName(String)	Tries to determine the content type of an object based on the specified file component of a URL
URLConnection.getContent(Class[])	Retrieves the contents of this URL connection
CacheResponse.CacheResponse()	
DatagramPacket.getPort()	Returns the port number on the remote host to which this datagram is being sent or from which the datagram was received
URI.getSchemeSpecificPart()	Returns the decoded scheme specific part of this URI
URL.openConnection(Proxy)	Same as openConnection except that the connection will be made through the specified proxy Protocol handlers that do not support proxing will ignore the proxy parameter and make a normal connection
MulticastSocket.setInterface(InetAddress)	Set the multicast network interface used by methods whose behavior would be affected by the value of the network interface Useful for multihomed hosts
URI.toString()	Returns the content of this URI as a string
NetworkInterface.getDisplayName()	Get the display name of this network interface
CookieStore.get(URI)	Retrieve cookies associated with given URI or whose domain matches the given URI Only cookies that have not expired are returned
InetSocketAddress.getPort()	Gets the port number
NetworkInterface.getSubInterfaces()	Get an Enumeration with all the subinterfaces also known as virtual interfaces attached to this network interface
Socket.getOOBInline()	Tests if OOBINLINE is enabled
ServerSocket.isClosed()	Returns the closed state of the ServerSocket
CookieStore.remove(URI,HttpCookie)	Remove a cookie from store
InetAddress.equals(Object)	Compares this object against the specified object
NetworkInterface.isVirtual()	Returns whether this interface is a virtual interface also called subinterface
ProxySelector.connectFailed(URI,SocketAddress,IOException)	Called to indicate that a connection could not be established to a proxy socks server An implementation of this method can temporarily remove the proxies or reorder the sequence of proxies returned by select URI using the address and the IOException caught when trying to connect
Proxy.address()	Returns the socket address of the proxy or null if its a direct connection
Proxy.Proxy(Type,SocketAddress)	Creates an entry representing a PROXY connection
Inet4Address.isMulticastAddress()	Utility routine to check if the InetAddress is an IP multicast address IP multicast address is a Class D address i e first four bits of the address are 1110
Inet6Address.isMCNodeLocal()	Utility routine to check if the multicast address has node scope
SocketImpl.toString()	Returns the address and port of this socket as a String
ContentHandler.getContent(URLConnection)	Given a URL connect stream positioned at the beginning of the representation of an object this method reads that stream and creates an object from it
URI.URI(String,String,String)	Constructs a URI from the given components
HttpCookie.setHttpOnly(boolean)	Indicates whether the cookie should be considered HTTP Only If set to true it means the cookie should not be accessible to scripting engines like javascript
HttpCookie.domainMatches(String,String)	The utility method to check whether a host name is in a domain or not
CookieManager.get(URI,Map)	Description copied from class CookieHandler
Socket.getSoLinger()	Returns setting for SO LINGER 1 returns implies that the option is disabled
URL.URL(String)	Creates a URL object from the String representation
DatagramSocket.getLocalSocketAddress()	Returns the address of the endpoint this socket is bound to
HttpCookie.isHttpOnly()	Returns true if this cookie contains the HttpOnly attribute This means that the cookie should not be accessible to scripting engines like javascript
HttpCookie.setComment(String)	Specifies a comment that describes a cookie s purpose
URISyntaxException.URISyntaxException(String,String,int)	Constructs an instance from the given input string reason and error index
URI.getRawQuery()	Returns the raw query component of this URI
DatagramPacket.DatagramPacket(byte[],int,SocketAddress)	Constructs a datagram packet for sending packets of length length to the specified port number on the specified host The length argument must be less than or equal to buf length
URL.openStream()	Opens a connection to this URL and returns an InputStream for reading from that connection This method is a shorthand for openConnection getInputStream
NetworkInterface.getByIndex(int)	Get a network interface given its index
SecureCacheResponse.SecureCacheResponse()	
URI.getHost()	Returns the host component of this URI
URI.equals(Object)	Tests this URI for equality with another object
URLConnection.connect()	Opens a communications link to the resource referenced by this URL if such a connection has not already been established
URLConnection.setConnectTimeout(int)	Sets a specified timeout value in milliseconds to be used when opening a communications link to the resource referenced by this URLConnection If the timeout expires before the connection can be established a java net SocketTimeoutException is raised A timeout of zero is interpreted as an infinite timeout
HttpCookie.getName()	Returns the name of the cookie The name cannot be changed after creation
Socket.getInputStream()	Returns an input stream for this socket
URI.create(String)	Creates a URI by parsing the given string
URLConnection.getConnectTimeout()	Returns setting for connect timeout
ServerSocket.toString()	Returns the implementation address and implementation port of this socket as a String
URLConnection.setDefaultUseCaches(boolean)	Sets the default value of the useCaches field to the specified value
DatagramSocket.isBound()	Returns the binding state of the socket
SocketTimeoutException.SocketTimeoutException(String)	Constructs a new SocketTimeoutException with a detail message
HttpCookie.getCommentURL()	Returns the comment url describing the purpose of this cookie or null if the cookie has no comment url
URI.getRawFragment()	Returns the raw fragment component of this URI
Socket.close()	Closes this socket
SocketOption.name()	Returns the name of the socket option
DatagramSocketImpl.DatagramSocketImpl()	
Socket.setSoTimeout(int)	Enable disable SO TIMEOUT with the specified timeout in milliseconds With this option set to a non zero timeout a read call on the InputStream associated with this Socket will block for only this amount of time If the timeout expires a java net SocketTimeoutException is raised though the Socket is still valid The option must be enabled prior to entering the blocking operation to have effect The timeout must be 0
NetworkInterface.getMTU()	Returns the Maximum Transmission Unit MTU of this interface
URLConnection.getContentEncoding()	Returns the value of the content encoding header field
DatagramSocket.DatagramSocket(int,InetAddress)	Creates a datagram socket bound to the specified local address The local port must be between 0 and 65535 inclusive
InetSocketAddress.isUnresolved()	Checks whether the address has been resolved or not
CacheResponse.getBody()	Returns the response body as an InputStream
InterfaceAddress.getNetworkPrefixLength()	Returns the network prefix length for this address This is also known as the subnet mask in the context of IPv4 addresses
URLConnection.getURL()	Returns the value of this URLConnection s URL field
URLConnection.setRequestProperty(String,String)	Sets the general request property If a property with the key already exists overwrite its value with the new value
DatagramSocket.connect(InetAddress,int)	Connects the socket to a remote address for this socket When a socket is connected to a remote address packets may only be sent to or received from that address By default a datagram socket is not connected
Socket.getRemoteSocketAddress()	Returns the address of the endpoint this socket is connected to or null if it is unconnected
CookiePolicy.shouldAccept(URI,HttpCookie)	Will be called to see whether or not this cookie should be accepted
Authenticator.setDefault(Authenticator)	Sets the authenticator that will be used by the networking code when a proxy or an HTTP server asks for authentication
NetworkInterface.isUp()	Returns whether a network interface is up and running
URI.getRawPath()	Returns the raw path component of this URI
SocketImpl.SocketImpl()	
URLStreamHandlerFactory.createURLStreamHandler(String)	Creates a new URLStreamHandler instance with the specified protocol
CookieHandler.get(URI,Map)	Gets all the applicable cookies from a cookie cache for the specified uri in the request header
ServerSocket.setSocketFactory(SocketImplFactory)	Sets the server socket implementation factory for the application The factory can be specified only once
Socket.Socket(String,int)	Creates a stream socket and connects it to the specified port number on the named host
NetPermission.NetPermission(String,String)	Creates a new NetPermission object with the specified name
JarURLConnection.getJarFileURL()	Returns the URL for the Jar file for this connection
ServerSocket.getInetAddress()	Returns the local address of this server socket
ServerSocket.getReuseAddress()	Tests if SO REUSEADDR is enabled
JarURLConnection.getAttributes()	Return the Attributes object for this connection if the URL for it points to a JAR file entry null otherwise
DatagramSocket.setReuseAddress(boolean)	Enable disable the SO REUSEADDR socket option
Socket.getLocalSocketAddress()	Returns the address of the endpoint this socket is bound to or null if it is not bound yet
URL.getProtocol()	Gets the protocol name of this URL
InetAddress.isMulticastAddress()	Utility routine to check if the InetAddress is an IP multicast address
URLClassLoader.getResourceAsStream(String)	Returns an input stream for reading the specified resource
DatagramSocket.close()	Closes this datagram socket
HttpCookie.setPath(String)	Specifies a path for the cookie to which the client should return the cookie
InterfaceAddress.equals(Object)	Compares this object against the specified object
SocketException.SocketException(String)	Constructs a new SocketException with the specified detail message
InetAddress.getAllByName(String)	Given the name of a host returns an array of its IP addresses based on the configured name service on the system
Socket.setOOBInline(boolean)	Enable disable OOBINLINE receipt of TCP urgent data By default this option is disabled and TCP urgent data received on a socket is silently discarded If the user wishes to receive urgent data then this option must be enabled When enabled urgent data is received inline with normal data
NetworkInterface.toString()	Description copied from class Object
SocketTimeoutException.SocketTimeoutException()	Construct a new SocketTimeoutException with no detailed message
NetworkInterface.getInterfaceAddresses()	Get a List of all or a subset of the InterfaceAddresses of this network interface
Socket.Socket(Proxy)	Creates an unconnected socket specifying the type of proxy if any that should be used regardless of any other settings
Socket.connect(SocketAddress,int)	Connects this socket to the server with a specified timeout value
JarURLConnection.getCertificates()	Return the Certificate object for this connection if the URL for it points to a JAR file entry null otherwise This method can only be called once the connection has been completely verified by reading from the input stream until the end of the stream has been reached Otherwise this method will return null
HttpCookie.setCommentURL(String)	Specifies a comment url that describes a cookie s purpose
DatagramPacket.setData(byte[])	Set the data buffer for this packet With the offset of this DatagramPacket set to 0 and the length set to the length of buf
Proxy.equals(Object)	Compares this object against the specified object
Inet4Address.isMCGlobal()	Utility routine to check if the multicast address has global scope
Authenticator.Authenticator()	
URL.getAuthority()	Gets the authority part of this URL
URL.getRef()	Gets the anchor also known as the reference of this URL
DatagramSocket.send(DatagramPacket)	Sends a datagram packet from this socket The DatagramPacket includes information indicating the data to be sent its length the IP address of the remote host and the port number on the remote host
DatagramSocket.getSendBufferSize()	Get value of the SO SNDBUF option for this DatagramSocket that is the buffer size used by the platform for output on this DatagramSocket
Inet4Address.hashCode()	Returns a hashcode for this IP address
DatagramSocket.DatagramSocket()	Constructs a datagram socket and binds it to any available port on the local host machine The socket will be bound to the wildcard address an IP address chosen by the kernel
URISyntaxException.getReason()	Returns a string explaining why the input string could not be parsed
URLClassLoader.URLClassLoader(URL[],ClassLoader,URLStreamHandlerFactory)	Constructs a new URLClassLoader for the specified URLs parent class loader and URLStreamHandlerFactory The parent argument will be used as the parent class loader for delegation The factory argument will be used as the stream handler factory to obtain protocol handlers when creating new jar URLs
URL.setURLStreamHandlerFactory(URLStreamHandlerFactory)	Sets an application s URLStreamHandlerFactory
DatagramSocketImplFactory.createDatagramSocketImpl()	Creates a new DatagramSocketImpl instance
MulticastSocket.setTTL(byte)	Set the default time to live for multicast packets sent out on this MulticastSocket in order to control the scope of the multicasts
CookieStore.getURIs()	Get all URIs which identify the cookies in this cookie store
Socket.getOutputStream()	Returns an output stream for this socket
URLConnection.addRequestProperty(String,String)	Adds a general request property specified by a key value pair This method will not overwrite existing values associated with the same key
Socket.getLocalAddress()	Gets the local address to which the socket is bound
DatagramSocket.getReuseAddress()	Tests if SO REUSEADDR is enabled
DatagramSocket.DatagramSocket(int)	Constructs a datagram socket and binds it to the specified port on the local host machine The socket will be bound to the wildcard address an IP address chosen by the kernel
HttpURLConnection.getHeaderField(int)	Returns the value for the nth header field
ServerSocket.isBound()	Returns the binding state of the ServerSocket
Inet6Address.isSiteLocalAddress()	Utility routine to check if the InetAddress is a site local address
CookieManager.CookieManager()	Create a new cookie manager
Socket.getReuseAddress()	Tests if SO REUSEADDR is enabled
DatagramSocket.getRemoteSocketAddress()	Returns the address of the endpoint this socket is connected to or null if it is unconnected
BindException.BindException()	Construct a new BindException with no detailed message
Inet4Address.getAddress()	Returns the raw IP address of this InetAddress object The result is in network byte order the highest order byte of the address is in getAddress 0
DatagramPacket.DatagramPacket(byte[],int,int)	Constructs a DatagramPacket for receiving packets of length length specifying an offset into the buffer
CookieStore.add(URI,HttpCookie)	Adds one HTTP cookie to the store This is called for every incoming HTTP response
NoRouteToHostException.NoRouteToHostException(String)	Constructs a new NoRouteToHostException with the specified detail message as to why the remote host cannot be reached
SocketPermission.newPermissionCollection()	Returns a new PermissionCollection object for storing SocketPermission objects
DatagramSocket.getLocalAddress()	Gets the local address to which the socket is bound
Inet6Address.getHostAddress()	Returns the IP address string in textual presentation If the instance was created specifying a scope identifier then the scope id is appended to the IP address preceded by a per cent character This can be either a numeric value or a string depending on which was used to createthe instance
URLConnection.getDoOutput()	Returns the value of this URLConnection s doOutput flag
Socket.getReceiveBufferSize()	Gets the value of the SO RCVBUF option for this Socket that is the buffer size used by the platform for input on this Socket
URLConnection.getDoInput()	Returns the value of this URLConnection s doInput flag
InetAddress.isMCGlobal()	Utility routine to check if the multicast address has global scope
DatagramSocket.disconnect()	Disconnects the socket If the socket is closed or not connected then this method has no effect
InterfaceAddress.getBroadcast()	Returns an InetAddress for the brodcast address for this InterfaceAddress
DatagramSocket.setSoTimeout(int)	Enable disable SO TIMEOUT with the specified timeout in milliseconds With this option set to a non zero timeout a call to receive for this DatagramSocket will block for only this amount of time If the timeout expires a java net SocketTimeoutException is raised though the DatagramSocket is still valid The option must be enabled prior to entering the blocking operation to have effect The timeout must be 0
InetAddress.isMCNodeLocal()	Utility routine to check if the multicast address has node scope
InetAddress.isReachable(NetworkInterface,int,int)	Test whether that address is reachable Best effort is made by the implementation to try to reach the host but firewalls and server configuration may block requests resulting in a unreachable status while some specific ports may be accessible
URL.equals(Object)	Compares this URL for equality with another object
ServerSocket.setReceiveBufferSize(int)	Sets a default proposed value for the SO RCVBUF option for sockets accepted from this ServerSocket The value actually set in the accepted socket must be determined by calling Socket getReceiveBufferSize after the socket is returned by accept
URLConnection.setAllowUserInteraction(boolean)	Set the value of the allowUserInteraction field of this URLConnection
URI.toURL()	Constructs a URL from this URI
MulticastSocket.getTimeToLive()	Get the default time to live for multicast packets sent out on the socket
NetworkInterface.getNetworkInterfaces()	Returns all the interfaces on this machine Returns null if no network interfaces could be found on this machine
JarURLConnection.getEntryName()	Return the entry name for this connection This method returns null if the JAR file URL corresponding to this connection points to a JAR file and not a JAR file entry
HttpCookie.HttpCookie(String,String)	Constructs a cookie with a specified name and value
InetAddress.isLinkLocalAddress()	Utility routine to check if the InetAddress is an link local address
InetAddress.isSiteLocalAddress()	Utility routine to check if the InetAddress is a site local address
URLConnection.getOutputStream()	Returns an output stream that writes to this connection
CookieManager.getCookieStore()	To retrieve current cookie store
Proxy.toString()	Constructs a string representation of this Proxy
DatagramSocket.connect(SocketAddress)	Connects this socket to a remote socket address IP address port number
URL.getContent(Class[])	Gets the contents of this URL This method is a shorthand for openConnection getContent Class
DatagramPacket.getAddress()	Returns the IP address of the machine to which this datagram is being sent or from which the datagram was received
URISyntaxException.getInput()	Returns the input string
InetSocketAddress.equals(Object)	Compares this object against the specified object
InetAddress.getHostAddress()	Returns the IP address string in textual presentation
NetworkInterface.isPointToPoint()	Returns whether a network interface is a point to point interface
Socket.toString()	Converts this socket to a String
URLConnection.getContentLength()	Returns the value of the content length header field
CookieHandler.put(URI,Map)	Sets all the applicable cookies examples are response header fields that are named Set Cookie2 present in the response headers into a cookie cache
DatagramSocket.getLocalPort()	Returns the port number on the local host to which this socket is bound
Inet4Address.isLinkLocalAddress()	Utility routine to check if the InetAddress is an link local address
URL.getQuery()	Gets the query part of this URL
URLClassLoader.findResources(String)	Returns an Enumeration of URLs representing all of the resources on the URL search path having the specified name
InetAddress.toString()	Converts this IP address to a String The string returned is of the form hostname literal IP address
Inet6Address.equals(Object)	Compares this object against the specified object
Socket.setReceiveBufferSize(int)	Sets the SO RCVBUF option to the specified value for this Socket The SO RCVBUF option is used by the platform s networking code as a hint for the size to set the underlying network I O buffers
Socket.isInputShutdown()	Returns whether the read half of the socket connection is closed
SocketPermission.equals(Object)	Checks two SocketPermission objects for equality
URISyntaxException.getMessage()	Returns a string describing the parse error The resulting string consists of the reason string followed by a colon character a space and the input string If the error index is defined then the string at index followed by the index in decimal is inserted after the reason string and before the colon character
URL.getDefaultPort()	Gets the default port number of the protocol associated with this URL If the URL scheme or the URLStreamHandler for the URL do not define a default port number then 1 is returned
URLClassLoader.close()	Closes this URLClassLoader so that it can no longer be used to load new classes or resources that are defined by this loader
MulticastSocket.setLoopbackMode(boolean)	Disable Enable local loopback of multicast datagrams The option is used by the platform s networking code as a hint for setting whether multicast data will be looped back to the local socket
HttpCookie.hashCode()	Return hash code of this http cookie The result is the sum of hash code value of three significant components of this cookie name domain and path
URI.getRawUserInfo()	Returns the raw user information component of this URI
SecureCacheResponse.getPeerPrincipal()	Returns the server s principal which was established as part of defining the session during the original connection that retrieved the network resource
HttpCookie.setMaxAge(long)	Sets the maximum age of the cookie in seconds
HttpCookie.parse(String)	Constructs cookies from set cookie or set cookie2 header string
URL.toExternalForm()	Constructs a string representation of this URL The string is created by calling the toExternalForm method of the stream protocol handler for this object
DatagramPacket.setLength(int)	Set the length for this packet The length of the packet is the number of bytes from the packet s data buffer that will be sent or the number of bytes of the packet s data buffer that will be used for receiving data The length must be lesser or equal to the offset plus the length of the packet s buffer
URI.resolve(URI)	Resolves the given URI against this URI
NetPermission.NetPermission(String)	Creates a new NetPermission with the specified name
HttpURLConnection.getErrorStream()	Returns the error stream if the connection failed but the server sent useful data nonetheless The typical example is when an HTTP server responds with a 404 which will cause a FileNotFoundException to be thrown in connect but the server sent an HTML help page with suggestions as to what to do
Inet6Address.getByAddress(String,byte[],NetworkInterface)	Create an Inet6Address in the exact manner of InetAddress getByAddress String byte except that the IPv6 scope id is set to the value corresponding to the given interface for the address type specified in addr
URLConnection.getDefaultAllowUserInteraction()	Returns the default value of the allowUserInteraction field
Socket.getSendBufferSize()	Get value of the SO SNDBUF option for this Socket that is the buffer size used by the platform for output on this Socket
Socket.setTrafficClass(int)	Sets traffic class or type of service octet in the IP header for packets sent from this Socket
DatagramPacket.getLength()	Returns the length of the data to be sent or the length of the data received
URLClassLoader.getURLs()	Returns the search path of URLs for loading classes and resources
DatagramSocket.setTrafficClass(int)	Sets traffic class or type of service octet in the IP datagram header for datagrams sent from this DatagramSocket
Socket.Socket(String,int,InetAddress,int)	Creates a socket and connects it to the specified remote host on the specified remote port The Socket will also bind to the local address and port supplied
URLConnection.getHeaderField(int)	Returns the value for the nth header field
URLDecoder.URLDecoder()	
DatagramSocket.setDatagramSocketImplFactory(DatagramSocketImplFactory)	Sets the datagram socket implementation factory for the application The factory can be specified only once
SecureCacheResponse.getLocalCertificateChain()	Returns the certificate chain that were sent to the server during handshaking of the original connection that retrieved the network resource Note This method is useful only when using certificate based cipher suites
URI.getRawSchemeSpecificPart()	Returns the raw scheme specific part of this URI The scheme specific part is never undefined though it may be empty
CacheRequest.abort()	Aborts the attempt to cache the response If an IOException is encountered while reading the response or writing to the cache the current cache store operation will be abandoned
ProxySelector.getDefault()	Gets the system wide proxy selector
Proxy.hashCode()	Returns a hashcode for this Proxy
Socket.Socket()	Creates an unconnected socket with the system default type of SocketImpl
Inet6Address.getByAddress(String,byte[],int)	Create an Inet6Address in the exact manner of InetAddress getByAddress String byte except that the IPv6 scope id is set to the given numeric value
JarURLConnection.getManifest()	Returns the Manifest for this connection or null if none
ProxySelector.setDefault(ProxySelector)	Sets or unsets the system wide proxy selector
URI.URI(String,String,String,String,String)	Constructs a hierarchical URI from the given components
Authenticator.requestPasswordAuthentication(String,InetAddress,int,String,String,String,URL,RequestorType)	Ask the authenticator that has been registered with the system for a password
URI.parseServerAuthority()	Attempts to parse this URI s authority component if defined into user information host and port components
MulticastSocket.MulticastSocket(int)	Create a multicast socket and bind it to a specific port
HttpCookie.setVersion(int)	Sets the version of the cookie protocol this cookie complies with Version 0 complies with the original Netscape cookie specification Version 1 complies with RFC 2965 2109
URLEncoder.encode(String)	Translates a string into x www form urlencoded format This method uses the platform s default encoding as the encoding scheme to obtain the bytes for unsafe characters
HttpCookie.setPortlist(String)	Specify the portlist of the cookie which restricts the port s to which a cookie may be sent back in a Cookie header
URL.URL(URL,String,URLStreamHandler)	Creates a URL by parsing the given spec with the specified handler within a specified context If the handler is null the parsing occurs as with the two argument constructor
URI.toASCIIString()	Returns the content of this URI as a US ASCII string
MulticastSocket.getNetworkInterface()	Get the multicast network interface set
URL.getUserInfo()	Gets the userInfo part of this URL
DatagramSocket.getInetAddress()	Returns the address to which this socket is connected Returns null if the socket is not connected
HttpCookie.getComment()	Returns the comment describing the purpose of this cookie or null if the cookie has no comment
DatagramSocket.setBroadcast(boolean)	Enable disable SO BROADCAST
ServerSocket.ServerSocket(int)	Creates a server socket bound to the specified port A port number of 0 means that the port number is automatically allocated typically from an ephemeral port range This port number can then be retrieved by calling getLocalPort
HttpURLConnection.getResponseCode()	Gets the status code from an HTTP response message
Inet6Address.hashCode()	Returns a hashcode for this IP address
DatagramPacket.setAddress(InetAddress)	Sets the IP address of the machine to which this datagram is being sent
DatagramSocket.bind(SocketAddress)	Binds this DatagramSocket to a specific address port
URLDecoder.decode(String,String)	Decodes a application x www form urlencoded string using a specific encoding scheme
HttpCookie.getValue()	Returns the value of the cookie
Socket.getInetAddress()	Returns the address to which the socket is connected
URLConnection.toString()	Returns a String representation of this URL connection
SecureCacheResponse.getServerCertificateChain()	Returns the server s certificate chain which was established as part of defining the session in the original connection that retrieved the network resource from cache Note This method can be used only when using certificate based cipher suites using it with non certificate based cipher suites such as Kerberos will throw an SSLPeerUnverifiedException
URI.URI(String,String,String,int,String,String,String)	Constructs a hierarchical URI from the given components
CookieHandler.getDefault()	Gets the system wide cookie handler
ConnectException.ConnectException(String)	Constructs a new ConnectException with the specified detail message as to why the connect error occurred
IDN.toASCII(String,int)	Translates a string from Unicode to ASCII Compatible Encoding ACE as defined by the ToASCII operation of RFC 3490
Socket.setKeepAlive(boolean)	Enable disable SO KEEPALIVE
URL.getHost()	Gets the host name of this URL if applicable
InetAddress.getByName(String)	Determines the IP address of a host given the host s name
URLClassLoader.URLClassLoader(URL[],ClassLoader)	Constructs a new URLClassLoader for the given URLs The URLs will be searched in the order specified for classes and resources after first searching in the specified parent class loader Any URL that ends with a is assumed to refer to a directory Otherwise the URL is assumed to refer to a JAR file which will be downloaded and opened as needed
Inet4Address.isSiteLocalAddress()	Utility routine to check if the InetAddress is a site local address
HttpCookie.getSecure()	Returns true if sending this cookie should be restricted to a secure protocol or false if the it can be sent using any protocol
Inet4Address.isMCNodeLocal()	Utility routine to check if the multicast address has node scope
ServerSocket.ServerSocket(int,int,InetAddress)	Create a server with the specified port listen backlog and local IP address to bind to The bindAddr argument can be used on a multi homed host for a ServerSocket that will only accept connect requests to one of its addresses
InetAddress.hashCode()	Returns a hashcode for this IP address
Inet6Address.isMCOrgLocal()	Utility routine to check if the multicast address has organization scope
URLConnection.getInputStream()	Returns an input stream that reads from this open connection
DatagramPacket.setData(byte[],int,int)	Set the data buffer for this packet This sets the data length and offset of the packet
Socket.Socket(InetAddress,int,boolean)	Creates a socket and connects it to the specified port number at the specified IP address
Inet4Address.isMCLinkLocal()	Utility routine to check if the multicast address has link scope
DatagramPacket.DatagramPacket(byte[],int,int,InetAddress,int)	Constructs a datagram packet for sending packets of length length with offset ioffsetto the specified port number on the specified host The length argument must be less than or equal to buf length
InetAddress.getHostName()	Gets the host name for this IP address
URLConnection.getDate()	Returns the value of the date header field
Socket.getLocalPort()	Returns the local port number to which this socket is bound
HttpURLConnection.setFixedLengthStreamingMode(long)	This method is used to enable streaming of a HTTP request body without internal buffering when the content length is known in advance
InetAddress.isLoopbackAddress()	Utility routine to check if the InetAddress is a loopback address
NetworkInterface.getHardwareAddress()	Returns the hardware address usually MAC of the interface if it has one and if it can be accessed given the current privileges
URLConnection.getReadTimeout()	Returns setting for read timeout 0 return implies that the option is disabled i e timeout of infinity
URI.getQuery()	Returns the decoded query component of this URI
Inet4Address.isAnyLocalAddress()	Utility routine to check if the InetAddress in a wildcard address
