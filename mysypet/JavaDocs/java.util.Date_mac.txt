Date.toString()	Converts this Date object to a String of the form dow mon dd hh mm ss zzz yyyy where dow is the day of the week Sun Mon Tue Wed Thu Fri Sat
Date.setMonth(int)	Sets the month of this date to the specified value This Date object is modified so that it represents a point in time within the specified month with the year date hour minute and second the same as before as interpreted in the local time zone If the date was October 31 for example and the month is set to June then the new date will be treated as if it were on July 1 because June has only 30 days
Date.equals(Object)	Compares two dates for equality
Date.UTC(int,int,int,int,int,int)	Determines the date and time based on the arguments The arguments are interpreted as a year month day of the month hour of the day minute within the hour and second within the minute exactly as for the Date constructor with six arguments except that the arguments are interpreted relative to UTC rather than to the local time zone The time indicated is returned represented as the distance measured in milliseconds of that time from the epoch 00 00 00 GMT on January 1 1970
Date.getTimezoneOffset()	Returns the offset measured in minutes for the local time zone relative to UTC that is appropriate for the time represented by this Date object
Date.getYear()	Returns a value that is the result of subtracting 1900 from the year that contains or begins with the instant in time represented by this Date object as interpreted in the local time zone
Date.getHours()	Returns the hour represented by this Date object The returned value is a number 0 through 23 representing the hour within the day that contains or begins with the instant in time represented by this Date object as interpreted in the local time zone
Date.hashCode()	Returns a hash code value for this object The result is the exclusive OR of the two halves of the primitive long value returned by the getTime method That is the hash code is the value of the expression int this getTime this getTime 32
Date.Date(int,int,int,int,int)	Allocates a Date object and initializes it so that it represents the instant at the start of the minute specified by the year month date hrs and min arguments in the local time zone
Date.before(Date)	Tests if this date is before the specified date
Date.compareTo(Date)	Compares two Dates for ordering
Date.Date(String)	Allocates a Date object and initializes it so that it represents the date and time indicated by the string s which is interpreted as if by the parse java lang String method
Date.getDay()	Returns the day of the week represented by this date The returned value 0 Sunday 1 Monday 2 Tuesday 3 Wednesday 4 Thursday 5 Friday 6 Saturday represents the day of the week that contains or begins with the instant in time represented by this Date object as interpreted in the local time zone
Date.parse(String)	Attempts to interpret the string s as a representation of a date and time If the attempt is successful the time indicated is returned represented as the distance measured in milliseconds of that time from the epoch 00 00 00 GMT on January 1 1970 If the attempt fails an IllegalArgumentException is thrown
Date.after(Date)	Tests if this date is after the specified date
Date.getSeconds()	Returns the number of seconds past the minute represented by this date
Date.setMinutes(int)	Sets the minutes of this Date object to the specified value
Date.Date()	Allocates a Date object and initializes it so that it represents the time at which it was allocated measured to the nearest millisecond
Date.getDate()	Returns the day of the month represented by this Date object
Date.setDate(int)	Sets the day of the month of this Date object to the specified value This Date object is modified so that it represents a point in time within the specified day of the month with the year month hour minute and second the same as before as interpreted in the local time zone If the date was April 30 for example and the date is set to 31 then it will be treated as if it were on May 1 because April has only 30 days
Date.setSeconds(int)	Sets the seconds of this Date to the specified value
Date.toLocaleString()	Creates a string representation of this Date object in an implementation dependent form The intent is that the form should be familiar to the user of the Java application wherever it may happen to be running The intent is comparable to that of the c format supported by the strftime function of ISO C
Date.setHours(int)	Sets the hour of this Date object to the specified value
Date.Date(long)	Allocates a Date object and initializes it to represent the specified number of milliseconds since the standard base time known as the epoch namely January 1 1970 00 00 00 GMT
Date.setTime(long)	Sets this Date object to represent a point in time that is time milliseconds after January 1 1970 00 00 00 GMT
Date.Date(int,int,int)	Allocates a Date object and initializes it so that it represents midnight local time at the beginning of the day specified by the year month and date arguments
Date.toGMTString()	Creates a string representation of this Date object of the form d mon yyyy hh mm ss GMT where d is the day of the month 1 through 31 as one or two decimal digits
Date.getTime()	Returns the number of milliseconds since January 1 1970 00 00 00 GMT represented by this Date object
Date.Date(int,int,int,int,int,int)	Allocates a Date object and initializes it so that it represents the instant at the start of the second specified by the year month date hrs min and sec arguments in the local time zone
Date.setYear(int)	Sets the year of this Date object to be the specified value plus 1900 This Date object is modified so that it represents a point in time within the specified year with the month date hour minute and second the same as before as interpreted in the local time zone Of course if the date was February 29 for example and the year is set to a non leap year then the new date will be treated as if it were on March 1
Date.getMonth()	Returns a number representing the month that contains or begins with the instant in time represented by this Date object
Date.clone()	Return a copy of this object
Date.getMinutes()	Returns the number of minutes past the hour represented by this date as interpreted in the local time zone
