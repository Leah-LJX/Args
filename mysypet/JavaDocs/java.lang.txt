Thread.checkAccess()	Determines if the currently running thread has permission to modify this thread
Character.isISOControl(char)	Determines if the specified character is an ISO control character A character is considered to be an ISO control character if its code is in the range u0000 through u001F or in the range u007F through u009F
AssertionError.AssertionError(long)	Constructs an AssertionError with its detail message derived from the specified long which is converted to a string as defined in section 15 18 1 1 of The Java Language Specification
Boolean.getBoolean(String)	Returns true if and only if the system property named by the argument exists and is equal to the string true Beginning with version 1 0 2 of the JavaTM platform the test of this string is case insensitive A system property is accessible through getProperty a method defined by the System class
Throwable.Throwable()	Constructs a new throwable with null as its detail message
MethodType.parameterType(int)	Returns the parameter type at the specified index within this method type
SwitchPoint.hasBeenInvalidated()	Determines if this switch point has been invalidated yet
SoftReference.SoftReference(T,ReferenceQueue)	Creates a new soft reference that refers to the given object and is registered with the given queue
StringBuffer.append(StringBuffer)	Appends the specified StringBuffer to this sequence
WeakReference.WeakReference(T)	Creates a new weak reference that refers to the given object The new reference is not registered with any queue
Modifier.isPublic(int)	Return true if the integer argument includes the public modifier false otherwise
Object.wait(long,int)	Causes the current thread to wait until another thread invokes the notify method or the notifyAll method for this object or some other thread interrupts the current thread or a certain amount of real time has elapsed
Character.isUpperCase(char)	Determines if the specified character is an uppercase character
Character.lowSurrogate(int)	Returns the trailing surrogate a low surrogate code unit of the surrogate pair representing the specified supplementary character Unicode code point in the UTF 16 encoding If the specified character is not a supplementary character an unspecified char is returned
MemoryManagerMXBean.isValid()	Tests if this memory manager is valid in the Java virtual machine A memory manager becomes invalid once the Java virtual machine removes it from the memory system
StringBuffer.replace(int,int,String)	Replaces the characters in a substring of this sequence with characters in the specified String The substring begins at the specified start and extends to the character at index end 1 or to the end of the sequence if no such character exists First the characters in the substring are removed and then the specified String is inserted at start This sequence will be lengthened to accommodate the specified String if necessary
Comparable.compareTo(T)	Compares this object with the specified object for order Returns a negative integer zero or a positive integer as this object is less than equal to or greater than the specified object
Runtime.runFinalizersOnExit(boolean)	Enable or disable finalization on exit doing so specifies that the finalizers of all objects that have finalizers that have not yet been automatically invoked are to be run before the Java runtime exits
Integer.floatValue()	Returns the value of this Integer as a float
Boolean.toString()	Returns a String object representing this Boolean s value If this object represents the value true a string equal to true is returned Otherwise a string equal to false is returned
Integer.decode(String)	Decodes a String into an Integer
ThreadMXBean.isSynchronizerUsageSupported()	Tests if the Java virtual machine supports monitoring of ownable synchronizer usage
Process.exitValue()	Returns the exit value for the subprocess
Modifier.interfaceModifiers()	Return an int value OR ing together the source language modifiers that can be applied to an interface
ClassLoader.setDefaultAssertionStatus(boolean)	Sets the default assertion status for this class loader This setting determines whether classes loaded by this class loader and initialized in the future will have assertions enabled or disabled by default
SoftReference.SoftReference(T)	Creates a new soft reference that refers to the given object The new reference is not registered with any queue
MemoryPoolMXBean.getType()	Returns the type of this memory pool
Thread.setPriority(int)	Changes the priority of this thread
Array.getInt(Object,int)	Returns the value of the indexed component in the specified array object as an int
StringBuffer.substring(int)	Returns a new String that contains a subsequence of characters currently contained in this character sequence The substring begins at the specified index and extends to the end of this sequence
MethodHandles.insertArguments(MethodHandle,int,)	Provides a target method handle with one or more bound arguments in advance of the method handle s invocation
Character.isJavaLetter(char)	Determines if the specified character is permissible as the first character in a Java identifier
IndexOutOfBoundsException.IndexOutOfBoundsException(String)	Constructs an IndexOutOfBoundsException with the specified detail message
Constructor.getGenericParameterTypes()	Returns an array of Type objects that represent the formal parameter types in declaration order of the method represented by this Constructor object Returns an array of length 0 if the underlying method takes no parameters
IllegalArgumentException.IllegalArgumentException(String,Throwable)	Constructs a new exception with the specified detail message and cause
Member.getModifiers()	Returns the Java language modifiers for the member or constructor represented by this Member as an integer The Modifier class should be used to decode the modifiers in the integer
Byte.valueOf(String,int)	Returns a Byte object holding the value extracted from the specified String when parsed with the radix given by the second argument The first argument is interpreted as representing a signed byte in the radix specified by the second argument exactly as if the argument were given to the parseByte java lang String int method The result is a Byte object that represents the byte value specified by the string
StringBuilder.insert(int,Object)	Inserts the string representation of the Object argument into this character sequence
ProcessBuilder.Redirect.equals(Object)	Compares the specified object with this Redirect for equality Returns true if and only if the two objects are identical or both objects are Redirect instances of the same type associated with non null equal File instances
Character.isLetter(int)	Determines if the specified character Unicode code point is a letter
Character.getNumericValue(char)	Returns the int value that the specified Unicode character represents For example the character u216C the roman numeral fifty will return an int with a value of 50
SwitchPoint.guardWithTest(MethodHandle,MethodHandle)	Returns a method handle which always delegates either to the target or the fallback
Appendable.append(char)	Appends the specified character to this Appendable
Character.isSpaceChar(int)	Determines if the specified character Unicode code point is a Unicode space character A character is considered to be a space character if and only if it is specified to be a space character by the Unicode Standard This method returns true if the character s general category type is any of the following SPACE SEPARATOR LINE SEPARATOR PARAGRAPH SEPARATOR
ThreadGroup.resume()	Resumes all threads in this thread group
Class.getPackage()	Gets the package for this class The class loader of this class is used to find the package If the class was loaded by the bootstrap class loader the set of packages loaded from CLASSPATH is searched to find the package of the class Null is returned if no package object was created by the class loader of this class
StrictMath.pow(double,double)	Returns the value of the first argument raised to the power of the second argument Special cases If the second argument is positive or negative zero then the result is 1 0
Math.ulp(float)	Returns the size of an ulp of the argument An ulp of a float value is the positive distance between this floating point value and the float value next larger in magnitude Note that for non NaN x ulp x ulp x
PlatformManagedObject.getObjectName()	Returns an ObjectName instance representing the object name of this platform managed object
Class.getResource(String)	Finds a resource with a given name The rules for searching resources associated with a given class are implemented by the defining class loader of the class This method delegates to this object s class loader If this object was loaded by the bootstrap class loader the method delegates to ClassLoader getSystemResource java lang String
ThreadMXBean.getThreadInfo(long[])	Returns the thread info for each thread whose ID is in the input array ids with no stack trace
LockInfo.getClassName()	Returns the fully qualified name of the class of the lock object
MethodHandles.Lookup.findStatic(Class,String,MethodType)	Produces a method handle for a static method
StringBuffer.appendCodePoint(int)	Appends the string representation of the codePoint argument to this sequence
MemoryUsage.from(CompositeData)	Returns a MemoryUsage object represented by the given CompositeData The given CompositeData must contain the following attributes Attribute Name Type init java lang Long used java lang Long committed java lang Long max java lang Long
Method.toString()	Returns a string describing this Method The string is formatted as the method access modifiers if any followed by the method return type followed by a space followed by the class declaring the method followed by a period followed by the method name followed by a parenthesized comma separated list of the method s formal parameter types If the method throws checked exceptions the parameter list is followed by a space followed by the word throws followed by a comma separated list of the thrown exception types
Boolean.toString(boolean)	Returns a String object representing the specified boolean If the specified boolean is true then the string true will be returned otherwise the string false will be returned
Thread.dumpStack()	Prints a stack trace of the current thread to the standard error stream
Modifier.fieldModifiers()	Return an int value OR ing together the source language modifiers that can be applied to a field
StackTraceElement.hashCode()	Returns a hash code value for this stack trace element
String.String()	Initializes a newly created String object so that it represents an empty character sequence Note that use of this constructor is unnecessary since Strings are immutable
Character.isMirrored(int)	Determines whether the specified character Unicode code point is mirrored according to the Unicode specification Mirrored characters should have their glyphs horizontally mirrored when displayed in text that is right to left For example u0028 LEFT PARENTHESIS is semantically defined to be an opening parenthesis This will appear as a in text that is left to right but as a in text that is right to left
Math.abs(double)	Returns the absolute value of a double value
Object.getClass()	Returns the runtime class of this Object The returned Class object is the object that is locked by static synchronized methods of the represented class
MemoryMXBean.getHeapMemoryUsage()	Returns the current memory usage of the heap that is used for object allocation The heap consists of one or more memory pools The used and committed size of the returned memory usage is the sum of those values of all heap memory pools whereas the init and max size of the returned memory usage represents the setting of the heap memory which may not be the sum of those of all heap memory pools
Instrumentation.addTransformer(ClassFileTransformer,boolean)	Registers the supplied transformer All future class definitions will be seen by the transformer except definitions of classes upon which any registered transformer is dependent
UnsupportedClassVersionError.UnsupportedClassVersionError(String)	Constructs a UnsupportedClassVersionError with the specified detail message
Class.getSigners()	Gets the signers of this class
Class.getAnnotations()	Description copied from interface AnnotatedElement
Throwable.getLocalizedMessage()	Creates a localized description of this throwable
UnsupportedOperationException.UnsupportedOperationException(String)	Constructs an UnsupportedOperationException with the specified detail message
Class.getDeclaredConstructors()	Returns an array of Constructor objects reflecting all the constructors declared by the class represented by this Class object These are public protected default package access and private constructors The elements in the array returned are not sorted and are not in any particular order If the class has a default constructor it is included in the returned array
Thread.join()	Waits for this thread to die
RuntimeMXBean.getLibraryPath()	Returns the Java library path
Class.toString()	Converts the object to a string The string representation is the string class or interface followed by a space and then by the fully qualified name of the class in the format returned by getName If this Class object represents a primitive type this method returns the name of the primitive type If this Class object represents void this method returns void
StringBuffer.toString()	Returns a string representing the data in this sequence
String.String(byte[],String)	Constructs a new String by decoding the specified array of bytes using the specified charset The length of the new String is a function of the charset and hence may not be equal to the length of the byte array
Class.forName(String)	Returns the Class object associated with the class or interface with the given string name Invoking this method is equivalent to Class forName className true currentLoader where currentLoader denotes the defining class loader of the current class
Long.compare(long,long)	Compares two long values numerically
Error.Error(String)	Constructs a new error with the specified detail message The cause is not initialized and may subsequently be initialized by a call to Throwable initCause java lang Throwable
SecurityManager.checkAwtEventQueueAccess()	Throws a SecurityException if the calling thread is not allowed to access the AWT event queue
Class.isAnonymousClass()	Returns true if and only if the underlying class is an anonymous class
NullPointerException.NullPointerException(String)	Constructs a NullPointerException with the specified detail message
Float.compareTo(Float)	Compares two Float objects numerically There are two ways in which comparisons performed by this method differ from those performed by the Java language numerical comparison operators when applied to primitive float values Float NaN is considered by this method to be equal to itself and greater than all other float values including Float POSITIVE INFINITY
Math.toDegrees(double)	Converts an angle measured in radians to an approximately equivalent angle measured in degrees The conversion from radians to degrees is generally inexact users should not expect cos toRadians 90 0 to exactly equal 0 0
CallSite.getTarget()	Returns the target method of the call site according to the behavior defined by this call site s specific class
AnnotationTypeMismatchException.foundType()	Returns the type of data found in the incorrectly typed element
System.console()	Returns the unique Console object associated with the current Java virtual machine if any
String.valueOf(float)	Returns the string representation of the float argument
Modifier.isProtected(int)	Return true if the integer argument includes the protected modifier false otherwise
String.indexOf(String)	Returns the index within this string of the first occurrence of the specified substring
ClassLoader.getSystemResource(String)	Find a resource of the specified name from the search path used to load classes This method locates the resource through the system class loader see getSystemClassLoader
StringBuilder.setCharAt(int,char)	The character at the specified index is set to ch This sequence is altered to represent a new character sequence that is identical to the old character sequence except that it contains the character ch at position index
String.length()	Returns the length of this string
Character.Character(char)	Constructs a newly allocated Character object that represents the specified char value
ThreadGroup.toString()	Returns a string representation of this Thread group
MemoryPoolMXBean.getUsageThresholdCount()	Returns the number of times that the memory usage has crossed the usage threshold
ExceptionInInitializerError.getCause()	Returns the cause of this error the exception that occurred during a static initialization that caused this error to be created
ArithmeticException.ArithmeticException()	Constructs an ArithmeticException with no detail message
Class.getFields()	Returns an array containing Field objects reflecting all the accessible public fields of the class or interface represented by this Class object The elements in the array returned are not sorted and are not in any particular order This method returns an array of length 0 if the class or interface has no accessible public fields or if it represents an array class a primitive type or void
Double.compareTo(Double)	Compares two Double objects numerically There are two ways in which comparisons performed by this method differ from those performed by the Java language numerical comparison operators when applied to primitive double values Double NaN is considered by this method to be equal to itself and greater than all other double values including Double POSITIVE INFINITY
MemoryManagerMXBean.getMemoryPoolNames()	Returns the name of memory pools that this memory manager manages
BufferPoolMXBean.getMemoryUsed()	Returns an estimate of the memory that the Java virtual machine is using for this buffer pool The value returned by this method may differ from the estimate of the total capacity of the buffers in this pool This difference is explained by alignment memory allocator and other implementation specific reasons
Thread.Thread(ThreadGroup,Runnable)	Allocates a new Thread object This constructor has the same effect as Thread group target gname where gname is a newly generated name Automatically generated names are of the form Thread n where n is an integer
ClassCastException.ClassCastException(String)	Constructs a ClassCastException with the specified detail message
Character.equals(Object)	Compares this object against the specified object
ThreadInfo.getLockOwnerId()	Returns the ID of the thread which owns the object for which the thread associated with this ThreadInfo is blocked waiting
Class.isMemberClass()	Returns true if and only if the underlying class is a member class
RuntimeMXBean.getName()	Returns the name representing the running Java virtual machine
Integer.rotateLeft(int,int)	Returns the value obtained by rotating the two s complement binary representation of the specified int value left by the specified number of bits Bits shifted out of the left hand or high order side reenter on the right or low order Note that left rotation with a negative distance is equivalent to right rotation rotateLeft val distance rotateRight val distance Note also that rotation by any multiple of 32 is a no op so all but the last five bits of the rotation distance can be ignored even if the distance is negative rotateLeft val distance rotateLeft val distance 0x1F
Instrumentation.isNativeMethodPrefixSupported()	Returns whether the current JVM configuration supports setting a native method prefix
StringBuilder.append(int)	Appends the string representation of the int argument to this sequence
InheritableThreadLocal.InheritableThreadLocal()	
Float.Float(double)	Constructs a newly allocated Float object that represents the argument converted to type float
Long.toOctalString(long)	Returns a string representation of the long argument as an unsigned integer in base 8
String.matches(String)	Tells whether or not this string matches the given regular expression
Character.isLowerCase(char)	Determines if the specified character is a lowercase character
InstantiationError.InstantiationError(String)	Constructs an InstantiationError with the specified detail message
MethodHandles.exactInvoker(MethodType)	Produces a special invoker method handle which can be used to invoke any method handle of the given type as if by invokeExact
StrictMath.atan(double)	Returns the arc tangent of a value the returned angle is in the range pi 2 through pi 2 Special cases If the argument is NaN then the result is NaN
StrictMath.IEEEremainder(double,double)	Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard
ThreadMXBean.isThreadCpuTimeEnabled()	Tests if thread CPU time measurement is enabled
System.setErr(PrintStream)	Reassigns the standard error output stream
StringBuilder.lastIndexOf(String,int)	Returns the index within this string of the last occurrence of the specified substring The integer returned is the largest value k such that k Math min fromIndex this length this toString startsWith str k If no such value of k exists then 1 is returned
ThreadGroup.stop()	Stops all threads in this thread group
StringBuilder.insert(int,long)	Inserts the string representation of the long argument into this sequence
ClassLoadingMXBean.getUnloadedClassCount()	Returns the total number of classes unloaded since the Java virtual machine has started execution
StringBuilder.append(float)	Appends the string representation of the float argument to this sequence
NoSuchMethodException.NoSuchMethodException(String)	Constructs a NoSuchMethodException with a detail message
MethodHandles.Lookup.findSetter(Class,String,Class)	Produces a method handle giving write access to a non static field
ThreadInfo.getLockedSynchronizers()	Returns an array of LockInfo objects each of which represents an ownable synchronizer currently locked by the thread associated with this ThreadInfo If no locked synchronizer was requested for this thread info or no synchronizer is locked by the thread this method will return a zero length array
Method.isBridge()	Returns true if this method is a bridge method returns false otherwise
Annotation.toString()	Returns a string representation of this annotation The details of the representation are implementation dependent but the following may be regarded as typical com acme util Name first Alfred middle E last Neuman
ProcessBuilder.redirectInput(File)	Sets this process builder s standard input source to a file
Field.setShort(Object,short)	Sets the value of a field as a short on the specified object
ThreadMXBean.setThreadContentionMonitoringEnabled(boolean)	Enables or disables thread contention monitoring
ThreadDeath.ThreadDeath()	
ManagementFactory.getCompilationMXBean()	Returns the managed bean for the compilation system of the Java virtual machine This method returns null if the Java virtual machine has no compilation system
Thread.getAllStackTraces()	Returns a map of stack traces for all live threads
Constructor.equals(Object)	Compares this Constructor against the specified object
Constructor.getName()	Returns the name of this constructor as a string This is the binary name of the constructor s declaring class
ClassLoadingMXBean.getLoadedClassCount()	Returns the number of classes that are currently loaded in the Java virtual machine
Field.getDeclaringClass()	Returns the Class object representing the class or interface that declares the field represented by this Field object
StringBuilder.insert(int,String)	Inserts the string into this character sequence
Field.equals(Object)	Compares this Field against the specified object Returns true if the objects are the same Two Field objects are the same if they were declared by the same class and have the same name and type
ThreadMXBean.getCurrentThreadCpuTime()	Returns the total CPU time for the current thread in nanoseconds
String.isEmpty()	Returns true if and only if length is 0
IllegalStateException.IllegalStateException(String)	Constructs an IllegalStateException with the specified detail message A detail message is a String that describes this particular exception
StringBuffer.insert(int,CharSequence,int,int)	Inserts a subsequence of the specified CharSequence into this sequence
String.valueOf(int)	Returns the string representation of the int argument
Character.isValidCodePoint(int)	Determines whether the specified code point is a valid Unicode code point value
Runtime.exec(String[],String[],File)	Executes the specified command and arguments in a separate process with the specified environment and working directory
MethodHandles.Lookup.unreflect(Method)	Makes a direct method handle to m if the lookup class has permission
Class.getName()	Returns the name of the entity class interface array class primitive type or void represented by this Class object as a String
Character.highSurrogate(int)	Returns the leading surrogate a high surrogate code unit of the surrogate pair representing the specified supplementary character Unicode code point in the UTF 16 encoding If the specified character is not a supplementary character an unspecified char is returned
MethodHandles.dropArguments(MethodHandle,int,Class)	Produces a method handle which will discard some dummy arguments before calling some other specified target method handle
Byte.valueOf(String)	Returns a Byte object holding the value given by the specified String The argument is interpreted as representing a signed decimal byte exactly as if the argument were given to the parseByte java lang String method The result is a Byte object that represents the byte value specified by the string
Array.getByte(Object,int)	Returns the value of the indexed component in the specified array object as a byte
SecurityManager.getThreadGroup()	Returns the thread group into which to instantiate any new thread being created at the time this is being called
Field.isSynthetic()	Returns true if this field is a synthetic field returns false otherwise
AccessibleObject.isAnnotationPresent(Class)	Description copied from interface AnnotatedElement
Package.getAnnotations()	Description copied from interface AnnotatedElement
InstantiationException.InstantiationException(String)	Constructs an InstantiationException with the specified detail message
Character.isMirrored(char)	Determines whether the character is mirrored according to the Unicode specification Mirrored characters should have their glyphs horizontally mirrored when displayed in text that is right to left For example u0028 LEFT PARENTHESIS is semantically defined to be an opening parenthesis This will appear as a in text that is left to right but as a in text that is right to left
StringBuffer.append(float)	Appends the string representation of the float argument to this sequence
RuntimeMXBean.getSpecVendor()	Returns the Java virtual machine specification vendor
ExceptionInInitializerError.ExceptionInInitializerError()	Constructs an ExceptionInInitializerError with null as its detail message string and with no saved throwable object
NoSuchMethodError.NoSuchMethodError(String)	Constructs a NoSuchMethodError with the specified detail message
MethodHandle.asCollector(Class,int)	Makes an array collecting method handle which accepts a given number of trailing positional arguments and collects them into an array argument
Math.nextAfter(float,double)	Returns the floating point number adjacent to the first argument in the direction of the second argument If both arguments compare as equal a value equivalent to the second argument is returned
Float.parseFloat(String)	Returns a new float initialized to the value represented by the specified String as performed by the valueOf method of class Float
InvocationHandler.invoke(Object,Method,Object[])	Processes a method invocation on a proxy instance and returns the result This method will be invoked on an invocation handler when a method is invoked on a proxy instance that it is associated with
ProcessBuilder.redirectError(File)	Sets this process builder s standard error destination to a file
ProcessBuilder.redirectOutput(File)	Sets this process builder s standard output destination to a file
IllegalThreadStateException.IllegalThreadStateException()	Constructs an IllegalThreadStateException with no detail message
Runtime.getRuntime()	Returns the runtime object associated with the current Java application
ProcessBuilder.inheritIO()	Sets the source and destination for subprocess standard I O to be the same as those of the current Java process
ManagementPermission.ManagementPermission(String)	Constructs a ManagementPermission with the specified name
UnknownError.UnknownError()	Constructs an UnknownError with no detail message
Byte.doubleValue()	Returns the value of this Byte as a double
Math.ceil(double)	Returns the smallest closest to negative infinity double value that is greater than or equal to the argument and is equal to a mathematical integer Special cases If the argument value is already equal to a mathematical integer then the result is the same as the argument If the argument is NaN or an infinity or positive zero or negative zero then the result is the same as the argument If the argument value is less than zero but greater than 1 0 then the result is negative zero Note that the value of Math ceil x is exactly the value of Math floor x
Math.hypot(double,double)	Returns sqrt x2 y2 without intermediate overflow or underflow
AssertionError.AssertionError(String,Throwable)	Constructs a new AssertionError with the specified detail message and cause
Throwable.printStackTrace()	Prints this throwable and its backtrace to the standard error stream This method prints a stack trace for this Throwable object on the error output stream that is the value of the field System err The first line of output contains the result of the toString method for this object Remaining lines represent data previously recorded by the method fillInStackTrace The format of this information depends on the implementation but the following example may be regarded as typical java lang NullPointerException at MyClass mash MyClass java 9 at MyClass crunch MyClass java 6 at MyClass main MyClass java 3 This example was produced by running the program class MyClass public static void main String args crunch null static void crunch int a mash a static void mash int b System out println b 0 The backtrace for a throwable with an initialized non null cause should generally include the backtrace for the cause The format of this information depends on the implementation but the following example may be regarded as typical HighLevelException MidLevelException LowLevelException at Junk a Junk java 13 at Junk main Junk java 4 Caused by MidLevelException LowLevelException at Junk c Junk java 23 at Junk b Junk java 17 at Junk a Junk java 11 1 more Caused by LowLevelException at Junk e Junk java 30 at Junk d Junk java 27 at Junk c Junk java 21 3 more Note the presence of lines containing the characters
RuntimeMXBean.getVmName()	Returns the Java virtual machine implementation name
Class.getAnnotation(Class)	Description copied from interface AnnotatedElement
Runtime.totalMemory()	Returns the total amount of memory in the Java virtual machine
Annotation.equals(Object)	Returns true if the specified object represents an annotation that is logically equivalent to this one In other words returns true if the specified object is an instance of the same annotation type as this instance all of whose members are equal to the corresponding member of this annotation as defined below Two corresponding primitive typed members whose values are x and y are considered equal if x y unless their type is float or double
ProcessBuilder.command()	Returns this process builder s operating system program and arguments The returned list is not a copy Subsequent updates to the list will be reflected in the state of this process builder
Thread.Thread(ThreadGroup,String)	Allocates a new Thread object This constructor has the same effect as Thread group null name
Character.isLetterOrDigit(char)	Determines if the specified character is a letter or digit
Appendable.append(CharSequence,int,int)	Appends a subsequence of the specified character sequence to this Appendable
Double.doubleValue()	Returns the double value of this Double object
AnnotationTypeMismatchException.element()	Returns the Method object for the incorrectly typed element
String.regionMatches(boolean,int,String,int,int)	Tests if two string regions are equal
MethodHandles.identity(Class)	Produces a method handle which returns its sole argument when invoked
StrictMath.max(int,int)	Returns the greater of two int values That is the result is the argument closer to the value of Integer MAX VALUE If the arguments have the same value the result is that same value
Short.valueOf(String)	Returns a Short object holding the value given by the specified String The argument is interpreted as representing a signed decimal short exactly as if the argument were given to the parseShort java lang String method The result is a Short object that represents the short value specified by the string
AnnotatedElement.getAnnotation(Class)	Returns this element s annotation for the specified type if such an annotation is present else null
ClassLoader.getResourceAsStream(String)	Returns an input stream for reading the specified resource
Constructor.getTypeParameters()	Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object in declaration order Returns an array of length 0 if the underlying generic declaration declares no type variables
Character.offsetByCodePoints(char[],int,int,int,int)	Returns the index within the given char subarray that is offset from the given index by codePointOffset code points The start and count arguments specify a subarray of the char array Unpaired surrogates within the text range given by index and codePointOffset count as one code point each
StringBuffer.delete(int,int)	Removes the characters in a substring of this sequence
Compiler.compileClasses(String)	Compiles all classes whose name matches the specified string
Character.toLowerCase(int)	Converts the character Unicode code point argument to lowercase using case mapping information from the UnicodeData file
Math.sqrt(double)	Returns the correctly rounded positive square root of a double value
StrictMath.getExponent(double)	Returns the unbiased exponent used in the representation of a double Special cases If the argument is NaN or infinite then the result is Double MAX EXPONENT 1
StrictMath.rint(double)	Returns the double value that is closest in value to the argument and is equal to a mathematical integer If two double values that are mathematical integers are equally close to the value of the argument the result is the integer value that is even Special cases If the argument value is already equal to a mathematical integer then the result is the same as the argument
String.copyValueOf(char[])	Returns a String that represents the character sequence in the array specified
CompilationMXBean.isCompilationTimeMonitoringSupported()	Tests if the Java virtual machine supports the monitoring of compilation time
Float.floatValue()	Returns the float value of this Float object
StringBuilder.appendCodePoint(int)	Appends the string representation of the codePoint argument to this sequence
Compiler.compileClass(Class)	Compiles the specified class
Constructor.getDeclaringClass()	Returns the Class object representing the class that declares the constructor represented by this Constructor object
Object.Object()	
Package.getImplementationVersion()	Return the version of this implementation It consists of any string assigned by the vendor of this implementation and does not have any particular syntax specified or expected by the Java runtime It may be compared for equality with other package version strings used for this implementation by this vendor for this package
MemoryPoolMXBean.isValid()	Tests if this memory pool is valid in the Java virtual machine A memory pool becomes invalid once the Java virtual machine removes it from the memory system
NoClassDefFoundError.NoClassDefFoundError(String)	Constructs a NoClassDefFoundError with the specified detail message
System.setOut(PrintStream)	Reassigns the standard output stream
Field.getInt(Object)	Gets the value of a static or instance field of type int or of another primitive type convertible to type int via a widening conversion
Object.notifyAll()	Wakes up all threads that are waiting on this object s monitor A thread waits on an object s monitor by calling one of the wait methods
String.String(byte[],int,int,Charset)	Constructs a new String by decoding the specified subarray of bytes using the specified charset
StrictMath.abs(double)	Returns the absolute value of a double value
WildcardType.getLowerBounds()	Returns an array of Type objects representing the lower bound s of this type variable Note that if no lower bound is explicitly declared the lower bound is the type of null
Constructor.getExceptionTypes()	Returns an array of Class objects that represent the types of exceptions declared to be thrown by the underlying constructor represented by this Constructor object Returns an array of length 0 if the constructor declares no exceptions in its throws clause
MethodHandles.Lookup.toString()	Displays the name of the class from which lookups are to be made
AccessibleObject.setAccessible(boolean)	Set the accessible flag for this object to the indicated boolean value A value of true indicates that the reflected object should suppress Java language access checking when it is used A value of false indicates that the reflected object should enforce Java language access checks
ProcessBuilder.redirectInput()	Returns this process builder s standard input source
Reference.enqueue()	Adds this reference object to the queue with which it is registered if any
SecurityManager.checkRead(FileDescriptor)	Throws a SecurityException if the calling thread is not allowed to read from the specified file descriptor
Field.getLong(Object)	Gets the value of a static or instance field of type long or of another primitive type convertible to type long via a widening conversion
Package.getImplementationVendor()	Returns the name of the organization vendor or company that provided this implementation
StrictMath.max(float,float)	Returns the greater of two float values That is the result is the argument closer to positive infinity If the arguments have the same value the result is that same value If either value is NaN then the result is NaN Unlike the numerical comparison operators this method considers negative zero to be strictly smaller than positive zero If one argument is positive zero and the other negative zero the result is positive zero
MethodHandles.publicLookup()	Returns a lookup object which is trusted minimally
InterruptedException.InterruptedException()	Constructs an InterruptedException with no detail message
Member.getName()	Returns the simple name of the underlying member or constructor represented by this Member
Character.isUpperCase(int)	Determines if the specified character Unicode code point is an uppercase character
String.equals(Object)	Compares this string to the specified object The result is true if and only if the argument is not null and is a String object that represents the same sequence of characters as this object
Class.getEnclosingConstructor()	If this Class object represents a local or anonymous class within a constructor returns a Constructor object representing the immediately enclosing constructor of the underlying class Returns null otherwise In particular this method returns null if the underlying class is a local or anonymous class immediately enclosed by a type declaration instance initializer or static initializer
GenericArrayType.getGenericComponentType()	Returns a Type object representing the component type of this array This method creates the component type of the array See the declaration of ParameterizedType for the semantics of the creation process for parameterized types and see TypeVariable for the creation process for type variables
Boolean.equals(Object)	Returns true if and only if the argument is not null and is a Boolean object that represents the same boolean value as this object
Long.getLong(String,Long)	Returns the long value of the system property with the specified name The first argument is treated as the name of a system property System properties are accessible through the System getProperty java lang String method The string value of this property is then interpreted as a long value as per the Long decode method and a Long object representing this value is returned
System.inheritedChannel()	Returns the channel inherited from the entity that created this Java virtual machine
Class.isAnnotationPresent(Class)	Description copied from interface AnnotatedElement
Field.set(Object,Object)	Sets the field represented by this Field object on the specified object argument to the specified new value The new value is automatically unwrapped if the underlying field has a primitive type
ArrayStoreException.ArrayStoreException(String)	Constructs an ArrayStoreException with the specified detail message
MethodHandle.invokeExact()	Invokes the method handle allowing any caller type descriptor but requiring an exact type match
MethodHandle.bindTo(Object)	Binds a value x to the first argument of a method handle without invoking it
IllegalMonitorStateException.IllegalMonitorStateException()	Constructs an IllegalMonitorStateException with no detail message
Number.longValue()	Returns the value of the specified number as a long
Package.toString()	Returns the string representation of this Package
Package.isCompatibleWith(String)	Compare this package s specification version with a desired version It returns true if this packages specification version number is greater than or equal to the desired version number Version numbers are compared by sequentially comparing corresponding components of the desired and specification strings
MethodHandles.Lookup.unreflectSpecial(Method,Class)	Produces a method handle for a reflected method
Character.isLetter(char)	Determines if the specified character is a letter
Short.floatValue()	Returns the value of this Short as a float
Long.getLong(String)	Determines the long value of the system property with the specified name
StrictMath.nextAfter(float,double)	Returns the floating point number adjacent to the first argument in the direction of the second argument If both arguments compare as equal a value equivalent to the second argument is returned
StringBuilder.insert(int,float)	Inserts the string representation of the float argument into this sequence
Double.intValue()	Returns the value of this Double as an int by casting to type int
MutableCallSite.setTarget(MethodHandle)	Updates the target method of this call site as a normal variable
ManagementFactory.getGarbageCollectorMXBeans()	Returns a list of GarbageCollectorMXBean objects in the Java virtual machine
Character.getType(int)	Returns a value indicating a character s general category
Character.isAlphabetic(int)	Determines if the specified character Unicode code point is an alphabet
MethodType.genericMethodType(int,boolean)	Finds or creates a method type whose components are Object with an optional trailing Object array
StringBuilder.append(char[])	Appends the string representation of the char array argument to this sequence
MethodType.toString()	Returns a string representation of the method type of the form PT0 PT1 RT
ManagementFactory.getOperatingSystemMXBean()	Returns the managed bean for the operating system on which the Java virtual machine is running
NoSuchMethodException.NoSuchMethodException()	Constructs a NoSuchMethodException without a detail message
StringBuffer.insert(int,int)	Inserts the string representation of the second int argument into this sequence
Double.isInfinite()	Returns true if this Double value is infinitely large in magnitude false otherwise
String.getBytes(Charset)	Encodes this String into a sequence of bytes using the given charset storing the result into a new byte array
Character.toChars(int,char[],int)	Converts the specified character Unicode code point to its UTF 16 representation If the specified code point is a BMP Basic Multilingual Plane or Plane 0 value the same value is stored in dst dstIndex and 1 is returned If the specified code point is a supplementary character its surrogate values are stored in dst dstIndex high surrogate and dst dstIndex 1 low surrogate and 2 is returned
Thread.holdsLock(Object)	Returns true if and only if the current thread holds the monitor lock on the specified object
TypeVariable.getGenericDeclaration()	Returns the GenericDeclaration object representing the generic declaration declared this type variable
Throwable.Throwable(String,Throwable)	Constructs a new throwable with the specified detail message and cause Note that the detail message associated with cause is not automatically incorporated in this throwable s detail message
Byte.toString(byte)	Returns a new String object representing the specified byte The radix is assumed to be 10
SecurityManager.checkAccess(ThreadGroup)	Throws a SecurityException if the calling thread is not allowed to modify the thread group argument
StringBuilder.insert(int,CharSequence)	Inserts the specified CharSequence into this sequence
StringBuilder.indexOf(String,int)	Returns the index within this string of the first occurrence of the specified substring starting at the specified index The integer returned is the smallest value k for which k Math min fromIndex this length this toString startsWith str k If no such value of k exists then 1 is returned
IncompatibleClassChangeError.IncompatibleClassChangeError()	Constructs an IncompatibleClassChangeError with no detail message
MethodHandles.foldArguments(MethodHandle,MethodHandle)	Adapts a target method handle by pre processing some of its arguments and then calling the target with the result of the pre processing inserted into the original sequence of arguments
SecurityManager.getInCheck()	Tests if there is a security check in progress
Class.getModifiers()	Returns the Java language modifiers for this class or interface encoded in an integer The modifiers consist of the Java Virtual Machine s constants for public protected private final static abstract and interface they should be decoded using the methods of class Modifier
Integer.valueOf(String)	Returns an Integer object holding the value of the specified String The argument is interpreted as representing a signed decimal integer exactly as if the argument were given to the parseInt java lang String method The result is an Integer object that represents the integer value specified by the string
Float.floatToRawIntBits(float)	Returns a representation of the specified floating point value according to the IEEE 754 floating point single format bit layout preserving Not a Number NaN values
MemoryPoolMXBean.getName()	Returns the name representing this memory pool
Long.toString(long)	Returns a String object representing the specified long The argument is converted to signed decimal representation and returned as a string exactly as if the argument and the radix 10 were given as arguments to the toString long int method
UndeclaredThrowableException.UndeclaredThrowableException(Throwable,String)	Constructs an UndeclaredThrowableException with the specified Throwable and a detail message
Double.compare(double,double)	Compares the two specified double values The sign of the integer value returned is the same as that of the integer that would be returned by the call new Double d1 compareTo new Double d2
StringBuilder.charAt(int)	Returns the char value in this sequence at the specified index
MonitorInfo.getLockedStackDepth()	Returns the depth in the stack trace where the object monitor was locked The depth is the index to the StackTraceElement array returned in the ThreadInfo getStackTrace method
String.String(StringBuffer)	Allocates a new string that contains the sequence of characters currently contained in the string buffer argument The contents of the string buffer are copied subsequent modification of the string buffer does not affect the newly created string
Math.log(double)	Returns the natural logarithm base e of a double value Special cases If the argument is NaN or less than zero then the result is NaN
Character.isIdentifierIgnorable(char)	Determines if the specified character should be regarded as an ignorable character in a Java identifier or a Unicode identifier
Runtime.exec(String[],String[])	Executes the specified command and arguments in a separate process with the specified environment
Integer.toString(int)	Returns a String object representing the specified integer The argument is converted to signed decimal representation and returned as a string exactly as if the argument and radix 10 were given as arguments to the toString int int method
StringBuilder.deleteCharAt(int)	Removes the char at the specified position in this sequence This sequence is shortened by one char
MemoryPoolMXBean.setUsageThreshold(long)	Sets the threshold of this memory pool to the given threshold value if this memory pool supports the usage threshold
Integer.parseInt(String)	Parses the string argument as a signed decimal integer The characters in the string must all be decimal digits except that the first character may be an ASCII minus sign u002D to indicate a negative value or an ASCII plus sign u002B to indicate a positive value The resulting integer value is returned exactly as if the argument and the radix 10 were given as arguments to the parseInt java lang String int method
Long.equals(Object)	Compares this object to the specified object The result is true if and only if the argument is not null and is a Long object that contains the same long value as this object
StringBuilder.StringBuilder(CharSequence)	Constructs a string builder that contains the same characters as the specified CharSequence The initial capacity of the string builder is 16 plus the length of the CharSequence argument
WildcardType.getUpperBounds()	Returns an array of Type objects representing the upper bound s of this type variable Note that if no upper bound is explicitly declared the upper bound is Object
StrictMath.hypot(double,double)	Returns sqrt x2 y2 without intermediate overflow or underflow
AnnotationFormatError.AnnotationFormatError(String)	Constructs a new AnnotationFormatError with the specified detail message
ClassLoader.getSystemClassLoader()	Returns the system class loader for delegation This is the default delegation parent for new ClassLoader instances and is typically the class loader used to start the application
Class.getDeclaredConstructor(Class)	Returns a Constructor object that reflects the specified constructor of the class or interface represented by this Class object The parameterTypes parameter is an array of Class objects that identify the constructor s formal parameter types in declared order
MethodHandles.Lookup.unreflectConstructor(Constructor)	Produces a method handle for a reflected constructor
Array.setChar(Object,int,char)	Sets the value of the indexed component of the specified array object to the specified char value
Character.getDirectionality(int)	Returns the Unicode directionality property for the given character Unicode code point Character directionality is used to calculate the visual ordering of text The directionality value of undefined character is DIRECTIONALITY UNDEFINED
Byte.intValue()	Returns the value of this Byte as an int
SecurityManager.checkPrintJobAccess()	Throws a SecurityException if the calling thread is not allowed to initiate a print job request
Class.getMethod(String,Class)	Returns a Method object that reflects the specified public member method of the class or interface represented by this Class object The name parameter is a String specifying the simple name of the desired method The parameterTypes parameter is an array of Class objects that identify the method s formal parameter types in declared order If parameterTypes is null it is treated as if it were an empty array
MemoryNotificationInfo.getCount()	Returns the number of times that the memory usage has crossed a threshold when the notification was constructed
Class.getConstructors()	Returns an array containing Constructor objects reflecting all the public constructors of the class represented by this Class object An array of length 0 is returned if the class has no public constructors or if the class is an array class or if the class reflects a primitive type or void
MethodHandles.constant(Class,Object)	Produces a method handle of the requested return type which returns the given constant value every time it is invoked
BufferPoolMXBean.getCount()	Returns an estimate of the number of buffers in the pool
UnsupportedOperationException.UnsupportedOperationException(Throwable)	Constructs a new exception with the specified cause and a detail message of cause null null cause toString which typically contains the class and detail message of cause
AccessibleObject.getAnnotation(Class)	Description copied from interface AnnotatedElement
Class.getField(String)	Returns a Field object that reflects the specified public member field of the class or interface represented by this Class object The name parameter is a String specifying the simple name of the desired field
Math.round(float)	Returns the closest int to the argument with ties rounding up
System.setSecurityManager(SecurityManager)	Sets the System security
Package.getImplementationTitle()	Return the title of this package
MethodType.hashCode()	Returns the hash code value for this method type
StrictMath.sinh(double)	Returns the hyperbolic sine of a double value
PlatformLoggingMXBean.getLoggerNames()	Returns the list of the currently registered logger names This method calls LogManager getLoggerNames and returns a list of the logger names
Math.min(int,int)	Returns the smaller of two int values That is the result the argument closer to the value of Integer MIN VALUE If the arguments have the same value the result is that same value
Thread.getDefaultUncaughtExceptionHandler()	Returns the default handler invoked when a thread abruptly terminates due to an uncaught exception If the returned value is null there is no default
System.arraycopy(Object,int,Object,int,int)	Copies an array from the specified source array beginning at the specified position to the specified position of the destination array
LockInfo.toString()	Returns a string representation of a lock The returned string representation consists of the name of the class of the lock object the at sign character and the unsigned hexadecimal representation of the identity hash code of the object This method returns a string equals to the value of lock getClass getName Integer toHexString System identityHashCode lock where lock is the lock object
Array.setInt(Object,int,int)	Sets the value of the indexed component of the specified array object to the specified int value
Math.tanh(double)	Returns the hyperbolic tangent of a double value
Byte.compare(byte,byte)	Compares two byte values numerically
MethodType.parameterArray()	Presents the parameter types as an array a convenience method
Annotation.hashCode()	Returns the hash code of this annotation as defined below The hash code of an annotation is the sum of the hash codes of its members including those with default values as defined below The hash code of an annotation member is 127 times the hash code of the member name as computed by String hashCode XOR the hash code of the member value as defined below The hash code of a member value depends on its type The hash code of a primitive value v is equal to WrapperType valueOf v hashCode where WrapperType is the wrapper type corresponding to the primitive type of v Byte Character Double Float Integer Long Short or Boolean
NumberFormatException.NumberFormatException()	Constructs a NumberFormatException with no detail message
Instrumentation.appendToBootstrapClassLoaderSearch(JarFile)	Specifies a JAR file with instrumentation classes to be defined by the bootstrap class loader
String.substring(int,int)	Returns a new string that is a substring of this string The substring begins at the specified beginIndex and extends to the character at index endIndex 1
Thread.start()	Causes this thread to begin execution the Java Virtual Machine calls the run method of this thread
Math.log1p(double)	Returns the natural logarithm of the sum of the argument and 1
Math.min(long,long)	Returns the smaller of two long values That is the result is the argument closer to the value of Long MIN VALUE If the arguments have the same value the result is that same value
String.compareToIgnoreCase(String)	Compares two strings lexicographically ignoring case differences This method returns an integer whose sign is that of calling compareTo with normalized versions of the strings where case differences have been eliminated by calling Character toLowerCase Character toUpperCase character on each character
VirtualMachineError.VirtualMachineError()	Constructs a VirtualMachineError with no detail message
Character.isJavaLetterOrDigit(char)	Determines if the specified character may be part of a Java identifier as other than the first character
Math.abs(int)	Returns the absolute value of an int value
String.offsetByCodePoints(int,int)	Returns the index within this String that is offset from the given index by codePointOffset code points Unpaired surrogates within the text range given by index and codePointOffset count as one code point each
Float.toHexString(float)	Returns a hexadecimal string representation of the float argument All characters mentioned below are ASCII characters
Double.hashCode()	Returns a hash code for this Double object The result is the exclusive OR of the two halves of the long integer bit representation exactly as produced by the method doubleToLongBits double of the primitive double value represented by this Double object That is the hash code is the value of the expression int v v 32 where v is defined by long v Double doubleToLongBits this doubleValue
Runtime.loadLibrary(String)	Loads the dynamic library with the specified library name
MemoryUsage.toString()	Returns a descriptive representation of this memory usage
AccessibleObject.getAnnotations()	Description copied from interface AnnotatedElement
StringBuffer.insert(int,char)	Inserts the string representation of the char argument into this sequence
Boolean.valueOf(String)	Returns a Boolean with a value represented by the specified string The Boolean returned represents a true value if the string argument is not null and is equal ignoring case to the string true
MethodType.appendParameterTypes(Class)	Finds or creates a method type with additional parameter types
Object.toString()	Returns a string representation of the object In general the toString method returns a string that textually represents this object The result should be a concise but informative representation that is easy for a person to read
IllegalMonitorStateException.IllegalMonitorStateException(String)	Constructs an IllegalMonitorStateException with the specified detail message
Package.isSealed()	Returns true if this package is sealed
Long.byteValue()	Returns the value of this Long as a byte
VolatileCallSite.dynamicInvoker()	Produces a method handle equivalent to an invokedynamic instruction which has been linked to this call site
ArrayIndexOutOfBoundsException.ArrayIndexOutOfBoundsException(int)	Constructs a new ArrayIndexOutOfBoundsException class with an argument indicating the illegal index
Float.Float(String)	Constructs a newly allocated Float object that represents the floating point value of type float represented by the string The string is converted to a float value as if by the valueOf method
Class.isPrimitive()	Determines if the specified Class object represents a primitive type
StackTraceElement.toString()	Returns a string representation of this stack trace element The format of this string depends on the implementation but the following examples may be regarded as typical MyClass mash MyClass java 9 Here MyClass is the fully qualified name of the class containing the execution point represented by this stack trace element mash is the name of the method containing the execution point MyClass java is the source file containing the execution point and 9 is the line number of the source line containing the execution point
Character.isIdeographic(int)	Determines if the specified character Unicode code point is a CJKV Chinese Japanese Korean and Vietnamese ideograph as defined by the Unicode Standard
ReflectPermission.ReflectPermission(String,String)	Constructs a ReflectPermission with the specified name and actions
StringBuffer.substring(int,int)	Returns a new String that contains a subsequence of characters currently contained in this sequence The substring begins at the specified start and extends to the character at index end 1
Integer.numberOfTrailingZeros(int)	Returns the number of zero bits following the lowest order rightmost one bit in the two s complement binary representation of the specified int value Returns 32 if the specified value has no one bits in its two s complement representation in other words if it is equal to zero
String.String(StringBuilder)	Allocates a new string that contains the sequence of characters currently contained in the string builder argument The contents of the string builder are copied subsequent modification of the string builder does not affect the newly created string
ReflectiveOperationException.ReflectiveOperationException(String,Throwable)	Constructs a new exception with the specified detail message and cause
SecurityManager.checkCreateClassLoader()	Throws a SecurityException if the calling thread is not allowed to create a new class loader
Float.isNaN()	Returns true if this Float value is a Not a Number NaN false otherwise
Short.byteValue()	Returns the value of this Short as a byte
Short.equals(Object)	Compares this object to the specified object The result is true if and only if the argument is not null and is a Short object that contains the same short value as this object
Float.longValue()	Returns value of this Float as a long by casting to type long
RuntimePermission.RuntimePermission(String,String)	Creates a new RuntimePermission object with the specified name
IllegalAccessError.IllegalAccessError(String)	Constructs an IllegalAccessError with the specified detail message
MemoryMXBean.getObjectPendingFinalizationCount()	Returns the approximate number of objects for which finalization is pending
ExceptionInInitializerError.ExceptionInInitializerError(Throwable)	Constructs a new ExceptionInInitializerError class by saving a reference to the Throwable object thrown for later retrieval by the getException method The detail message string is set to null
Modifier.Modifier()	
Annotation.annotationType()	Returns the annotation type of this annotation
Byte.parseByte(String)	Parses the string argument as a signed decimal byte The characters in the string must all be decimal digits except that the first character may be an ASCII minus sign u002D to indicate a negative value or an ASCII plus sign u002B to indicate a positive value The resulting byte value is returned exactly as if the argument and the radix 10 were given as arguments to the parseByte java lang String int method
ExceptionInInitializerError.getException()	Returns the exception that occurred during a static initialization that caused this error to be created
AssertionError.AssertionError(float)	Constructs an AssertionError with its detail message derived from the specified float which is converted to a string as defined in section 15 18 1 1 of The Java Language Specification
System.runFinalization()	Runs the finalization methods of any objects pending finalization
ReflectPermission.ReflectPermission(String)	Constructs a ReflectPermission with the specified name
Short.hashCode()	Returns a hash code for this Short equal to the result of invoking intValue
Method.getTypeParameters()	Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object in declaration order Returns an array of length 0 if the underlying generic declaration declares no type variables
StringBuilder.append(String)	Appends the specified string to this character sequence
AnnotatedElement.getDeclaredAnnotations()	Returns all annotations that are directly present on this element Unlike the other methods in this interface this method ignores inherited annotations Returns an array of length zero if no annotations are directly present on this element The caller of this method is free to modify the returned array it will have no effect on the arrays returned to other callers
SecurityManager.checkWrite(String)	Throws a SecurityException if the calling thread is not allowed to write to the file specified by the string argument
String.valueOf(Object)	Returns the string representation of the Object argument
ClassLoadingMXBean.isVerbose()	Tests if the verbose output for the class loading system is enabled
Short.Short(short)	Constructs a newly allocated Short object that represents the specified short value
RuntimeMXBean.getStartTime()	Returns the start time of the Java virtual machine in milliseconds
Double.valueOf(String)	Returns a Double object holding the double value represented by the argument string s
Long.toBinaryString(long)	Returns a string representation of the long argument as an unsigned integer in base 2
StringBuffer.codePointAt(int)	Returns the character Unicode code point at the specified index The index refers to char values Unicode code units and ranges from 0 to length 1
ProcessBuilder.Redirect.hashCode()	Returns a hash code value for this Redirect
Method.isSynthetic()	Returns true if this method is a synthetic method returns false otherwise
MethodHandles.Lookup.findSpecial(Class,String,MethodType,Class)	Produces an early bound method handle for a virtual method as if called from an invokespecial instruction from caller
Class.isAnnotation()	Returns true if this Class object represents an annotation type Note that if this method returns true isInterface would also return true as all annotation types are also interfaces
Thread.getPriority()	Returns this thread s priority
StringBuffer.insert(int,CharSequence)	Inserts the specified CharSequence into this sequence
ReflectiveOperationException.ReflectiveOperationException()	Constructs a new exception with null as its detail message The cause is not initialized and may subsequently be initialized by a call to Throwable initCause java lang Throwable
ThreadGroup.destroy()	Destroys this thread group and all of its subgroups This thread group must be empty indicating that all threads that had been in this thread group have since stopped
Byte.hashCode()	Returns a hash code for this Byte equal to the result of invoking intValue
Array.setDouble(Object,int,double)	Sets the value of the indexed component of the specified array object to the specified double value
Thread.Thread(Runnable,String)	Allocates a new Thread object This constructor has the same effect as Thread null target name
ReferenceQueue.remove(long)	Removes the next reference object in this queue blocking until either one becomes available or the given timeout period expires
StrictMath.max(long,long)	Returns the greater of two long values That is the result is the argument closer to the value of Long MAX VALUE If the arguments have the same value the result is that same value
Field.getBoolean(Object)	Gets the value of a static or instance boolean field
String.String(byte[],int)	Allocates a new String containing characters constructed from an array of 8 bit integer values Each character cin the resulting string is constructed from the corresponding component b in the byte array such that c char hibyte 0xff 8 b 0xff
StringBuffer.append(Object)	Appends the string representation of the Object argument
StringBuilder.delete(int,int)	Removes the characters in a substring of this sequence
Thread.toString()	Returns a string representation of this thread including the thread s name priority and thread group
ProcessBuilder.redirectError(Redirect)	Sets this process builder s standard error destination
String.indexOf(int,int)	Returns the index within this string of the first occurrence of the specified character starting the search at the specified index
ProcessBuilder.redirectOutput()	Returns this process builder s standard output destination
ThreadInfo.getThreadName()	Returns the name of the thread associated with this ThreadInfo
Array.getDouble(Object,int)	Returns the value of the indexed component in the specified array object as a double
CompilationMXBean.getName()	Returns the name of the Just in time JIT compiler
OperatingSystemMXBean.getSystemLoadAverage()	Returns the system load average for the last minute
Character.isDefined(int)	Determines if a character Unicode code point is defined in Unicode
String.String(byte[],int,int,String)	Constructs a new String by decoding the specified subarray of bytes using the specified charset The length of the new String is a function of the charset and hence may not be equal to the length of the subarray
ProcessBuilder.ProcessBuilder(List)	Constructs a process builder with the specified operating system program and arguments This constructor does not make a copy of the command list Subsequent updates to the list will be reflected in the state of the process builder It is not checked whether command corresponds to a valid operating system command
Proxy.getProxyClass(ClassLoader,Class)	Returns the java lang Class object for a proxy class given a class loader and an array of interfaces The proxy class will be defined by the specified class loader and will implement all of the supplied interfaces If a proxy class for the same permutation of interfaces has already been defined by the class loader then the existing proxy class will be returned otherwise a proxy class for those interfaces will be generated dynamically and defined by the class loader
Number.intValue()	Returns the value of the specified number as an int
Math.max(long,long)	Returns the greater of two long values That is the result is the argument closer to the value of Long MAX VALUE If the arguments have the same value the result is that same value
String.toUpperCase()	Converts all of the characters in this String to upper case using the rules of the default locale This method is equivalent to toUpperCase Locale getDefault
OperatingSystemMXBean.getVersion()	Returns the operating system version
MutableCallSite.MutableCallSite(MethodType)	Creates a blank call site object with the given method type
String.getBytes()	Encodes this String into a sequence of bytes using the platform s default charset storing the result into a new byte array
Float.intBitsToFloat(int)	Returns the float value corresponding to a given bit representation
StringBuffer.append(char[])	Appends the string representation of the char array argument to this sequence
UnsupportedOperationException.UnsupportedOperationException()	Constructs an UnsupportedOperationException with no detail message
NoSuchFieldError.NoSuchFieldError(String)	Constructs a NoSuchFieldError with the specified detail message
ClassLoader.getSystemResources(String)	Finds all resources of the specified name from the search path used to load classes The resources thus found are returned as an Enumeration of URL objects
InvocationTargetException.getCause()	Returns the cause of this exception the thrown target exception which may be null
Exception.Exception(String,Throwable)	Constructs a new exception with the specified detail message and cause Note that the detail message associated with cause is not automatically incorporated in this exception s detail message
SecurityManager.checkAccess(Thread)	Throws a SecurityException if the calling thread is not allowed to modify the thread argument
IncompleteAnnotationException.IncompleteAnnotationException(Class,String)	Constructs an IncompleteAnnotationException to indicate that the named element was missing from the specified annotation type
Math.toRadians(double)	Converts an angle measured in degrees to an approximately equivalent angle measured in radians The conversion from degrees to radians is generally inexact
Object.equals(Object)	Indicates whether some other object is equal to this one
NoSuchFieldException.NoSuchFieldException(String)	Constructor with a detail message
ClassLoadingMXBean.setVerbose(boolean)	Enables or disables the verbose output for the class loading system The verbose output information and the output stream to which the verbose information is emitted are implementation dependent Typically a Java virtual machine implementation prints a message each time a class file is loaded
Character.digit(char,int)	Returns the numeric value of the character ch in the specified radix
EnumConstantNotPresentException.EnumConstantNotPresentException(Class,String)	Constructs an EnumConstantNotPresentException for the specified constant
ThreadInfo.getLockedMonitors()	Returns an array of MonitorInfo objects each of which represents an object monitor currently locked by the thread associated with this ThreadInfo
PlatformLoggingMXBean.getLoggerLevel(String)	Gets the name of the log level associated with the specified logger
Math.abs(float)	Returns the absolute value of a float value
Error.Error()	Constructs a new error with null as its detail message
ReferenceQueue.remove()	Removes the next reference object in this queue blocking until one becomes available
Byte.compareTo(Byte)	Compares two Byte objects numerically
AnnotationFormatError.AnnotationFormatError(String,Throwable)	Constructs a new AnnotationFormatError with the specified detail message and cause Note that the detail message associated with cause is not automatically incorporated in this error s detail message
ManagementFactory.getThreadMXBean()	Returns the managed bean for the thread system of the Java virtual machine
Array.setShort(Object,int,short)	Sets the value of the indexed component of the specified array object to the specified short value
System.getenv()	Returns an unmodifiable string map view of the current system environment
StringBuilder.insert(int,boolean)	Inserts the string representation of the boolean argument into this sequence
TypeVariable.getBounds()	Returns an array of Type objects representing the upper bound s of this type variable Note that if no upper bound is explicitly declared the upper bound is Object
Thread.getId()	Returns the identifier of this Thread The thread ID is a positive long number generated when this thread was created
ThreadGroup.setDaemon(boolean)	Changes the daemon status of this thread group
Float.isNaN(float)	Returns true if the specified number is a Not a Number NaN value false otherwise
StrictMath.nextAfter(double,double)	Returns the floating point number adjacent to the first argument in the direction of the second argument If both arguments compare as equal the second argument is returned
Array.newInstance(Class,int)	Creates a new array with the specified component type and length
StringBuilder.StringBuilder()	Constructs a string builder with no characters in it and an initial capacity of 16 characters
ManagementFactory.getMemoryMXBean()	Returns the managed bean for the memory system of the Java virtual machine
String.codePointCount(int,int)	Returns the number of Unicode code points in the specified text range of this String The text range begins at the specified beginIndex and extends to the char at index endIndex 1 Thus the length in chars of the text range is endIndex beginIndex Unpaired surrogates within the text range count as one code point each
SecurityManager.checkAccept(String,int)	Throws a SecurityException if the calling thread is not permitted to accept a socket connection from the specified host and port number
Method.equals(Object)	Compares this Method against the specified object Returns true if the objects are the same Two Methods are the same if they were declared by the same class and have the same name and formal parameter types and return type
Float.toString()	Returns a string representation of this Float object
ParameterizedType.getRawType()	Returns the Type object representing the class or interface that declared this type
Package.getDeclaredAnnotations()	Description copied from interface AnnotatedElement
StrictMath.max(double,double)	Returns the greater of two double values That is the result is the argument closer to positive infinity If the arguments have the same value the result is that same value If either value is NaN then the result is NaN Unlike the numerical comparison operators this method considers negative zero to be strictly smaller than positive zero If one argument is positive zero and the other negative zero the result is positive zero
Character.isSpaceChar(char)	Determines if the specified character is a Unicode space character
String.indexOf(int)	Returns the index within this string of the first occurrence of the specified character If a character with value ch occurs in the character sequence represented by this String object then the index in Unicode code units of the first such occurrence is returned For values of ch in the range from 0 to 0xFFFF inclusive this is the smallest value k such that this charAt k ch is true For other values of ch it is the smallest value k such that this codePointAt k ch is true In either case if no such character occurs in this string then 1 is returned
Method.isVarArgs()	Returns true if this method was declared to take a variable number of arguments returns false otherwise
AnnotationTypeMismatchException.AnnotationTypeMismatchException(Method,String)	Constructs an AnnotationTypeMismatchException for the specified annotation type element and found data type
Field.getGenericType()	Returns a Type object that represents the declared type for the field represented by this Field object
System.identityHashCode(Object)	Returns the same hash code for the given object as would be returned by the default method hashCode whether or not the given object s class overrides hashCode
Long.intValue()	Returns the value of this Long as an int
StrictMath.nextUp(float)	Returns the floating point value adjacent to f in the direction of positive infinity This method is semantically equivalent to nextAfter f Float POSITIVE INFINITY however a nextUp implementation may run faster than its equivalent nextAfter call
Runtime.maxMemory()	Returns the maximum amount of memory that the Java virtual machine will attempt to use If there is no inherent limit then the value Long MAX VALUE will be returned
Member.getDeclaringClass()	Returns the Class object representing the class or interface that declares the member or constructor represented by this Member
StringBuilder.length()	Returns the length character count
MemoryPoolMXBean.getUsageThreshold()	Returns the usage threshold value of this memory pool in bytes
Modifier.isNative(int)	Return true if the integer argument includes the native modifier false otherwise
Modifier.constructorModifiers()	Return an int value OR ing together the source language modifiers that can be applied to a constructor
ManagementFactory.getPlatformMBeanServer()	Returns the platform MBeanServer
MethodHandles.permuteArguments(MethodHandle,MethodType,)	Produces a method handle which adapts the calling sequence of the given method handle to a new type by reordering the arguments
StringBuilder.substring(int)	Returns a new String that contains a subsequence of characters currently contained in this character sequence The substring begins at the specified index and extends to the end of this sequence
AutoCloseable.close()	Closes this resource relinquishing any underlying resources
Short.decode(String)	Decodes a String into a Short
String.toLowerCase()	Converts all of the characters in this String to lower case using the rules of the default locale This is equivalent to calling toLowerCase Locale getDefault
AssertionError.AssertionError(Object)	Constructs an AssertionError with its detail message derived from the specified object which is converted to a string as defined in section 15 18 1 1 of The Java Language Specification
PhantomReference.get()	Returns this reference object s referent Because the referent of a phantom reference is always inaccessible this method always returns null
Throwable.printStackTrace(PrintWriter)	Prints this throwable and its backtrace to the specified print writer
Math.random()	Returns a double value with a positive sign greater than or equal to 0 0 and less than 1 0
Thread.Thread(Runnable)	Allocates a new Thread object This constructor has the same effect as Thread null target gname where gname is a newly generated name Automatically generated names are of the form Thread n where n is an integer
Instrumentation.getAllLoadedClasses()	Returns an array of all classes currently loaded by the JVM
Proxy.getInvocationHandler(Object)	Returns the invocation handler for the specified proxy instance
BootstrapMethodError.BootstrapMethodError()	Constructs a BootstrapMethodError with no detail message
TypeVariable.getName()	Returns the name of this type variable as it occurs in the source code
MemoryPoolMXBean.getCollectionUsageThresholdCount()	Returns the number of times that the Java virtual machine has detected that the memory usage has reached or exceeded the collection usage threshold
ProcessBuilder.Redirect.file()	Returns the File source or destination associated with this redirect or null if there is no such file
StringBuilder.append(double)	Appends the string representation of the double argument to this sequence
TypeNotPresentException.typeName()	Returns the fully qualified name of the unavailable type
MemoryUsage.getCommitted()	Returns the amount of memory in bytes that is committed for the Java virtual machine to use This amount of memory is guaranteed for the Java virtual machine to use
StringBuilder.insert(int,CharSequence,int,int)	Inserts a subsequence of the specified CharSequence into this sequence
Character.getNumericValue(int)	Returns the int value that the specified character Unicode code point represents For example the character u216C the Roman numeral fifty will return an int with a value of 50
Thread.run()	If this thread was constructed using a separate Runnable run object then that Runnable object s run method is called otherwise this method does nothing and returns
String.indexOf(String,int)	Returns the index within this string of the first occurrence of the specified substring starting at the specified index
MethodType.changeParameterType(int,Class)	Finds or creates a method type with a single different parameter type
RuntimeMXBean.getVmVendor()	Returns the Java virtual machine implementation vendor
ProcessBuilder.Redirect.appendTo(File)	Returns a redirect to append to the specified file
StringBuffer.insert(int,Object)	Inserts the string representation of the Object argument into this character sequence
Character.isUnicodeIdentifierStart(int)	Determines if the specified character Unicode code point is permissible as the first character in a Unicode identifier
Method.getGenericParameterTypes()	Returns an array of Type objects that represent the formal parameter types in declaration order of the method represented by this Method object Returns an array of length 0 if the underlying method takes no parameters
SecurityException.SecurityException(String,Throwable)	Creates a SecurityException with the specified detail message and cause
VerifyError.VerifyError(String)	Constructs an VerifyError with the specified detail message
SecurityManager.checkPropertiesAccess()	Throws a SecurityException if the calling thread is not allowed to access or modify the system properties
Double.valueOf(double)	Returns a Double instance representing the specified double value
ThreadMXBean.getThreadCpuTime(long)	Returns the total CPU time for a thread of the specified ID in nanoseconds
String.lastIndexOf(int)	Returns the index within this string of the last occurrence of the specified character For values of ch in the range from 0 to 0xFFFF inclusive the index in Unicode code units returned is the largest value k such that this charAt k ch is true For other values of ch it is the largest value k such that this codePointAt k ch is true In either case if no such character occurs in this string then 1 is returned The String is searched backwards starting at the last character
Integer.signum(int)	Returns the signum function of the specified int value The return value is 1 if the specified value is negative 0 if the specified value is zero and 1 if the specified value is positive
Byte.Byte(byte)	Constructs a newly allocated Byte object that represents the specified byte value
MemoryPoolMXBean.getCollectionUsage()	Returns the memory usage after the Java virtual machine most recently expended effort in recycling unused objects in this memory pool
Modifier.isPrivate(int)	Return true if the integer argument includes the private modifier false otherwise
SecurityManager.getSecurityContext()	Creates an object that encapsulates the current execution environment The result of this method is used for example by the three argument checkConnect method and by the two argument checkRead method
Field.getModifiers()	Returns the Java language modifiers for the field represented by this Field object as an integer The Modifier class should be used to decode the modifiers
ThreadInfo.getThreadState()	Returns the state of the thread associated with this ThreadInfo
VolatileCallSite.getTarget()	Returns the target method of the call site which behaves like a volatile field of the VolatileCallSite
Double.toString()	Returns a string representation of this Double object
MethodType.dropParameterTypes(int,int)	Finds or creates a method type with some parameter types omitted
StrictMath.floor(double)	Returns the largest closest to positive infinity double value that is less than or equal to the argument and is equal to a mathematical integer Special cases If the argument value is already equal to a mathematical integer then the result is the same as the argument If the argument is NaN or an infinity or positive zero or negative zero then the result is the same as the argument
StringBuffer.StringBuffer(int)	Constructs a string buffer with no characters in it and the specified initial capacity
StringBuilder.toString()	Returns a string representing the data in this sequence
String.toCharArray()	Converts this string to a new character array
Enum.valueOf(Class,String)	Returns the enum constant of the specified enum type with the specified name The name must match exactly an identifier used to declare an enum constant in this type Extraneous whitespace characters are not permitted Note that for a particular enum type T the implicitly declared public static T valueOf String method on that enum may be used instead of this method to map from a name to the corresponding enum constant All the constants of an enum type can be obtained by calling the implicit public static T values method of that type
ThreadGroup.enumerate(Thread[])	Copies into the specified array every active thread in this thread group and its subgroups
InvocationTargetException.InvocationTargetException(Throwable,String)	Constructs a InvocationTargetException with a target exception and a detail message
StringIndexOutOfBoundsException.StringIndexOutOfBoundsException()	Constructs a StringIndexOutOfBoundsException with no detail message
MethodType.appendParameterTypes(List)	Finds or creates a method type with additional parameter types
Field.setLong(Object,long)	Sets the value of a field as a long on the specified object
Method.getDefaultValue()	Returns the default value for the annotation member represented by this Method instance If the member is of a primitive type an instance of the corresponding wrapper type is returned Returns null if no default is associated with the member or if the method instance does not represent a declared member of an annotation type
MethodType.methodType(Class,MethodType)	Finds or creates a method type with the given components
Long.rotateLeft(long,int)	Returns the value obtained by rotating the two s complement binary representation of the specified long value left by the specified number of bits Bits shifted out of the left hand or high order side reenter on the right or low order Note that left rotation with a negative distance is equivalent to right rotation rotateLeft val distance rotateRight val distance Note also that rotation by any multiple of 64 is a no op so all but the last six bits of the rotation distance can be ignored even if the distance is negative rotateLeft val distance rotateLeft val distance 0x3F
Field.isEnumConstant()	Returns true if this field represents an element of an enumerated type returns false otherwise
Character.isSpace(char)	Determines if the specified character is ISO LATIN 1 white space
Float.isInfinite(float)	Returns true if the specified number is infinitely large in magnitude false otherwise
Character.Subset.equals(Object)	Compares two Subset objects for equality
Field.getShort(Object)	Gets the value of a static or instance field of type short or of another primitive type convertible to type short via a widening conversion
StackTraceElement.getFileName()	Returns the name of the source file containing the execution point represented by this stack trace element Generally this corresponds to the SourceFile attribute of the relevant class file as per The Java Virtual Machine Specification Section 4 7 7 In some systems the name may refer to some source code unit other than a file such as an entry in source repository
Byte.shortValue()	Returns the value of this Byte as a short
Double.parseDouble(String)	Returns a new double initialized to the value represented by the specified String as performed by the valueOf method of class Double
CallSite.dynamicInvoker()	Produces a method handle equivalent to an invokedynamic instruction which has been linked to this call site
MethodHandle.invokeWithArguments()	Performs a variable arity invocation passing the arguments in the given array to the method handle as if via an inexact invoke from a call site which mentions only the type Object and whose arity is the length of the argument array
ProcessBuilder.redirectInput(Redirect)	Sets this process builder s standard input source
Field.setDouble(Object,double)	Sets the value of a field as a double on the specified object
Array.getBoolean(Object,int)	Returns the value of the indexed component in the specified array object as a boolean
UnsatisfiedLinkError.UnsatisfiedLinkError(String)	Constructs an UnsatisfiedLinkError with the specified detail message
Field.getName()	Returns the name of the field represented by this Field object
Integer.longValue()	Returns the value of this Integer as a long
MethodType.parameterList()	Presents the parameter types as a list a convenience method
StringBuilder.append(CharSequence)	Description copied from interface Appendable
OperatingSystemMXBean.getAvailableProcessors()	Returns the number of processors available to the Java virtual machine
Thread.setName(String)	Changes the name of this thread to be equal to the argument name
String.valueOf(char[])	Returns the string representation of the char array argument The contents of the character array are copied subsequent modification of the character array does not affect the newly created string
Character.isJavaIdentifierStart(int)	Determines if the character Unicode code point is permissible as the first character in a Java identifier
ClassCircularityError.ClassCircularityError()	Constructs a ClassCircularityError with no detail message
Enum.name()	Returns the name of this enum constant exactly as declared in its enum declaration
Constructor.newInstance()	Uses the constructor represented by this Constructor object to create and initialize a new instance of the constructor s declaring class with the specified initialization parameters
Proxy.isProxyClass(Class)	Returns true if and only if the specified class was dynamically generated to be a proxy class using the getProxyClass method or the newProxyInstance method
ExceptionInInitializerError.ExceptionInInitializerError(String)	Constructs an ExceptionInInitializerError with the specified detail message string A detail message is a String that describes this particular exception The detail message string is saved for later retrieval by the Throwable getMessage method There is no saved throwable object
StackTraceElement.equals(Object)	Returns true if the specified object is another StackTraceElement instance representing the same execution point as this instance Two stack trace elements a and b are equal if and only if equals a getFileName b getFileName a getLineNumber b getLineNumber equals a getClassName b getClassName equals a getMethodName b getMethodName where equals has the semantics of Objects equals
Byte.toString()	Returns a String object representing this Byte s value The value is converted to signed decimal representation and returned as a string exactly as if the byte value were given as an argument to the toString byte method
ThreadInfo.getBlockedTime()	Returns the approximate accumulated elapsed time in milliseconds that the thread associated with this ThreadInfo has blocked to enter or reenter a monitor since thread contention monitoring is enabled
StringBuffer.deleteCharAt(int)	Removes the char at the specified position in this sequence This sequence is shortened by one char
StrictMath.log1p(double)	Returns the natural logarithm of the sum of the argument and 1
ProcessBuilder.command(List)	Sets this process builder s operating system program and arguments This method does not make a copy of the command list Subsequent updates to the list will be reflected in the state of the process builder It is not checked whether command corresponds to a valid operating system command
StringBuffer.trimToSize()	Attempts to reduce storage used for the character sequence
ParameterizedType.getOwnerType()	Returns a Type object representing the type that this type is a member of For example if this type is O T I S return a representation of O T
Method.hashCode()	Returns a hashcode for this Method The hashcode is computed as the exclusive or of the hashcodes for the underlying method s declaring class name and the method s name
StrictMath.exp(double)	Returns Euler s number e raised to the power of a double value Special cases If the argument is NaN the result is NaN
Runtime.removeShutdownHook(Thread)	De registers a previously registered virtual machine shutdown hook
Method.getModifiers()	Returns the Java language modifiers for the method represented by this Method object as an integer The Modifier class should be used to decode the modifiers
Thread.stop()	Forces the thread to stop executing
SecurityManager.checkDelete(String)	Throws a SecurityException if the calling thread is not allowed to delete the specified file
ThreadGroup.ThreadGroup(String)	Constructs a new thread group The parent of this new group is the thread group of the currently running thread
Float.compare(float,float)	Compares the two specified float values The sign of the integer value returned is the same as that of the integer that would be returned by the call new Float f1 compareTo new Float f2
Character.Subset.hashCode()	Returns the standard hash code as defined by the Object hashCode method This method is final in order to ensure that the equals and hashCode methods will be consistent in all subclasses
String.valueOf(char[],int,int)	Returns the string representation of a specific subarray of the char array argument
Compiler.disable()	Cause the Compiler to cease operation
StrictMath.round(double)	Returns the closest long to the argument with ties rounding up
CharSequence.charAt(int)	Returns the char value at the specified index An index ranges from zero to length 1 The first char value of the sequence is at index zero the next at index one and so on as for array indexing If the char value specified by the index is a surrogate the surrogate value is returned
Enum.hashCode()	Returns a hash code for this enum constant
MethodType.equals(Object)	Compares the specified object with this type for equality
Float.floatToIntBits(float)	Returns a representation of the specified floating point value according to the IEEE 754 floating point single format bit layout
Thread.isDaemon()	Tests if this thread is a daemon thread
SecurityManager.SecurityManager()	Constructs a new SecurityManager
Character.isLetterOrDigit(int)	Determines if the specified character Unicode code point is a letter or digit
MethodHandles.throwException(Class,Class)	Produces a method handle which will throw exceptions of the given exType
Integer.getInteger(String,int)	Determines the integer value of the system property with the specified name
MemoryPoolMXBean.getCollectionUsageThreshold()	Returns the collection usage threshold value of this memory pool in bytes The default value is zero The collection usage threshold can be changed via the setCollectionUsageThreshold method
StringBuilder.codePointCount(int,int)	Returns the number of Unicode code points in the specified text range of this sequence The text range begins at the specified beginIndex and extends to the char at index endIndex 1 Thus the length in chars of the text range is endIndex beginIndex Unpaired surrogates within this sequence count as one code point each
Character.hashCode()	Returns a hash code for this Character equal to the result of invoking charValue
Long.valueOf(String)	Returns a Long object holding the value of the specified String The argument is interpreted as representing a signed decimal long exactly as if the argument were given to the parseLong java lang String method The result is a Long object that represents the integer value specified by the string
String.substring(int)	Returns a new string that is a substring of this string The substring begins with the character at the specified index and extends to the end of this string Examples unhappy substring 2 returns happy Harbison substring 3 returns bison emptiness substring 9 returns an empty string
ThreadGroup.getMaxPriority()	Returns the maximum priority of this thread group Threads that are part of this group cannot have a higher priority than the maximum priority
ThreadMXBean.getThreadInfo(long,int)	Returns a thread info for a thread of the specified id with stack trace of a specified number of stack trace elements
ThreadLocal.get()	Returns the value in the current thread s copy of this thread local variable If the variable has no value for the current thread it is first initialized to the value returned by an invocation of the initialValue method
System.setIn(InputStream)	Reassigns the standard input stream
ClassCircularityError.ClassCircularityError(String)	Constructs a ClassCircularityError with the specified detail message
Short.intValue()	Returns the value of this Short as an int
StrictMath.cosh(double)	Returns the hyperbolic cosine of a double value
AccessibleObject.isAccessible()	Get the value of the accessible flag for this object
MemoryNotificationInfo.getPoolName()	Returns the name of the memory pool that triggers this notification
UnknownError.UnknownError(String)	Constructs an UnknownError with the specified detail message
ClassDefinition.ClassDefinition(Class,byte[])	Creates a new ClassDefinition binding using the supplied class and class file bytes Does not copy the supplied buffer just captures a reference to it
Throwable.Throwable(String)	Constructs a new throwable with the specified detail message The cause is not initialized and may subsequently be initialized by a call to initCause java lang Throwable
BufferPoolMXBean.getTotalCapacity()	Returns an estimate of the total capacity of the buffers in this pool
Character.reverseBytes(char)	Returns the value obtained by reversing the order of the bytes in the specified char value
StringBuffer.insert(int,boolean)	Inserts the string representation of the boolean argument into this sequence
Long.highestOneBit(long)	Returns a long value with at most a single one bit in the position of the highest order leftmost one bit in the specified long value Returns zero if the specified value has no one bits in its two s complement binary representation that is if it is equal to zero
SecurityManager.checkPackageAccess(String)	Throws a SecurityException if the calling thread is not allowed to access the package specified by the argument
Double.isNaN()	Returns true if this Double value is a Not a Number NaN false otherwise
StringBuilder.StringBuilder(int)	Constructs a string builder with no characters in it and an initial capacity specified by the capacity argument
IncompatibleClassChangeError.IncompatibleClassChangeError(String)	Constructs an IncompatibleClassChangeError with the specified detail message
Math.asin(double)	Returns the arc sine of a value the returned angle is in the range pi 2 through pi 2 Special cases If the argument is NaN or its absolute value is greater than 1 then the result is NaN
AssertionError.AssertionError(int)	Constructs an AssertionError with its detail message derived from the specified int which is converted to a string as defined in section 15 18 1 1 of The Java Language Specification
BootstrapMethodError.BootstrapMethodError(String,Throwable)	Constructs a BootstrapMethodError with the specified detail message and cause
Class.getClassLoader()	Returns the class loader for the class Some implementations may use null to represent the bootstrap class loader This method will return null in such implementations if this class was loaded by the bootstrap class loader
Character.isDefined(char)	Determines if a character is defined in Unicode
StrictMath.signum(float)	Returns the signum function of the argument zero if the argument is zero 1 0f if the argument is greater than zero 1 0f if the argument is less than zero
MemoryUsage.getUsed()	Returns the amount of used memory in bytes
Runtime.exec(String,String[])	Executes the specified string command in a separate process with the specified environment
UnsupportedClassVersionError.UnsupportedClassVersionError()	Constructs a UnsupportedClassVersionError with no detail message
Integer.highestOneBit(int)	Returns an int value with at most a single one bit in the position of the highest order leftmost one bit in the specified int value Returns zero if the specified value has no one bits in its two s complement binary representation that is if it is equal to zero
VerifyError.VerifyError()	Constructs an VerifyError with no detail message
Error.Error(String,Throwable)	Constructs a new error with the specified detail message and cause Note that the detail message associated with cause is not automatically incorporated in this error s detail message
StringBuilder.append(char[],int,int)	Appends the string representation of a subarray of the char array argument to this sequence
Character.getDirectionality(char)	Returns the Unicode directionality property for the given character Character directionality is used to calculate the visual ordering of text The directionality value of undefined char values is DIRECTIONALITY UNDEFINED
StrictMath.random()	Returns a double value with a positive sign greater than or equal to 0 0 and less than 1 0
StringBuilder.indexOf(String)	Returns the index within this string of the first occurrence of the specified substring The integer returned is the smallest value k such that this toString startsWith str k is true
Character.isDigit(int)	Determines if the specified character Unicode code point is a digit
ManagementFactory.newPlatformMXBeanProxy(MBeanServerConnection,String,Class)	Returns a proxy for a platform MXBean interface of a given MXBean name that forwards its method calls through the given MBeanServerConnection
Integer.getInteger(String)	Determines the integer value of the system property with the specified name
Character.codePointCount(CharSequence,int,int)	Returns the number of Unicode code points in the text range of the specified char sequence The text range begins at the specified beginIndex and extends to the char at index endIndex 1 Thus the length in chars of the text range is endIndex beginIndex Unpaired surrogates within the text range count as one code point each
String.String(String)	Initializes a newly created String object so that it represents the same sequence of characters as the argument in other words the newly created string is a copy of the argument string Unless an explicit copy of original is needed use of this constructor is unnecessary since Strings are immutable
Throwable.initCause(Throwable)	Initializes the cause of this throwable to the specified value
ThreadGroup.list()	Prints information about this thread group to the standard output This method is useful only for debugging
PlatformLoggingMXBean.getParentLoggerName(String)	Returns the name of the parent for the specified logger
Character.UnicodeBlock.forName(String)	Returns the UnicodeBlock with the given name Block names are determined by The Unicode Standard The file Blocks version txt defines blocks for a particular version of the standard The Character class specifies the version of the standard that it supports
StringBuilder.insert(int,char[],int,int)	Inserts the string representation of a subarray of the str array argument into this sequence The subarray begins at the specified offset and extends len chars
Math.scalb(double,int)	Return d 2scaleFactor rounded as if performed by a single correctly rounded floating point multiply to a member of the double value set See the Java Language Specification for a discussion of floating point value sets If the exponent of the result is between Double MIN EXPONENT and Double MAX EXPONENT the answer is calculated exactly If the exponent of the result would be larger than Double MAX EXPONENT an infinity is returned Note that if the result is subnormal precision may be lost that is when scalb x n is subnormal scalb scalb x n n may not equal x When the result is non NaN the result has the same sign as d
Thread.destroy()	Throws NoSuchMethodError
NegativeArraySizeException.NegativeArraySizeException(String)	Constructs a NegativeArraySizeException with the specified detail message
String.codePointAt(int)	Returns the character Unicode code point at the specified index The index refers to char values Unicode code units and ranges from 0 to length 1
EnumConstantNotPresentException.constantName()	Returns the name of the missing enum constant
Long.compareTo(Long)	Compares two Long objects numerically
MethodHandle.invoke()	Invokes the method handle allowing any caller type descriptor and optionally performing conversions on arguments and return values
ArrayIndexOutOfBoundsException.ArrayIndexOutOfBoundsException(String)	Constructs an ArrayIndexOutOfBoundsException class with the specified detail message
Field.toString()	Returns a string describing this Field The format is the access modifiers for the field if any followed by the field type followed by a space followed by the fully qualified name of the class declaring the field followed by a period followed by the name of the field
StringBuilder.append(boolean)	Appends the string representation of the boolean argument to the sequence
ReferenceQueue.poll()	Polls this queue to see if a reference object is available If one is available without further delay then it is removed from the queue and returned Otherwise this method immediately returns null
VirtualMachineError.VirtualMachineError(String)	Constructs a VirtualMachineError with the specified detail message
Enum.equals(Object)	Returns true if the specified object is equal to this enum constant
Field.setChar(Object,char)	Sets the value of a field as a char on the specified object
AnnotationFormatError.AnnotationFormatError(Throwable)	Constructs a new AnnotationFormatError with the specified cause and a detail message of cause null null cause toString which typically contains the class and detail message of cause
Math.max(float,float)	Returns the greater of two float values That is the result is the argument closer to positive infinity If the arguments have the same value the result is that same value If either value is NaN then the result is NaN Unlike the numerical comparison operators this method considers negative zero to be strictly smaller than positive zero If one argument is positive zero and the other negative zero the result is positive zero
Boolean.valueOf(boolean)	Returns a Boolean instance representing the specified boolean value If the specified boolean value is true this method returns Boolean TRUE if it is false this method returns Boolean FALSE
Character.toUpperCase(int)	Converts the character Unicode code point argument to uppercase using case mapping information from the UnicodeData file
System.getSecurityManager()	Gets the system security interface
System.setProperty(String,String)	Sets the system property indicated by the specified key
StringBuffer.append(long)	Appends the string representation of the long argument to this sequence
Process.getErrorStream()	Returns the input stream connected to the error output of the subprocess The stream obtains data piped from the error output of the process represented by this Process object
Thread.stop(Throwable)	Forces the thread to stop executing
Method.getDeclaredAnnotations()	Description copied from interface AnnotatedElement
RuntimeMXBean.getUptime()	Returns the uptime of the Java virtual machine in milliseconds
Runtime.traceInstructions(boolean)	Enables Disables tracing of instructions
ClassLoader.setPackageAssertionStatus(String,boolean)	Sets the package default assertion status for the named package The package default assertion status determines the assertion status for classes initialized in the future that belong to the named package or any of its subpackages
LockInfo.@ConstructorProperties(value={"className","identityHashCode"}),int)	Constructs a LockInfo object
Instrumentation.removeTransformer(ClassFileTransformer)	Unregisters the supplied transformer Future class definitions will not be shown to the transformer Removes the most recently added matching instance of the transformer Due to the multi threaded nature of class loading it is possible for a transformer to receive calls after it has been removed Transformers should be written defensively to expect this situation
MethodHandle.type()	Reports the type of this method handle
Runtime.getLocalizedOutputStream(OutputStream)	Creates a localized version of an output stream This method takes an OutputStream and returns an OutputStream equivalent to the argument in all respects except that it is localized as Unicode characters are written to the stream they are automatically converted to the local character set
MutableCallSite.dynamicInvoker()	Produces a method handle equivalent to an invokedynamic instruction which has been linked to this call site
Enum.ordinal()	Returns the ordinal of this enumeration constant its position in its enum declaration where the initial constant is assigned an ordinal of zero
StringBuffer.subSequence(int,int)	Returns a new character sequence that is a subsequence of this sequence
MethodHandles.filterArguments(MethodHandle,int,)	Adapts a target method handle by pre processing one or more of its arguments each with its own unary filter function and then calling the target with each pre processed argument replaced by the result of its corresponding filter function
ClassLoader.getResource(String)	Finds the resource with the given name A resource is some data images audio text etc that can be accessed by class code in a way that is independent of the location of the code
Package.isSealed(URL)	Returns true if this package is sealed with respect to the specified code source url
StackTraceElement.getMethodName()	Returns the name of the method containing the execution point represented by this stack trace element If the execution point is contained in an instance or class initializer this method will return the appropriate special method name init or clinit as per Section 3 9 of The Java Virtual Machine Specification
Integer.getInteger(String,Integer)	Returns the integer value of the system property with the specified name The first argument is treated as the name of a system property System properties are accessible through the System getProperty java lang String method
StackTraceElement.isNativeMethod()	Returns true if the method containing the execution point represented by this stack trace element is a native method
Number.floatValue()	Returns the value of the specified number as a float
Array.setFloat(Object,int,float)	Sets the value of the indexed component of the specified array object to the specified float value
InternalError.InternalError()	Constructs an InternalError with no detail message
Thread.interrupted()	Tests whether the current thread has been interrupted The interrupted status of the thread is cleared by this method In other words if this method were to be called twice in succession the second call would return false unless the current thread were interrupted again after the first call had cleared its interrupted status and before the second call had examined it
Short.compareTo(Short)	Compares two Short objects numerically
StrictMath.cos(double)	Returns the trigonometric cosine of an angle Special cases If the argument is NaN or an infinity then the result is NaN
SecurityManager.checkSystemClipboardAccess()	Throws a SecurityException if the calling thread is not allowed to access the system clipboard
Math.copySign(float,float)	Returns the first floating point argument with the sign of the second floating point argument Note that unlike the StrictMath copySign method this method does not require NaN sign arguments to be treated as positive values implementations are permitted to treat some NaN arguments as positive and other NaN arguments as negative to allow greater performance
SecurityManager.checkExec(String)	Throws a SecurityException if the calling thread is not allowed to create a subprocess
MethodHandle.asSpreader(Class,int)	Makes an array spreading method handle which accepts a trailing array argument and spreads its elements as positional arguments
MethodType.methodType(Class,List)	Finds or creates a method type with the given components
Thread.getName()	Returns this thread s name
StrictMath.min(double,double)	Returns the smaller of two double values That is the result is the value closer to negative infinity If the arguments have the same value the result is that same value If either value is NaN then the result is NaN Unlike the numerical comparison operators this method considers negative zero to be strictly smaller than positive zero If one argument is positive zero and the other is negative zero the result is negative zero
ProcessBuilder.Redirect.to(File)	Returns a redirect to write to the specified file
String.toLowerCase(Locale)	Converts all of the characters in this String to lower case using the rules of the given Locale Case mapping is based on the Unicode Standard version specified by the Character class Since case mappings are not always 1 1 char mappings the resulting String may be a different length than the original String
String.valueOf(double)	Returns the string representation of the double argument
Integer.doubleValue()	Returns the value of this Integer as a double
Math.log10(double)	Returns the base 10 logarithm of a double value
StringBuffer.capacity()	Returns the current capacity The capacity is the amount of storage available for newly inserted characters beyond which an allocation will occur
Reference.clear()	Clears this reference object Invoking this method will not cause this object to be enqueued
ThreadGroup.interrupt()	Interrupts all threads in this thread group
StringBuffer.length()	Returns the length character count
AnnotatedElement.getAnnotations()	Returns all annotations present on this element Returns an array of length zero if this element has no annotations The caller of this method is free to modify the returned array it will have no effect on the arrays returned to other callers
Character.isTitleCase(char)	Determines if the specified character is a titlecase character
StringBuilder.append(StringBuffer)	Appends the specified StringBuffer to this sequence
StringBuilder.reverse()	Causes this character sequence to be replaced by the reverse of the sequence If there are any surrogate pairs included in the sequence these are treated as single characters for the reverse operation Thus the order of the high low surrogates is never reversed
SoftReference.get()	Returns this reference object s referent If this reference object has been cleared either by the program or by the garbage collector then this method returns null
MemoryUsage.getMax()	Returns the maximum amount of memory in bytes that can be used for memory management This method returns 1 if the maximum memory size is undefined
ThreadLocal.ThreadLocal()	Creates a thread local variable
IllegalAccessError.IllegalAccessError()	Constructs an IllegalAccessError with no detail message
Boolean.booleanValue()	Returns the value of this Boolean object as a boolean primitive
Thread.currentThread()	Returns a reference to the currently executing thread object
Throwable.fillInStackTrace()	Fills in the execution stack trace This method records within this Throwable object information about the current state of the stack frames for the current thread
MethodHandles.Lookup.unreflectSetter(Field)	Produces a method handle giving write access to a reflected field
String.replaceAll(String,String)	Replaces each substring of this string that matches the given regular expression with the given replacement
Double.shortValue()	Returns the value of this Double as a short by casting to a short
StringBuilder.substring(int,int)	Returns a new String that contains a subsequence of characters currently contained in this sequence The substring begins at the specified start and extends to the character at index end 1
VolatileCallSite.VolatileCallSite(MethodHandle)	Creates a call site with a volatile binding to its target
AbstractMethodError.AbstractMethodError()	Constructs an AbstractMethodError with no detail message
StrictMath.atan2(double,double)	Returns the angle theta from the conversion of rectangular coordinates x y to polar coordinates r theta
UndeclaredThrowableException.getUndeclaredThrowable()	Returns the Throwable instance wrapped in this UndeclaredThrowableException which may be null
MethodHandleProxies.wrapperInstanceTarget(Object)	Produces or recovers a target method handle which is behaviorally equivalent to the unique method of this wrapper instance
Thread.sleep(long,int)	Causes the currently executing thread to sleep temporarily cease execution for the specified number of milliseconds plus the specified number of nanoseconds subject to the precision and accuracy of system timers and schedulers The thread does not lose ownership of any monitors
StringBuffer.ensureCapacity(int)	Ensures that the capacity is at least equal to the specified minimum
LinkageError.LinkageError(String,Throwable)	Constructs a LinkageError with the specified detail message and cause
ThreadGroup.uncaughtException(Thread,Throwable)	Called by the Java Virtual Machine when a thread in this thread group stops because of an uncaught exception and the thread does not have a specific Thread UncaughtExceptionHandler installed
StrictMath.toRadians(double)	Converts an angle measured in degrees to an approximately equivalent angle measured in radians The conversion from degrees to radians is generally inexact
Proxy.Class.forName(getName),false,cl))	
Field.setByte(Object,byte)	Sets the value of a field as a byte on the specified object
String.startsWith(String,int)	Tests if the substring of this string beginning at the specified index starts with the specified prefix
StringBuilder.getChars(int,int,char[],int)	Characters are copied from this sequence into the destination character array dst The first character to be copied is at index srcBegin the last character to be copied is at index srcEnd 1 The total number of characters to be copied is srcEnd srcBegin The characters are copied into the subarray of dst starting at index dstBegin and ending at index dstbegin srcEnd srcBegin 1
ProcessBuilder.redirectOutput(Redirect)	Sets this process builder s standard output destination
Double.equals(Object)	Compares this object against the specified object The result is true if and only if the argument is not null and is a Double object that represents a double that has the same value as the double represented by this object For this purpose two double values are considered to be the same if and only if the method doubleToLongBits double returns the identical long value when applied to each
MethodHandles.Lookup.findStaticGetter(Class,String,Class)	Produces a method handle giving read access to a static field
Thread.activeCount()	Returns an estimate of the number of active threads in the current thread s thread group and its subgroups Recursively iterates over all subgroups in the current thread s thread group
Object.wait()	Causes the current thread to wait until another thread invokes the notify method or the notifyAll method for this object
ClassLoader.setClassAssertionStatus(String,boolean)	Sets the desired assertion status for the named top level class in this class loader and any nested classes contained therein This setting takes precedence over the class loader s default assertion status and over any applicable per package default This method has no effect if the named class has already been initialized Once a class is initialized its assertion status cannot change If the named class is not a top level class this invocation will have no effect on the actual assertion status of any class
StringBuffer.append(double)	Appends the string representation of the double argument to this sequence
ThreadGroup.ThreadGroup(ThreadGroup,String)	Creates a new thread group The parent of this new group is the specified thread group
ThreadGroup.parentOf(ThreadGroup)	Tests if this thread group is either the thread group argument or one of its ancestor thread groups
StackTraceElement.getLineNumber()	Returns the line number of the source line containing the execution point represented by this stack trace element Generally this is derived from the LineNumberTable attribute of the relevant class file as per The Java Virtual Machine Specification Section 4 7 8
SecurityManager.checkTopLevelWindow(Object)	Returns false if the calling thread is not trusted to bring up the top level window indicated by the window argument In this case the caller can still decide to show the window but the window should include some sort of visual warning If the method returns true then the window can be shown without any special restrictions
MethodHandles.Lookup.findConstructor(Class,MethodType)	Produces a method handle which creates an object and initializes it using the constructor of the specified type
ManagementFactory.getMemoryPoolMXBeans()	Returns a list of MemoryPoolMXBean objects in the Java virtual machine
ThreadInfo.getWaitedCount()	Returns the total number of times that the thread associated with this ThreadInfo waited for notification
AssertionError.AssertionError(double)	Constructs an AssertionError with its detail message derived from the specified double which is converted to a string as defined in section 15 18 1 1 of The Java Language Specification
ConstantCallSite.getTarget()	Returns the target method of the call site which behaves like a final field of the ConstantCallSite
ArithmeticException.ArithmeticException(String)	Constructs an ArithmeticException with the specified detail message
Constructor.hashCode()	Returns a hashcode for this Constructor The hashcode is the same as the hashcode for the underlying constructor s declaring class name
StringBuilder.append(long)	Appends the string representation of the long argument to this sequence
ThreadInfo.getLockName()	Returns the string representation of an object for which the thread associated with this ThreadInfo is blocked waiting
Number.Number()	
Long.Long(long)	Constructs a newly allocated Long object that represents the specified long argument
Long.getLong(String,long)	Determines the long value of the system property with the specified name
Boolean.compareTo(Boolean)	Compares this Boolean instance with another
Integer.byteValue()	Returns the value of this Integer as a byte
MethodHandle.toString()	Returns a string representation of the method handle starting with the string MethodHandle and ending with the string representation of the method handle s type
Long.parseLong(String,int)	Parses the string argument as a signed long in the radix specified by the second argument The characters in the string must all be digits of the specified radix as determined by whether Character digit char int returns a nonnegative value except that the first character may be an ASCII minus sign u002D to indicate a negative value or an ASCII plus sign u002B to indicate a positive value The resulting long value is returned
String.lastIndexOf(String,int)	Returns the index within this string of the last occurrence of the specified substring searching backward starting at the specified index
GarbageCollectorMXBean.getCollectionTime()	Returns the approximate accumulated collection elapsed time in milliseconds This method returns 1 if the collection elapsed time is undefined for this collector
String.replace(char,char)	Returns a new string resulting from replacing all occurrences of oldChar in this string with newChar
Long.valueOf(long)	Returns a Long instance representing the specified long value
String.valueOf(long)	Returns the string representation of the long argument
Character.isWhitespace(char)	Determines if the specified character is white space according to Java
InterruptedException.InterruptedException(String)	Constructs an InterruptedException with the specified detail message
Runtime.gc()	Runs the garbage collector
Integer.reverse(int)	Returns the value obtained by reversing the order of the bits in the two s complement binary representation of the specified int value
Boolean.parseBoolean(String)	Parses the string argument as a boolean The boolean returned represents the value true if the string argument is not null and is equal ignoring case to the string true Example Boolean parseBoolean True returns true
SecurityManager.checkConnect(String,int)	Throws a SecurityException if the calling thread is not allowed to open a socket connection to the specified host and port number
SecurityManager.checkWrite(FileDescriptor)	Throws a SecurityException if the calling thread is not allowed to write to the specified file descriptor
Throwable.Throwable(Throwable)	Constructs a new throwable with the specified cause and a detail message of cause null null cause toString which typically contains the class and detail message of cause
StringBuffer.getChars(int,int,char[],int)	Characters are copied from this sequence into the destination character array dst The first character to be copied is at index srcBegin the last character to be copied is at index srcEnd 1 The total number of characters to be copied is srcEnd srcBegin The characters are copied into the subarray of dst starting at index dstBegin and ending at index dstbegin srcEnd srcBegin 1
Runtime.availableProcessors()	Returns the number of processors available to the Java virtual machine
Long.longValue()	Returns the value of this Long as a long value
Modifier.classModifiers()	Return an int value OR ing together the source language modifiers that can be applied to a class
StringBuilder.offsetByCodePoints(int,int)	Returns the index within this sequence that is offset from the given index by codePointOffset code points Unpaired surrogates within the text range given by index and codePointOffset count as one code point each
MutableCallSite.syncAll(MutableCallSite[])	Performs a synchronization operation on each call site in the given array forcing all other threads to throw away any cached values previously loaded from the target of any of the call sites
Math.rint(double)	Returns the double value that is closest in value to the argument and is equal to a mathematical integer If two double values that are mathematical integers are equally close the result is the integer value that is even Special cases If the argument value is already equal to a mathematical integer then the result is the same as the argument
Runtime.exec(String,String[],File)	Executes the specified string command in a separate process with the specified environment and working directory
StringBuffer.insert(int,char[])	Inserts the string representation of the char array argument into this sequence
Readable.read(CharBuffer)	Attempts to read characters into the specified character buffer
ProcessBuilder.redirectErrorStream(boolean)	Sets this process builder s redirectErrorStream property
Class.getDeclaringClass()	If the class or interface represented by this Class object is a member of another class returns the Class object representing the class in which it was declared This method returns null if this class or interface is not a member of any other class If this Class object represents an array class a primitive type or void then this method returns null
SecurityException.SecurityException(Throwable)	Creates a SecurityException with the specified cause and a detail message of cause null null cause toString which typically contains the class and detail message of cause
StringBuilder.insert(int,double)	Inserts the string representation of the double argument into this sequence
String.getBytes(String)	Encodes this String into a sequence of bytes using the named charset storing the result into a new byte array
Math.sin(double)	Returns the trigonometric sine of an angle Special cases If the argument is NaN or an infinity then the result is NaN
MethodHandles.filterReturnValue(MethodHandle,MethodHandle)	Adapts a target method handle by post processing its return value if any with a filter another method handle
Long.reverseBytes(long)	Returns the value obtained by reversing the order of the bytes in the two s complement representation of the specified long value
System.loadLibrary(String)	Loads the system library specified by the libname argument The manner in which a library name is mapped to the actual system library is system dependent
ProcessBuilder.Redirect.type()	Returns the type of this Redirect
StrictMath.nextUp(double)	Returns the floating point value adjacent to d in the direction of positive infinity This method is semantically equivalent to nextAfter d Double POSITIVE INFINITY however a nextUp implementation may run faster than its equivalent nextAfter call
StrictMath.asin(double)	Returns the arc sine of a value the returned angle is in the range pi 2 through pi 2 Special cases If the argument is NaN or its absolute value is greater than 1 then the result is NaN
MemoryPoolMXBean.isUsageThresholdSupported()	Tests if this memory pool supports usage threshold
RuntimeException.RuntimeException(String)	Constructs a new runtime exception with the specified detail message
OutOfMemoryError.OutOfMemoryError()	Constructs an OutOfMemoryError with no detail message
BootstrapMethodError.BootstrapMethodError(Throwable)	Constructs a BootstrapMethodError with the specified cause
Integer.compareTo(Integer)	Compares two Integer objects numerically
MemoryNotificationInfo.from(CompositeData)	Returns a MemoryNotificationInfo object represented by the given CompositeData
GarbageCollectorMXBean.getCollectionCount()	Returns the total number of collections that have occurred
StrictMath.tanh(double)	Returns the hyperbolic tangent of a double value
Integer.toString(int,int)	Returns a string representation of the first argument in the radix specified by the second argument
ProcessBuilder.directory()	Returns this process builder s working directory
ManagementFactory.getPlatformManagementInterfaces()	Returns the set of Class objects subinterface of PlatformManagedObject representing all management interfaces for monitoring and managing the Java platform
UndeclaredThrowableException.getCause()	Returns the cause of this exception the Throwable instance wrapped in this UndeclaredThrowableException which may be null
StringBuilder.capacity()	Returns the current capacity The capacity is the amount of storage available for newly inserted characters beyond which an allocation will occur
MutableCallSite.MutableCallSite(MethodHandle)	Creates a call site object with an initial target method handle
Short.reverseBytes(short)	Returns the value obtained by reversing the order of the bytes in the two s complement representation of the specified short value
ProcessBuilder.Redirect.from(File)	Returns a redirect to read from the specified file
String.format(String,)	Returns a formatted string using the specified format string and arguments
String.String(byte[])	Constructs a new String by decoding the specified array of bytes using the platform s default charset The length of the new String is a function of the charset and hence may not be equal to the length of the byte array
Thread.Thread(String)	Allocates a new Thread object This constructor has the same effect as Thread null null name
String.compareTo(String)	Compares two strings lexicographically
Math.abs(long)	Returns the absolute value of a long value
Number.doubleValue()	Returns the value of the specified number as a double
String.contentEquals(StringBuffer)	Compares this string to the specified StringBuffer The result is true if and only if this String represents the same sequence of characters as the specified StringBuffer
System.load(String)	Loads a code file with the specified filename from the local file system as a dynamic library The filename argument must be a complete path name
Character.toLowerCase(char)	Converts the character argument to lowercase using case mapping information from the UnicodeData file
System.currentTimeMillis()	Returns the current time in milliseconds Note that while the unit of time of the return value is a millisecond the granularity of the value depends on the underlying operating system and may be larger For example many operating systems measure time in units of tens of milliseconds
Boolean.hashCode()	Returns a hash code for this Boolean object
Short.valueOf(short)	Returns a Short instance representing the specified short value
ClassLoader.getSystemResourceAsStream(String)	Open for reading a resource of the specified name from the search path used to load classes This method locates the resource through the system class loader see getSystemClassLoader
MemoryPoolMXBean.getUsage()	Returns an estimate of the memory usage of this memory pool
Class.getSuperclass()	Returns the Class representing the superclass of the entity class interface primitive type or void represented by this Class If this Class represents either the Object class an interface a primitive type or void then null is returned If this object represents an array class then the Class object representing the Object class is returned
String.valueOf(char)	Returns the string representation of the char argument
Character.isJavaIdentifierPart(int)	Determines if the character Unicode code point may be part of a Java identifier as other than the first character
ClassNotFoundException.ClassNotFoundException(String)	Constructs a ClassNotFoundException with the specified detail message
Instrumentation.appendToSystemClassLoaderSearch(JarFile)	Specifies a JAR file with instrumentation classes to be defined by the system class loader
Float.doubleValue()	Returns the double value of this Float object
ProcessBuilder.directory(File)	Sets this process builder s working directory
System.mapLibraryName(String)	Maps a library name into a platform specific string representing a native library
Runtime.traceMethodCalls(boolean)	Enables Disables tracing of method calls
Character.isSupplementaryCodePoint(int)	Determines whether the specified character Unicode code point is in the supplementary character range
Iterable.iterator()	Returns an iterator over a set of elements of type T
SecurityManager.checkRead(String,Object)	Throws a SecurityException if the specified security context is not allowed to read the file specified by the string argument The context must be a security context returned by a previous call to getSecurityContext
VolatileCallSite.setTarget(MethodHandle)	Updates the target method of this call site as a volatile variable
CallSite.type()	Returns the type of this call site s target
StrictMath.round(float)	Returns the closest int to the argument with ties rounding up
StrictMath.expm1(double)	Returns ex 1 Note that for values of x near 0 the exact sum of expm1 x 1 is much closer to the true result of ex than exp x
Array.setLong(Object,int,long)	Sets the value of the indexed component of the specified array object to the specified long value
Thread.interrupt()	Interrupts this thread
Class.getSimpleName()	Returns the simple name of the underlying class as given in the source code Returns an empty string if the underlying class is anonymous
Modifier.toString(int)	Return a string describing the access modifier flags in the specified modifier For example public final synchronized strictfp The modifier names are returned in an order consistent with the suggested modifier orderings given in sections 8 1 1 8 3 1 8 4 3 8 8 3 and 9 1 1 of The Java Language Specification
StrictMath.ulp(float)	Returns the size of an ulp of the argument An ulp of a float value is the positive distance between this floating point value and the float value next larger in magnitude Note that for non NaN x ulp x ulp x
Integer.valueOf(int)	Returns an Integer instance representing the specified int value If a new Integer instance is not required this method should generally be used in preference to the constructor Integer int as this method is likely to yield significantly better space and time performance by caching frequently requested values
Class.getDeclaredMethod(String,Class)	Returns a Method object that reflects the specified declared method of the class or interface represented by this Class object The name parameter is a String that specifies the simple name of the desired method and the parameterTypes parameter is an array of Class objects that identify the method s formal parameter types in declared order If more than one method with the same parameter types is declared in a class and one of these methods has a return type that is more specific than any of the others that method is returned otherwise one of the methods is chosen arbitrarily If the name is init or clinit a NoSuchMethodException is raised
System.gc()	Runs the garbage collector
SecurityManager.checkPermission(Permission,Object)	Throws a SecurityException if the specified security context is denied access to the resource specified by the given permission
Float.Float(float)	Constructs a newly allocated Float object that represents the primitive float argument
MethodType.erase()	Erases all reference types to Object
MemoryMXBean.isVerbose()	Tests if verbose output for the memory system is enabled
Thread.isInterrupted()	Tests whether this thread has been interrupted The interrupted status of the thread is unaffected by this method
IllegalClassFormatException.IllegalClassFormatException(String)	Constructs an IllegalClassFormatException with the specified detail message
String.copyValueOf(char[],int,int)	Returns a String that represents the character sequence in the array specified
ProcessBuilder.ProcessBuilder()	Constructs a process builder with the specified operating system program and arguments This is a convenience constructor that sets the process builder s command to a string list containing the same strings as the command array in the same order It is not checked whether command corresponds to a valid operating system command
EnumConstantNotPresentException.enumType()	Returns the type of the missing enum constant
Float.equals(Object)	Compares this object against the specified object The result is true if and only if the argument is not null and is a Float object that represents a float with the same value as the float represented by this object For this purpose two float values are considered to be the same if and only if the method floatToIntBits float returns the identical int value when applied to each
Runtime.exec(String[])	Executes the specified command and arguments in a separate process
StackOverflowError.StackOverflowError()	Constructs a StackOverflowError with no detail message
Character.getType(char)	Returns a value indicating a character s general category
Long.toString(long,int)	Returns a string representation of the first argument in the radix specified by the second argument
MethodHandles.Lookup.lookupModes()	Tells which access protection classes of members this lookup object can produce
StringBuffer.reverse()	Causes this character sequence to be replaced by the reverse of the sequence If there are any surrogate pairs included in the sequence these are treated as single characters for the reverse operation Thus the order of the high low surrogates is never reversed
Float.shortValue()	Returns the value of this Float as a short by casting to a short
StrictMath.min(int,int)	Returns the smaller of two int values That is the result the argument closer to the value of Integer MIN VALUE If the arguments have the same value the result is that same value
Double.doubleToRawLongBits(double)	Returns a representation of the specified floating point value according to the IEEE 754 floating point double format bit layout preserving Not a Number NaN values
Modifier.isFinal(int)	Return true if the integer argument includes the final modifier false otherwise
System.clearProperty(String)	Removes the system property indicated by the specified key
Integer.toOctalString(int)	Returns a string representation of the integer argument as an unsigned integer in base 8
Float.byteValue()	Returns the value of this Float as a byte by casting to a byte
Character.toCodePoint(char,char)	Converts the specified surrogate pair to its supplementary code point value This method does not validate the specified surrogate pair The caller must validate it using isSurrogatePair if necessary
ThreadMXBean.getPeakThreadCount()	Returns the peak live thread count since the Java virtual machine started or peak was reset
ThreadGroup.setMaxPriority(int)	Sets the maximum priority of the group Threads in the thread group that already have a higher priority are not affected
IllegalAccessException.IllegalAccessException()	Constructs an IllegalAccessException without a detail message
StackOverflowError.StackOverflowError(String)	Constructs a StackOverflowError with the specified detail message
System.getProperties()	Determines the current system properties
Character.digit(int,int)	Returns the numeric value of the specified character Unicode code point in the specified radix
ThreadMXBean.getThreadInfo(long[],int)	Returns the thread info for each thread whose ID is in the input array ids with stack trace of a specified number of stack trace elements
Throwable.getSuppressed()	Returns an array containing all of the exceptions that were suppressed typically by the try with resources statement in order to deliver this exception
Class.getGenericSuperclass()	Returns the Type representing the direct superclass of the entity class interface primitive type or void represented by this Class
Math.tan(double)	Returns the trigonometric tangent of an angle Special cases If the argument is NaN or an infinity then the result is NaN
MethodHandle.isVarargsCollector()	Determines if this method handle supports variable arity calls
Character.charCount(int)	Determines the number of char values needed to represent the specified character Unicode code point If the specified character is equal to or greater than 0x10000 then the method returns 2 Otherwise the method returns 1
Double.isNaN(double)	Returns true if the specified number is a Not a Number NaN value false otherwise
Boolean.compare(boolean,boolean)	Compares two boolean values
Array.getFloat(Object,int)	Returns the value of the indexed component in the specified array object as a float
ThreadMXBean.getThreadUserTime(long)	Returns the CPU time that a thread of the specified ID has executed in user mode in nanoseconds
ThreadMXBean.findMonitorDeadlockedThreads()	Finds cycles of threads that are in deadlock waiting to acquire object monitors That is threads that are blocked waiting to enter a synchronization block or waiting to reenter a synchronization block after an Object wait call where each thread owns one monitor while trying to obtain another monitor already held by another thread in a cycle
Long.shortValue()	Returns the value of this Long as a short
Float.isInfinite()	Returns true if this Float value is infinitely large in magnitude false otherwise
Math.expm1(double)	Returns ex 1 Note that for values of x near 0 the exact sum of expm1 x 1 is much closer to the true result of ex than exp x
ManagementFactory.getClassLoadingMXBean()	Returns the managed bean for the class loading system of the Java virtual machine
Math.IEEEremainder(double,double)	Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard
Math.min(double,double)	Returns the smaller of two double values That is the result is the value closer to negative infinity If the arguments have the same value the result is that same value If either value is NaN then the result is NaN Unlike the numerical comparison operators this method considers negative zero to be strictly smaller than positive zero If one argument is positive zero and the other is negative zero the result is negative zero
ThreadInfo.getStackTrace()	Returns the stack trace of the thread associated with this ThreadInfo
Character.toString()	Returns a String object representing this Character s value The result is a string of length 1 whose sole component is the primitive char value represented by this Character object
Process.getOutputStream()	Returns the output stream connected to the normal input of the subprocess Output to the stream is piped into the standard input of the process represented by this Process object
StringBuilder.insert(int,char[])	Inserts the string representation of the char array argument into this sequence
Thread.getThreadGroup()	Returns the thread group to which this thread belongs
Class.getDeclaredFields()	Returns an array of Field objects reflecting all the fields declared by the class or interface represented by this Class object This includes public protected default package access and private fields but excludes inherited fields
Byte.valueOf(byte)	Returns a Byte instance representing the specified byte value
StrictMath.min(float,float)	Returns the smaller of two float values That is the result is the value closer to negative infinity If the arguments have the same value the result is that same value If either value is NaN then the result is NaN Unlike the numerical comparison operators this method considers negative zero to be strictly smaller than positive zero If one argument is positive zero and the other is negative zero the result is negative zero
Thread.resume()	Resumes a suspended thread
Math.signum(double)	Returns the signum function of the argument zero if the argument is zero 1 0 if the argument is greater than zero 1 0 if the argument is less than zero
MethodHandle.asFixedArity()	Makes a fixed arity method handle which is otherwise equivalent to the the current method handle
ClassValue.get(Class)	Returns the value for the given class
Thread.setUncaughtExceptionHandler(UncaughtExceptionHandler)	Set the handler invoked when this thread abruptly terminates due to an uncaught exception
Method.getAnnotation(Class)	Description copied from interface AnnotatedElement
Package.getSpecificationVersion()	Returns the version number of the specification that this package implements
StrictMath.ceil(double)	Returns the smallest closest to negative infinity double value that is greater than or equal to the argument and is equal to a mathematical integer Special cases If the argument value is already equal to a mathematical integer then the result is the same as the argument If the argument is NaN or an infinity or positive zero or negative zero then the result is the same as the argument If the argument value is less than zero but greater than 1 0 then the result is negative zero Note that the value of StrictMath ceil x is exactly the value of StrictMath floor x
Long.floatValue()	Returns the value of this Long as a float
RuntimeMXBean.getVmVersion()	Returns the Java virtual machine implementation version
Character.compare(char,char)	Compares two char values numerically
StringBuilder.StringBuilder(String)	Constructs a string builder initialized to the contents of the specified string The initial capacity of the string builder is 16 plus the length of the string argument
StringBuffer.insert(int,long)	Inserts the string representation of the long argument into this sequence
Runtime.addShutdownHook(Thread)	Registers a new virtual machine shutdown hook
Character.isIdentifierIgnorable(int)	Determines if the specified character Unicode code point should be regarded as an ignorable character in a Java identifier or a Unicode identifier
SecurityManager.checkMemberAccess(Class,int)	Throws a SecurityException if the calling thread is not allowed to access members
Double.Double(String)	Constructs a newly allocated Double object that represents the floating point value of type double represented by the string The string is converted to a double value as if by the valueOf method
Math.copySign(double,double)	Returns the first floating point argument with the sign of the second floating point argument Note that unlike the StrictMath copySign method this method does not require NaN sign arguments to be treated as positive values implementations are permitted to treat some NaN arguments as positive and other NaN arguments as negative to allow greater performance
IndexOutOfBoundsException.IndexOutOfBoundsException()	Constructs an IndexOutOfBoundsException with no detail message
Integer.valueOf(String,int)	Returns an Integer object holding the value extracted from the specified String when parsed with the radix given by the second argument The first argument is interpreted as representing a signed integer in the radix specified by the second argument exactly as if the arguments were given to the parseInt java lang String int method The result is an Integer object that represents the integer value specified by the string
SecurityManager.checkPropertyAccess(String)	Throws a SecurityException if the calling thread is not allowed to access the system property with the specified key name
Integer.lowestOneBit(int)	Returns an int value with at most a single one bit in the position of the lowest order rightmost one bit in the specified int value Returns zero if the specified value has no one bits in its two s complement binary representation that is if it is equal to zero
Long.hashCode()	Returns a hash code for this Long The result is the exclusive OR of the two halves of the primitive long value held by this Long object That is the hashcode is the value of the expression int this longValue this longValue 32
Runtime.exit(int)	Terminates the currently running Java virtual machine by initiating its shutdown sequence This method never returns normally The argument serves as a status code by convention a nonzero status code indicates abnormal termination
NegativeArraySizeException.NegativeArraySizeException()	Constructs a NegativeArraySizeException with no detail message
Math.atan(double)	Returns the arc tangent of a value the returned angle is in the range pi 2 through pi 2 Special cases If the argument is NaN then the result is NaN
Math.signum(float)	Returns the signum function of the argument zero if the argument is zero 1 0f if the argument is greater than zero 1 0f if the argument is less than zero
Enum.compareTo(E)	Compares this enum with the specified object for order Returns a negative integer zero or a positive integer as this object is less than equal to or greater than the specified object
String.String(char[])	Allocates a new String so that it represents the sequence of characters currently contained in the character array argument The contents of the character array are copied subsequent modification of the character array does not affect the newly created string
RuntimeMXBean.getSystemProperties()	Returns a map of names and values of all system properties
Runtime.load(String)	Loads the specified filename as a dynamic library The filename argument must be a complete path name for example Runtime getRuntime load home avh lib libX11 so
Character.isWhitespace(int)	Determines if the specified character Unicode code point is white space according to Java A character is a Java whitespace character if and only if it satisfies one of the following criteria It is a Unicode space character SPACE SEPARATOR LINE SEPARATOR or PARAGRAPH SEPARATOR but is not also a non breaking space u00A0 u2007 u202F
Enum.getDeclaringClass()	Returns the Class object corresponding to this enum constant s enum type Two enum constants e1 and e2 are of the same enum type if and only if e1 getDeclaringClass e2 getDeclaringClass
Double.isInfinite(double)	Returns true if the specified number is infinitely large in magnitude false otherwise
Math.min(float,float)	Returns the smaller of two float values That is the result is the value closer to negative infinity If the arguments have the same value the result is that same value If either value is NaN then the result is NaN Unlike the numerical comparison operators this method considers negative zero to be strictly smaller than positive zero If one argument is positive zero and the other is negative zero the result is negative zero
AnnotatedElement.isAnnotationPresent(Class)	Returns true if an annotation for the specified type is present on this element else false This method is designed primarily for convenient access to marker annotations
Constructor.getParameterAnnotations()	Returns an array of arrays that represent the annotations on the formal parameters in declaration order of the method represented by this Constructor object Returns an array of length zero if the underlying method is parameterless If the method has one or more parameters a nested array of length zero is returned for each parameter with no annotations The annotation objects contained in the returned arrays are serializable The caller of this method is free to modify the returned arrays it will have no effect on the arrays returned to other callers
MethodHandleProxies.wrapperInstanceType(Object)	Recovers the unique single method interface type for which this wrapper instance was created
SecurityManager.checkMulticast(InetAddress,byte)	Throws a SecurityException if the calling thread is not allowed to use join leave send receive IP multicast
IllegalClassFormatException.IllegalClassFormatException()	Constructs an IllegalClassFormatException with no detail message
MemoryUsage.MemoryUsage(long,long,long,long)	Constructs a MemoryUsage object
StringBuffer.append(CharSequence,int,int)	Appends a subsequence of the specified CharSequence to this sequence
StrictMath.ulp(double)	Returns the size of an ulp of the argument An ulp of a double value is the positive distance between this floating point value and the double value next larger in magnitude Note that for non NaN x ulp x ulp x
SecurityManager.checkExit(int)	Throws a SecurityException if the calling thread is not allowed to cause the Java Virtual Machine to halt with the specified status code
Process.Process()	
Short.valueOf(String,int)	Returns a Short object holding the value extracted from the specified String when parsed with the radix given by the second argument The first argument is interpreted as representing a signed short in the radix specified by the second argument exactly as if the argument were given to the parseShort java lang String int method The result is a Short object that represents the short value specified by the string
Integer.Integer(int)	Constructs a newly allocated Integer object that represents the specified int value
String.split(String)	Splits this string around matches of the given regular expression
Math.max(int,int)	Returns the greater of two int values That is the result is the argument closer to the value of Integer MAX VALUE If the arguments have the same value the result is that same value
CloneNotSupportedException.CloneNotSupportedException()	Constructs a CloneNotSupportedException with no detail message
Class.desiredAssertionStatus()	Returns the assertion status that would be assigned to this class if it were to be initialized at the time this method is invoked
String.intern()	Returns a canonical representation for the string object
StringBuffer.charAt(int)	Returns the char value in this sequence at the specified index
AssertionError.AssertionError(char)	Constructs an AssertionError with its detail message derived from the specified char which is converted to a string as defined in section 15 18 1 1 of The Java Language Specification
ThreadInfo.getWaitedTime()	Returns the approximate accumulated elapsed time in milliseconds that the thread associated with this ThreadInfo has waited for notification since thread contention monitoring is enabled
StringBuffer.append(CharSequence)	Appends the specified CharSequence to this sequence
RuntimeException.RuntimeException(String,Throwable)	Constructs a new runtime exception with the specified detail message and cause Note that the detail message associated with cause is not automatically incorporated in this runtime exception s detail message
StringBuilder.trimToSize()	Attempts to reduce storage used for the character sequence
MemoryPoolMXBean.isCollectionUsageThresholdSupported()	Tests if this memory pool supports a collection usage threshold
Short.shortValue()	Returns the value of this Short as a short
StringBuilder.append(char)	Appends the string representation of the char argument to this sequence
Long.parseLong(String)	Parses the string argument as a signed decimal long
String.subSequence(int,int)	Returns a new character sequence that is a subsequence of this sequence
Package.getAnnotation(Class)	Description copied from interface AnnotatedElement
Long.Long(String)	Constructs a newly allocated Long object that represents the long value indicated by the String parameter The string is converted to a long value in exactly the manner used by the parseLong method for radix 10
Class.getCanonicalName()	Returns the canonical name of the underlying class as defined by the Java Language Specification Returns null if the underlying class does not have a canonical name i e if it is a local or anonymous class or an array whose component type does not have a canonical name
ThreadGroup.getName()	Returns the name of this thread group
Instrumentation.retransformClasses(Class)	Retransform the supplied set of classes
ThreadMXBean.getAllThreadIds()	Returns all live thread IDs
Process.waitFor()	Causes the current thread to wait if necessary until the process represented by this Process object has terminated This method returns immediately if the subprocess has already terminated If the subprocess has not yet terminated the calling thread will be blocked until the subprocess exits
String.endsWith(String)	Tests if this string ends with the specified suffix
GenericSignatureFormatError.GenericSignatureFormatError()	
Field.getByte(Object)	Gets the value of a static or instance byte field
String.startsWith(String)	Tests if this string starts with the specified prefix
Field.getDouble(Object)	Gets the value of a static or instance field of type double or of another primitive type convertible to type double via a widening conversion
Proxy.newProxyInstance(ClassLoader,Class,InvocationHandler)	Returns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler This method is equivalent to Proxy getProxyClass loader interfaces
Float.hashCode()	Returns a hash code for this Float object The result is the integer bit representation exactly as produced by the method floatToIntBits float of the primitive float value represented by this Float object
String.toUpperCase(Locale)	Converts all of the characters in this String to upper case using the rules of the given Locale Case mapping is based on the Unicode Standard version specified by the Character class Since case mappings are not always 1 1 char mappings the resulting String may be a different length than the original String
Character.forDigit(int,int)	Determines the character representation for a specific digit in the specified radix If the value of radix is not a valid radix or the value of digit is not a valid digit in the specified radix the null character u0000 is returned
Constructor.toString()	Returns a string describing this Constructor The string is formatted as the constructor access modifiers if any followed by the fully qualified name of the declaring class followed by a parenthesized comma separated list of the constructor s formal parameter types For example public java util Hashtable int float The only possible modifiers for constructors are the access modifiers public protected or private Only one of these may appear or none if the constructor has default package access
Class.isSynthetic()	Returns true if this class is a synthetic class returns false otherwise
Thread.setContextClassLoader(ClassLoader)	Sets the context ClassLoader for this Thread The context ClassLoader can be set when a thread is created and allows the creator of the thread to provide the appropriate class loader through getContextClassLoader to code running in the thread when loading classes and resources
ManagementFactory.getPlatformMXBeans(Class)	Returns the list of platform MXBeans implementing the given mxbeanInterface in the Java virtual machine
StringBuffer.StringBuffer()	Constructs a string buffer with no characters in it and an initial capacity of 16 characters
MemoryNotificationInfo.getUsage()	Returns the memory usage of the memory pool when this notification was constructed
Array.getChar(Object,int)	Returns the value of the indexed component in the specified array object as a char
Integer.compare(int,int)	Compares two int values numerically
ManagementFactory.getPlatformMXBean(Class)	Returns the platform MXBean implementing the given mxbeanInterface which is specified to have one single instance in the Java virtual machine
RuntimeMXBean.getManagementSpecVersion()	Returns the version of the specification for the management interface implemented by the running Java virtual machine
Byte.floatValue()	Returns the value of this Byte as a float
Long.reverse(long)	Returns the value obtained by reversing the order of the bits in the two s complement binary representation of the specified long value
MethodHandle.asVarargsCollector(Class)	Makes a variable arity adapter which is able to accept any number of trailing positional arguments and collect them into an array argument
MethodHandles.Lookup.findVirtual(Class,String,MethodType)	Produces a method handle for a virtual method
ClassDefinition.getDefinitionClassFile()	Returns the array of bytes that contains the new class file
ClassCastException.ClassCastException()	Constructs a ClassCastException with no detail message
Field.setInt(Object,int)	Sets the value of a field as an int on the specified object
Long.numberOfLeadingZeros(long)	Returns the number of zero bits preceding the highest order leftmost one bit in the two s complement binary representation of the specified long value Returns 64 if the specified value has no one bits in its two s complement representation in other words if it is equal to zero
WrongMethodTypeException.WrongMethodTypeException()	Constructs a WrongMethodTypeException with no detail message
String.String(byte[],int,int)	Constructs a new String by decoding the specified subarray of bytes using the platform s default charset The length of the new String is a function of the charset and hence may not be equal to the length of the subarray
Method.getParameterAnnotations()	Returns an array of arrays that represent the annotations on the formal parameters in declaration order of the method represented by this Method object Returns an array of length zero if the underlying method is parameterless If the method has one or more parameters a nested array of length zero is returned for each parameter with no annotations The annotation objects contained in the returned arrays are serializable The caller of this method is free to modify the returned arrays it will have no effect on the arrays returned to other callers
ThreadGroup.isDaemon()	Tests if this thread group is a daemon thread group A daemon thread group is automatically destroyed when its last thread is stopped or its last thread group is destroyed
String.String(byte[],int,int,int)	Allocates a new String constructed from a subarray of an array of 8 bit integer values
ThreadMXBean.isThreadContentionMonitoringEnabled()	Tests if thread contention monitoring is enabled
BootstrapMethodError.BootstrapMethodError(String)	Constructs a BootstrapMethodError with the specified detail message
MemoryManagerMXBean.getName()	Returns the name representing this memory manager
Class.forName(String,boolean,ClassLoader)	Returns the Class object associated with the class or interface with the given string name using the given class loader
Array.set(Object,int,Object)	Sets the value of the indexed component of the specified array object to the specified new value The new value is first automatically unwrapped if the array has a primitive component type
Thread.Thread(ThreadGroup,Runnable,String,long)	Allocates a new Thread object so that it has target as its run object has the specified name as its name and belongs to the thread group referred to by group and has the specified stack size
Reference.isEnqueued()	Tells whether or not this reference object has been enqueued either by the program or by the garbage collector If this reference object was not registered with a queue when it was created then this method will always return false
StrictMath.log(double)	Returns the natural logarithm base e of a double value Special cases If the argument is NaN or less than zero then the result is NaN
UnmodifiableClassException.UnmodifiableClassException(String)	Constructs an UnmodifiableClassException with the specified detail message
RuntimeException.RuntimeException(Throwable)	Constructs a new runtime exception with the specified cause and a detail message of cause null null cause toString which typically contains the class and detail message of cause This constructor is useful for runtime exceptions that are little more than wrappers for other throwables
Byte.equals(Object)	Compares this object to the specified object The result is true if and only if the argument is not null and is a Byte object that contains the same byte value as this object
Runtime.freeMemory()	Returns the amount of free memory in the Java Virtual Machine
LinkageError.LinkageError(String)	Constructs a LinkageError with the specified detail message
ReflectiveOperationException.ReflectiveOperationException(Throwable)	Constructs a new exception with the specified cause and a detail message of cause null null cause toString which typically contains the class and detail message of cause
MonitorInfo.getLockedStackFrame()	Returns the stack frame that locked the object monitor
Throwable.setStackTrace(StackTraceElement[])	Sets the stack trace elements that will be returned by getStackTrace and printed by printStackTrace and related methods
SwitchPoint.invalidateAll(SwitchPoint[])	Sets all of the given switch points into the invalid state
StrictMath.acos(double)	Returns the arc cosine of a value the returned angle is in the range 0 0 through pi Special case If the argument is NaN or its absolute value is greater than 1 then the result is NaN
ClassNotFoundException.getException()	Returns the exception that was raised if an error occurred while attempting to load the class Otherwise returns null
Runtime.halt(int)	Forcibly terminates the currently running Java virtual machine This method never returns normally
Instrumentation.addTransformer(ClassFileTransformer)	Registers the supplied transformer
PlatformLoggingMXBean.setLoggerLevel(String,String)	Sets the specified logger to the specified new level
Character.toTitleCase(char)	Converts the character argument to titlecase using case mapping information from the UnicodeData file If a character has no explicit titlecase mapping and is not itself a titlecase char according to UnicodeData then the uppercase mapping is returned as an equivalent titlecase mapping If the char argument is already a titlecase char the same char value will be returned
MethodType.returnType()	Returns the return type of this method type
Field.hashCode()	Returns a hashcode for this Field This is computed as the exclusive or of the hashcodes for the underlying field s declaring class name and its name
IllegalArgumentException.IllegalArgumentException()	Constructs an IllegalArgumentException with no detail message
ThreadGroup.checkAccess()	Determines if the currently running thread has permission to modify this thread group
Package.getSpecificationVendor()	Return the name of the organization vendor or company that owns and maintains the specification of the classes that implement this package
Class.isInterface()	Determines if the specified Class object represents an interface type
UndeclaredThrowableException.UndeclaredThrowableException(Throwable)	Constructs an UndeclaredThrowableException with the specified Throwable
ClassValue.remove(Class)	Removes the associated value for the given class
IllegalStateException.IllegalStateException(Throwable)	Constructs a new exception with the specified cause and a detail message of cause null null cause toString which typically contains the class and detail message of cause
Throwable.getMessage()	Returns the detail message string of this throwable
ThreadGroup.activeCount()	Returns an estimate of the number of active threads in this thread group and its subgroups Recursively iterates over all subgroups in this thread group
StackTraceElement.StackTraceElement(String,String,String,int)	Creates a stack trace element representing the specified execution point
Reference.get()	Returns this reference object s referent If this reference object has been cleared either by the program or by the garbage collector then this method returns null
StringBuffer.lastIndexOf(String)	Returns the index within this string of the rightmost occurrence of the specified substring The rightmost empty string is considered to occur at the index value this length
RuntimeMXBean.getBootClassPath()	Returns the boot class path that is used by the bootstrap class loader to search for class files
GenericDeclaration.getTypeParameters()	Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object in declaration order Returns an array of length 0 if the underlying generic declaration declares no type variables
ThreadGroup.enumerate(ThreadGroup[],boolean)	Copies into the specified array references to every active subgroup in this thread group If recurse is true this method recursively enumerates all subgroups of this thread group and references to every active thread group in these subgroups are also included
MethodType.hasPrimitives()	Reports if this type contains a primitive argument or return value
Long.decode(String)	Decodes a String into a Long
Class.isEnum()	Returns true if and only if this class was declared as an enum in the source code
AccessibleObject.getDeclaredAnnotations()	Description copied from interface AnnotatedElement
Class.asSubclass(Class)	Casts this Class object to represent a subclass of the class represented by the specified class object Checks that that the cast is valid and throws a ClassCastException if it is not If this method succeeds it always returns a reference to this class object
MethodType.toMethodDescriptorString()	Produces a bytecode descriptor representation of the method type
Array.getLength(Object)	Returns the length of the specified array object as an int
Constructor.getDeclaredAnnotations()	Description copied from interface AnnotatedElement
StrictMath.toDegrees(double)	Converts an angle measured in radians to an approximately equivalent angle measured in degrees The conversion from radians to degrees is generally inexact users should not expect cos toRadians 90 0 to exactly equal 0 0
ThreadInfo.getBlockedCount()	Returns the total number of times that the thread associated with this ThreadInfo blocked to enter or reenter a monitor
System.lineSeparator()	Returns the system dependent line separator string It always returns the same value the initial value of the system property line separator
Integer.equals(Object)	Compares this object to the specified object The result is true if and only if the argument is not null and is an Integer object that contains the same int value as this object
MethodHandles.arrayElementGetter(Class)	Produces a method handle giving read access to elements of an array
Instrumentation.getInitiatedClasses(ClassLoader)	Returns an array of all classes for which loader is an initiating loader
Character.isUnicodeIdentifierStart(char)	Determines if the specified character is permissible as the first character in a Unicode identifier
Class.getInterfaces()	Determines the interfaces implemented by the class or interface represented by this object
Thread.getStackTrace()	Returns an array of stack trace elements representing the stack dump of this thread This method will return a zero length array if this thread has not started has started but has not yet been scheduled to run by the system or has terminated
InvocationTargetException.InvocationTargetException(Throwable)	Constructs a InvocationTargetException with a target exception
NoSuchFieldException.NoSuchFieldException()	Constructor
Class.getMethods()	Returns an array containing Method objects reflecting all the public member methods of the class or interface represented by this Class object including those declared by the class or interface and those inherited from superclasses and superinterfaces Array classes return all the public member methods inherited from the Object class The elements in the array returned are not sorted and are not in any particular order This method returns an array of length 0 if this Class object represents a class or interface that has no public member methods or if this Class object represents a primitive type or void
ThreadInfo.isSuspended()	Tests if the thread associated with this ThreadInfo is suspended This method returns true if Thread suspend has been called
MethodType.methodType(Class,Class)	Finds or creates a method type with the given components
String.String(char[],int,int)	Allocates a new String that contains characters from a subarray of the character array argument The offset argument is the index of the first character of the subarray and the count argument specifies the length of the subarray The contents of the subarray are copied subsequent modification of the character array does not affect the newly created string
StrictMath.min(long,long)	Returns the smaller of two long values That is the result is the argument closer to the value of Long MIN VALUE If the arguments have the same value the result is that same value
Number.byteValue()	Returns the value of the specified number as a byte
ClassLoader.getResources(String)	Finds all the resources with the given name A resource is some data images audio text etc that can be accessed by class code in a way that is independent of the location of the code
Modifier.isSynchronized(int)	Return true if the integer argument includes the synchronized modifier false otherwise
UnmodifiableClassException.UnmodifiableClassException()	Constructs an UnmodifiableClassException with no detail message
VolatileCallSite.VolatileCallSite(MethodType)	Creates a call site with a volatile binding to its target
String.lastIndexOf(String)	Returns the index within this string of the last occurrence of the specified substring The last occurrence of the empty string is considered to occur at the index value this length
Instrumentation.setNativeMethodPrefix(ClassFileTransformer,String)	This method modifies the failure handling of native method resolution by allowing retry with a prefix applied to the name
Math.round(double)	Returns the closest long to the argument with ties rounding up
IllegalAccessException.IllegalAccessException(String)	Constructs an IllegalAccessException with a detail message
Array.setBoolean(Object,int,boolean)	Sets the value of the indexed component of the specified array object to the specified boolean value
OperatingSystemMXBean.getArch()	Returns the operating system architecture
Math.ulp(double)	Returns the size of an ulp of the argument An ulp of a double value is the positive distance between this floating point value and the double value next larger in magnitude Note that for non NaN x ulp x ulp x
String.regionMatches(int,String,int,int)	Tests if two string regions are equal
ThreadMXBean.getCurrentThreadUserTime()	Returns the CPU time that the current thread has executed in user mode in nanoseconds
Thread.getUncaughtExceptionHandler()	Returns the handler invoked when this thread abruptly terminates due to an uncaught exception If this thread has not had an uncaught exception handler explicitly set then this thread s ThreadGroup object is returned unless this thread has terminated in which case null is returned
Math.max(double,double)	Returns the greater of two double values That is the result is the argument closer to positive infinity If the arguments have the same value the result is that same value If either value is NaN then the result is NaN Unlike the numerical comparison operators this method considers negative zero to be strictly smaller than positive zero If one argument is positive zero and the other negative zero the result is positive zero
Thread.join(long)	Waits at most millis milliseconds for this thread to die A timeout of 0 means to wait forever
Character.isTitleCase(int)	Determines if the specified character Unicode code point is a titlecase character
SecurityManager.checkPermission(Permission)	Throws a SecurityException if the requested access specified by the given permission is not permitted based on the security policy currently in effect
NumberFormatException.NumberFormatException(String)	Constructs a NumberFormatException with the specified detail message
Character.codePointAt(char[],int,int)	Returns the code point at the given index of the char array where only array elements with index less than limit can be used If the char value at the given index in the char array is in the high surrogate range the following index is less than the limit and the char value at the following index is in the low surrogate range then the supplementary code point corresponding to this surrogate pair is returned Otherwise the char value at the given index is returned
Long.signum(long)	Returns the signum function of the specified long value The return value is 1 if the specified value is negative 0 if the specified value is zero and 1 if the specified value is positive
Instrumentation.isRetransformClassesSupported()	Returns whether or not the current JVM configuration supports retransformation of classes
ClassFormatError.ClassFormatError()	Constructs a ClassFormatError with no detail message
Math.cbrt(double)	Returns the cube root of a double value For positive finite x cbrt x cbrt x that is the cube root of a negative value is the negative of the cube root of that value s magnitude
BufferPoolMXBean.getName()	Returns the name representing this buffer pool
MonitorInfo.from(CompositeData)	Returns a MonitorInfo object represented by the given CompositeData
Appendable.append(CharSequence)	Appends the specified character sequence to this Appendable
ThreadGroup.allowThreadSuspension(boolean)	Used by VM to control lowmem implicit suspension
String.codePointBefore(int)	Returns the character Unicode code point before the specified index The index refers to char values Unicode code units and ranges from 1 to length
Thread.setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler)	Set the default handler invoked when a thread abruptly terminates due to an uncaught exception and no other handler has been defined for that thread
MonitorInfo.MonitorInfo(String,int,int,StackTraceElement)	Construct a MonitorInfo object
Field.toGenericString()	Returns a string describing this Field including its generic type The format is the access modifiers for the field if any followed by the generic field type followed by a space followed by the fully qualified name of the class declaring the field followed by a period followed by the name of the field
CompilationMXBean.getTotalCompilationTime()	Returns the approximate accumlated elapsed time in milliseconds spent in compilation
StrictMath.abs(int)	Returns the absolute value of an int value
Float.intValue()	Returns the value of this Float as an int by casting to type int
Boolean.Boolean(String)	Allocates a Boolean object representing the value true if the string argument is not null and is equal ignoring case to the string true
String.replace(CharSequence,CharSequence)	Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence The replacement proceeds from the beginning of the string to the end for example replacing aa with b in the string aaa will result in ba rather than ab
Package.hashCode()	Return the hash code computed from the package name
Integer.bitCount(int)	Returns the number of one bits in the two s complement binary representation of the specified int value This function is sometimes referred to as the population count
Math.scalb(float,int)	Return f 2scaleFactor rounded as if performed by a single correctly rounded floating point multiply to a member of the float value set See the Java Language Specification for a discussion of floating point value sets If the exponent of the result is between Float MIN EXPONENT and Float MAX EXPONENT the answer is calculated exactly If the exponent of the result would be larger than Float MAX EXPONENT an infinity is returned Note that if the result is subnormal precision may be lost that is when scalb x n is subnormal scalb scalb x n n may not equal x When the result is non NaN the result has the same sign as f
LinkageError.LinkageError()	Constructs a LinkageError with no detail message
Thread.Thread(ThreadGroup,Runnable,String)	Allocates a new Thread object so that it has target as its run object has the specified name as its name and belongs to the thread group referred to by group
ThreadMXBean.dumpAllThreads(boolean,boolean)	Returns the thread info for all live threads with stack trace and synchronization information
Constructor.toGenericString()	Returns a string describing this Constructor including type parameters The string is formatted as the constructor access modifiers if any followed by an angle bracketed comma separated list of the constructor s type parameters if any followed by the fully qualified name of the declaring class followed by a parenthesized comma separated list of the constructor s generic formal parameter types
Exception.Exception()	Constructs a new exception with null as its detail message
Math.exp(double)	Returns Euler s number e raised to the power of a double value Special cases If the argument is NaN the result is NaN
SecurityManager.checkPackageDefinition(String)	Throws a SecurityException if the calling thread is not allowed to define classes in the package specified by the argument
Character.codePointCount(char[],int,int)	Returns the number of Unicode code points in a subarray of the char array argument The offset argument is the index of the first char of the subarray and the count argument specifies the length of the subarray in chars Unpaired surrogates within the subarray count as one code point each
RuntimeMXBean.isBootClassPathSupported()	Tests if the Java virtual machine supports the boot class path mechanism used by the bootstrap class loader to search for class files
String.String(int[],int,int)	Allocates a new String that contains characters from a subarray of the Unicode code point array argument The offset argument is the index of the first code point of the subarray and the count argument specifies the length of the subarray The contents of the subarray are converted to chars subsequent modification of the int array does not affect the newly created string
Math.floor(double)	Returns the largest closest to positive infinity double value that is less than or equal to the argument and is equal to a mathematical integer Special cases If the argument value is already equal to a mathematical integer then the result is the same as the argument If the argument is NaN or an infinity or positive zero or negative zero then the result is the same as the argument
StrictMath.sqrt(double)	Returns the correctly rounded positive square root of a double value
MethodHandles.arrayElementSetter(Class)	Produces a method handle giving write access to elements of an array
Byte.Byte(String)	Constructs a newly allocated Byte object that represents the byte value indicated by the String parameter The string is converted to a byte value in exactly the manner used by the parseByte method for radix 10
StrictMath.copySign(float,float)	Returns the first floating point argument with the sign of the second floating point argument For this method a NaN sign argument is always treated as if it were positive
StrictMath.abs(long)	Returns the absolute value of a long value
Math.cos(double)	Returns the trigonometric cosine of an angle Special cases If the argument is NaN or an infinity then the result is NaN
Class.getGenericInterfaces()	Returns the Types representing the interfaces directly implemented by the class or interface represented by this object
AbstractMethodError.AbstractMethodError(String)	Constructs an AbstractMethodError with the specified detail message
ThreadMXBean.isCurrentThreadCpuTimeSupported()	Tests if the Java virtual machine supports CPU time measurement for the current thread
MemoryPoolMXBean.getPeakUsage()	Returns the peak memory usage of this memory pool since the Java virtual machine was started or since the peak was reset
Long.bitCount(long)	Returns the number of one bits in the two s complement binary representation of the specified long value This function is sometimes referred to as the population count
MemoryPoolMXBean.isUsageThresholdExceeded()	Tests if the memory usage of this memory pool reaches or exceeds its usage threshold value
ConstantCallSite.setTarget(MethodHandle)	Always throws an UnsupportedOperationException
MemoryPoolMXBean.isCollectionUsageThresholdExceeded()	Tests if the memory usage of this memory pool after the most recent collection on which the Java virtual machine has expended effort has reached or exceeded its collection usage threshold
MemoryUsage.getInit()	Returns the amount of memory in bytes that the Java virtual machine initially requests from the operating system for memory management
ProcessBuilder.start()	Starts a new process using the attributes of this process builder
Integer.numberOfLeadingZeros(int)	Returns the number of zero bits preceding the highest order leftmost one bit in the two s complement binary representation of the specified int value Returns 32 if the specified value has no one bits in its two s complement representation in other words if it is equal to zero
Integer.intValue()	Returns the value of this Integer as an int
Method.getName()	Returns the name of the method represented by this Method object as a String
StrictMath.abs(float)	Returns the absolute value of a float value
ThreadInfo.getLockOwnerName()	Returns the name of the thread which owns the object for which the thread associated with this ThreadInfo is blocked waiting
Modifier.isAbstract(int)	Return true if the integer argument includes the abstract modifier false otherwise
Object.hashCode()	Returns a hash code value for the object This method is supported for the benefit of hash tables such as those provided by HashMap
RuntimePermission.RuntimePermission(String)	Creates a new RuntimePermission with the specified name
Math.pow(double,double)	Returns the value of the first argument raised to the power of the second argument Special cases If the second argument is positive or negative zero then the result is 1 0
Throwable.addSuppressed(Throwable)	Appends the specified exception to the exceptions that were suppressed in order to deliver this exception This method is thread safe and typically called automatically and implicitly by the try with resources statement
Instrumentation.getObjectSize(Object)	Returns an implementation specific approximation of the amount of storage consumed by the specified object The result may include some or all of the object s overhead and thus is useful for comparison within an implementation but not between implementations
ThreadMXBean.isThreadCpuTimeSupported()	Tests if the Java virtual machine implementation supports CPU time measurement for any thread
Integer.toString()	Returns a String object representing this Integer s value The value is converted to signed decimal representation and returned as a string exactly as if the integer value were given as an argument to the toString int method
Package.getName()	Return the name of this package
Float.toString(float)	Returns a string representation of the float argument All characters mentioned below are ASCII characters
Short.doubleValue()	Returns the value of this Short as a double
Long.toString()	Returns a String object representing this Long s value The value is converted to signed decimal representation and returned as a string exactly as if the long value were given as an argument to the toString long method
MethodHandles.explicitCastArguments(MethodHandle,MethodType)	Produces a method handle which adapts the type of the given method handle to a new type by pairwise argument and return type conversion
Field.setBoolean(Object,boolean)	Sets the value of a field as a boolean on the specified object
ClassFormatError.ClassFormatError(String)	Constructs a ClassFormatError with the specified detail message
ManagementFactory.getPlatformMXBean(MBeanServerConnection,Class)	Returns the platform MXBean proxy for mxbeanInterface which is specified to have one single instance in a Java virtual machine and the proxy will forward the method calls through the given MBeanServerConnection
Constructor.isVarArgs()	Returns true if this constructor was declared to take a variable number of arguments returns false otherwise
IllegalThreadStateException.IllegalThreadStateException(String)	Constructs an IllegalThreadStateException with the specified detail message
SecurityManager.checkConnect(String,int,Object)	Throws a SecurityException if the specified security context is not allowed to open a socket connection to the specified host and port number
Thread.Thread()	Allocates a new Thread object This constructor has the same effect as Thread null null gname where gname is a newly generated name Automatically generated names are of the form Thread n where n is an integer
Class.getComponentType()	Returns the Class representing the component type of an array If this class does not represent an array class this method returns null
ClassFileTransformer.transform(ClassLoader,String,Class,ProtectionDomain,byte[])	The implementation of this method may transform the supplied class file and return a new replacement class file
ParameterizedType.getActualTypeArguments()	Returns an array of Type objects representing the actual type arguments to this type
ThreadGroup.activeGroupCount()	Returns an estimate of the number of active groups in this thread group and its subgroups Recursively iterates over all subgroups in this thread group
Process.destroy()	Kills the subprocess The subprocess represented by this Process object is forcibly terminated
Instrumentation.isModifiableClass(Class)	Determines whether a class is modifiable by retransformation or redefinition
Character.toString(char)	Returns a String object representing the specified char The result is a string of length 1 consisting solely of the specified char
Class.isInstance(Object)	Determines if the specified Object is assignment compatible with the object represented by this Class This method is the dynamic equivalent of the Java language instanceof operator The method returns true if the specified Object argument is non null and can be cast to the reference type represented by this Class object without raising a ClassCastException It returns false otherwise
Byte.longValue()	Returns the value of this Byte as a long
ThreadMXBean.getTotalStartedThreadCount()	Returns the total number of threads created and also started since the Java virtual machine started
Short.parseShort(String)	Parses the string argument as a signed decimal short The characters in the string must all be decimal digits except that the first character may be an ASCII minus sign u002D to indicate a negative value or an ASCII plus sign u002B to indicate a positive value The resulting short value is returned exactly as if the argument and the radix 10 were given as arguments to the parseShort java lang String int method
Runtime.getLocalizedInputStream(InputStream)	Creates a localized version of an input stream This method takes an InputStream and returns an InputStream equivalent to the argument in all respects except that it is localized as characters in the local character set are read from the stream they are automatically converted from the local character set to Unicode
PhantomReference.PhantomReference(T,ReferenceQueue)	Creates a new phantom reference that refers to the given object and is registered with the given queue
SwitchPoint.SwitchPoint()	Creates a new switch point
Character.isLowSurrogate(char)	Determines if the given char value is a Unicode low surrogate code unit also known as trailing surrogate code unit
Math.getExponent(float)	Returns the unbiased exponent used in the representation of a float Special cases If the argument is NaN or infinite then the result is Float MAX EXPONENT 1
StringBuilder.replace(int,int,String)	Replaces the characters in a substring of this sequence with characters in the specified String The substring begins at the specified start and extends to the character at index end 1 or to the end of the sequence if no such character exists First the characters in the substring are removed and then the specified String is inserted at start This sequence will be lengthened to accommodate the specified String if necessary
StrictMath.log10(double)	Returns the base 10 logarithm of a double value
OutOfMemoryError.OutOfMemoryError(String)	Constructs an OutOfMemoryError with the specified detail message
Instrumentation.isRedefineClassesSupported()	Returns whether or not the current JVM configuration supports redefinition of classes
Thread.getContextClassLoader()	Returns the context ClassLoader for this Thread The context ClassLoader is provided by the creator of the thread for use by code running in this thread when loading classes and resources
Character.isHighSurrogate(char)	Determines if the given char value is a Unicode high surrogate code unit also known as leading surrogate code unit
MemoryNotificationInfo.MemoryNotificationInfo(String,MemoryUsage,long)	Constructs a MemoryNotificationInfo object
StringBuilder.append(CharSequence,int,int)	Appends a subsequence of the specified CharSequence to this sequence
SecurityManager.checkRead(String)	Throws a SecurityException if the calling thread is not allowed to read the file specified by the string argument
Long.lowestOneBit(long)	Returns a long value with at most a single one bit in the position of the lowest order rightmost one bit in the specified long value Returns zero if the specified value has no one bits in its two s complement binary representation that is if it is equal to zero
Character.getName(int)	Returns the Unicode name of the specified character codePoint or null if the code point is unassigned
Character.isUnicodeIdentifierPart(int)	Determines if the specified character Unicode code point may be part of a Unicode identifier as other than the first character
StringBuffer.StringBuffer(CharSequence)	Constructs a string buffer that contains the same characters as the specified CharSequence The initial capacity of the string buffer is 16 plus the length of the CharSequence argument
Array.getLong(Object,int)	Returns the value of the indexed component in the specified array object as a long
ManagementFactory.getMemoryManagerMXBeans()	Returns a list of MemoryManagerMXBean objects in the Java virtual machine
String.concat(String)	Concatenates the specified string to the end of this string
MemoryPoolMXBean.getMemoryManagerNames()	Returns the name of memory managers that manages this memory pool
Method.getGenericExceptionTypes()	Returns an array of Type objects that represent the exceptions declared to be thrown by this Method object
StrictMath.copySign(double,double)	Returns the first floating point argument with the sign of the second floating point argument For this method a NaN sign argument is always treated as if it were positive
IllegalStateException.IllegalStateException(String,Throwable)	Constructs a new exception with the specified detail message and cause
MemoryMXBean.gc()	Runs the garbage collector
Math.cosh(double)	Returns the hyperbolic cosine of a double value
Class.getEnclosingMethod()	If this Class object represents a local or anonymous class within a method returns a Method object representing the immediately enclosing method of the underlying class Returns null otherwise
MethodHandles.invoker(MethodType)	Produces a special invoker method handle which can be used to invoke any method handle compatible with the given type as if by invoke
TypeNotPresentException.TypeNotPresentException(String,Throwable)	Constructs a TypeNotPresentException for the named type with the specified cause
String.contains(CharSequence)	Returns true if and only if this string contains the specified sequence of char values
Thread.setDaemon(boolean)	Marks this thread as either a daemon thread or a user thread The Java Virtual Machine exits when the only threads running are all daemon threads
MutableCallSite.getTarget()	Returns the target method of the call site which behaves like a normal field of the MutableCallSite
Class.getProtectionDomain()	Returns the ProtectionDomain of this class If there is a security manager installed this method first calls the security manager s checkPermission method with a RuntimePermission getProtectionDomain permission to ensure it s ok to get the ProtectionDomain
ClassNotFoundException.getCause()	Returns the cause of this exception the exception that was raised if an error occurred while attempting to load the class otherwise null
MethodType.changeReturnType(Class)	Finds or creates a method type with a different return type
Runtime.exec(String)	Executes the specified string command in a separate process
StringBuilder.codePointBefore(int)	Returns the character Unicode code point before the specified index The index refers to char values Unicode code units and ranges from 1 to length
Object.wait(long)	Causes the current thread to wait until either another thread invokes the notify method or the notifyAll method for this object or a specified amount of time has elapsed
StringBuffer.append(int)	Appends the string representation of the int argument to this sequence
ThreadGroup.enumerate(Thread[],boolean)	Copies into the specified array every active thread in this thread group If recurse is true this method recursively enumerates all subgroups of this thread group and references to every active thread in these subgroups are also included If the array is too short to hold all the threads the extra threads are silently ignored
Double.floatValue()	Returns the float value of this Double object
MethodHandles.Lookup.in(Class)	Creates a lookup on the specified new lookup class
MethodHandleProxies.asInterfaceInstance(Class,MethodHandle)	Produces an instance of the given single method interface which redirects its calls to the given method handle
Short.parseShort(String,int)	Parses the string argument as a signed short in the radix specified by the second argument The characters in the string must all be digits of the specified radix as determined by whether Character digit char int returns a nonnegative value except that the first character may be an ASCII minus sign u002D to indicate a negative value or an ASCII plus sign u002B to indicate a positive value The resulting short value is returned
MethodType.insertParameterTypes(int,Class)	Finds or creates a method type with additional parameter types
Float.valueOf(float)	Returns a Float instance representing the specified float value
Character.isJavaIdentifierStart(char)	Determines if the specified character is permissible as the first character in a Java identifier
Character.codePointBefore(CharSequence,int)	Returns the code point preceding the given index of the CharSequence If the char value at index 1 in the CharSequence is in the low surrogate range index 2 is not negative and the char value at index 2 in the CharSequence is in the high surrogate range then the supplementary code point corresponding to this surrogate pair is returned Otherwise the char value at index 1 is returned
Thread.countStackFrames()	Counts the number of stack frames in this thread The thread must be suspended
Integer.reverseBytes(int)	Returns the value obtained by reversing the order of the bytes in the two s complement representation of the specified int value
Instrumentation.redefineClasses()	Redefine the supplied set of classes using the supplied class files
Long.rotateRight(long,int)	Returns the value obtained by rotating the two s complement binary representation of the specified long value right by the specified number of bits Bits shifted out of the right hand or low order side reenter on the left or high order Note that right rotation with a negative distance is equivalent to left rotation rotateRight val distance rotateLeft val distance Note also that rotation by any multiple of 64 is a no op so all but the last six bits of the rotation distance can be ignored even if the distance is negative rotateRight val distance rotateRight val distance 0x3F
StringBuffer.offsetByCodePoints(int,int)	Returns the index within this sequence that is offset from the given index by codePointOffset code points Unpaired surrogates within the text range given by index and codePointOffset count as one code point each
System.nanoTime()	Returns the current value of the running Java Virtual Machine s high resolution time source in nanoseconds
Boolean.Boolean(boolean)	Allocates a Boolean object representing the value argument
Short.compare(short,short)	Compares two short values numerically
IllegalArgumentException.IllegalArgumentException(String)	Constructs an IllegalArgumentException with the specified detail message
Byte.parseByte(String,int)	Parses the string argument as a signed byte in the radix specified by the second argument The characters in the string must all be digits of the specified radix as determined by whether Character digit char int returns a nonnegative value except that the first character may be an ASCII minus sign u002D to indicate a negative value or an ASCII plus sign u002B to indicate a positive value The resulting byte value is returned
StrictMath.scalb(float,int)	Return f 2scaleFactor rounded as if performed by a single correctly rounded floating point multiply to a member of the float value set See the Java Language Specification for a discussion of floating point value sets If the exponent of the result is between Float MIN EXPONENT and Float MAX EXPONENT the answer is calculated exactly If the exponent of the result would be larger than Float MAX EXPONENT an infinity is returned Note that if the result is subnormal precision may be lost that is when scalb x n is subnormal scalb scalb x n n may not equal x When the result is non NaN the result has the same sign as f
InstantiationException.InstantiationException()	Constructs an InstantiationException with no detail message
MethodType.generic()	Converts all types both reference and primitive to Object
String.getChars(int,int,char[],int)	Copies characters from this string into the destination character array
Class.isLocalClass()	Returns true if and only if the underlying class is a local class
MethodHandles.Lookup.findStaticSetter(Class,String,Class)	Produces a method handle giving write access to a static field
Character.isISOControl(int)	Determines if the referenced character Unicode code point is an ISO control character A character is considered to be an ISO control character if its code is in the range u0000 through u001F or in the range u007F through u009F
Member.isSynthetic()	Returns true if this member was introduced by the compiler returns false otherwise
Field.getDeclaredAnnotations()	Description copied from interface AnnotatedElement
Character.codePointAt(char[],int)	Returns the code point at the given index of the char array If the char value at the given index in the char array is in the high surrogate range the following index is less than the length of the char array and the char value at the following index is in the low surrogate range then the supplementary code point corresponding to this surrogate pair is returned Otherwise the char value at the given index is returned
Array.setByte(Object,int,byte)	Sets the value of the indexed component of the specified array object to the specified byte value
StringBuffer.setLength(int)	Sets the length of the character sequence
SecurityException.SecurityException(String)	Constructs a SecurityException with the specified detail message
Method.getParameterTypes()	Returns an array of Class objects that represent the formal parameter types in declaration order of the method represented by this Method object Returns an array of length 0 if the underlying method takes no parameters
Array.newInstance(Class,)	Creates a new array with the specified component type and dimensions
Class.newInstance()	Creates a new instance of the class represented by this Class object The class is instantiated as if by a new expression with an empty argument list The class is initialized if it has not already been initialized
MethodType.wrap()	Converts all primitive types to their corresponding wrapper types
Class.getResourceAsStream(String)	Finds a resource with a given name The rules for searching resources associated with a given class are implemented by the defining class loader of the class This method delegates to this object s class loader If this object was loaded by the bootstrap class loader the method delegates to ClassLoader getSystemResourceAsStream java lang String
StringBuilder.setLength(int)	Sets the length of the character sequence
CharSequence.length()	Returns the length of this character sequence The length is the number of 16 bit chars in the sequence
ThreadMXBean.resetPeakThreadCount()	Resets the peak thread count to the current number of live threads
ReflectiveOperationException.ReflectiveOperationException(String)	Constructs a new exception with the specified detail message
MethodType.insertParameterTypes(int,List)	Finds or creates a method type with additional parameter types
ThreadMXBean.setThreadCpuTimeEnabled(boolean)	Enables or disables thread CPU time measurement The default is platform dependent
Integer.hashCode()	Returns a hash code for this Integer
Character.isSurrogatePair(char,char)	Determines whether the specified pair of char values is a valid Unicode surrogate pair
MemoryPoolMXBean.setCollectionUsageThreshold(long)	Sets the collection usage threshold of this memory pool to the given threshold value
Short.Short(String)	Constructs a newly allocated Short object that represents the short value indicated by the String parameter The string is converted to a short value in exactly the manner used by the parseShort method for radix 10
StrictMath.tan(double)	Returns the trigonometric tangent of an angle Special cases If the argument is NaN or an infinity then the result is NaN
StrictMath.signum(double)	Returns the signum function of the argument zero if the argument is zero 1 0 if the argument is greater than zero 1 0 if the argument is less than zero
RuntimeException.RuntimeException()	Constructs a new runtime exception with null as its detail message The cause is not initialized and may subsequently be initialized by a call to Throwable initCause java lang Throwable
StrictMath.getExponent(float)	Returns the unbiased exponent used in the representation of a float Special cases If the argument is NaN or infinite then the result is Float MAX EXPONENT 1
ProcessBuilder.redirectErrorStream()	Tells whether this process builder merges standard error and standard output
Method.getReturnType()	Returns a Class object that represents the formal return type of the method represented by this Method object
Method.toGenericString()	Returns a string describing this Method including type parameters The string is formatted as the method access modifiers if any followed by an angle bracketed comma separated list of the method s type parameters if any followed by the method s generic return type followed by a space followed by the class declaring the method followed by a period followed by the method name followed by a parenthesized comma separated list of the method s generic formal parameter types
Short.toString(short)	Returns a new String object representing the specified short The radix is assumed to be 10
StrictMath.sin(double)	Returns the trigonometric sine of an angle Special cases If the argument is NaN or an infinity then the result is NaN
String.format(Locale,String,)	Returns a formatted string using the specified locale format string and arguments
ThreadGroup.enumerate(ThreadGroup[])	Copies into the specified array references to every active subgroup in this thread group and its subgroups
CallSite.setTarget(MethodHandle)	Updates the target method of this call site according to the behavior defined by this call site s specific class
String.lastIndexOf(int,int)	Returns the index within this string of the last occurrence of the specified character searching backward starting at the specified index For values of ch in the range from 0 to 0xFFFF inclusive the index returned is the largest value k such that this charAt k ch k fromIndex is true For other values of ch it is the largest value k such that this codePointAt k ch k fromIndex is true In either case if no such character occurs in this string at or before position fromIndex then 1 is returned
SecurityManager.checkListen(int)	Throws a SecurityException if the calling thread is not allowed to wait for a connection request on the specified local port number
MethodHandles.catchException(MethodHandle,Class,MethodHandle)	Makes a method handle which adapts a target method handle by running it inside an exception handler
System.setProperties(Properties)	Sets the system properties to the Properties argument
StrictMath.cbrt(double)	Returns the cube root of a double value For positive finite x cbrt x cbrt x that is the cube root of a negative value is the negative of the cube root of that value s magnitude
ClassLoader.getParent()	Returns the parent class loader for delegation Some implementations may use null to represent the bootstrap class loader This method will return null in such implementations if this class loader s parent is the bootstrap class loader
Package.getPackages()	Get all the packages currently known for the caller s ClassLoader instance Those packages correspond to classes loaded via or accessible by name to that ClassLoader instance If the caller s ClassLoader instance is the bootstrap ClassLoader instance which may be represented by null in some implementations only packages corresponding to classes loaded by the bootstrap ClassLoader instance will be returned
String.valueOf(boolean)	Returns the string representation of the boolean argument
StringBuffer.codePointBefore(int)	Returns the character Unicode code point before the specified index The index refers to char values Unicode code units and ranges from 1 to length
Field.setFloat(Object,float)	Sets the value of a field as a float on the specified object
Thread.suspend()	Suspends this thread
AssertionError.AssertionError(boolean)	Constructs an AssertionError with its detail message derived from the specified boolean which is converted to a string as defined in section 15 18 1 1 of The Java Language Specification
MethodType.parameterCount()	Returns the number of parameter types in this method type
MethodHandle.invokeWithArguments(List)	Performs a variable arity invocation passing the arguments in the given array to the method handle as if via an inexact invoke from a call site which mentions only the type Object and whose arity is the length of the argument array
System.getProperty(String,String)	Gets the system property indicated by the specified key
Throwable.toString()	Returns a short description of this throwable
Character.isSurrogate(char)	Determines if the given char value is a Unicode surrogate code unit
ThreadMXBean.isObjectMonitorUsageSupported()	Tests if the Java virtual machine supports monitoring of object monitor usage
Package.getPackage(String)	Find a package by name in the callers ClassLoader instance
Class.getEnumConstants()	Returns the elements of this enum class or null if this Class object does not represent an enum type
Class.isArray()	Determines if this Class object represents an array class
ArrayIndexOutOfBoundsException.ArrayIndexOutOfBoundsException()	Constructs an ArrayIndexOutOfBoundsException with no detail message
Integer.shortValue()	Returns the value of this Integer as a short
ThreadMXBean.getThreadCount()	Returns the current number of live threads including both daemon and non daemon threads
Double.byteValue()	Returns the value of this Double as a byte by casting to a byte
Field.get(Object)	Returns the value of the field represented by this Field on the specified object The value is automatically wrapped in an object if it has a primitive type
MemoryMXBean.setVerbose(boolean)	Enables or disables verbose output for the memory system The verbose output information and the output stream to which the verbose information is emitted are implementation dependent Typically a Java virtual machine implementation prints a message whenever it frees memory at garbage collection
Character.codePointBefore(char[],int,int)	Returns the code point preceding the given index of the char array where only array elements with index greater than or equal to start can be used If the char value at index 1 in the char array is in the low surrogate range index 2 is not less than start and the char value at index 2 in the char array is in the high surrogate range then the supplementary code point corresponding to this surrogate pair is returned Otherwise the char value at index 1 is returned
Class.getEnclosingClass()	Returns the immediately enclosing class of the underlying class If the underlying class is a top level class this method returns null
Field.getChar(Object)	Gets the value of a static or instance field of type char or of another primitive type convertible to type char via a widening conversion
InvocationTargetException.getTargetException()	Get the thrown target exception
StringBuffer.insert(int,double)	Inserts the string representation of the double argument into this sequence
System.runFinalizersOnExit(boolean)	Enable or disable finalization on exit doing so specifies that the finalizers of all objects that have finalizers that have not yet been automatically invoked are to be run before the Java runtime exits
Short.longValue()	Returns the value of this Short as a long
Object.notify()	Wakes up a single thread that is waiting on this object s monitor If any threads are waiting on this object one of them is chosen to be awakened The choice is arbitrary and occurs at the discretion of the implementation A thread waits on an object s monitor by calling one of the wait methods
MemoryMXBean.getNonHeapMemoryUsage()	Returns the current memory usage of non heap memory that is used by the Java virtual machine
Integer.Integer(String)	Constructs a newly allocated Integer object that represents the int value indicated by the String parameter The string is converted to an int value in exactly the manner used by the parseInt method for radix 10
MalformedParameterizedTypeException.MalformedParameterizedTypeException()	
ThreadMXBean.isThreadContentionMonitoringSupported()	Tests if the Java virtual machine supports thread contention monitoring
Runnable.run()	When an object implementing interface Runnable is used to create a thread starting the thread causes the object s run method to be called in that separately executing thread
OperatingSystemMXBean.getName()	Returns the operating system name
Thread.isAlive()	Tests if this thread is alive A thread is alive if it has been started and has not yet died
ArrayStoreException.ArrayStoreException()	Constructs an ArrayStoreException with no detail message
Constructor.getParameterTypes()	Returns an array of Class objects that represent the formal parameter types in declaration order of the constructor represented by this Constructor object Returns an array of length 0 if the underlying constructor takes no parameters
StringBuffer.StringBuffer(String)	Constructs a string buffer initialized to the contents of the specified string The initial capacity of the string buffer is 16 plus the length of the string argument
MethodHandleProxies.isWrapperInstance(Object)	Determines if the given object was produced by a call to asInterfaceInstance
ThreadInfo.getLockInfo()	Returns the LockInfo of an object for which the thread associated with this ThreadInfo is blocked waiting
Constructor.isSynthetic()	Returns true if this constructor is a synthetic constructor returns false otherwise
MemoryPoolMXBean.resetPeakUsage()	Resets the peak memory usage statistic of this memory pool to the current memory usage
Package.isAnnotationPresent(Class)	Description copied from interface AnnotatedElement
Math.acos(double)	Returns the arc cosine of a value the returned angle is in the range 0 0 through pi Special case If the argument is NaN or its absolute value is greater than 1 then the result is NaN
SecurityManager.checkSetFactory()	Throws a SecurityException if the calling thread is not allowed to set the socket factory used by ServerSocket or Socket or the stream handler factory used by URL
String.split(String,int)	Splits this string around matches of the given regular expression
Thread.join(long,int)	Waits at most millis milliseconds plus nanos nanoseconds for this thread to die
MethodType.hasWrappers()	Reports if this type contains a wrapper argument or return value
StringBuffer.insert(int,String)	Inserts the string into this character sequence
StringBuffer.setCharAt(int,char)	The character at the specified index is set to ch This sequence is altered to represent a new character sequence that is identical to the old character sequence except that it contains the character ch at position index
Method.getGenericReturnType()	Returns a Type object that represents the formal return type of the method represented by this Method object
StringBuilder.codePointAt(int)	Returns the character Unicode code point at the specified index The index refers to char values Unicode code units and ranges from 0 to length 1
Character.codePointAt(CharSequence,int)	Returns the code point at the given index of the CharSequence If the char value at the given index in the CharSequence is in the high surrogate range the following index is less than the length of the CharSequence and the char value at the following index is in the low surrogate range then the supplementary code point corresponding to this surrogate pair is returned Otherwise the char value at the given index is returned
Long.numberOfTrailingZeros(long)	Returns the number of zero bits following the lowest order rightmost one bit in the two s complement binary representation of the specified long value Returns 64 if the specified value has no one bits in its two s complement representation in other words if it is equal to zero
IncompleteAnnotationException.annotationType()	Returns the Class object for the annotation type with the missing element
Character.UnicodeBlock.of(char)	Returns the object representing the Unicode block containing the given character or null if the character is not a member of a defined block
Double.toHexString(double)	Returns a hexadecimal string representation of the double argument All characters mentioned below are ASCII characters
Class.isAssignableFrom(Class)	Determines if the class or interface represented by this Class object is either the same as or is a superclass or superinterface of the class or interface represented by the specified Class parameter It returns true if so otherwise it returns false If this Class object represents a primitive type this method returns true if the specified Class parameter is exactly this Class object otherwise it returns false
StringBuilder.insert(int,char)	Inserts the string representation of the char argument into this sequence
System.getProperty(String)	Gets the system property indicated by the specified key
Math.sinh(double)	Returns the hyperbolic sine of a double value
Double.toString(double)	Returns a string representation of the double argument All characters mentioned below are ASCII characters
Double.doubleToLongBits(double)	Returns a representation of the specified floating point value according to the IEEE 754 floating point double format bit layout
AccessibleObject.setAccessible(AccessibleObject[],boolean)	Convenience method to set the accessible flag for an array of objects with a single security check for efficiency
StringBuffer.indexOf(String)	Returns the index within this string of the first occurrence of the specified substring The integer returned is the smallest value k such that this toString startsWith str k is true
MethodHandles.guardWithTest(MethodHandle,MethodHandle,MethodHandle)	Makes a method handle which adapts a target method handle by guarding it with a test a boolean valued method handle
ThreadMXBean.getThreadInfo(long[],boolean,boolean)	Returns the thread info for each thread whose ID is in the input array ids with stack trace and synchronization information
ProcessBuilder.environment()	Returns a string map view of this process builder s environment
MethodType.genericMethodType(int)	Finds or creates a method type whose components are all Object
Exception.Exception(String)	Constructs a new exception with the specified detail message The cause is not initialized and may subsequently be initialized by a call to Throwable initCause java lang Throwable
StringBuilder.insert(int,int)	Inserts the string representation of the second int argument into this sequence
StringBuffer.append(boolean)	Appends the string representation of the boolean argument to the sequence
Enum.toString()	Returns the name of this enum constant as contained in the declaration This method may be overridden though it typically isn t necessary or desirable An enum type should override this method when a more programmer friendly string form exists
ThreadGroup.getParent()	Returns the parent of this thread group
MethodHandles.Lookup.lookupClass()	Tells which class is performing the lookup It is this class against which checks are performed for visibility and access permissions
MethodHandles.Lookup.unreflectGetter(Field)	Produces a method handle giving read access to a reflected field
String.replaceFirst(String,String)	Replaces the first substring of this string that matches the given regular expression with the given replacement
Throwable.getCause()	Returns the cause of this throwable or null if the cause is nonexistent or unknown The cause is the throwable that caused this throwable to get thrown This implementation returns the cause that was supplied via one of the constructors requiring a Throwable or that was set after creation with the initCause Throwable method While it is typically unnecessary to override this method a subclass can override it to return a cause set by some other means This is appropriate for a legacy chained throwable that predates the addition of chained exceptions to Throwable Note that it is not necessary to override any of the PrintStackTrace methods all of which invoke the getCause method to determine the cause of a throwable
Character.toUpperCase(char)	Converts the character argument to uppercase using case mapping information from the UnicodeData file
Class.getDeclaredMethods()	Returns an array of Method objects reflecting all the methods declared by the class or interface represented by this Class object This includes public protected default package access and private methods but excludes inherited methods
MethodHandle.asType(MethodType)	Produces an adapter method handle which adapts the type of the current method handle to a new type
Thread.yield()	A hint to the scheduler that the current thread is willing to yield its current use of a processor The scheduler is free to ignore this hint
CharSequence.subSequence(int,int)	Returns a new CharSequence that is a subsequence of this sequence
Integer.parseInt(String,int)	Parses the string argument as a signed integer in the radix specified by the second argument The characters in the string must all be digits of the specified radix as determined by whether Character digit char int returns a nonnegative value except that the first character may be an ASCII minus sign u002D to indicate a negative value or an ASCII plus sign u002B to indicate a positive value The resulting integer value is returned
Thread.enumerate(Thread[])	Copies into the specified array every active thread in the current thread s thread group and its subgroups This method simply invokes the ThreadGroup enumerate Thread method of the current thread s thread group
Modifier.isStrict(int)	Return true if the integer argument includes the strictfp modifier false otherwise
Thread.UncaughtExceptionHandler.uncaughtException(Thread,Throwable)	Method invoked when the given thread terminates due to the given uncaught exception
ClassLoader.clearAssertionStatus()	Sets the default assertion status for this class loader to false and discards any package defaults or class assertion status settings associated with the class loader This method is provided so that class loaders can be made to ignore any command line or persistent assertion status settings and start with a clean slate
Character.isLowerCase(int)	Determines if the specified character Unicode code point is a lowercase character
ThreadLocal.remove()	Removes the current thread s value for this thread local variable If this thread local variable is subsequently read by the current thread its value will be reinitialized by invoking its initialValue method unless its value is set by the current thread in the interim This may result in multiple invocations of the initialValue method in the current thread
Thread.getState()	Returns the state of this thread
Thread.sleep(long)	Causes the currently executing thread to sleep temporarily cease execution for the specified number of milliseconds subject to the precision and accuracy of system timers and schedulers The thread does not lose ownership of any monitors
Float.valueOf(String)	Returns a Float object holding the float value represented by the argument string s
StrictMath.scalb(double,int)	Return d 2scaleFactor rounded as if performed by a single correctly rounded floating point multiply to a member of the double value set See the Java Language Specification for a discussion of floating point value sets If the exponent of the result is between Double MIN EXPONENT and Double MAX EXPONENT the answer is calculated exactly If the exponent of the result would be larger than Double MAX EXPONENT an infinity is returned Note that if the result is subnormal precision may be lost that is when scalb x n is subnormal scalb scalb x n n may not equal x When the result is non NaN the result has the same sign as d
InstantiationError.InstantiationError()	Constructs an InstantiationError with no detail message
ThreadGroup.isDestroyed()	Tests if this thread group has been destroyed
Character.compareTo(Character)	Compares two Character objects numerically
Field.getType()	Returns a Class object that identifies the declared type for the field represented by this Field object
ClassLoadingMXBean.getTotalLoadedClassCount()	Returns the total number of classes that have been loaded since the Java virtual machine has started execution
Math.getExponent(double)	Returns the unbiased exponent used in the representation of a double Special cases If the argument is NaN or infinite then the result is Double MAX EXPONENT 1
Character.charValue()	Returns the value of this Character object
Math.nextUp(float)	Returns the floating point value adjacent to f in the direction of positive infinity This method is semantically equivalent to nextAfter f Float POSITIVE INFINITY however a nextUp implementation may run faster than its equivalent nextAfter call
UnsupportedOperationException.UnsupportedOperationException(String,Throwable)	Constructs a new exception with the specified detail message and cause
CharSequence.toString()	Returns a string containing the characters in this sequence in the same order as this sequence The length of the string will be the length of this sequence
Throwable.printStackTrace(PrintStream)	Prints this throwable and its backtrace to the specified print stream
Integer.toBinaryString(int)	Returns a string representation of the integer argument as an unsigned integer in base 2
NoSuchFieldError.NoSuchFieldError()	Constructs a NoSuchFieldError with no detail message
Constructor.getAnnotation(Class)	Description copied from interface AnnotatedElement
StringBuffer.append(String)	Appends the specified string to this character sequence
MethodHandles.lookup()	Returns a lookup object on the caller which has the capability to access any method handle that the caller has access to including direct method handles to private fields and methods
MethodHandles.Lookup.findGetter(Class,String,Class)	Produces a method handle giving read access to a non static field
MethodHandles.spreadInvoker(MethodType,int)	Produces a method handle which will invoke any method handle of the given type with a given number of trailing arguments replaced by a single trailing Object array
ClassNotFoundException.ClassNotFoundException(String,Throwable)	Constructs a ClassNotFoundException with the specified detail message and optional exception that was raised while loading the class
StackTraceElement.getClassName()	Returns the fully qualified name of the class containing the execution point represented by this stack trace element
Character.isUnicodeIdentifierPart(char)	Determines if the specified character may be part of a Unicode identifier as other than the first character
Byte.byteValue()	Returns the value of this Byte as a byte
Method.invoke(Object,)	Invokes the underlying method represented by this Method object on the specified object with the specified parameters
Constructor.getModifiers()	Returns the Java language modifiers for the constructor represented by this Constructor object as an integer The Modifier class should be used to decode the modifiers
System.getenv(String)	Gets the value of the specified environment variable An environment variable is a system dependent external named value
MethodHandles.dropArguments(MethodHandle,int,List)	Produces a method handle which will discard some dummy arguments before calling some other specified target method handle
MethodHandles.Lookup.bind(Object,String,MethodType)	Produces an early bound method handle for a non static method
Character.Subset.toString()	Returns the name of this subset
ReferenceQueue.ReferenceQueue()	Constructs a new reference object queue
WeakReference.WeakReference(T,ReferenceQueue)	Creates a new weak reference that refers to the given object and is registered with the given queue
Class.getClasses()	Returns an array containing Class objects representing all the public classes and interfaces that are members of the class represented by this Class object This includes public class and interface members inherited from superclasses and public class and interface members declared by the class This method returns an array of length 0 if this Class object has no public member classes or interfaces This method also returns an array of length 0 if this Class object represents a primitive type an array class or void
Class.getTypeParameters()	Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object in declaration order Returns an array of length 0 if the underlying generic declaration declares no type variables
Class.getDeclaredClasses()	Returns an array of Class objects reflecting all the classes and interfaces declared as members of the class represented by this Class object This includes public protected default package access and private classes and interfaces declared by the class but excludes inherited classes and interfaces This method returns an array of length 0 if the class declares no classes or interfaces as members or if this Class object represents a primitive type an array class or void
Double.longBitsToDouble(long)	Returns the double value corresponding to a given bit representation
Method.getExceptionTypes()	Returns an array of Class objects that represent the types of the exceptions declared to be thrown by the underlying method represented by this Method object Returns an array of length 0 if the method declares no exceptions in its throws clause
SecurityManager.checkSecurityAccess(String)	Determines whether the permission with the specified permission target name should be granted or denied
String.hashCode()	Returns a hash code for this string The hash code for a String object is computed as s 0 31 n 1 s 1 31 n 2 s n 1 using int arithmetic where s i is the ith character of the string n is the length of the string and indicates exponentiation
NullPointerException.NullPointerException()	Constructs a NullPointerException with no detail message
Character.toChars(int)	Converts the specified character Unicode code point to its UTF 16 representation stored in a char array If the specified code point is a BMP Basic Multilingual Plane or Plane 0 value the resulting char array has the same value as codePoint If the specified code point is a supplementary code point the resulting char array has the corresponding surrogate pair
Double.longValue()	Returns the value of this Double as a long by casting to type long
ThreadMXBean.getThreadInfo(long)	Returns the thread info for a thread of the specified id with no stack trace
ConstantCallSite.dynamicInvoker()	Returns this call site s permanent target
SecurityManager.checkMulticast(InetAddress)	Throws a SecurityException if the calling thread is not allowed to use join leave send receive IP multicast
ManagementFactory.getPlatformMXBeans(MBeanServerConnection,Class)	Returns the list of the platform MXBean proxies for forwarding the method calls of the mxbeanInterface through the given MBeanServerConnection
Short.toString()	Returns a String object representing this Short s value The value is converted to signed decimal representation and returned as a string exactly as if the short value were given as an argument to the toString short method
ThreadInfo.from(CompositeData)	Returns a ThreadInfo object represented by the given CompositeData
String.trim()	Returns a copy of the string with leading and trailing whitespace omitted
Modifier.methodModifiers()	Return an int value OR ing together the source language modifiers that can be applied to a method
ThreadGroup.suspend()	Suspends all threads in this thread group
ManagementFactory.getRuntimeMXBean()	Returns the managed bean for the runtime system of the Java virtual machine
System.exit(int)	Terminates the currently running Java Virtual Machine The argument serves as a status code by convention a nonzero status code indicates abnormal termination
String.toString()	This object which is already a string is itself returned
Integer.toHexString(int)	Returns a string representation of the integer argument as an unsigned integer in base 16
Modifier.isStatic(int)	Return true if the integer argument includes the static modifier false otherwise
Constructor.getGenericExceptionTypes()	Returns an array of Type objects that represent the exceptions declared to be thrown by this Constructor object
StringBuffer.insert(int,float)	Inserts the string representation of the float argument into this sequence
StringBuilder.subSequence(int,int)	Returns a new character sequence that is a subsequence of this sequence
String.charAt(int)	Returns the char value at the specified index An index ranges from 0 to length 1 The first char value of the sequence is at index 0 the next at index 1 and so on as for array indexing
Package.getSpecificationTitle()	Return the title of the specification that this package implements
ThreadMXBean.findDeadlockedThreads()	Finds cycles of threads that are in deadlock waiting to acquire object monitors or ownable synchronizers
Modifier.isVolatile(int)	Return true if the integer argument includes the volatile modifier false otherwise
Method.getDeclaringClass()	Returns the Class object representing the class or interface that declares the method represented by this Method object
Error.Error(Throwable)	Constructs a new error with the specified cause and a detail message of cause null null cause toString which typically contains the class and detail message of cause
Class.getDeclaredField(String)	Returns a Field object that reflects the specified declared field of the class or interface represented by this Class object The name parameter is a String that specifies the simple name of the desired field Note that this method will not reflect the length field of an array class
Exception.Exception(Throwable)	Constructs a new exception with the specified cause and a detail message of cause null null cause toString which typically contains the class and detail message of cause
Character.offsetByCodePoints(CharSequence,int,int)	Returns the index within the given char sequence that is offset from the given index by codePointOffset code points Unpaired surrogates within the text range given by index and codePointOffset count as one code point each
Compiler.enable()	Cause the Compiler to resume operation
NoClassDefFoundError.NoClassDefFoundError()	Constructs a NoClassDefFoundError with no detail message
IllegalArgumentException.IllegalArgumentException(Throwable)	Constructs a new exception with the specified cause and a detail message of cause null null cause toString which typically contains the class and detail message of cause
StringBuilder.ensureCapacity(int)	Ensures that the capacity is at least equal to the specified minimum
ClassLoader.loadClass(String)	Loads the class with the specified binary name
Number.shortValue()	Returns the value of the specified number as a short
IncompleteAnnotationException.elementName()	Returns the name of the missing element
Compiler.command(Object)	Examines the argument type and its fields and perform some documented operation No specific operations are required
MethodType.methodType(Class)	Finds or creates a method type with the given components
StringBuilder.lastIndexOf(String)	Returns the index within this string of the rightmost occurrence of the specified substring The rightmost empty string is considered to occur at the index value this length
LockInfo.getIdentityHashCode()	Returns the identity hash code of the lock object returned from the System identityHashCode java lang Object method
Character.isDigit(char)	Determines if the specified character is a digit
IllegalStateException.IllegalStateException()	Constructs an IllegalStateException with no detail message
Double.Double(double)	Constructs a newly allocated Double object that represents the primitive double argument
Character.codePointBefore(char[],int)	Returns the code point preceding the given index of the char array If the char value at index 1 in the char array is in the low surrogate range index 2 is not negative and the char value at index 2 in the char array is in the high surrogate range then the supplementary code point corresponding to this surrogate pair is returned Otherwise the char value at index 1 is returned
Throwable.getStackTrace()	Provides programmatic access to the stack trace information printed by printStackTrace Returns an array of stack trace elements each representing one stack frame The zeroth element of the array assuming the array s length is non zero represents the top of the stack which is the last method invocation in the sequence Typically this is the point at which this throwable was created and thrown
ThreadInfo.getThreadId()	Returns the ID of the thread associated with this ThreadInfo
ManagementPermission.ManagementPermission(String,String)	Constructs a new ManagementPermission object
StringBuffer.append(char[],int,int)	Appends the string representation of a subarray of the char array argument to this sequence
Array.get(Object,int)	Returns the value of the indexed component in the specified array object The value is automatically wrapped in an object if it has a primitive type
StringBuffer.append(char)	Appends the string representation of the char argument to this sequence
Process.getInputStream()	Returns the input stream connected to the normal output of the subprocess The stream obtains data piped from the standard output of the process represented by this Process object
CloneNotSupportedException.CloneNotSupportedException(String)	Constructs a CloneNotSupportedException with the specified detail message
UnsatisfiedLinkError.UnsatisfiedLinkError()	Constructs an UnsatisfiedLinkError with no detail message
Class.getDeclaredAnnotations()	Description copied from interface AnnotatedElement
Modifier.isInterface(int)	Return true if the integer argument includes the interface modifier false otherwise
NoSuchMethodError.NoSuchMethodError()	Constructs a NoSuchMethodError with no detail message
StringBuilder.append(Object)	Appends the string representation of the Object argument
Long.toHexString(long)	Returns a string representation of the long argument as an unsigned integer in base 16
String.String(byte[],Charset)	Constructs a new String by decoding the specified array of bytes using the specified charset
StringBuffer.codePointCount(int,int)	Returns the number of Unicode code points in the specified text range of this sequence The text range begins at the specified beginIndex and extends to the char at index endIndex 1 Thus the length in chars of the text range is endIndex beginIndex Unpaired surrogates within this sequence count as one code point each
StringBuffer.insert(int,char[],int,int)	Inserts the string representation of a subarray of the str array argument into this sequence The subarray begins at the specified offset and extends len chars
Long.valueOf(String,int)	Returns a Long object holding the value extracted from the specified String when parsed with the radix given by the second argument The first argument is interpreted as representing a signed long in the radix specified by the second argument exactly as if the arguments were given to the parseLong java lang String int method The result is a Long object that represents the long value specified by the string
String.contentEquals(CharSequence)	Compares this string to the specified CharSequence The result is true if and only if this String represents the same sequence of char values as the specified sequence
Modifier.isTransient(int)	Return true if the integer argument includes the transient modifier false otherwise
SecurityManager.checkLink(String)	Throws a SecurityException if the calling thread is not allowed to dynamic link the library code specified by the string argument file The argument is either a simple library name or a complete filename
AssertionError.AssertionError()	Constructs an AssertionError with no detail message
Integer.rotateRight(int,int)	Returns the value obtained by rotating the two s complement binary representation of the specified int value right by the specified number of bits Bits shifted out of the right hand or low order side reenter on the left or high order Note that right rotation with a negative distance is equivalent to left rotation rotateRight val distance rotateLeft val distance Note also that rotation by any multiple of 32 is a no op so all but the last five bits of the rotation distance can be ignored even if the distance is negative rotateRight val distance rotateRight val distance 0x1F
InternalError.InternalError(String)	Constructs an InternalError with the specified detail message
RuntimeMXBean.getSpecName()	Returns the Java virtual machine specification name
String.getBytes(int,int,byte[],int)	Copies characters from this string into the destination byte array Each byte receives the 8 low order bits of the corresponding character The eight high order bits of each character are not copied and do not participate in the transfer in any way
RuntimeMXBean.getClassPath()	Returns the Java class path that is used by the system class loader to search for class files
Character.isBmpCodePoint(int)	Determines whether the specified character Unicode code point is in the Basic Multilingual Plane BMP
Math.nextUp(double)	Returns the floating point value adjacent to d in the direction of positive infinity This method is semantically equivalent to nextAfter d Double POSITIVE INFINITY however a nextUp implementation may run faster than its equivalent nextAfter call
Long.doubleValue()	Returns the value of this Long as a double
StringIndexOutOfBoundsException.StringIndexOutOfBoundsException(int)	Constructs a new StringIndexOutOfBoundsException class with an argument indicating the illegal index
ThreadInfo.toString()	Returns a string representation of this thread info
Character.toTitleCase(int)	Converts the character Unicode code point argument to titlecase using case mapping information from the UnicodeData file If a character has no explicit titlecase mapping and is not itself a titlecase char according to UnicodeData then the uppercase mapping is returned as an equivalent titlecase mapping If the character argument is already a titlecase character the same character value will be returned
Character.UnicodeBlock.of(int)	Returns the object representing the Unicode block containing the given character Unicode code point or null if the character is not a member of a defined block
Byte.decode(String)	Decodes a String into a Byte
StringBuffer.indexOf(String,int)	Returns the index within this string of the first occurrence of the specified substring starting at the specified index The integer returned is the smallest value k for which k Math min fromIndex this length this toString startsWith str k If no such value of k exists then 1 is returned
Field.getAnnotation(Class)	Description copied from interface AnnotatedElement
MethodType.fromMethodDescriptorString(String,ClassLoader)	Finds or creates an instance of a method type given the spelling of its bytecode descriptor
MethodType.unwrap()	Converts all wrapper types to their corresponding primitive types
ClassNotFoundException.ClassNotFoundException()	Constructs a ClassNotFoundException with no detail message
RuntimeMXBean.getSpecVersion()	Returns the Java virtual machine specification version
Field.getFloat(Object)	Gets the value of a static or instance field of type float or of another primitive type convertible to type float via a widening conversion
StringBuffer.lastIndexOf(String,int)	Returns the index within this string of the last occurrence of the specified substring The integer returned is the largest value k such that k Math min fromIndex this length this toString startsWith str k If no such value of k exists then 1 is returned
ThreadMXBean.getDaemonThreadCount()	Returns the current number of live daemon threads
StringIndexOutOfBoundsException.StringIndexOutOfBoundsException(String)	Constructs a StringIndexOutOfBoundsException with the specified detail message
Array.getShort(Object,int)	Returns the value of the indexed component in the specified array object as a short
String.equalsIgnoreCase(String)	Compares this String to another String ignoring case considerations Two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case
Runtime.runFinalization()	Runs the finalization methods of any objects pending finalization
ThreadLocal.set(T)	Sets the current thread s copy of this thread local variable to the specified value Most subclasses will have no need to override this method relying solely on the initialValue method to set the values of thread locals
Character.isJavaIdentifierPart(char)	Determines if the specified character may be part of a Java identifier as other than the first character
RuntimeMXBean.getInputArguments()	Returns the input arguments passed to the Java virtual machine which does not include the arguments to the main method
Math.nextAfter(double,double)	Returns the floating point number adjacent to the first argument in the direction of the second argument If both arguments compare as equal the second argument is returned
ProcessBuilder.redirectError()	Returns this process builder s standard error destination
Class.cast(Object)	Casts an object to the class or interface represented by this Class object
SecurityException.SecurityException()	Constructs a SecurityException with no detail message
Class.getConstructor(Class)	Returns a Constructor object that reflects the specified public constructor of the class represented by this Class object The parameterTypes parameter is an array of Class objects that identify the constructor s formal parameter types in declared order
MethodType.methodType(Class,Class,Class)	Finds or creates a method type with the given components
ThreadInfo.isInNative()	Tests if the thread associated with this ThreadInfo is executing native code via the Java Native Interface JNI
Character.valueOf(char)	Returns a Character instance representing the specified char value
ConstantCallSite.ConstantCallSite(MethodHandle)	Creates a call site with a permanent target
Math.atan2(double,double)	Returns the angle theta from the conversion of rectangular coordinates x y to polar coordinates r theta
ClassDefinition.getDefinitionClass()	Returns the class
WrongMethodTypeException.WrongMethodTypeException(String)	Constructs a WrongMethodTypeException with the specified detail message
