Document.getImplementation()	The DOMImplementation object that handles this document A DOM application may use objects from multiple implementations
Notation.getPublicId()	The public identifier of this notation If the public identifier was not specified this is null
Node.compareDocumentPosition(Node)	Compares the reference node i e the node on which this method is being called with a node i e the one passed as a parameter with regard to their position in the document and according to the document order
Document.getElementsByTagName(String)	Returns a NodeList of all the Elements in document order with a given tag name and are contained in the document
DOMImplementation.getFeature(String,String)	This method returns a specialized object which implements the specialized APIs of the specified feature and version as specified in DOM Features The specialized object may also be obtained by using binding specific casting methods but is not necessarily expected to as discussed in This method also allow the implementation to provide specialized objects which do not support the DOMImplementation interface
DOMError.getRelatedException()	The related platform dependent exception if any
DOMStringList.getLength()	The number of DOMStrings in the list The range of valid child node indices is 0 to length 1 inclusive
Node.getAttributes()	A NamedNodeMap containing the attributes of this node if it is an Element or null otherwise
Node.isDefaultNamespace(String)	This method checks if the specified namespaceURI is the default namespace or not
DocumentType.getName()	The name of DTD i e the name immediately following the DOCTYPE keyword
Node.isSupported(String,String)	Tests whether the DOM implementation implements a specific feature and that feature is supported by this node as specified in
Entity.getPublicId()	The public identifier associated with the entity if specified and null otherwise
LSOutput.getEncoding()	The character encoding to use for the output The encoding must be a string acceptable for an XML encoding declaration XML 1 0 section 4 3 3 Character Encoding in Entities it is recommended that character encodings registered as charsets with the Internet Assigned Numbers Authority IANA CHARSETS should be referred to using their registered names
Event.getTimeStamp()	Used to specify the time in milliseconds relative to the epoch at which the event was created Due to the fact that some systems may not provide this information the value of timeStamp may be not available for all events When not available a value of 0 will be returned Examples of epoch time are the time of the system start or 0 0 0 UTC 1st January 1970
Node.isSameNode(Node)	Returns whether this node is the same node as the given one
Element.removeAttributeNode(Attr)	Removes the specified attribute node If a default value for the removed Attr node is defined in the DTD a new node immediately appears with the default value as well as the corresponding namespace URI local name and prefix when applicable
Element.hasAttributeNS(String,String)	Returns true when an attribute with a given local name and namespace URI is specified on this element or has a default value false otherwise
Document.getDocumentURI()	The location of the document or null if undefined or if the Document was created using DOMImplementation createDocument No lexical checking is performed when setting this attribute this could result in a null value returned when using Node baseURI
Event.getTarget()	Used to indicate the EventTarget to which the event was originally dispatched
Node.insertBefore(Node,Node)	Inserts the node newChild before the existing child node refChild If refChild is null insert newChild at the end of the list of children
LSInput.getSystemId()	The system identifier a URI reference IETF RFC 2396 for this input source The system identifier is optional if there is a byte stream a character stream or string data It is still useful to provide one since the application will use it to resolve any relative URIs and can include it in error messages and warnings The LSParser will only attempt to fetch the resource identified by the URI reference if there is no other input available in the input source If the application knows the character encoding of the object pointed to by the system identifier it can set the encoding using the encoding attribute
NameList.getLength()	The number of pairs name and namespaceURI in the list The range of valid child node indices is 0 to length 1 inclusive
LSSerializer.getNewLine()	The end of line sequence of characters to be used in the XML being written out Any string is supported but XML treats only a certain set of characters sequence as end of line See section 2 11 End of Line Handling in XML 1 0 if the serialized content is XML 1 0 or section 2 11 End of Line Handling in XML 1 1 if the serialized content is XML 1 1 Using other character sequences than the recommended ones can result in a document that is either not serializable or not well formed
MutationEvent.getNewValue()	newValue indicates the new value of the Attr node in DOMAttrModified events and of the CharacterData node in DOMCharacterDataModified events
DOMLocator.getRelatedNode()	The node this locator is pointing to or null if no node is available
CharacterData.substringData(int,int)	Extracts a range of data from the node
CharacterData.replaceData(int,int,String)	Replace the characters starting at the specified 16 bit unit offset with the specified string
Node.getFirstChild()	The first child of this node If there is no such node this returns null
LSParser.getDomConfig()	The DOMConfiguration object used when parsing an input source This DOMConfiguration is specific to the parse operation No parameter values from this DOMConfiguration object are passed automatically to the DOMConfiguration object on the Document that is created or used by the parse operation The DOM application is responsible for passing any needed parameter values from this DOMConfiguration object to the DOMConfiguration object referenced by the Document object
CharacterData.insertData(int,String)	Insert a string at the specified 16 bit unit offset
DOMLocator.getLineNumber()	The line number this locator is pointing to or 1 if there is no column number available
NameList.getName(int)	Returns the indexth name item in the collection
TypeInfo.isDerivedFrom(String,String,int)	This method returns if there is a derivation between the reference type definition i e the TypeInfo on which the method is being called and the other type definition i e the one passed as parameters
Document.createTextNode(String)	Creates a Text node given the specified string
UIEvent.getView()	The view attribute identifies the AbstractView from which the event was generated
LSInput.getEncoding()	The character encoding if known The encoding must be a string acceptable for an XML encoding declaration XML 1 0 section 4 3 3 Character Encoding in Entities
Entity.getInputEncoding()	An attribute specifying the encoding used for this entity at the time of parsing when it is an external parsed entity This is null if it an entity from the internal subset or if it is not known
MutationEvent.getPrevValue()	prevValue indicates the previous value of the Attr node in DOMAttrModified events and of the CharacterData node in DOMCharacterDataModified events
Element.setAttributeNode(Attr)	Adds a new attribute node If an attribute with that name nodeName is already present in the element it is replaced by the new one Replacing an attribute node by itself has no effect
TypeInfo.getTypeName()	The name of a type declared for the associated element or attribute or null if unknown
DOMConfiguration.setParameter(String,Object)	Set the value of a parameter
NamedNodeMap.setNamedItemNS(Node)	Adds a node using its namespaceURI and localName If a node with that namespace URI and that local name is already present in this map it is replaced by the new one Replacing a node by itself has no effect
LSSerializerFilter.getWhatToShow()	Tells the LSSerializer what types of nodes to show to the filter If a node is not shown to the filter using this attribute it is automatically serialized See NodeFilter for definition of the constants The constants SHOW DOCUMENT SHOW DOCUMENT TYPE SHOW DOCUMENT FRAGMENT SHOW NOTATION and SHOW ENTITY are meaningless here such nodes will never be passed to a LSSerializerFilter
Node.hasAttributes()	Returns whether this node if it is an element has any attributes
DOMLocator.getUtf16Offset()	The UTF 16 as defined in Unicode and Amendment 1 of ISO IEC 10646 offset into the input source this locator is pointing to or 1 if there is no UTF 16 offset available
Event.getBubbles()	Used to indicate whether or not an event is a bubbling event If the event can bubble the value is true else the value is false
LSLoadEvent.getInput()	The input source that was parsed
Node.getNodeName()	The name of this node depending on its type see the table above
LSOutput.setCharacterStream(Writer)	An attribute of a language and binding dependent type that represents a writable stream to which 16 bit units can be output
Node.getFeature(String,String)	This method returns a specialized object which implements the specialized APIs of the specified feature and version as specified in The specialized object may also be obtained by using binding specific casting methods but is not necessarily expected to as discussed in This method also allow the implementation to provide specialized objects which do not support the Node interface
Document.normalizeDocument()	This method acts as if the document was going through a save and load cycle putting the document in a normal form As a consequence this method updates the replacement tree of EntityReference nodes and normalizes Text nodes as defined in the method Node normalize
LSInput.setSystemId(String)	The system identifier a URI reference IETF RFC 2396 for this input source The system identifier is optional if there is a byte stream a character stream or string data It is still useful to provide one since the application will use it to resolve any relative URIs and can include it in error messages and warnings The LSParser will only attempt to fetch the resource identified by the URI reference if there is no other input available in the input source If the application knows the character encoding of the object pointed to by the system identifier it can set the encoding using the encoding attribute
DOMStringList.contains(String)	Test if a string is part of this DOMStringList
LSSerializer.writeToString(Node)	Serialize the specified node as described above in the general description of the LSSerializer interface The output is written to a DOMString that is returned to the caller
DOMImplementationRegistry.newInstance()	Obtain a new instance of a DOMImplementationRegistry
NamedNodeMap.getNamedItem(String)	Retrieves a node specified by name
LSLoadEvent.getNewDocument()	The document that finished loading
Document.renameNode(Node,String,String)	Rename an existing node of type ELEMENT NODE or ATTRIBUTE NODE
Document.getXmlVersion()	An attribute specifying as part of the XML declaration the version number of this document If there is no declaration and if this document supports the XML feature the value is 1 0 If this document does not support the XML feature the value is always null Changing this attribute will affect methods that check for invalid characters in XML names Application should invoke Document normalizeDocument in order to check for invalid characters in the Nodes that are already part of this Document
Element.setIdAttributeNode(Attr,boolean)	If the parameter isId is true this method declares the specified attribute to be a user determined ID attribute This affects the value of Attr isId and the behavior of Document getElementById but does not change any schema that may be in use in particular this does not affect the Attr schemaTypeInfo of the specified Attr node Use the value false for the parameter isId to undeclare an attribute for being a user determined ID attribute
LSSerializer.setFilter(LSSerializerFilter)	When the application provides a filter the serializer will call out to the filter before serializing each Node The filter implementation can choose to remove the node from the stream or to terminate the serialization early
DOMImplementationList.getLength()	The number of DOMImplementations in the list The range of valid child node indices is 0 to length 1 inclusive
Node.lookupNamespaceURI(String)	Look up the namespace URI associated to the given prefix starting from this node
LSInput.setCharacterStream(Reader)	An attribute of a language and binding dependent type that represents a stream of 16 bit units The application must encode the stream using UTF 16 defined in Unicode and in ISO IEC 10646 It is not a requirement to have an XML declaration when using character streams If an XML declaration is present the value of the encoding attribute will be ignored
ProcessingInstruction.getData()	The content of this processing instruction This is from the first non white space character after the target to the character immediately preceding the
Node.getNodeType()	A code representing the type of the underlying object as defined above
Document.getElementsByTagNameNS(String,String)	Returns a NodeList of all the Elements with a given local name and namespace URI in document order
Element.removeAttribute(String)	Removes an attribute by name If a default value for the removed attribute is defined in the DTD a new attribute immediately appears with the default value as well as the corresponding namespace URI local name and prefix when applicable The implementation may handle default values from other schemas similarly but applications should use Document normalizeDocument to guarantee this information is up to date
DocumentType.getEntities()	A NamedNodeMap containing the general entities both external and internal declared in the DTD Parameter entities are not contained Duplicates are discarded For example in DOCTYPE ex SYSTEM ex dtd ENTITY foo foo ENTITY bar bar ENTITY bar bar2 ENTITY baz baz ex the interface provides access to foo and the first declaration of bar but not the second declaration of bar or baz Every node in this map also implements the Entity interface
LSOutput.getSystemId()	The system identifier a URI reference IETF RFC 2396 for this output destination
LSSerializer.write(Node,LSOutput)	Serialize the specified node as described above in the general description of the LSSerializer interface The output is written to the supplied LSOutput
NodeList.getLength()	The number of nodes in the list The range of valid child node indices is 0 to length 1 inclusive
Node.getUserData(String)	Retrieves the object associated to a key on a this node The object must first have been set to this node by calling setUserData with the same key
Text.splitText(int)	Breaks this node into two nodes at the specified offset keeping both in the tree as siblings After being split this node will contain all the content up to the offset point A new node of the same type which contains all the content at and after the offset point is returned If the original node had a parent node the new node is inserted as the next sibling of the original node When the offset is equal to the length of this node the new node has no data
DOMLocator.getUri()	The URI this locator is pointing to or null if no URI is available
LSInput.getByteStream()	An attribute of a language and binding dependent type that represents a stream of bytes
Text.isElementContentWhitespace()	Returns whether this text node contains element content whitespace often abusively called ignorable whitespace The text node is determined to contain whitespace in element content during the load of the document or if validation occurs while using Document normalizeDocument
Document.createEntityReference(String)	Creates an EntityReference object In addition if the referenced entity is known the child list of the EntityReference node is made the same as that of the corresponding Entity node
NamedNodeMap.getNamedItemNS(String,String)	Retrieves a node specified by local name and namespace URI
DOMImplementationRegistry.getDOMImplementation(String)	Return the first implementation that has the desired features or null if none is found
Node.getNamespaceURI()	The namespace URI of this node or null if it is unspecified see
CharacterData.appendData(String)	Append the string to the end of the character data of the node Upon success data provides access to the concatenation of data and the DOMString specified
LSProgressEvent.getInput()	The input source that is being parsed
Event.getType()	The name of the event case insensitive The name must be an XML name
Attr.getName()	Returns the name of this attribute If Node localName is different from null this attribute is a qualified name
LSOutput.setSystemId(String)	The system identifier a URI reference IETF RFC 2396 for this output destination
DOMError.getType()	A DOMString indicating which related data is expected in relatedData Users should refer to the specification of the error in order to find its DOMString type and relatedData definitions if any
Element.hasAttribute(String)	Returns true when an attribute with a given name is specified on this element or has a default value false otherwise
NamedNodeMap.removeNamedItem(String)	Removes a node specified by name When this map contains the attributes attached to an element if the removed attribute is known to have a default value an attribute immediately appears containing the default value as well as the corresponding namespace URI local name and prefix when applicable
LSInput.setBaseURI(String)	The base URI to be used see section 5 1 4 in IETF RFC 2396 for resolving a relative systemId to an absolute URI
DOMError.getLocation()	The location of the error
Element.getElementsByTagName(String)	Returns a NodeList of all descendant Elements with a given tag name in document order
CharacterData.setData(String)	The character data of the node that implements this interface The DOM implementation may not put arbitrary limits on the amount of data that may be stored in a CharacterData node However implementation limits may mean that the entirety of a node s data may not fit into a single DOMString In such cases the user may call substringData to retrieve the data in appropriately sized pieces
EventException.EventException(short,String)	
Element.getElementsByTagNameNS(String,String)	Returns a NodeList of all the descendant Elements with a given local name and namespace URI in document order
Element.removeAttributeNS(String,String)	Removes an attribute by local name and namespace URI If a default value for the removed attribute is defined in the DTD a new attribute immediately appears with the default value as well as the corresponding namespace URI local name and prefix when applicable
Notation.getSystemId()	The system identifier of this notation If the system identifier was not specified this is null This may be an absolute URI or not
Document.setXmlStandalone(boolean)	An attribute specifying as part of the XML declaration whether this document is standalone This is false when unspecified
MouseEvent.getRelatedTarget()	Used to identify a secondary EventTarget related to a UI event Currently this attribute is used with the mouseover event to indicate the EventTarget which the pointing device exited and with the mouseout event to indicate the EventTarget which the pointing device entered
Node.normalize()	Puts all Text nodes in the full depth of the sub tree underneath this Node including attribute nodes into a normal form where only structure e g elements comments processing instructions CDATA sections and entity references separates Text nodes i e there are neither adjacent Text nodes nor empty Text nodes This can be used to ensure that the DOM view of a document is the same as if it were saved and re loaded and is useful when operations such as XPointer XPointer lookups that depend on a particular document tree structure are to be used If the parameter normalize characters of the DOMConfiguration object attached to the Node ownerDocument is true this method will also fully normalize the characters of the Text nodes
NamedNodeMap.setNamedItem(Node)	Adds a node using its nodeName attribute If a node with that name is already present in this map it is replaced by the new one Replacing a node by itself has no effect
LSSerializer.writeToURI(Node,String)	A convenience method that acts as if LSSerializer write was called with a LSOutput with no encoding specified and LSOutput systemId set to the uri argument
Document.createElement(String)	Creates an element of the type specified Note that the instance returned implements the Element interface so attributes can be specified directly on the returned object
MutationEvent.getRelatedNode()	relatedNode is used to identify a secondary node related to a mutation event For example if a mutation event is dispatched to a node indicating that its parent has changed the relatedNode is the changed parent If an event is instead dispatched to a subtree indicating a node was changed within it the relatedNode is the changed node In the case of the DOMAttrModified event it indicates the Attr node which was modified added or removed
DOMConfiguration.canSetParameter(String,Object)	Check if setting a parameter to a specific value is supported
LSSerializer.setNewLine(String)	The end of line sequence of characters to be used in the XML being written out Any string is supported but XML treats only a certain set of characters sequence as end of line See section 2 11 End of Line Handling in XML 1 0 if the serialized content is XML 1 0 or section 2 11 End of Line Handling in XML 1 1 if the serialized content is XML 1 1 Using other character sequences than the recommended ones can result in a document that is either not serializable or not well formed
Document.createCDATASection(String)	Creates a CDATASection node whose value is the specified string
LSParser.parseURI(String)	Parse an XML document from a location identified by a URI reference IETF RFC 2396 If the URI contains a fragment identifier see section 4 1 in IETF RFC 2396 the behavior is not defined by this specification future versions of this specification may define the behavior
Event.getCurrentTarget()	Used to indicate the EventTarget whose EventListeners are currently being processed This is particularly useful during capturing and bubbling
Entity.getXmlVersion()	An attribute specifying as part of the text declaration the version number of this entity when it is an external parsed entity This is null otherwise
DocumentType.getPublicId()	The public identifier of the external subset
LSParser.parseWithContext(LSInput,Node,short)	Parse an XML fragment from a resource identified by a LSInput and insert the content into an existing document at the position specified with the context and action arguments When parsing the input stream the context node or its parent depending on where the result will be inserted is used for resolving unbound namespace prefixes The context node s ownerDocument node or the node itself if the node of type DOCUMENT NODE is used to resolve default attributes and entity references
MouseEvent.getShiftKey()	Used to indicate whether the shift key was depressed during the firing of the event
LSInput.setStringData(String)	String data to parse If provided this will always be treated as a sequence of 16 bit units UTF 16 encoded characters It is not a requirement to have an XML declaration when using stringData If an XML declaration is present the value of the encoding attribute will be ignored
Text.replaceWholeText(String)	Replaces the text of the current node and all logically adjacent text nodes with the specified text All logically adjacent text nodes are removed including the current node unless it was the recipient of the replacement text
Entity.getSystemId()	The system identifier associated with the entity if specified and null otherwise This may be an absolute URI or not
Element.setIdAttribute(String,boolean)	If the parameter isId is true this method declares the specified attribute to be a user determined ID attribute This affects the value of Attr isId and the behavior of Document getElementById but does not change any schema that may be in use in particular this does not affect the Attr schemaTypeInfo of the specified Attr node Use the value false for the parameter isId to undeclare an attribute for being a user determined ID attribute
Node.getTextContent()	This attribute returns the text content of this node and its descendants When it is defined to be null setting it has no effect On setting any possible children this node may have are removed and if it the new string is not empty or null replaced by a single Text node containing the string this attribute is set to
LSInput.getBaseURI()	The base URI to be used see section 5 1 4 in IETF RFC 2396 for resolving a relative systemId to an absolute URI
Element.setAttributeNodeNS(Attr)	Adds a new attribute If an attribute with that local name and that namespace URI is already present in the element it is replaced by the new one Replacing an attribute node by itself has no effect
Document.getDoctype()	The Document Type Declaration see DocumentType associated with this document For XML documents without a document type declaration this returns null For HTML documents a DocumentType object may be returned independently of the presence or absence of document type declaration in the HTML document
Element.setIdAttributeNS(String,String,boolean)	If the parameter isId is true this method declares the specified attribute to be a user determined ID attribute This affects the value of Attr isId and the behavior of Document getElementById but does not change any schema that may be in use in particular this does not affect the Attr schemaTypeInfo of the specified Attr node Use the value false for the parameter isId to undeclare an attribute for being a user determined ID attribute
MouseEvent.getButton()	During mouse events caused by the depression or release of a mouse button button is used to indicate which mouse button changed state The values for button range from zero to indicate the left button of the mouse one to indicate the middle button if present and two to indicate the right button For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left
Document.setStrictErrorChecking(boolean)	An attribute specifying whether error checking is enforced or not When set to false the implementation is free to not test every possible error case normally defined on DOM operations and not raise any DOMException on DOM operations or report errors while using Document normalizeDocument In case of error the behavior is undefined This attribute is true by default
UIEvent.initUIEvent(String,boolean,boolean,AbstractView,int)	The initUIEvent method is used to initialize the value of a UIEvent created through the DocumentEvent interface This method may only be called before the UIEvent has been dispatched via the dispatchEvent method though it may be called multiple times during that phase if necessary If called multiple times the final invocation takes precedence
Node.appendChild(Node)	Adds the node newChild to the end of the list of children of this node If the newChild is already in the tree it is first removed
DOMImplementationList.item(int)	Returns the indexth item in the collection If index is greater than or equal to the number of DOMImplementations in the list this returns null
Node.hasChildNodes()	Returns whether this node has any children
CharacterData.getData()	The character data of the node that implements this interface The DOM implementation may not put arbitrary limits on the amount of data that may be stored in a CharacterData node However implementation limits may mean that the entirety of a node s data may not fit into a single DOMString In such cases the user may call substringData to retrieve the data in appropriately sized pieces
Event.preventDefault()	If an event is cancelable the preventDefault method is used to signify that the event is to be canceled meaning any default action normally taken by the implementation as a result of the event will not occur If during any stage of event flow the preventDefault method is called the event is canceled
MutationEvent.getAttrName()	attrName indicates the name of the changed Attr node in a DOMAttrModified event
Event.getEventPhase()	Used to indicate which phase of event flow is currently being evaluated
MouseEvent.getClientY()	The vertical coordinate at which the event occurred relative to the DOM implementation s client area
MouseEvent.getAltKey()	Used to indicate whether the alt key was depressed during the firing of the event On some platforms this key may map to an alternative key name
LSInput.getStringData()	String data to parse If provided this will always be treated as a sequence of 16 bit units UTF 16 encoded characters It is not a requirement to have an XML declaration when using stringData If an XML declaration is present the value of the encoding attribute will be ignored
DOMImplementation.createDocumentType(String,String,String)	Creates an empty DocumentType node Entity declarations and notations are not made available Entity reference expansions and default attribute additions do not occur
DocumentType.getNotations()	A NamedNodeMap containing the notations declared in the DTD Duplicates are discarded Every node in this map also implements the Notation interface
DOMImplementationLS.createLSParser(short,String)	Create a new LSParser The newly constructed parser may then be configured by means of its DOMConfiguration object and used to parse documents by means of its parse method
MouseEvent.getClientX()	The horizontal coordinate at which the event occurred relative to the DOM implementation s client area
Attr.getSchemaTypeInfo()	The type information associated with this attribute While the type information contained in this attribute is guarantee to be correct after loading the document or invoking Document normalizeDocument schemaTypeInfo may not be reliable if the node was moved
LSInput.setCertifiedText(boolean)	If set to true assume that the input is certified see section 2 13 in XML 1 1 when parsing XML 1 1
TypeInfo.getTypeNamespace()	The namespace of the type declared for the associated element or attribute or null if the element does not have declaration or if no namespace information is available
Element.getAttributeNode(String)	Retrieves an attribute node by name
Node.getNextSibling()	The node immediately following this node If there is no such node this returns null
Document.setXmlVersion(String)	An attribute specifying as part of the XML declaration the version number of this document If there is no declaration and if this document supports the XML feature the value is 1 0 If this document does not support the XML feature the value is always null Changing this attribute will affect methods that check for invalid characters in XML names Application should invoke Document normalizeDocument in order to check for invalid characters in the Nodes that are already part of this Document
Document.getXmlStandalone()	An attribute specifying as part of the XML declaration whether this document is standalone This is false when unspecified
LSOutput.setEncoding(String)	The character encoding to use for the output The encoding must be a string acceptable for an XML encoding declaration XML 1 0 section 4 3 3 Character Encoding in Entities it is recommended that character encodings registered as charsets with the Internet Assigned Numbers Authority IANA CHARSETS should be referred to using their registered names
Attr.getOwnerElement()	The Element node this attribute is attached to or null if this attribute is not in use
CharacterData.deleteData(int,int)	Remove a range of 16 bit units from the node Upon success data and length reflect the change
Document.getInputEncoding()	An attribute specifying the encoding used for this document at the time of the parsing This is null when it is not known such as when the Document was created in memory
Document.importNode(Node,boolean)	Imports a node from another document to this document without altering or removing the source node from the original document this method creates a new copy of the source node The returned node has no parent parentNode is null
DOMException.DOMException(short,String)	
ProcessingInstruction.getTarget()	The target of this processing instruction XML defines this as being the first token following the markup that begins the processing instruction
Node.getBaseURI()	The absolute base URI of this node or null if the implementation wasn t able to obtain an absolute URI This value is computed as described in However when the Document supports the feature HTML DOM Level 2 HTML the base URI is computed using first the value of the href attribute of the HTML BASE element if any and the value of the documentURI attribute from the Document interface otherwise
EventTarget.removeEventListener(String,EventListener,boolean)	This method allows the removal of event listeners from the event target If an EventListener is removed from an EventTarget while it is processing an event it will not be triggered by the current actions EventListeners can never be invoked after being removed
DOMConfiguration.getParameterNames()	The list of the parameters supported by this DOMConfiguration object and for which at least one value can be set by the application Note that this list can also contain parameter names defined outside this specification
Node.lookupPrefix(String)	Look up the prefix associated to the given namespace URI starting from this node The default namespace declarations are ignored by this method
ProcessingInstruction.setData(String)	The content of this processing instruction This is from the first non white space character after the target to the character immediately preceding the
Document.createElementNS(String,String)	Creates an element of the given qualified name and namespace URI
MouseEvent.getScreenX()	The horizontal coordinate at which the event occurred relative to the origin of the screen coordinate system
LSInput.getPublicId()	The public identifier for this input source This may be mapped to an input source using an implementation dependent mechanism such as catalogues or other mappings The public identifier if specified may also be reported as part of the location information when errors are reported
LSParser.setFilter(LSParserFilter)	When a filter is provided the implementation will call out to the filter as it is constructing the DOM tree structure The filter can choose to remove elements from the document being constructed or to terminate the parsing early
EventTarget.addEventListener(String,EventListener,boolean)	This method allows the registration of event listeners on the event target If an EventListener is added to an EventTarget while it is processing an event it will not be triggered by the current actions but may be triggered during a later stage of event flow such as the bubbling phase
LSInput.setEncoding(String)	The character encoding if known The encoding must be a string acceptable for an XML encoding declaration XML 1 0 section 4 3 3 Character Encoding in Entities
Node.getLocalName()	Returns the local part of the qualified name of this node
EventTarget.dispatchEvent(Event)	This method allows the dispatch of events into the implementations event model Events dispatched in this manner will have the same capturing and bubbling behavior as events dispatched directly by the implementation The target of the event is the EventTarget on which dispatchEvent is called
Event.stopPropagation()	The stopPropagation method is used prevent further propagation of an event during event flow If this method is called by any EventListener the event will cease propagating through the tree The event will complete dispatch to all listeners on the current EventTarget before event flow stops This method may be used during any stage of event flow
Node.getChildNodes()	A NodeList that contains all children of this node If there are no children this is a NodeList containing no nodes
LSInput.getCharacterStream()	An attribute of a language and binding dependent type that represents a stream of 16 bit units The application must encode the stream using UTF 16 defined in Unicode and in ISO IEC 10646 It is not a requirement to have an XML declaration when using character streams If an XML declaration is present the value of the encoding attribute will be ignored
Document.adoptNode(Node)	Attempts to adopt a node from another document to this document If supported it changes the ownerDocument of the source node its children as well as the attached attribute nodes if there are any If the source node has a parent it is first removed from the child list of its parent This effectively allows moving a subtree from one document to another unlike importNode which create a copy of the source node instead of moving it When it fails applications should use Document importNode instead Note that if the adopted node is already part of this document i e the source and target document are the same this method still has the effect of removing the source node from the child list of its parent if any The following list describes the specifics for each type of node
Node.getPrefix()	The namespace prefix of this node or null if it is unspecified When it is defined to be null setting it has no effect including if the node is read only
CharacterData.getLength()	The number of 16 bit units that are available through data and the substringData method below This may have the value zero i e CharacterData nodes may be empty
DOMError.getSeverity()	The severity of the error either SEVERITY WARNING SEVERITY ERROR or SEVERITY FATAL ERROR
Document.getXmlEncoding()	An attribute specifying as part of the XML declaration the encoding of this document This is null when unspecified or when it is not known such as when the Document was created in memory
DOMStringList.item(int)	Returns the indexth item in the collection If index is greater than or equal to the number of DOMStrings in the list this returns null
LSParserFilter.getWhatToShow()	Tells the LSParser what types of nodes to show to the method LSParserFilter acceptNode If a node is not shown to the filter using this attribute it is automatically included in the DOM document being built See NodeFilter for definition of the constants The constants SHOW ATTRIBUTE SHOW DOCUMENT SHOW DOCUMENT TYPE SHOW NOTATION SHOW ENTITY and SHOW DOCUMENT FRAGMENT are meaningless here Those nodes will never be passed to LSParserFilter acceptNode
Element.setAttributeNS(String,String,String)	Adds a new attribute If an attribute with the same local name and namespace URI is already present on the element its prefix is changed to be the prefix part of the qualifiedName and its value is changed to be the value parameter This value is a simple string it is not parsed as it is being set So any markup such as syntax to be recognized as an entity reference is treated as literal text and needs to be appropriately escaped by the implementation when it is written out In order to assign an attribute value that contains entity references the user must create an Attr node plus any Text and EntityReference nodes build the appropriate subtree and use setAttributeNodeNS or setAttributeNode to assign it as the value of an attribute
LSInput.getCertifiedText()	If set to true assume that the input is certified see section 2 13 in XML 1 1 when parsing XML 1 1
DOMError.getMessage()	An implementation specific string describing the error that occurred
MutationEvent.getAttrChange()	attrChange indicates the type of change which triggered the DOMAttrModified event The values can be MODIFICATION ADDITION or REMOVAL
Document.getStrictErrorChecking()	An attribute specifying whether error checking is enforced or not When set to false the implementation is free to not test every possible error case normally defined on DOM operations and not raise any DOMException on DOM operations or report errors while using Document normalizeDocument In case of error the behavior is undefined This attribute is true by default
Document.getDomConfig()	The configuration used when Document normalizeDocument is invoked
Entity.getNotationName()	For unparsed entities the name of the notation for the entity For parsed entities this is null
MouseEvent.getMetaKey()	Used to indicate whether the meta key was depressed during the firing of the event On some platforms this key may map to an alternative key name
LSSerializer.getDomConfig()	The DOMConfiguration object used by the LSSerializer when serializing a DOM node
Element.getAttribute(String)	Retrieves an attribute value by name
Document.getElementById(String)	Returns the Element that has an ID attribute with the given value If no such element exists this returns null If more than one element has an ID attribute with that value what is returned is undefined
LSParser.getAsync()	true if the LSParser is asynchronous false if it is synchronous
DOMImplementationRegistry.getDOMImplementationList(String)	Return a list of implementations that support the desired features
UIEvent.getDetail()	Specifies some detail information about the Event depending on the type of event
NameList.contains(String)	Test if a name is part of this NameList
NameList.containsNS(String,String)	Test if the pair namespaceURI name is part of this NameList
Document.setDocumentURI(String)	The location of the document or null if undefined or if the Document was created using DOMImplementation createDocument No lexical checking is performed when setting this attribute this could result in a null value returned when using Node baseURI
Element.getTagName()	The name of the element If Node localName is different from null this attribute is a qualified name For example in elementExample id demo
DOMLocator.getColumnNumber()	The column number this locator is pointing to or 1 if there is no column number available
Node.cloneNode(boolean)	Returns a duplicate of this node i e serves as a generic copy constructor for nodes The duplicate node has no parent parentNode is null and no user data User data associated to the imported node is not carried over However if any UserDataHandlers has been specified along with the associated data these handlers will be called with the appropriate parameters before this method returns
Node.getParentNode()	The parent of this node All nodes except Attr Document DocumentFragment Entity and Notation may have a parent
DocumentView.getDefaultView()	The default AbstractView for this Document or null if none available
Text.getWholeText()	Returns all text of Text nodes logically adjacent text nodes to this node concatenated in document order
NamedNodeMap.getLength()	The number of nodes in this map The range of valid child node indices is 0 to length 1 inclusive
Node.isEqualNode(Node)	Tests whether two nodes are equal
Document.createProcessingInstruction(String,String)	Creates a ProcessingInstruction node given the specified name and data strings
DOMImplementationSource.getDOMImplementationList(String)	A method to request a list of DOM implementations that support the specified features and versions as specified in
DOMErrorHandler.handleError(DOMError)	This method is called on the error handler when an error occurs
LSParser.abort()	Abort the loading of the document that is currently being loaded by the LSParser If the LSParser is currently not busy a call to this method does nothing
MouseEvent.getScreenY()	The vertical coordinate at which the event occurred relative to the origin of the screen coordinate system
LSInput.setPublicId(String)	The public identifier for this input source This may be mapped to an input source using an implementation dependent mechanism such as catalogues or other mappings The public identifier if specified may also be reported as part of the location information when errors are reported
Element.getAttributeNS(String,String)	Retrieves an attribute value by local name and namespace URI
Node.replaceChild(Node,Node)	Replaces the child node oldChild with newChild in the list of children and returns the oldChild node
DOMImplementation.hasFeature(String,String)	Test if the DOM implementation implements a specific feature and version as specified in DOM Features
Node.setPrefix(String)	The namespace prefix of this node or null if it is unspecified When it is defined to be null setting it has no effect including if the node is read only
Node.getOwnerDocument()	The Document object associated with this node This is also the Document object used to create new nodes When this node is a Document or a DocumentType which is not used with any Document yet this is null
Document.createComment(String)	Creates a Comment node given the specified string
Node.getPreviousSibling()	The node immediately preceding this node If there is no such node this returns null
Event.initEvent(String,boolean,boolean)	The initEvent method is used to initialize the value of an Event created through the DocumentEvent interface This method may only be called before the Event has been dispatched via the dispatchEvent method though it may be called multiple times during that phase if necessary If called multiple times the final invocation takes precedence If called from a subclass of Event interface only the values specified in the initEvent method are modified all other attributes are left unchanged
Document.createAttribute(String)	Creates an Attr of the given name Note that the Attr instance can then be set on an Element using the setAttributeNode method
LSParserFilter.startElement(Element)	The parser will call this method after each Element start tag has been scanned but before the remainder of the Element is processed The intent is to allow the element including any children to be efficiently skipped Note that only element nodes are passed to the startElement function
Node.setNodeValue(String)	The value of this node depending on its type see the table above
Attr.getSpecified()	True if this attribute was explicitly given a value in the instance document false otherwise If the application changed the value of this attribute node even if it ends up having the same value as the default value then it is set to true The implementation may handle attributes with default values from other schemas similarly but applications should use Document normalizeDocument to guarantee this information is up to date
DOMImplementationRegistry.addSource(DOMImplementationSource)	Register an implementation
MouseEvent.getCtrlKey()	Used to indicate whether the ctrl key was depressed during the firing of the event
Element.setAttribute(String,String)	Adds a new attribute If an attribute with that name is already present in the element its value is changed to be that of the value parameter This value is a simple string it is not parsed as it is being set So any markup such as syntax to be recognized as an entity reference is treated as literal text and needs to be appropriately escaped by the implementation when it is written out
Node.setTextContent(String)	This attribute returns the text content of this node and its descendants When it is defined to be null setting it has no effect On setting any possible children this node may have are removed and if it the new string is not empty or null replaced by a single Text node containing the string this attribute is set to
DocumentEvent.createEvent(String)	The newly created Event
LSException.LSException(short,String)	
Node.getLastChild()	The last child of this node If there is no such node this returns null
Event.getCancelable()	Used to indicate whether or not an event can have its default action prevented If the default action can be prevented the value is true else the value is false
DOMImplementation.createDocument(String,String,DocumentType)	Creates a DOM Document object of the specified type with its document element
Attr.setValue(String)	On retrieval the value of the attribute is returned as a string
LSParserFilter.acceptNode(Node)	This method will be called by the parser at the completion of the parsing of each node The node and all of its descendants will exist and be complete The parent node will also exist although it may be incomplete i e it may have additional children that have not yet been parsed Attribute nodes are never passed to this function
NameList.getNamespaceURI(int)	Returns the indexth namespaceURI item in the collection
DOMConfiguration.getParameter(String)	Return the value of a parameter if known
DOMError.getRelatedData()	The related DOMError type dependent data if any
Document.createAttributeNS(String,String)	Creates an attribute of the given qualified name and namespace URI
NamedNodeMap.removeNamedItemNS(String,String)	Removes a node specified by local name and namespace URI A removed attribute may be known to have a default value when this map contains the attributes attached to an element as returned by the attributes attribute of the Node interface If so an attribute immediately appears containing the default value as well as the corresponding namespace URI local name and prefix when applicable
DOMImplementationLS.createLSOutput()	Create a new empty output destination object where LSOutput characterStream LSOutput byteStream LSOutput systemId LSOutput encoding are null
Node.getNodeValue()	The value of this node depending on its type see the table above
DOMLocator.getByteOffset()	The byte offset into the input source this locator is pointing to or 1 if there is no byte offset available
AbstractView.getDocument()	The source DocumentView of which this is an AbstractView
Node.removeChild(Node)	Removes the child node indicated by oldChild from the list of children and returns it
LSParser.getBusy()	true if the LSParser is currently busy loading a document otherwise false
LSParser.parse(LSInput)	Parse an XML document from a resource identified by a LSInput
LSOutput.getByteStream()	An attribute of a language and binding dependent type that represents a writable stream of bytes
LSOutput.getCharacterStream()	An attribute of a language and binding dependent type that represents a writable stream to which 16 bit units can be output
DOMImplementationLS.createLSSerializer()	Create a new LSSerializer object
DOMImplementationSource.getDOMImplementation(String)	A method to request the first DOM implementation that supports the specified features
Element.getSchemaTypeInfo()	The type information associated with this element
DocumentType.getSystemId()	The system identifier of the external subset This may be an absolute URI or not
Document.createDocumentFragment()	Creates an empty DocumentFragment object
LSProgressEvent.getPosition()	The current position in the input source including all external entities and other resources that have been read
MouseEvent.initMouseEvent(String,boolean,boolean,AbstractView,int,int,int,int,int,boolean,boolean,boolean,boolean,short,EventTarget)	The initMouseEvent method is used to initialize the value of a MouseEvent created through the DocumentEvent interface This method may only be called before the MouseEvent has been dispatched via the dispatchEvent method though it may be called multiple times during that phase if necessary If called multiple times the final invocation takes precedence
LSInput.setByteStream(InputStream)	An attribute of a language and binding dependent type that represents a stream of bytes
UserDataHandler.handle(short,String,Object,Node,Node)	This method is called whenever the node for which this handler is registered is imported or cloned
LSSerializer.getFilter()	When the application provides a filter the serializer will call out to the filter before serializing each Node The filter implementation can choose to remove the node from the stream or to terminate the serialization early
Entity.getXmlEncoding()	An attribute specifying as part of the text declaration the encoding of this entity when it is an external parsed entity This is null otherwise
DocumentType.getInternalSubset()	The internal subset as a string or null if there is none
Attr.getValue()	On retrieval the value of the attribute is returned as a string
LSProgressEvent.getTotalSize()	The total size of the document including all external resources this number might change as a document is being parsed if references to more external resources are seen A value of 0 is returned if the total size cannot be determined or estimated
Element.getAttributeNodeNS(String,String)	Retrieves an Attr node by local name and namespace URI
Attr.isId()	Returns whether this attribute is known to be of type ID i e to contain an identifier for its owner element or not When it is and its value is unique the ownerElement of this attribute can be retrieved using the method Document getElementById The implementation could use several ways to determine if an attribute node is known to contain an identifier If validation occurred using an XML Schema XML Schema Part 1 while loading the document or while invoking Document normalizeDocument the post schema validation infoset contributions PSVI contributions values are used to determine if this attribute is a schema determined ID attribute using the schema determined ID definition in XPointer
LSOutput.setByteStream(OutputStream)	An attribute of a language and binding dependent type that represents a writable stream of bytes
Node.setUserData(String,Object,UserDataHandler)	Associate an object to a key on this node The object can later be retrieved from this node by calling getUserData with the same key
LSParser.getFilter()	When a filter is provided the implementation will call out to the filter as it is constructing the DOM tree structure The filter can choose to remove elements from the document being constructed or to terminate the parsing early
EventListener.handleEvent(Event)	This method is called whenever an event occurs of the type for which the EventListener interface was registered
MutationEvent.initMutationEvent(String,boolean,boolean,Node,String,String,String,short)	The initMutationEvent method is used to initialize the value of a MutationEvent created through the DocumentEvent interface This method may only be called before the MutationEvent has been dispatched via the dispatchEvent method though it may be called multiple times during that phase if necessary If called multiple times the final invocation takes precedence
Document.getDocumentElement()	This is a convenience attribute that allows direct access to the child node that is the document element of the document
LSResourceResolver.resolveResource(String,String,String,String,String)	Allow the application to resolve external resources
DOMImplementationLS.createLSInput()	Create a new empty input source object where LSInput characterStream LSInput byteStream LSInput stringData LSInput systemId LSInput publicId LSInput baseURI and LSInput encoding are null and LSInput certifiedText is false
NodeList.item(int)	Returns the indexth item in the collection If index is greater than or equal to the number of nodes in the list this returns null
NamedNodeMap.item(int)	Returns the indexth item in the map If index is greater than or equal to the number of nodes in this map this returns null
