TimeOfDay.fromMillisOfDay(long,Chronology)	Constructs a TimeOfDay from the specified millis of day using the specified chronology
Interval.toInterval()	Get this interval as an immutable Interval object by returning this
MutablePeriod.clear()	Clears the period setting all values back to zero
PeriodFormatterBuilder.appendSeparator(String)	Append a separator which is output if fields are printed both before and after the separator
PeriodConverter.setInto(ReadWritablePeriod,Object,Chronology)	Extracts duration values from an object of this converter s type and sets them into the given ReadWritableDuration
LocalDateTime.property(DateTimeFieldType)	Gets the property object for the specified type which contains many useful methods
ConverterManager.getInstantConverters()	Gets a copy of the set of converters
ScaledDurationField.getValue(long)	Description copied from class BaseDurationField
Instant.minus(long)	Gets a copy of this instant with the specified duration taken away
DateMidnight.yearOfEra()	Get the year of era property which provides access to advanced functionality
DateTimeFieldType.weekyearOfCentury()	Get the year of a week based year within a century field type
Minutes.toStandardHours()	Converts this period in minutes to a period in hours assuming a 60 minute hour
DateTime.hourOfDay()	Get the hour of day field property which provides access to advanced functionality
DateTimeComparator.hashCode()	Gets a suitable hashcode
LocalDate.hashCode()	Gets a hash code for the instant as defined in ReadablePartial
Days.negated()	Returns a new instance with the days value negated
OffsetDateTimeField.roundCeiling(long)	Description copied from class BaseDateTimeField
Period.plusHours(int)	Returns a new period plus the specified number of hours added
AbstractDuration.isShorterThan(ReadableDuration)	Is the length of this duration shorter than the duration passed in
MutableDateTime.addHours(int)	Add a number of hours to the date
PeriodFormatterBuilder.appendSecondsWithOptionalMillis()	Instruct the printer to emit a combined seconds and millis field if supported
YearMonth.YearMonth(DateTimeZone)	Constructs a YearMonth with the current year month using ISOChronology in the specified zone to extract the fields
DateMidnight.minusDays(int)	Returns a copy of this date minus the specified number of days
RemainderDateTimeField.roundCeiling(long)	Description copied from class BaseDateTimeField
Years.minus(Years)	Returns a new instance with the specified number of years taken away
BaseSingleFieldPeriod.toMutablePeriod()	Get this object as a MutablePeriod
TimeOfDay.plusHours(int)	Returns a copy of this time plus the specified number of hours
Chronology.set(ReadablePartial,long)	Sets the partial into the instant
ReadableInterval.getEndMillis()	Gets the end of this time interval which is exclusive
MutablePeriod.setHours(int)	Sets the number of hours of the period
TimeOfDay.fromDateFields(Date)	Constructs a TimeOfDay from a java util Date using exactly the same field values avoiding any time zone effects
DividedDateTimeField.getDivisor()	Returns the divisor applied in the field s units
DateTimeFormat.fullDate()	Creates a format that outputs a full date format
SkipDateTimeField.SkipDateTimeField(Chronology,DateTimeField,int)	Constructor
FieldUtils.safeAdd(long,long)	Add two values throwing an exception if overflow occurs
BaseChronology.era()	Get the era field for this chronology
AssembledChronology.halfdayOfDay()	Description copied from class BaseChronology
AbstractPartialFieldProperty.equals(Object)	Compares this property to another
UnsupportedDateTimeField.roundHalfCeiling(long)	Always throws UnsupportedOperationException
MutableDateTime.add(ReadableDuration)	Adds a duration to this instant
LocalDateTime.getWeekOfWeekyear()	Get the week of weekyear field value
PeriodType.equals(Object)	Compares this type to another object
UnsupportedDateTimeField.isLeap(long)	Always throws UnsupportedOperationException
BaseChronology.weeks()	Get the weeks duration field for this chronology
TimeOfDay.TimeOfDay(int,int,int,Chronology)	Constructs a TimeOfDay with specified time field values and zero milliseconds
LocalDate.toDateTimeAtMidnight()	Converts this LocalDate to a full datetime at midnight using the default time zone
DateTimeField.addWrapField(long,int)	Adds a value which may be negative to the millis value wrapping within this field
UnsupportedDateTimeField.getAsShortText(long)	Always throws UnsupportedOperationException
Partial.Property.setCopy(String)	Sets this field in a copy of the Partial to a parsed text value
MutableInterval.setInterval(long,long)	Sets this interval from two millisecond instants retaining the chronology
LimitChronology.toString()	A debugging string for the chronology
BaseDuration.toPeriodFrom(ReadableInstant,PeriodType)	Converts this duration to a Period instance by adding the duration to a start instant to obtain an interval
DateMidnight.toInterval()	Converts this object to an Interval encompassing the whole of this day
DateMidnight.parse(String,DateTimeFormatter)	Parses a DateMidnight from the specified string using a formatter
Period.normalizedStandard()	Normalizes this period using standard rules assuming a 12 month year 7 day week 24 hour day 60 minute hour and 60 second minute
Partial.withChronologyRetainFields(Chronology)	Creates a new Partial instance with the specified chronology
LocalDate.withDayOfMonth(int)	Returns a copy of this date with the day of month field updated
Seconds.negated()	Returns a new instance with the seconds value negated
ReadableInstant.isAfter(ReadableInstant)	Is this instant after the instant passed in comparing solely by millisecond
BaseDateTimeField.remainder(long)	Returns the fractional duration milliseconds of this field In other words calling remainder returns the duration that roundFloor would subtract
DateMidnight.dayOfYear()	Get the day of year property which provides access to advanced functionality
IslamicChronology.withZone(DateTimeZone)	Gets the Chronology in a specific time zone
YearMonthDay.toDateTimeAtCurrentTime(DateTimeZone)	Converts this partial to a full datetime using the specified time zone setting the date fields from this instance and the time fields from the current time
DateTimeFormatterBuilder.appendTimeZoneOffset(String,String,boolean,int,int)	Instructs the printer to emit text and numbers to display time zone offset from UTC A parser will use the parsed time zone offset to adjust the datetime
MutableDateTime.setMillisOfSecond(int)	Set the millis of the second to the specified value
AbstractDateTime.toString(String,Locale)	Output the instant using the specified format pattern
LocalDateTime.LocalDateTime(long)	Constructs an instance set to the local time defined by the specified instant evaluated using ISO chronology in the default zone
ReadablePartial.hashCode()	Gets a hash code for the partial that is compatible with the equals method
JulianChronology.getDateTimeMillis(int,int,int,int)	Description copied from class BaseChronology
ReadWritableInstant.add(ReadableDuration)	Adds a duration to this instant
ZeroIsMaxDateTimeField.getLeapDurationField()	Description copied from class BaseDateTimeField
DateTimeFormat.longTime()	Creates a format that outputs a long time format
PeriodFormatterBuilder.toPrinter()	Internal method to create a PeriodPrinter instance using all the appended elements
ZeroIsMaxDateTimeField.set(long,int)	Description copied from class BaseDateTimeField
Chronology.year()	Get the year field for this chronology
YearMonth.year()	Get the year field property which provides access to advanced functionality
RemainderDateTimeField.roundHalfCeiling(long)	Description copied from class BaseDateTimeField
AbstractInstant.isAfter(long)	Is this instant strictly after the millisecond instant passed in comparing solely by millisecond
Duration.Duration(Object)	Creates a duration from the specified object using the ConverterManager
BasePeriod.getPeriodType()	Gets the period type
Hours.parseHours(String)	Creates a new Hours by parsing a string in the ISO8601 format PTnH
MonthDay.MonthDay(Chronology)	Constructs a MonthDay with the current month day using the specified chronology and zone to extract the fields
AbstractPartialFieldProperty.getName()	Gets the name of the field
LocalDateTime.withDayOfMonth(int)	Returns a copy of this datetime with the day of month field updated
DateTimeUtils.fromJulianDay(double)	Creates a date time from a Julian Day
LocalDate.Property.setCopy(int)	Sets this field in a copy of the LocalDate
MutablePeriod.MutablePeriod(ReadableInstant,ReadableDuration,PeriodType)	Creates a period from the given start point and the duration
DateTimeZone.isLocalDateTimeGap(LocalDateTime)	Checks if the given LocalDateTime is within a gap
DividedDateTimeField.get(long)	Get the amount of scaled units from the specified time instant
Period.withDays(int)	Returns a new period with the specified number of days
PreciseDurationDateTimeField.set(long,int)	Set the specified amount of units to the specified time instant
ISODateTimeFormat.time()	Returns a formatter for a two digit hour of day two digit minute of hour two digit second of minute three digit fraction of second and time zone offset HH mm ss SSSZZ
AbstractDateTime.getCenturyOfEra()	Get the year of era field value
ReadableInterval.equals(Object)	Compares this object with the specified object for equality based on start and end millis plus the chronology
MutableDateTime.parse(String)	Parses a MutableDateTime from the specified string
PeriodType.hashCode()	Returns a hashcode based on the field types
Period.Period(long,long)	Creates a period from the given interval endpoints using the standard set of fields
DividedDateTimeField.DividedDateTimeField(DateTimeField,DateTimeFieldType,int)	Constructor
OffsetDateTimeField.roundHalfEven(long)	Description copied from class BaseDateTimeField
MutableDateTime.addMillis(int)	Add a number of milliseconds to the date The implementation of this method differs from the add long method in that a DateTimeField performs the addition
BaseChronology.monthOfYear()	Get the month of year field for this chronology
RemainderDateTimeField.getMaximumValue()	Get the maximum value for the field which is always one less than the divisor
JulianChronology.getMinimumDaysInFirstWeek()	
MutableDateTime.getRoundingMode()	Gets the rounding mode for this instant returning ROUND NONE if rounding is not enabled
DateTimeZoneBuilder.writeTo(String,DataOutput)	Encodes a built DateTimeZone to the given stream Call readFrom to decode the data into a DateTimeZone object
DecoratedDateTimeField.getMaximumValue()	Description copied from class BaseDateTimeField
TimeOfDay.plusSeconds(int)	Returns a copy of this time plus the specified number of seconds
Period.withPeriodType(PeriodType)	Creates a new Period instance with the same field values but different PeriodType
MonthDay.parse(String)	Parses a MonthDay from the specified string
PeriodType.days()	Gets a type that defines just the days field
Years.getYears()	Gets the number of years that this period represents
YearMonthDay.plusYears(int)	Returns a copy of this date plus the specified number of years
MutableDateTime.MutableDateTime(long)	Constructs an instance set to the milliseconds from 1970 01 01T00 00 00Z using ISOChronology in the default time zone
Days.plus(int)	Returns a new instance with the specified number of days added
RemainderDateTimeField.getRangeDurationField()	Returns a scaled version of the wrapped field s unit duration field
IllegalFieldValueException.getIllegalStringValue()	Returns the illegal string value assigned to the field or null if not applicable
RemainderDateTimeField.roundHalfEven(long)	Description copied from class BaseDateTimeField
AbstractInstant.isEqual(long)	Is this instant equal to the millisecond instant passed in comparing solely by millisecond
MonthDay.minusMonths(int)	Returns a copy of this month day minus the specified number of months
Duration.minus(long)	Returns a new duration with this length minus that specified
LocalTime.Property.addWrapFieldToCopy(int)	Adds to this field possibly wrapped in a copy of this LocalTime
LocalDateTime.Property.getField()	Gets the field being used
IslamicChronology.getDateTimeMillis(int,int,int,int)	Description copied from class BaseChronology
BaseChronology.getDateTimeMillis(int,int,int,int)	Returns a datetime millisecond instant formed from the given year month day and millisecond values The set of given values must refer to a valid datetime or else an IllegalArgumentException is thrown
DateTimeFormat.shortDate()	Creates a format that outputs a short date format
MonthDay.now(DateTimeZone)	Obtains a MonthDay set to the current system millisecond time using ISOChronology in the specified time zone
LocalTime.Property.setCopy(int)	Sets this field in a copy of the LocalTime
MillisDurationField.getType()	Description copied from class DurationField
MutableInterval.MutableInterval(ReadableInstant,ReadableDuration)	Constructs an interval from a start instant and a duration
BuddhistChronology.equals(Object)	Checks if this chronology instance equals another
DateMidnight.DateMidnight(int,int,int,Chronology)	Constructs an instance from datetime field values using the specified chronology
DateTimeFormatterBuilder.appendFixedSignedDecimal(DateTimeFieldType,int)	Instructs the printer to emit a field value as a fixed width decimal number smaller numbers will be left padded with zeros and the parser to expect an signed decimal number with the same fixed width
BaseSingleFieldPeriod.getFieldType(int)	Gets the field type at the specified index
ReadWritableDateTime.addDays(int)	Add a number of days to the date
DateTime.withFieldAdded(DurationFieldType,int)	Returns a copy of this datetime with the value of the specified field increased
AssembledChronology.dayOfYear()	Description copied from class BaseChronology
FormatUtils.calculateDigitCount(long)	Calculates the number of decimal digits for the given value including the sign
LocalDateTime.Property.addWrapFieldToCopy(int)	Adds to this field possibly wrapped in a copy of this LocalDateTime
YearMonth.monthOfYear()	Get the month of year field property which provides access to advanced functionality
BaseDateTimeField.roundFloor(long)	Round to the lowest whole unit of this field After rounding the value of this field and all fields of a higher magnitude are retained The fractional millis that cannot be expressed in whole increments of this field are set to minimum
Minutes.isGreaterThan(Minutes)	Is this minutes instance greater than the specified number of minutes
ReadablePartial.getFieldType(int)	Gets the field type at the specified index
DurationField.getUnitMillis()	Returns the amount of milliseconds per unit value of this field For example if this field represents seconds then this returns the milliseconds in one second
LocalTime.LocalTime(long,Chronology)	Constructs an instance set to the local time defined by the specified instant evaluated using the specified chronology
DurationField.DurationField()	
ZeroIsMaxDateTimeField.add(long,long)	Description copied from class BaseDateTimeField
MonthDay.MonthDay(Object,Chronology)	Constructs a MonthDay from an Object that represents some form of time using the specified chronology
AbstractPeriod.toPeriod()	Get this period as an immutable Period object
YearMonthDay.withDayOfMonth(int)	Returns a copy of this date with the day of month field updated
Hours.standardHoursIn(ReadablePeriod)	Creates a new Hours representing the number of complete standard length hours in the specified period
LocalDateTime.withFieldAdded(DurationFieldType,int)	Returns a copy of this datetime with the value of the specified field increased
LocalTime.withMillisOfSecond(int)	Returns a copy of this time with the millis of second field updated
DateTime.withChronology(Chronology)	Returns a copy of this datetime with a different chronology
DateTime.parse(String,DateTimeFormatter)	Parses a DateTime from the specified string using a formatter
Hours.getPeriodType()	Gets the period type which is hours
YearMonthDay.withField(DateTimeFieldType,int)	Returns a copy of this date with the specified field set to a new value
BaseChronology.set(ReadablePartial,long)	Sets the partial into the instant
LocalDate.toDateTimeAtCurrentTime()	Converts this LocalDate to a full datetime using the default time zone setting the date fields from this instance and the time fields from the current time
Partial.isMatch(ReadablePartial)	Does this partial match the specified partial
CopticChronology.toString()	Gets a debugging toString
UnsupportedDateTimeField.get(long)	Always throws UnsupportedOperationException
DateTimeZone.forOffsetMillis(int)	Gets a time zone instance for the specified offset to UTC in milliseconds
YearMonth.Property.setCopy(String)	Sets this field in a copy of the YearMonth to a parsed text value
AbstractPartial.getField(int)	Gets the field at the specified index
Chronology.withZone(DateTimeZone)	Returns an instance of this Chronology that operates in any time zone
PreciseDurationField.getValueAsLong(long,long)	Get the value of this field from the milliseconds
DelegatedDateTimeField.isLeap(long)	Description copied from class DateTimeField
AbstractDateTime.getMillisOfSecond()	Get the millis of second field value
LocalDate.toDateTimeAtStartOfDay()	Converts this LocalDate to a full datetime at the earliest valid time for the date using the default time zone
AbstractInterval.toDurationMillis()	Gets the duration of this time interval in milliseconds
LocalDateTime.LocalDateTime(Object)	Constructs an instance from an Object that represents a datetime
LocalDate.dayOfWeek()	Get the day of week property which provides access to advanced functionality
TimeOfDay.TimeOfDay(Object,Chronology)	Constructs a TimeOfDay from an Object that represents a time using the specified chronology
IslamicChronology.LeapYearPatternType.equals(Object)	
MonthDay.Property.setCopy(String)	Sets this field in a copy of the MonthDay to a parsed text value
MutableDateTime.MutableDateTime(long,DateTimeZone)	Constructs an instance set to the milliseconds from 1970 01 01T00 00 00Z using ISOChronology in the specified time zone
DateMidnight.now(Chronology)	Obtains a DateMidnight set to the current system millisecond time using the specified chronology
MutableDateTime.MutableDateTime()	Constructs an instance set to the current system millisecond time using ISOChronology in the default time zone
MutableInterval.MutableInterval(ReadableDuration,ReadableInstant)	Constructs an interval from a millisecond duration and an end instant
ISODateTimeFormat.basicOrdinalDate()	Returns a formatter for a full ordinal date using a four digit year and three digit dayOfYear yyyyDDD
MutableDateTime.setTime(long)	Set the time from milliseconds
OffsetDateTimeField.isLeap(long)	Description copied from class BaseDateTimeField
MutableDateTime.setWeekyear(int)	Set the weekyear to the specified value
Period.getMonths()	Gets the months field part of the period
PeriodType.isSupported(DurationFieldType)	Checks whether the field specified is supported by this period
Weeks.toStandardHours()	Converts this period in weeks to a period in hours assuming a 7 day week and 24 hour day
LenientDateTimeField.set(long,int)	Set values which may be out of bounds by adding the difference between the new value and the current value
DateTimeFormatter.getParser()	Gets the internal parser object that performs the real parsing work
DateTime.withWeekOfWeekyear(int)	Returns a copy of this datetime with the week of weekyear field updated
ReadWritablePeriod.addYears(int)	Adds the specified years to the number of years in the period
MutablePeriod.MutablePeriod(long,long,PeriodType)	Creates a period from the given interval endpoints
FormatUtils.appendPaddedInteger(Appendable,int,int)	Converts an integer to a string prepended with a variable amount of 0 pad characters and appends it to the given appendable
Instant.withMillis(long)	Gets a copy of this instant with different millis
DateTimeZoneBuilder.writeTo(String,OutputStream)	Encodes a built DateTimeZone to the given stream Call readFrom to decode the data into a DateTimeZone object
MutablePeriod.MutablePeriod(Object,Chronology)	Creates a period by converting or copying from another object
LocalDateTime.isSupported(DateTimeFieldType)	Checks if the field type specified is supported by this local datetime and chronology
ReadableDateTime.getYearOfCentury()	Get the year of century field value
ReadWritablePeriod.addWeeks(int)	Adds the specified weeks to the number of weeks in the period
MillisDurationField.hashCode()	
MonthDay.withDayOfMonth(int)	Returns a copy of this month day with the day of month field updated
LocalDateTime.now(Chronology)	Obtains a LocalDateTime set to the current system millisecond time using the specified chronology
DateTimeComparator.equals(Object)	Compares this comparator to another
DateTimeField.set(long,String,Locale)	Sets a value in the milliseconds supplied from a human readable text value
DateTime.withMillis(long)	Returns a copy of this datetime with different millis
DateTimeFormatterBuilder.appendDayOfMonth(int)	Instructs the printer to emit a numeric dayOfMonth field
YearMonth.parse(String)	Parses a YearMonth from the specified string
FieldUtils.safeSubtract(long,long)	Subtracts two values throwing an exception if overflow occurs
BaseDateTimeField.getAsText(long,Locale)	Get the human readable text value of this field from the milliseconds
BaseDateTimeField.getLeapDurationField()	If this field were to leap then it would be in units described by the returned duration If this field doesn t ever leap null is returned
DateMidnight.DateMidnight()	Constructs an instance set to the current system millisecond time using ISOChronology in the default time zone
PeriodFormatter.parseInto(ReadWritablePeriod,String,int)	Parses a period from the given text at the given position saving the result into the fields of the given ReadWritablePeriod If the parse succeeds the return value is the new text position Note that the parse may succeed without fully reading the text
DateTime.DateTime(Object)	Constructs an instance from an Object that represents a datetime
IllegalFieldValueException.getDurationFieldType()	Returns the DurationFieldType whose value was invalid or null if not applicable
AbstractPeriod.toString(PeriodFormatter)	Uses the specified formatter to convert this period to a String
AbstractReadableInstantFieldProperty.getDurationField()	Returns the duration per unit value of this field For example if this field represents hour of day then the duration is an hour
UnsupportedDateTimeField.getAsShortText(ReadablePartial,int,Locale)	Always throws UnsupportedOperationException
LocalDate.toString()	Output the date time in ISO8601 format yyyy MM dd
DateMidnight.dayOfMonth()	Get the day of month property which provides access to advanced functionality
AbstractPartialFieldProperty.getMaximumShortTextLength(Locale)	Gets the maximum short text length for the field
LocalTime.Property.addNoWrapToCopy(int)	Adds to this field in a copy of this LocalTime
PeriodType.getName()	Gets the name of the period type
BaseChronology.millis()	Get the millis duration field for this chronology
AbstractPartial.indexOf(DateTimeFieldType)	Gets the index of the specified field or 1 if the field is unsupported
ISOPeriodFormat.alternate()	The alternate ISO format PyyyymmddThhmmss which excludes weeks
TimeOfDay.size()	Gets the number of fields in this partial
UnsupportedDateTimeField.add(long,int)	Delegates to the duration field
DateMidnight.plus(ReadableDuration)	Returns a copy of this date with the specified duration added
ReadWritablePeriod.add(int,int,int,int,int,int,int,int)	Adds to each field of this period
AssembledChronology.weekyear()	Description copied from class BaseChronology
ReadWritablePeriod.setSeconds(int)	Sets the number of seconds of the period
DateMidnight.plus(ReadablePeriod)	Returns a copy of this date with the specified period added
MutablePeriod.MutablePeriod(Object,PeriodType,Chronology)	Creates a period by converting or copying from another object
AbstractPartial.getFieldTypes()	Gets an array of the field types that this partial supports
MutableDateTime.setRounding(DateTimeField,int)	Sets the status of rounding to use the specified field and mode
MutableDateTime.Property.set(int)	Sets a value
Period.Period(ReadablePartial,ReadablePartial)	Creates a period from two partially specified times
DateTimeFormatter.parseInto(ReadWritableInstant,String,int)	Parses a datetime from the given text at the given position saving the result into the fields of the given ReadWritableInstant If the parse succeeds the return value is the new text position Note that the parse may succeed without fully reading the text and in this case those fields that were read will be set
Interval.Interval(ReadableInstant,ReadableInstant)	Constructs an interval from a start and end instant
MutablePeriod.MutablePeriod(long,long,Chronology)	Creates a period from the given interval endpoints using the standard set of fields
MutableDateTime.addYears(int)	Add a number of years to the date
IslamicChronology.LeapYearPatternType.hashCode()	
DecoratedDateTimeField.isLenient()	Description copied from class DateTimeField
YearMonthDay.toDateMidnight()	Converts this object to a DateMidnight in the default time zone
TimeOfDay.withFieldAdded(DurationFieldType,int)	Returns a copy of this time with the value of the specified field increased wrapping to what would be a new day if required
Hours.getFieldType()	Gets the duration field type which is hours
ISODateTimeFormat.forFields(Collection,boolean,boolean)	Returns a formatter that outputs only those fields specified
DateTimeFormatterBuilder.appendDayOfWeekShortText()	Instructs the printer to emit a short locale specific dayOfWeek text The parser will accept a long or short dayOfWeek text case insensitive
DateTimeFormat.forStyle(String)	Factory to create a format from a two character style pattern
PeriodFormatterBuilder.printZeroRarelyLast()	Never print zero values for the next and following appended fields unless no fields would be printed If no fields are printed the printer forces the last printZeroRarely field to print a zero
LocalDateTime.isSupported(DurationFieldType)	Checks if the duration type specified is supported by this local datetime and chronology
UnsupportedDateTimeField.getMinimumValue(long)	Always throws UnsupportedOperationException
DelegatedDurationField.compareTo(DurationField)	
DelegatedDateTimeField.getAsText(ReadablePartial,Locale)	Description copied from class DateTimeField
LocalDateTime.Property.setCopy(String)	Sets this field in a copy of the LocalDateTime to a parsed text value
DateTimeFormatter.withZone(DateTimeZone)	Returns a new formatter that will use the specified zone in preference to the zone of the printed object or default zone on a parse
PeriodFormatterBuilder.printZeroIfSupported()	Print zero values for the next and following appended fields only if the period supports it
YearMonthDay.Property.getYearMonthDay()	Gets the partial that this property belongs to
ISOPeriodFormat.standard()	The standard ISO format PyYmMwWdDThHmMsS
LocalDate.withDayOfYear(int)	Returns a copy of this date with the day of year field updated
MutablePeriod.setDays(int)	Sets the number of days of the period
MutableDateTime.setDate(int,int,int)	Set the date from fields
ReadableInstant.getZone()	Gets the time zone of the instant from the chronology
Minutes.getPeriodType()	Gets the period type which is minutes
Period.hours(int)	Create a period with a specified number of hours
DateTimeFormatter.printTo(StringBuilder,ReadableInstant)	Prints a ReadableInstant using the chronology supplied by the instant
MutableInterval.setDurationAfterStart(ReadableDuration)	Sets the duration of this time interval preserving the start instant
UnsupportedDurationField.isPrecise()	This field is precise
ISOPeriodFormat.alternateExtended()	The alternate ISO format Pyyyy mm ddThh mm ss which excludes weeks
Period.toStandardDuration()	Converts this period to a duration assuming a 7 day week 24 hour day 60 minute hour and 60 second minute
ConverterManager.removePeriodConverter(PeriodConverter)	Removes a converter from the set of converters If the converter was not in the set no changes are made
Partial.isMatch(ReadableInstant)	Does this partial match the specified instant
YearMonth.minusYears(int)	Returns a copy of this year month minus the specified number of years
Period.withMillis(int)	Returns a new period with the specified number of millis
DividedDateTimeField.getMaximumValue()	Get the maximum value for the field
ReadableDateTime.getSecondOfDay()	Get the second of day field value
DateTimeFormatterBuilder.appendFractionOfSecond(int,int)	Appends the print parse of a fractional second
DateTimeFieldType.monthOfYear()	Get the month of year field type
FieldUtils.safeMultiply(int,int)	Multiply two values throwing an exception if overflow occurs
MutablePeriod.setMillis(int)	Sets the number of millis of the period
ReadWritableInterval.setInterval(ReadableInstant,ReadableInstant)	Sets this interval from two instants
YearMonth.plus(ReadablePeriod)	Returns a copy of this year month with the specified period added
Instant.toInstant()	Get this object as an Instant by returning this
ReadableInstant.isSupported(DateTimeFieldType)	Checks whether the field type specified is supported by this implementation
AbstractPeriod.indexOf(DurationFieldType)	Gets the index of the field in this period
DelegatedDateTimeField.getDifferenceAsLong(long,long)	Description copied from class DateTimeField
DividedDateTimeField.remainder(long)	Description copied from class BaseDateTimeField
IllegalInstantException.IllegalInstantException(String)	Constructor
AssembledChronology.secondOfDay()	Description copied from class BaseChronology
LocalDate.withField(DateTimeFieldType,int)	Returns a copy of this date with the specified field set to a new value
DelegatedDateTimeField.addWrapField(long,int)	Description copied from class DateTimeField
MonthDay.MonthDay(int,int,Chronology)	Constructs an instance set to the specified monthOfYear and dayOfMonth using the specified chronology whose zone is ignored
Interval.Interval(ReadableDuration,ReadableInstant)	Constructs an interval from a millisecond duration and an end instant
BasePeriod.getValue(int)	Gets the value at the specified index
ISODateTimeFormat.hourMinuteSecondMillis()	Returns a formatter for a two digit hour of day two digit minute of hour two digit second of minute and three digit fraction of second HH mm ss SSS Parsing will parse up to 3 fractional second digits
MutableDateTime.setDate(long)	Set the date from milliseconds
LocalDateTime.LocalDateTime(long,DateTimeZone)	Constructs an instance set to the local time defined by the specified instant evaluated using ISO chronology in the specified zone
DelegatedDateTimeField.getLeapAmount(long)	Description copied from class DateTimeField
AbstractPartialFieldProperty.getMaximumValueOverall()	Gets the maximum value for the field ignoring the current time
PreciseDurationDateTimeField.remainder(long)	This method assumes that this field is properly rounded on 1970 01 01T00 00 00 If the rounding alignment differs override this method as follows return super remainder instant ALIGNMENT MILLIS
ReadableDateTime.toString(String,Locale)	Output the instant using the specified format pattern
DateTime.parse(String)	Parses a DateTime from the specified string
AbstractReadableInstantFieldProperty.getLeapAmount()	Gets the amount by which this field is leap
YearMonth.getYear()	Get the year field value
RemainderDateTimeField.roundHalfFloor(long)	Description copied from class BaseDateTimeField
BaseChronology.dayOfWeek()	Get the day of week field for this chronology
DateTimeFormatter.DateTimeFormatter(DateTimePrinter,DateTimeParser)	Creates a new formatter however you will normally use the factory or the builder
MutableDateTime.setMinuteOfHour(int)	Set the minute of the hour to the specified value
ReadableDuration.equals(Object)	Compares this object with the specified object for equality based on the millisecond length All ReadableDuration instances are accepted
AbstractInstant.isBeforeNow()	Is this instant strictly before the current instant comparing solely by millisecond
AbstractPeriod.toString()	Gets the value as a String in the ISO8601 duration format
LocalDateTime.withMinuteOfHour(int)	Returns a copy of this datetime with the minute of hour field updated
LocalTime.minuteOfHour()	Get the minute of hour field property which provides access to advanced functionality
DateTime.withFields(ReadablePartial)	Returns a copy of this datetime with the partial set of fields replacing those from this instance
Seconds.toStandardHours()	Converts this period in seconds to a period in hours assuming a 60 minute hour and 60 second minute
LocalDateTime.plus(ReadableDuration)	Returns a copy of this datetime with the specified duration added
BasePeriod.toDurationTo(ReadableInstant)	Gets the total millisecond duration of this period relative to an end instant
DividedDateTimeField.getDifferenceAsLong(long,long)	Description copied from class BaseDateTimeField
ReadWritablePeriod.addDays(int)	Adds the specified days to the number of days in the period
DateTime.dayOfWeek()	Get the day of week property which provides access to advanced functionality
YearMonthDay.withPeriodAdded(ReadablePeriod,int)	Returns a copy of this date with the specified period added
BasePartial.getValues()	Gets an array of the value of each of the fields that this partial supports
BuddhistChronology.hashCode()	A suitable hash code for the chronology
DateTimeFormatterBuilder.canBuildFormatter()	Returns true if toFormatter can be called without throwing an UnsupportedOperationException
DateTimeFormatterBuilder.appendText(DateTimeFieldType)	Instructs the printer to emit a field value as text and the parser to expect text
DateTimeField.getAsText(int,Locale)	Get the human readable text value of this field from the field value
MutableDateTime.weekOfWeekyear()	Get the week of a week based year property
PeriodFormatter.getLocale()	Gets the locale that will be used for printing and parsing
MonthDay.fromDateFields(Date)	Constructs a MonthDay from a java util Date using exactly the same field values avoiding any time zone effects
LocalDateTime.millisOfDay()	Get the millis of day property which provides access to advanced functionality
UnsupportedDurationField.getDifferenceAsLong(long,long)	Always throws UnsupportedOperationException
Partial.Property.get()	Gets the value of this field
DateMidnight.withChronology(Chronology)	Returns a copy of this date with a different chronology potentially changing the day in unexpected ways
Partial.withFieldAddWrapped(DurationFieldType,int)	Gets a copy of this Partial with the value of the specified field increased
DateMidnight.Property.setCopy(int)	Sets this field in a copy of the DateMidnight
ImpreciseDateTimeField.add(long,long)	Description copied from class BaseDateTimeField
BaseChronology.yearOfCentury()	Get the year of century field for this chronology
BaseDateTimeField.getAsShortText(ReadablePartial,Locale)	Get the human readable short text value of this field from a partial instant
DateTime.DateTime(Object,DateTimeZone)	Constructs an instance from an Object that represents a datetime forcing the time zone to that specified
DateTimeFormat.forPattern(String)	Factory to create a formatter from a pattern string
PeriodConverter.getPeriodType(Object)	Selects a suitable period type for the given object
Duration.Duration(long,long)	Creates a duration from the given interval endpoints
Minutes.minus(Minutes)	Returns a new instance with the specified number of minutes taken away
TimeOfDay.TimeOfDay(long)	Constructs a TimeOfDay extracting the partial fields from the specified milliseconds using the ISOChronology in the default zone
AbstractPeriod.equals(Object)	Compares this object with the specified object for equality based on the value of each field All ReadablePeriod instances are accepted
DateTimeFormatterBuilder.appendMinuteOfDay(int)	Instructs the printer to emit a numeric minuteOfDay field
YearMonthDay.fromDateFields(Date)	Constructs a YearMonthDay from a java util Date using exactly the same field values avoiding any time zone effects
FieldUtils.safeMultiply(long,long)	Multiply two values throwing an exception if overflow occurs
ISODateTimeFormat.basicWeekDateTimeNoMillis()	Returns a basic formatter that combines a basic weekyear date and time without millis separated by a T xxxx W wwe T HHmmssZ
TimeOfDay.Property.withMaximumValue()	Returns a new TimeOfDay with this field set to the maximum value for this field
DecoratedDurationField.getDifferenceAsLong(long,long)	Description copied from class DurationField
YearMonthDay.minusMonths(int)	Returns a copy of this date minus the specified number of months
Chronology.add(long,long,int)	Adds the duration to the instant specifying the number of times to add
LocalDate.toInterval(DateTimeZone)	Converts this object to an Interval representing the whole day
DurationFieldType.hours()	Get the hours field type
Weeks.weeks(int)	Obtains an instance of Weeks that may be cached
DateTimeField.set(long,int)	Sets a value in the milliseconds supplied
LocalDate.size()	Gets the number of fields in this partial which is three
BaseChronology.hours()	Get the hours duration field for this chronology
AbstractInterval.isBeforeNow()	Is this time interval before the current instant
Period.Period()	Creates a new empty period with the standard set of fields
DateTimeComparator.compare(Object,Object)	Compare two objects against only the range of date time fields as specified in the constructor
Chronology.weeks()	Get the weeks duration field for this chronology
DateTimeFormatterBuilder.appendLiteral(String)	Instructs the printer to emit specific text and the parser to expect it The parser is case insensitive
DateTime.withYear(int)	Returns a copy of this datetime with the year field updated
LocalDateTime.weekyear()	Get the weekyear property which provides access to advanced functionality
DateTimeZone.getProvider()	Gets the zone provider factory
LocalDateTime.toString(String,Locale)	Output the date using the specified format pattern
TimeOfDay.toDateTimeToday(DateTimeZone)	Converts this partial to a full datetime using the specified time zone setting the time fields from this instance and the date fields from the current time
BaseDateTimeField.roundHalfFloor(long)	Round to the nearest whole unit of this field If the given millisecond value is closer to the floor or is exactly halfway this function behaves like roundFloor If the millisecond value is closer to the ceiling this function behaves like roundCeiling
StrictDateTimeField.isLenient()	Description copied from class DateTimeField
TimeOfDay.plusMinutes(int)	Returns a copy of this time plus the specified number of minutes
BaseDateTime.BaseDateTime(Chronology)	Constructs an instance set to the current system millisecond time using the specified chronology
ReadWritableInterval.setChronology(Chronology)	Sets the chronology of this time interval
MutableInterval.setInterval(ReadableInterval)	Sets this interval to be the same as another
DateTimeZoneBuilder.addRecurringSavings(String,int,int,int,char,int,int,int,boolean,int)	Add a recurring daylight saving time rule
CachedDateTimeZone.nextTransition(long)	Description copied from class DateTimeZone
ISODateTimeFormat.dateHourMinuteSecondMillis()	Returns a formatter that combines a full date two digit hour of day two digit minute of hour two digit second of minute and three digit fraction of second yyyy MM dd T HH mm ss SSS Parsing will parse up to 3 fractional second digits
Days.toString()	Gets this instance as a String in the ISO8601 duration format
UnsupportedDateTimeField.getMinimumValue()	Always throws UnsupportedOperationException
GJChronology.getInstanceUTC()	Factory method returns instances of the default GJ cutover chronology This uses a cutover date of October 15 1582 Gregorian 00 00 00 UTC For this value October 4 1582 Julian is followed by October 15 1582 Gregorian
Duration.millis(long)	Create a duration with the specified number of milliseconds
YearMonth.parse(String,DateTimeFormatter)	Parses a YearMonth from the specified string using a formatter
PeriodFormatter.print(ReadablePeriod)	Prints a ReadablePeriod to a new String
DateTimeZoneBuilder.readFrom(DataInput,String)	Decodes a built DateTimeZone from the given stream as encoded by writeTo
MutableInterval.MutableInterval(long,long,Chronology)	Constructs an interval from a start and end instant with a chronology
ISODateTimeFormat.basicDateTime()	Returns a basic formatter that combines a basic date and time separated by a T yyyyMMdd T HHmmss SSSZ
MillisDurationField.getValue(long,long)	Description copied from class DurationField
RemainderDateTimeField.getDivisor()	Returns the divisor applied in the field s units
Minutes.minutes(int)	Obtains an instance of Minutes that may be cached
PeriodType.minutes()	Gets a type that defines just the minutes field
DateTime.minusWeeks(int)	Returns a copy of this datetime minus the specified number of weeks
LocalTime.hourOfDay()	Get the hour of day field property which provides access to advanced functionality
MutableDateTime.setHourOfDay(int)	Set the hour of the day to the specified value
EthiopicChronology.getInstanceUTC()	Gets an instance of the EthiopicChronology
PeriodType.yearDay()	Gets a type that defines the year and day fields
LocalDate.toDateMidnight(DateTimeZone)	Converts this LocalDate to a DateMidnight
Duration.withMillis(long)	Creates a new Duration instance with a different millisecond length
Period.withSeconds(int)	Returns a new period with the specified number of seconds
BaseDurationField.getValue(long,long)	Get the value of this field from the milliseconds relative to an instant
InstantConverter.getChronology(Object,Chronology)	Extracts the chronology from an object of this converter s type where the chronology may be specified
EthiopicChronology.withZone(DateTimeZone)	Gets the Chronology in a specific time zone
LocalDateTime.Property.roundFloorCopy()	Rounds to the lowest whole unit of this field on a copy of this LocalDateTime
LocalDateTime.withPeriodAdded(ReadablePeriod,int)	Returns a copy of this datetime with the specified period added
Hours.multipliedBy(int)	Returns a new instance with the hours multiplied by the specified scalar
Months.monthsBetween(ReadableInstant,ReadableInstant)	Creates a Months representing the number of whole months between the two specified datetimes This method correctly handles any daylight savings time changes that may occur during the interval
MutableInterval.MutableInterval()	Constructs a zero length time interval from 1970 01 01 to 1970 01 01
DateTimeUtils.getInstantMillis(ReadableInstant)	Gets the millisecond instant from the specified instant object handling null
DateTime.yearOfEra()	Get the year of era property which provides access to advanced functionality
AbstractReadableInstantFieldProperty.toInterval()	Returns the interval that represents the range of the minimum and maximum values of this field
DelegatedDateTimeField.getAsShortText(ReadablePartial,int,Locale)	Description copied from class DateTimeField
LocalDate.era()	Get the era property which provides access to advanced functionality
BaseDateTimeField.get(long)	Get the value of this field from the milliseconds
PeriodFormatterBuilder.appendPrefix(String[],String[])	Append a field prefix which applies only to the next appended field
Chronology.secondOfDay()	Get the second of day field for this chronology
YearMonth.YearMonth(int,int,Chronology)	Constructs an instance set to the specified year and month using the specified chronology whose zone is ignored
BuddhistChronology.getInstance()	Standard instance of a Buddhist Chronology that matches Sun s BuddhistCalendar class This means that it follows the GregorianJulian calendar rules with a cutover date
DelegatedDateTimeField.roundHalfFloor(long)	Description copied from class DateTimeField
Seconds.toStandardDays()	Converts this period in seconds to a period in days assuming a 24 hour day 60 minute hour and 60 second minute
Interval.withStartMillis(long)	Creates a new interval with the specified start millisecond instant
DateTimeField.getDifference(long,long)	Computes the difference between two instants as measured in the units of this field Any fractional units are dropped from the result Calling getDifference reverses the effect of calling add In the following code long instant
DateTimeField.getMaximumValue(long)	Get the maximum value for this field evaluated at the specified time
LocalDateTime.plusHours(int)	Returns a copy of this datetime plus the specified number of hours
ISODateTimeFormat.timeParser()	Returns a generic ISO time parser for parsing times with a possible zone
GJChronology.getInstance(DateTimeZone)	Factory method returns instances of the GJ cutover chronology This uses a cutover date of October 15 1582 Gregorian 00 00 00 UTC For this value October 4 1582 Julian is followed by October 15 1582 Gregorian
DateMidnight.Property.getDateMidnight()	Gets the datetime being used
DateTime.toTimeOfDay()	Converts this object to a TimeOfDay using the same millis and chronology
BaseChronology.get(ReadablePartial,long)	Gets the values of a partial from an instant
AbstractInterval.contains(ReadableInterval)	Does this time interval contain the specified time interval
FixedDateTimeZone.getOffset(long)	Description copied from class DateTimeZone
DelegatedDateTimeField.getMaximumTextLength(Locale)	Description copied from class DateTimeField
MutableDateTime.setDayOfYear(int)	Set the day of year to the specified value
PreciseDurationField.getDifferenceAsLong(long,long)	Description copied from class DurationField
DateTimeParserBucket.saveField(DateTimeFieldType,int)	Saves a datetime field value
Minutes.plus(int)	Returns a new instance with the specified number of minutes added
ISODateTimeFormat.dateOptionalTimeParser()	Returns a generic ISO datetime parser where the date is mandatory and the time is optional
DateTime.toLocalDate()	Converts this object to a LocalDate with the same date and chronology
Instant.withDurationAdded(long,int)	Gets a copy of this instant with the specified duration added
Duration.standardMinutes(long)	Create a duration with the specified number of minutes assuming that there are the standard number of milliseconds in a minute
LocalDate.Property.getLocalDate()	Gets the LocalDate object linked to this property
AbstractPartial.isEqual(ReadablePartial)	Is this partial the same as the specified partial
ConverterManager.getInstantConverter(Object)	Gets the best converter for the object specified
BaseDateTimeField.getDifference(long,long)	Computes the difference between two instants as measured in the units of this field Any fractional units are dropped from the result Calling getDifference reverses the effect of calling add In the following code long instant
MutablePeriod.MutablePeriod(ReadableDuration,ReadableInstant)	Creates a period from the given duration and end point
Minutes.isLessThan(Minutes)	Is this minutes instance less than the specified number of minutes
LocalDateTime.toLocalDate()	Converts this object to a LocalDate with the same date and chronology
YearMonthDay.minusDays(int)	Returns a copy of this date minus the specified number of days
PeriodFormatter.isParser()	Is this formatter capable of parsing
DateTime.withDayOfWeek(int)	Returns a copy of this datetime with the day of week field updated
ScaledDurationField.getDifference(long,long)	Description copied from class DurationField
LocalDate.plusYears(int)	Returns a copy of this date plus the specified number of years
DateTime.Property.addToCopy(int)	Adds to this field in a copy of this DateTime
YearMonthDay.YearMonthDay(Object,Chronology)	Constructs a YearMonthDay from an Object that represents a time using the specified chronology
ConverterManager.addPeriodConverter(PeriodConverter)	Adds a converter to the set of converters If a matching converter is already in the set the given converter replaces it If the converter is exactly the same as one already in the set no changes are made
UnsupportedDateTimeField.getDurationField()	Even though this DateTimeField is unsupported the duration field might be supported
LocalTime.fromDateFields(Date)	Constructs a LocalTime from a java util Date using exactly the same field values
LocalTime.withPeriodAdded(ReadablePeriod,int)	Returns a copy of this time with the specified period added
DividedDateTimeField.getMinimumValue()	Get the minimum value for the field
AbstractReadableInstantFieldProperty.getMaximumTextLength(Locale)	Gets the maximum text length for the field
MonthDay.withMonthOfYear(int)	Returns a copy of this month day with the month of year field updated
PeriodFormatterBuilder.appendLiteral(String)	Instructs the printer to emit specific text and the parser to expect it
Minutes.toString()	Gets this instance as a String in the ISO8601 duration format
BaseDateTime.BaseDateTime(long,DateTimeZone)	Constructs an instance set to the milliseconds from 1970 01 01T00 00 00Z using ISOChronology in the specified time zone
Months.months(int)	Obtains an instance of Months that may be cached
DateTimeFieldType.dayOfYear()	Get the day of year field type
YearMonth.YearMonth()	Constructs a YearMonth with the current year month using ISOChronology in the default zone to extract the fields
LocalTime.LocalTime(Object)	Constructs an instance from an Object that represents a datetime
MillisDurationField.getMillis(int)	Description copied from class DurationField
LimitChronology.getDateTimeMillis(int,int,int,int,int,int,int)	Description copied from class BaseChronology
DelegatedDateTimeField.getLeapDurationField()	Description copied from class DateTimeField
AbstractConverter.getPartialValues(ReadablePartial,Object,Chronology,DateTimeFormatter)	Extracts the values of the partial from an object of this converter s type
DelegatedDateTimeField.getAsText(int,Locale)	Description copied from class DateTimeField
DateTimeParserBucket.setPivotYear(Integer)	Sets the pivot year to use when parsing two digit years
DateTimeParserBucket.setZone(DateTimeZone)	Set a time zone to be used when computeMillis is called
DateTime.minus(long)	Returns a copy of this datetime with the specified duration taken away
Partial.withFieldAdded(DurationFieldType,int)	Gets a copy of this Partial with the value of the specified field increased
DateTime.DateTime(int,int,int,int,int,int)	Constructs an instance from datetime field values using ISOChronology in the default time zone
DateTime.withLaterOffsetAtOverlap()	Returns a copy of this ZonedDateTime changing the zone offset to the later of the two valid offsets at a local time line overlap
LocalDate.LocalDate(int,int,int,Chronology)	Constructs an instance set to the specified date and time using the specified chronology whose zone is ignored
DateTimeFormatterBuilder.append(DateTimePrinter,DateTimeParser[])	Appends a printer and a set of matching parsers When parsing the first parser in the list is selected for parsing If it fails the next is chosen and so on If none of these parsers succeeds then the failed position of the parser that made the greatest progress is returned
AbstractReadableInstantFieldProperty.compareTo(ReadableInstant)	Compare this field to the same field on another instant
Interval.Interval(long,long,Chronology)	Constructs an interval from a start and end instant with the specified chronology
YearMonth.YearMonth(long)	Constructs a YearMonth extracting the partial fields from the specified milliseconds using the ISOChronology in the default zone
DateTimeFormatterBuilder.appendFractionOfDay(int,int)	Appends the print parse of a fractional day
AbstractPartialFieldProperty.hashCode()	Gets a suitable hashcode for the object
Weeks.negated()	Returns a new instance with the weeks value negated
ISOChronology.getInstance(DateTimeZone)	Gets an instance of the ISOChronology in the given time zone
GregorianChronology.getDateTimeMillis(int,int,int,int)	Description copied from class BaseChronology
LocalDate.withYear(int)	Returns a copy of this date with the year field updated
Weeks.plus(int)	Returns a new instance with the specified number of weeks added
Period.toStandardWeeks()	Converts this period to a period in weeks assuming a 7 day week 24 hour day 60 minute hour and 60 second minute
ConverterManager.getInstance()	
DateTimeFormatter.getZone()	Gets the zone to use as an override
MillisDurationField.compareTo(DurationField)	
AssembledChronology.months()	Description copied from class BaseChronology
AbstractReadableInstantFieldProperty.getMaximumValueOverall()	Gets the maximum value for the field ignoring the current time
YearMonthDay.Property.setCopy(String)	Sets this field in a copy of the YearMonthDay to a parsed text value
DateTimeZone.getShortName(long,Locale)	Gets the short name of this datetime zone suitable for display using the specified locale
ZoneInfoCompiler.parseDataFile(BufferedReader,boolean)	
ISODateTimeFormat.date()	Returns a formatter for a full date as four digit year two digit month of year and two digit day of month yyyy MM dd
MutableDateTime.Property.roundFloor()	Round to the lowest whole unit of this field
LimitChronology.hashCode()	A suitable hashcode for the chronology
DateTimeParserBucket.setOffset(int)	Set a time zone offset to be used when computeMillis is called
RemainderDateTimeField.RemainderDateTimeField(DividedDateTimeField,DateTimeFieldType)	Construct a RemainderDateTimeField that compliments the given DividedDateTimeField
LocalTime.plusSeconds(int)	Returns a copy of this time plus the specified number of seconds
DateTimeFormatter.parseLocalDate(String)	Parses only the local date from the given text returning a new LocalDate
ZeroIsMaxDateTimeField.roundFloor(long)	Description copied from class BaseDateTimeField
MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,Chronology)	Constructs an instance from datetime field values using the specified chronology
DateMidnight.withWeekyear(int)	Returns a copy of this date with the weekyear field updated
Seconds.standardSecondsIn(ReadablePeriod)	Creates a new Seconds representing the number of complete standard length seconds in the specified period
AbstractInterval.isBefore(ReadableInstant)	Is this time interval before the specified instant
Hours.dividedBy(int)	Returns a new instance with the hours divided by the specified divisor
FieldUtils.verifyValueBounds(DateTimeField,int,int,int)	Verify that input values are within specified bounds
Interval.withChronology(Chronology)	Creates a new interval with the same start and end but a different chronology
DecoratedDateTimeField.roundFloor(long)	Description copied from class BaseDateTimeField
MutableDateTime.secondOfMinute()	Get the second of minute field property
DateTimeFieldType.clockhourOfHalfday()	Get the hour of am pm offset to 1 12 field type
Period.toStandardDays()	Converts this period to a period in days assuming a 7 day week 24 hour day 60 minute hour and 60 second minute
DateTimeParserBucket.saveField(DateTimeFieldType,String,Locale)	Saves a datetime field text value
DelegatedDurationField.toString()	Description copied from class DurationField
DateTime.dayOfYear()	Get the day of year property which provides access to advanced functionality
Chronology.getDateTimeMillis(int,int,int,int)	Returns a datetime millisecond instant formed from the given year month day and millisecond values The set of given values must refer to a valid datetime or else an IllegalArgumentException is thrown
DateMidnight.Property.withMinimumValue()	Returns a new DateMidnight with this field set to the minimum value for this field
ReadableDateTime.getMonthOfYear()	Get the month of year field value
ISODateTimeFormat.dateTimeParser()	Returns a generic ISO datetime parser which parses either a date or a time or both
BaseDateTimeField.getName()	Description copied from class DateTimeField
GregorianChronology.withUTC()	Gets the Chronology in the UTC time zone
DateMidnight.centuryOfEra()	Get the century of era property which provides access to advanced functionality
PeriodFormatterBuilder.appendMonths()	Instruct the printer to emit an integer months field if supported
Period.minusSeconds(int)	Returns a new period minus the specified number of seconds taken away
DurationFieldType.months()	Get the months field type
LocalDate.LocalDate(Object,DateTimeZone)	Constructs an instance from an Object that represents a datetime forcing the time zone to that specified
LocalDateTime.dayOfMonth()	Get the day of month property which provides access to advanced functionality
BaseDateTimeField.getMinimumValue(ReadablePartial)	Get the minimum value for this field evaluated at the specified instant
YearMonth.minusMonths(int)	Returns a copy of this year month minus the specified number of months
PeriodType.withDaysRemoved()	Returns a version of this PeriodType instance that does not support days
DateTimeField.toString()	Get a suitable debug string
YearMonthDay.withChronologyRetainFields(Chronology)	Returns a copy of this date with the specified chronology
DateTimeFormatterBuilder.appendClockhourOfHalfday(int)	Instructs the printer to emit a numeric clockhourOfHalfday field
Period.days(int)	Create a period with a specified number of days
UnsupportedDurationField.getValueAsLong(long)	Always throws UnsupportedOperationException
Hours.toStandardSeconds()	Converts this period in hours to a period in seconds assuming a 60 minute hour and 60 second minute
DecoratedDateTimeField.getRangeDurationField()	Description copied from class BaseDateTimeField
GregorianChronology.getZone()	Description copied from class BaseChronology
MutablePeriod.MutablePeriod(long,PeriodType,Chronology)	Creates a period from the given millisecond duration
AssembledChronology.halfdays()	Description copied from class BaseChronology
Interval.Interval(Object,Chronology)	Constructs a time interval by converting or copying from another object overriding the chronology
LocalDate.now(DateTimeZone)	Obtains a LocalDate set to the current system millisecond time using ISOChronology in the specified time zone
ISODateTimeFormat.hourMinute()	Returns a formatter for a two digit hour of day and two digit minute of hour HH mm
DurationFieldType.toString()	Get a suitable debug string
SkipUndoDateTimeField.SkipUndoDateTimeField(Chronology,DateTimeField)	Constructor that reinserts zero
BaseDurationField.toString()	Get a suitable debug string
Interval.Interval(long,long)	Constructs an interval from a start and end instant with the ISO default chronology in the default time zone
LocalTime.LocalTime(long,DateTimeZone)	Constructs an instance set to the local time defined by the specified instant evaluated using ISO chronology in the specified zone
GregorianChronology.withZone(DateTimeZone)	Gets the Chronology in a specific time zone
DateTimeFormatterBuilder.appendHalfdayOfDayText()	Instructs the printer to emit a locale specific AM PM text and the parser to expect it The parser is case insensitive
DateTimeUtils.setCurrentMillisProvider(MillisProvider)	Sets the provider of the current time to class specified
LocalDateTime.minusMonths(int)	Returns a copy of this datetime minus the specified number of months
DurationField.isSupported()	Returns true if this field is supported
AbstractPartial.getValues()	Gets an array of the value of each of the fields that this partial supports
AbstractInterval.isAfterNow()	Is this time interval after the current instant
DateTimeField.getMaximumValue()	Get the maximum allowable value for this field
ReadWritableInterval.setEndMillis(long)	Sets the end of this time interval
MutablePeriod.getHours()	Gets the hours field part of the period
LocalDate.toString(String)	Output the date using the specified format pattern
ReadableInterval.toInterval()	Get this interval as an immutable Interval object
DelegatedDateTimeField.getAsText(long,Locale)	Description copied from class DateTimeField
BaseChronology.weekyear()	Get the year of a week based year field for this chronology
YearMonthDay.Property.addWrapFieldToCopy(int)	Adds to the value of this field in a copy of this YearMonthDay wrapping within this field if the maximum value is reached
BaseChronology.millisOfDay()	Get the millis of day field for this chronology
BaseDurationField.getValue(long)	Get the value of this field from the milliseconds which is approximate if this field is imprecise
OffsetDateTimeField.get(long)	Get the amount of offset units from the specified time instant
Partial.property(DateTimeFieldType)	Gets the property object for the specified type which contains many useful methods for getting and manipulating the partial
BaseDateTimeField.set(long,int)	Sets a value in the milliseconds supplied
IllegalFieldValueException.getIllegalValueAsString()	Returns the illegal value assigned to the field as a non null string
ReadWritablePeriod.setPeriod(ReadablePeriod)	Sets all the fields in one go from another ReadablePeriod
GregorianChronology.hashCode()	A suitable hash code for the chronology
ReadWritableDateTime.addMinutes(int)	Add a number of minutes to the date
DateTimeFormatterBuilder.appendFractionOfMinute(int,int)	Appends the print parse of a fractional minute
MillisDurationField.getName()	Description copied from class DurationField
DateTimeZone.getOffset(long)	Gets the millisecond offset to add to UTC to get local time
YearMonth.YearMonth(Chronology)	Constructs a YearMonth with the current year month using the specified chronology and zone to extract the fields
GregorianChronology.equals(Object)	Checks if this chronology instance equals another
DecoratedDurationField.getMillis(long,long)	Description copied from class DurationField
MutableInterval.MutableInterval(ReadableInstant,ReadablePeriod)	Constructs an interval from a start instant and a time period
PeriodFormatterBuilder.appendSeparator(String,String)	Append a separator which is output if fields are printed both before and after the separator
UnsupportedDateTimeField.getAsShortText(int,Locale)	Always throws UnsupportedOperationException
TimeOfDay.getMillisOfSecond()	Get the millis of second field value
MutablePeriod.addDays(int)	Adds the specified days to the number of days in the period
ReadableDateTime.getHourOfDay()	Get the hour of day field value
PeriodFormatterBuilder.appendMinutes()	Instruct the printer to emit an integer minutes field if supported
DateTimeFieldType.year()	Get the year field type
ReadablePeriod.hashCode()	Gets a hash code for the period that is compatible with the equals method
Period.withFields(ReadablePeriod)	Creates a new Period instance with the fields from the specified period copied on top of those from this period
DefaultNameProvider.getShortName(Locale,String,String)	Description copied from interface NameProvider
DateTimeField.getName()	Get the name of the field
Period.Period(ReadableDuration,ReadableInstant)	Creates a period from the given duration and end point
BaseDateTime.BaseDateTime(Object,Chronology)	Constructs an instance from an Object that represents a datetime using the specified chronology
AbstractPartialFieldProperty.getRangeDurationField()	Returns the range duration of this field For example if this field represents hour of day then the range duration is a day
Instant.withDurationAdded(ReadableDuration,int)	Gets a copy of this instant with the specified duration added
IllegalFieldValueException.getMessage()	
YearMonthDay.dayOfMonth()	Get the day of month field property which provides access to advanced functionality
Period.fieldDifference(ReadablePartial,ReadablePartial)	Creates a period from two partially specified times calculating by field difference
AbstractReadableInstantFieldProperty.remainder()	Returns the fractional duration milliseconds of this field
LocalDateTime.minus(ReadablePeriod)	Returns a copy of this datetime with the specified period taken away
Instant.Instant(Object)	Constructs an instance from an Object that represents a datetime
DateTimeFormatterBuilder.appendEraText()	Instructs the printer to emit a locale specific era text BC AD and the parser to expect it The parser is case insensitive
Period.Period(Object)	Creates a period by converting or copying from another object
Partial.Partial(ReadablePartial)	Constructs a Partial by copying all the fields and types from another partial
MutableDateTime.setChronology(Chronology)	Set the chronology of the datetime
LocalDateTime.minusSeconds(int)	Returns a copy of this datetime minus the specified number of seconds
MutablePeriod.setPeriod(ReadablePeriod)	Sets all the fields in one go from another ReadablePeriod
PeriodFormatterBuilder.appendMillis3Digit()	Instruct the printer to emit an integer millis field if supported
LocalDate.minusDays(int)	Returns a copy of this date minus the specified number of days
LocalTime.withFieldAdded(DurationFieldType,int)	Returns a copy of this time with the value of the specified field increased
BaseChronology.centuryOfEra()	Get the century of era field for this chronology
BaseDateTimeField.getAsShortText(long)	Get the human readable short text value of this field from the milliseconds
Days.getDays()	Gets the number of days that this period represents
MutableDateTime.centuryOfEra()	Get the century of era property
TimeOfDay.Property.withMinimumValue()	Returns a new TimeOfDay with this field set to the minimum value for this field
LocalDate.fromCalendarFields(Calendar)	Constructs a LocalDate from a java util Calendar using exactly the same field values
AbstractDateTime.getWeekOfWeekyear()	Get the week of weekyear field value
MutableInterval.parse(String)	Parses a MutableInterval from the specified string
StrictDateTimeField.getInstance(DateTimeField)	Returns a strict version of the given field If it is already strict then it is returned as is Otherwise a new StrictDateTimeField is returned
AbstractInstant.toDateTime(Chronology)	Get this object as a DateTime using the given chronology and its zone
Seconds.getSeconds()	Gets the number of seconds that this period represents
UTCProvider.getZone(String)	Returns UTC for UTC null otherwise
BaseSingleFieldPeriod.compareTo(BaseSingleFieldPeriod)	Compares this period to another object of the same class
DateTimeFormatterBuilder.appendSecondOfMinute(int)	Instructs the printer to emit a numeric secondOfMinute field
DateMidnight.withMillis(long)	Returns a copy of this date with a different millisecond instant
DateMidnight.withYear(int)	Returns a copy of this date with the year field updated
PeriodPrinter.calculatePrintedLength(ReadablePeriod,Locale)	Returns the exact number of characters produced for the given period
AssembledChronology.hourOfHalfday()	Description copied from class BaseChronology
TimeOfDay.property(DateTimeFieldType)	Gets the property object for the specified type which contains many useful methods
AbstractReadableInstantFieldProperty.AbstractReadableInstantFieldProperty()	Constructor
Chronology.centuries()	Get the centuries duration field for this chronology
ScaledDurationField.ScaledDurationField(DurationField,DurationFieldType,int)	Constructor
ReadableDateTime.getWeekyear()	Get the weekyear field value
JulianChronology.getInstanceUTC()	Gets an instance of the JulianChronology
ZoneInfoProvider.getAvailableIDs()	Gets a list of all the available zone ids
ScaledDurationField.getValueAsLong(long)	Description copied from class BaseDurationField
Weeks.isLessThan(Weeks)	Is this weeks instance less than the specified number of weeks
DateTimeFieldType.secondOfDay()	Get the second of day field type
DateTimeFormatterBuilder.append(DateTimePrinter)	Appends just a printer With no matching parser a parser cannot be built from this DateTimeFormatterBuilder
DateTimeFormatter.print(ReadableInstant)	Prints a ReadableInstant to a String
ISOChronology.toString()	Gets a debugging toString
DateTime.Property.addWrapFieldToCopy(int)	Adds to this field possibly wrapped in a copy of this DateTime
LocalDateTime.toDate(TimeZone)	Get the date time as a java util Date using the specified time zone
ReadableDateTime.getCenturyOfEra()	Get the year of era field value
MutablePeriod.setPeriod(ReadableInstant,ReadableInstant)	Sets all the fields in one go from two instants representing an interval
Weeks.plus(Weeks)	Returns a new instance with the specified number of weeks added
LocalDateTime.minusMinutes(int)	Returns a copy of this datetime minus the specified number of minutes
Period.weeks(int)	Create a period with a specified number of weeks
Duration.toStandardMinutes()	Converts this duration to a period in minutes assuming that there are the standard number of milliseconds in a minute
Period.withHours(int)	Returns a new period with the specified number of hours
DelegatedDurationField.getName()	Description copied from class DurationField
Years.dividedBy(int)	Returns a new instance with the years divided by the specified divisor
UnsupportedDateTimeField.getAsText(ReadablePartial,int,Locale)	Always throws UnsupportedOperationException
LocalDateTime.centuryOfEra()	Get the century of era property which provides access to advanced functionality
Weeks.standardWeeksIn(ReadablePeriod)	Creates a new Weeks representing the number of complete standard length weeks in the specified period
DateMidnight.DateMidnight(long,Chronology)	Constructs an instance set to the milliseconds from 1970 01 01T00 00 00Z using the specified chronology
AssembledChronology.monthOfYear()	Description copied from class BaseChronology
ISOChronology.hashCode()	A suitable hash code for the chronology
ReadWritableDateTime.addYears(int)	Add a number of years to the date
ISODateTimeFormat.weekDateTime()	Returns a formatter that combines a full weekyear date and time separated by a T xxxx W ww e T HH mm ss SSSZZ
Period.toStandardSeconds()	Converts this period to a period in seconds assuming a 7 day week 24 hour day 60 minute hour and 60 second minute
DateTimeZone.convertLocalToUTC(long,boolean)	Converts a local instant to a standard UTC instant with the same local time This conversion is used after performing a calculation where the calculation was done using a simple local zone
YearMonth.property(DateTimeFieldType)	Gets the property object for the specified type which contains many useful methods
LocalTime.isSupported(DurationFieldType)	Checks if the duration type specified is supported by this local time and chronology
LocalDateTime.Property.withMinimumValue()	Returns a new LocalDateTime with this field set to the minimum value for this field
Hours.minus(Hours)	Returns a new instance with the specified number of hours taken away
BaseDuration.toPeriod(Chronology)	Converts this duration to a Period instance using the standard period type and the specified chronology
AbstractReadableInstantFieldProperty.toString()	Output a debugging string
ReadWritableDateTime.setDayOfYear(int)	Set the day of year to the specified value
MonthDay.withFieldAdded(DurationFieldType,int)	Returns a copy of this month day with the value of the specified field increased
DateTime.plus(long)	Returns a copy of this datetime with the specified duration added
AssembledChronology.weekOfWeekyear()	Description copied from class BaseChronology
ReadWritableInterval.setDurationAfterStart(ReadableDuration)	Sets the duration of this time interval preserving the start instant
MutableDateTime.now(Chronology)	Obtains a MutableDateTime set to the current system millisecond time using the specified chronology
BaseInterval.getStartMillis()	Gets the start of this time interval which is inclusive
DateTimeParserBucket.saveState()	Saves the state of this bucket returning it in an opaque object Call restoreState to undo any changes that were made since the state was saved Calls to saveState may be nested
LocalDate.getValue(int)	Gets the value of the field at the specified index
LocalDate.minusYears(int)	Returns a copy of this date minus the specified number of years
OffsetDateTimeField.roundFloor(long)	Description copied from class BaseDateTimeField
DateTimeFormatterBuilder.appendLiteral(char)	Instructs the printer to emit a specific character and the parser to expect it The parser is case insensitive
MutablePeriod.add(ReadablePeriod)	Adds a period to this one by adding each field in turn
AbstractPeriod.size()	Gets the number of fields that this period supports
BaseDateTimeField.getAsText(ReadablePartial,int,Locale)	Get the human readable text value of this field from a partial instant
ReadWritablePeriod.addSeconds(int)	Adds the specified seconds to the number of seconds in the period
ISODateTimeFormat.timeNoMillis()	Returns a formatter for a two digit hour of day two digit minute of hour two digit second of minute and time zone offset HH mm ssZZ
Months.getMonths()	Gets the number of months that this period represents
MutableDateTime.Property.set(String,Locale)	Sets a text value
PeriodType.withMonthsRemoved()	Returns a version of this PeriodType instance that does not support months
ZeroIsMaxDateTimeField.isLeap(long)	Description copied from class BaseDateTimeField
Months.minus(int)	Returns a new instance with the specified number of months taken away
AbstractInstant.isBefore(ReadableInstant)	Is this instant strictly before the instant passed in comparing solely by millisecond
NameProvider.getName(Locale,String,String)	Returns a localized name or null if not found
Chronology.days()	Get the days duration field for this chronology
UnsupportedDurationField.getDifference(long,long)	Always throws UnsupportedOperationException
AbstractPartialFieldProperty.getAsString()	Gets the value of this property from the instant as a string
Months.isGreaterThan(Months)	Is this months instance greater than the specified number of months
DateTime.withPeriodAdded(ReadablePeriod,int)	Returns a copy of this datetime with the specified period added
PeriodFormatterBuilder.clear()	Clears out all the appended elements allowing this builder to be reused
Hours.negated()	Returns a new instance with the hours value negated
DecoratedDurationField.DecoratedDurationField(DurationField,DurationFieldType)	Constructor
ReadableInterval.toPeriod()	Converts the duration of the interval to a period using the standard period type
LocalDate.yearOfCentury()	Get the year of century property which provides access to advanced functionality
OffsetDateTimeField.remainder(long)	Description copied from class BaseDateTimeField
ReadWritablePeriod.addMonths(int)	Adds the specified months to the number of months in the period
Months.minus(Months)	Returns a new instance with the specified number of months taken away
ZoneInfoProvider.getZone(String)	If an error is thrown while loading zone data the exception is logged to system error and null is returned for this and all future requests
DateTimeComparator.getTimeOnlyInstance()	Returns a comparator that only considers time fields
DateTimeFieldType.getName()	Get the name of the field
LocalDateTime.withMillisOfSecond(int)	Returns a copy of this datetime with the millis of second field updated
ReadableInterval.isAfter(ReadableInstant)	Is this time interval after the specified instant
BaseChronology.halfdays()	Get the halfdays duration field for this chronology
MonthDay.Property.getField()	Gets the field that this property uses
Partial.Property.setCopy(int)	Sets this field in a copy of the Partial
YearMonthDay.toInterval()	Converts this object to an Interval representing the whole day in the default time zone
AbstractInstant.toMutableDateTime()	Get this object as a MutableDateTime in the same zone
YearMonthDay.Property.withMinimumValue()	Returns a new YearMonthDay with this field set to the minimum value for this field
LocalDateTime.withHourOfDay(int)	Returns a copy of this datetime with the hour of day field updated
YearMonthDay.Property.addToCopy(int)	Adds to the value of this field in a copy of this YearMonthDay
OffsetDateTimeField.OffsetDateTimeField(DateTimeField,DateTimeFieldType,int)	Constructor
MonthDay.dayOfMonth()	Get the day of month field property which provides access to advanced functionality
PeriodFormatterBuilder.appendMillis()	Instruct the printer to emit an integer millis field if supported
IslamicChronology.getLeapYearPatternType()	Gets the leap year pattern type
Interval.withEnd(ReadableInstant)	Creates a new interval with the specified end instant
AbstractDateTime.getDayOfMonth()	Get the day of month field value
MutableInterval.MutableInterval(ReadablePeriod,ReadableInstant)	Constructs an interval from a time period and an end instant
DateTimeUtils.getIntervalChronology(ReadableInstant,ReadableInstant)	Gets the chronology from the specified instant based interval handling null
LocalTime.get(DateTimeFieldType)	Get the value of one of the fields of time
Partial.toStringList()	Gets a string version of the partial that lists all the fields
MutablePeriod.setPeriod(long,Chronology)	Sets all the fields in one go from a millisecond duration
AbstractInterval.isAfter(ReadableInstant)	Is this time interval after the specified instant
DateMidnight.withFields(ReadablePartial)	Returns a copy of this date with the partial set of fields replacing those from this instance
Seconds.seconds(int)	Obtains an instance of Seconds that may be cached
MutablePeriod.setMinutes(int)	Sets the number of minutes of the period
DateTimeField.getMinimumValue(long)	Get the minimum value for this field evaluated at the specified time
BaseSingleFieldPeriod.get(DurationFieldType)	Gets the value of a duration field represented by this period
YearMonthDay.withYear(int)	Returns a copy of this date with the year field updated
LocalDateTime.Property.addToCopy(long)	Adds to this field in a copy of this LocalDateTime
Chronology.era()	Get the era field for this chronology
Years.minus(int)	Returns a new instance with the specified number of years taken away
LocalDate.toDateMidnight()	Converts this LocalDate to a DateMidnight in the default time zone
PeriodFormatter.parseMutablePeriod(String)	Parses a period from the given text returning a new MutablePeriod
BasePartial.toString(String)	Output the date using the specified format pattern
DateMidnight.property(DateTimeFieldType)	Gets the property object for the specified type which contains many useful methods
MonthDay.MonthDay(long)	Constructs a MonthDay extracting the partial fields from the specified milliseconds using the ISOChronology in the default zone
CopticChronology.getInstance()	Gets an instance of the CopticChronology in the default time zone
FormatUtils.appendUnpaddedInteger(StringBuffer,int)	Converts an integer to a string and appends it to the given buffer
Interval.withDurationBeforeEnd(ReadableDuration)	Creates a new interval with the specified duration before the end instant
Months.getFieldType()	Gets the duration field type which is months
YearMonthDay.getFieldTypes()	Gets an array of the field type of each of the fields that this partial supports
CachedDateTimeZone.getOffset(long)	Description copied from class DateTimeZone
LocalDate.plusDays(int)	Returns a copy of this date plus the specified number of days
LocalDateTime.getDayOfWeek()	Get the day of week field value
UnsupportedDateTimeField.getMinimumValue(ReadablePartial,int[])	Always throws UnsupportedOperationException
MonthDay.property(DateTimeFieldType)	Gets the property object for the specified type which contains many useful methods
Days.plus(Days)	Returns a new instance with the specified number of days added
JulianChronology.getInstance()	Gets an instance of the JulianChronology in the default time zone
DateTimeFormatterBuilder.appendTimeZoneName(Map)	Instructs the printer to emit a locale specific time zone name providing a lookup for parsing
LocalDateTime.Property.roundHalfEvenCopy()	Rounds to the nearest whole unit of this field on a copy of this LocalDateTime If halfway the ceiling is favored over the floor only if it makes this field s value even
Period.multipliedBy(int)	Returns a new instance with each element in this period multiplied by the specified scalar
PartialConverter.getPartialValues(ReadablePartial,Object,Chronology,DateTimeFormatter)	Extracts the values of the partial from an object of this converter s type
LocalDate.LocalDate(long,Chronology)	Constructs an instance set to the local time defined by the specified instant evaluated using the specified chronology
Minutes.toStandardWeeks()	Converts this period in minutes to a period in weeks assuming a 7 days week 24 hour day and 60 minute hour
DateTime.Property.roundHalfCeilingCopy()	Rounds to the nearest whole unit of this field on a copy of this DateTime favoring the ceiling if halfway
LocalDateTime.getWeekyear()	Get the weekyear field value
MutablePeriod.setPeriod(long,long,Chronology)	Sets all the fields in one go from a millisecond interval
PeriodFormatterBuilder.printZeroRarelyFirst()	Never print zero values for the next and following appended fields unless no fields would be printed If no fields are printed the printer forces the first printZeroRarely field to print a zero
LocalDateTime.Property.setCopy(String,Locale)	Sets this field in a copy of the LocalDateTime to a parsed text value
LocalTime.getMillisOfSecond()	Get the millis of second field value
Weeks.parseWeeks(String)	Creates a new Weeks by parsing a string in the ISO8601 format PnW
UnsupportedDateTimeField.getMaximumShortTextLength(Locale)	Always throws UnsupportedOperationException
Chronology.halfdayOfDay()	Get the AM 0 PM 1 field for this chronology
LocalDateTime.LocalDateTime(Object,DateTimeZone)	Constructs an instance from an Object that represents a datetime forcing the time zone to that specified
ScaledDurationField.getMillis(long,long)	Description copied from class DurationField
ReadablePartial.equals(Object)	Compares this partial with the specified object for equality based on the supported fields chronology and values
AbstractReadableInstantFieldProperty.compareTo(ReadablePartial)	Compare this field to the same field on another partial instant
LocalDateTime.withFields(ReadablePartial)	Returns a copy of this datetime with the partial set of fields replacing those from this instance
UnsupportedDurationField.add(long,long)	Always throws UnsupportedOperationException
MonthDay.plusMonths(int)	Returns a copy of this month day plus the specified number of months
InstantConverter.getChronology(Object,DateTimeZone)	Extracts the chronology from an object of this converter s type where the time zone is specified
LocalDateTime.monthOfYear()	Get the month of year property which provides access to advanced functionality
DateTimeFieldType.minuteOfHour()	Get the minute of hour field type
LocalDateTime.getValue(int)	Gets the value of the field at the specified index
IslamicChronology.getMinimumDaysInFirstWeek()	
YearMonthDay.getMonthOfYear()	Get the month of year field value
DurationField.getValueAsLong(long)	Get the value of this field from the milliseconds which is approximate if this field is imprecise
ZoneInfoProvider.ZoneInfoProvider(String)	ZoneInfoProvider searches the given ClassLoader resource path for compiled data files Resources are loaded from the ClassLoader that loaded this class
ReadWritableDateTime.setDate(int,int,int)	Set the date from fields
PreciseDateTimeField.getRange()	Returns the range of the field in the field s units
Chronology.getDateTimeMillis(long,int,int,int,int)	Returns a datetime millisecond instant from from the given instant hour minute second and millisecond values The set of given values must refer to a valid datetime or else an IllegalArgumentException is thrown
LocalDateTime.getDayOfMonth()	Get the day of month field value
BaseDateTimeField.set(ReadablePartial,int,int[],int)	Sets a value using the specified partial instant
Period.normalizedStandard(PeriodType)	Normalizes this period using standard rules assuming a 12 month year 7 day week 24 hour day 60 minute hour and 60 second minute providing control over how the result is split into fields
Interval.gap(ReadableInterval)	Gets the gap between this interval and another interval
AbstractDateTime.getMinuteOfDay()	Get the minute of day field value
DelegatedDurationField.getValue(long)	Description copied from class DurationField
Duration.plus(long)	Returns a new duration with this length plus that specified
AbstractReadableInstantFieldProperty.isLeap()	Gets whether this field is leap
DateTimeZone.previousTransition(long)	Retreats the given instant to where the time zone offset or name changes
DateTimeField.set(long,String)	Sets a value in the milliseconds supplied from a human readable text value
DateTime.plusYears(int)	Returns a copy of this datetime plus the specified number of years
ReadWritablePeriod.setPeriod(int,int,int,int,int,int,int,int)	Sets all the fields in one go
DateTime.Property.roundFloorCopy()	Rounds to the lowest whole unit of this field on a copy of this DateTime
IllegalFieldValueException.prependMessage(String)	Provide additional detail by prepending a message to the existing message
YearMonth.YearMonth(long,Chronology)	Constructs a YearMonth extracting the partial fields from the specified milliseconds using the chronology provided
DateTime.monthOfYear()	Get the month of year property which provides access to advanced functionality
YearMonth.withPeriodAdded(ReadablePeriod,int)	Returns a copy of this year month with the specified period added
OffsetDateTimeField.OffsetDateTimeField(DateTimeField,DateTimeFieldType,int,int,int)	Constructor
TimeOfDay.minuteOfHour()	Get the minute of hour field property which provides access to advanced functionality
PeriodFormatterBuilder.append(PeriodFormatter)	Appends another formatter
DateTimeComparator.getLowerLimit()	Gets the field type that represents the lower limit of comparison
TimeOfDay.TimeOfDay(long,Chronology)	Constructs a TimeOfDay extracting the partial fields from the specified milliseconds using the chronology provided
AbstractPartial.isBefore(ReadablePartial)	Is this partial earlier than the specified partial
BaseDateTimeField.roundHalfEven(long)	Round to the nearest whole unit of this field If the given millisecond value is closer to the floor this function behaves like roundFloor If the millisecond value is closer to the ceiling this function behaves like roundCeiling
ReadableInterval.toString()	Get the value as a String in the ISO8601 interval format
Seconds.parseSeconds(String)	Creates a new Seconds by parsing a string in the ISO8601 format PTnS
BaseDateTimeField.add(ReadablePartial,int,int[],int)	Adds a value which may be negative to the partial instant throwing an exception if the maximum size of the instant is reached
DateMidnight.minus(ReadableDuration)	Returns a copy of this date with the specified duration taken away
AbstractPartialFieldProperty.getAsText(Locale)	Gets the textual value of this property from the instant as a string in the specified locale
AssembledChronology.yearOfEra()	Description copied from class BaseChronology
Period.withMinutes(int)	Returns a new period with the specified number of minutes
DateTime.toDateTime()	Get this object as a DateTime by returning this
LocalTime.Property.setCopy(String,Locale)	Sets this field in a copy of the LocalTime to a parsed text value
Partial.getFieldTypes()	Gets an array of the field type of each of the fields that this partial supports
ZeroIsMaxDateTimeField.getMinimumValue()	Always returns 1
DateTimeZone.adjustOffset(long,boolean)	Adjusts the offset to be the earlier or later one during an overlap
LocalDate.parse(String,DateTimeFormatter)	Parses a LocalDate from the specified string using a formatter
YearMonthDay.withFieldAdded(DurationFieldType,int)	Returns a copy of this date with the value of the specified field increased
ReadWritableDateTime.setDateTime(int,int,int,int,int,int,int)	Set the date and time from fields
DateTimeField.getMinimumValue(ReadablePartial)	Get the minimum value for this field evaluated at the specified time
BaseDateTimeField.roundCeiling(long)	Round to the highest whole unit of this field The value of this field and all fields of a higher magnitude may be incremented in order to achieve this result The fractional millis that cannot be expressed in whole increments of this field are set to minimum
DurationFieldType.centuries()	Get the centuries field type
LimitChronology.getDateTimeMillis(int,int,int,int)	Description copied from class BaseChronology
JulianChronology.getDateTimeMillis(int,int,int,int,int,int,int)	Description copied from class BaseChronology
LocalDateTime.millisOfSecond()	Get the millis of second property which provides access to advanced functionality
ZeroIsMaxDateTimeField.getMaximumValue(ReadablePartial,int[])	Get the maximum value for the field which is one more than the wrapped field s maximum value
Period.Period(ReadableInstant,ReadableDuration)	Creates a period from the given start point and the duration
DateTimeUtils.getPeriodType(PeriodType)	Gets the period type handling null
MutablePeriod.MutablePeriod(long)	Creates a period from the given millisecond duration using the standard set of fields
YearMonthDay.YearMonthDay(Chronology)	Constructs a YearMonthDay with the current date using the specified chronology and zone to extract the fields
DateTime.now(DateTimeZone)	Obtains a DateTime set to the current system millisecond time using ISOChronology in the specified time zone
ZeroIsMaxDateTimeField.getLeapAmount(long)	Description copied from class BaseDateTimeField
LocalDateTime.LocalDateTime(Object,Chronology)	Constructs an instance from an Object that represents a datetime using the specified chronology
FixedDateTimeZone.nextTransition(long)	Description copied from class DateTimeZone
BaseChronology.weekOfWeekyear()	Get the week of a week based year field for this chronology
UnsupportedDateTimeField.getDifferenceAsLong(long,long)	Delegates to the duration field
ReadableInterval.isBefore(ReadableInstant)	Is this time interval before the specified instant
MutablePeriod.add(ReadableDuration)	Adds a duration to this one by dividing the duration into fields and calling add ReadablePeriod
PreciseDurationDateTimeField.isLenient()	Returns false by default
Chronology.secondOfMinute()	Get the second of minute field for this chronology
ISODateTimeFormat.basicOrdinalDateTime()	Returns a formatter for a full ordinal date and time using a four digit year and three digit dayOfYear yyyyDDD T HHmmss SSSZ
DateTime.DateTime(Object,Chronology)	Constructs an instance from an Object that represents a datetime using the specified chronology
PeriodFormatterBuilder.toFormatter()	Constructs a PeriodFormatter using all the appended elements
PeriodFormatter.getPrinter()	Gets the internal printer object that performs the real printing work
DecoratedDateTimeField.set(long,int)	Description copied from class BaseDateTimeField
Period.minutes(int)	Create a period with a specified number of minutes
DividedDateTimeField.getRangeDurationField()	Description copied from class BaseDateTimeField
LocalDateTime.withDayOfYear(int)	Returns a copy of this datetime with the day of year field updated
DateTimeField.getMaximumValue(ReadablePartial,int[])	Get the maximum value for this field using the partial instant and the specified values
PeriodType.withYearsRemoved()	Returns a version of this PeriodType instance that does not support years
DateTimeFieldType.hourOfDay()	Get the hour of day 0 23 field type
MutablePeriod.addMonths(int)	Adds the specified months to the number of months in the period
YearMonthDay.getDayOfMonth()	Get the day of month field value
PreciseDateTimeField.get(long)	Get the amount of fractional units from the specified time instant
Chronology.get(ReadablePeriod,long,long)	Gets the values of a period from an interval
MutablePeriod.addMinutes(int)	Adds the specified minutes to the number of minutes in the period
AbstractInstant.toString()	Output the date time in ISO8601 format yyyy MM ddTHH mm ss SSSZZ
DateTime.DateTime()	Constructs an instance set to the current system millisecond time using ISOChronology in the default time zone
DateMidnight.DateMidnight(DateTimeZone)	Constructs an instance set to the current system millisecond time using ISOChronology in the specified time zone
BaseChronology.centuries()	Get the centuries duration field for this chronology
PeriodType.yearWeekDayTime()	Gets a type that defines all standard fields except months
ReadableInterval.isAfter(ReadableInterval)	Is this time interval entirely after the specified interval
ISOPeriodFormat.alternateExtendedWithWeeks()	The alternate ISO format Pyyyy Www ddThh mm ss which excludes months
ReadWritableInstant.setMillis(ReadableInstant)	Sets the millisecond instant of this instant from another
Interval.abuts(ReadableInterval)	Does this interval abut with the interval specified
LocalDate.withDayOfWeek(int)	Returns a copy of this date with the day of week field updated
BaseChronology.add(long,long,int)	Adds the duration to the instant specifying the number of times to add
ReadWritablePeriod.setDays(int)	Sets the number of days of the period
DateTimeFormatter.print(ReadablePartial)	Prints a ReadablePartial to a new String
DelegatedDateTimeField.set(long,String,Locale)	Description copied from class DateTimeField
DateTimeFormatterBuilder.appendDayOfWeekText()	Instructs the printer to emit a locale specific dayOfWeek text The parser will accept a long or short dayOfWeek text case insensitive
LocalDateTime.fromCalendarFields(Calendar)	Constructs a LocalDateTime from a java util Calendar using exactly the same field values
YearMonthDay.YearMonthDay()	Constructs a YearMonthDay with the current date using ISOChronology in the default zone to extract the fields
Period.Period(int,int,int,int)	Create a period from a set of field values using the standard set of fields
DelegatedDateTimeField.getMaximumValue()	Description copied from class DateTimeField
MonthDay.Property.addWrapFieldToCopy(int)	Adds to the value of this field in a copy of this MonthDay wrapping within this field if the maximum value is reached
LocalDateTime.LocalDateTime()	Constructs an instance set to the current local time evaluated using ISO chronology in the default zone
ISODateTimeFormat.basicTTimeNoMillis()	Returns a basic formatter for a two digit hour of day two digit minute of hour two digit second of minute and time zone offset prefixed by T T HHmmssZ
LocalDateTime.withMillisOfDay(int)	Returns a copy of this datetime with the millis of day field updated
IslamicChronology.withUTC()	Gets the Chronology in the UTC time zone
AbstractReadableInstantFieldProperty.getFieldType()	Gets the field type being used
UnsupportedDateTimeField.getMaximumValue()	Always throws UnsupportedOperationException
TimeOfDay.Property.getTimeOfDay()	Gets the partial that this property belongs to
Chronology.seconds()	Get the seconds duration field for this chronology
AssembledChronology.dayOfWeek()	Description copied from class BaseChronology
Partial.withField(DateTimeFieldType,int)	Gets a copy of this Partial with the specified field set to a new value
GregorianChronology.getInstance(DateTimeZone)	Gets an instance of the GregorianChronology in the given time zone
ScaledDurationField.getMillis(long)	Description copied from class BaseDurationField
DecoratedDurationField.getMillis(int,long)	Description copied from class DurationField
OffsetDateTimeField.add(long,long)	Add the specified amount of offset units to the specified time instant The amount added may be negative
AssembledChronology.millis()	Description copied from class BaseChronology
DateTimeFormatterBuilder.appendFractionOfHour(int,int)	Appends the print parse of a fractional hour
Period.parse(String)	Parses a Period from the specified string
UnsupportedDateTimeField.isSupported()	This field is not supported
DelegatedDateTimeField.getAsShortText(long,Locale)	Description copied from class DateTimeField
BaseDateTimeField.getAsText(ReadablePartial,Locale)	Get the human readable text value of this field from a partial instant
DateTimeFormatterBuilder.appendPattern(String)	Calls upon DateTimeFormat to parse the pattern and append the results into this builder
PeriodType.toString()	Gets a debugging to string
DateTimeFormatterBuilder.appendTwoDigitYear(int,boolean)	Instructs the printer to emit a numeric year field which always prints two digits A pivot year is used during parsing to determine the range of supported years as pivot 50 pivot 49 If parse is instructed to be lenient and the digit count is not two it is treated as an absolute year With lenient parsing specifying a positive or negative sign before the year also makes it absolute
Provider.getZone(String)	Retrieves a DateTimeZone for the given id All providers must at least support id UTC
DateTimeFieldType.toString()	Get a suitable debug string
LenientChronology.withUTC()	Description copied from class BaseChronology
AssembledChronology.secondOfMinute()	Description copied from class BaseChronology
Partial.size()	Gets the number of fields in this partial
ReadWritableDateTime.setWeekOfWeekyear(int)	Set the week of weekyear to the specified value
Years.getFieldType()	Gets the duration field type which is years
DateTime.Property.getField()	Gets the field being used
Instant.toDateTimeISO()	Get this object as a DateTime using ISOChronology in the default zone
DateTime.minuteOfHour()	Get the minute of hour field property which provides access to advanced functionality
ConverterManager.getPartialConverters()	Gets a copy of the set of converters
Duration.Duration(ReadableInstant,ReadableInstant)	Creates a duration from the given interval endpoints
ScaledDurationField.equals(Object)	Compares this duration field to another
LocalDateTime.era()	Get the era property which provides access to advanced functionality
DateTimeFormatterBuilder.appendYearOfEra(int,int)	Instructs the printer to emit a numeric yearOfEra field
AbstractInterval.toInterval()	Get this interval as an immutable Interval object
DurationFieldType.eras()	Get the eras field type
Period.minus(ReadablePeriod)	Returns a new period with the specified period subtracted
LenientDateTimeField.isLenient()	Description copied from class DateTimeField
DurationField.isPrecise()	Is this field precise A precise field can calculate its value from milliseconds without needing a reference date Put another way a precise field s unit size is not variable
LocalDateTime.plusYears(int)	Returns a copy of this datetime plus the specified number of years
DividedDateTimeField.add(long,int)	Add the specified amount of scaled units to the specified time instant The amount added may be negative
ReadableDateTime.getMinuteOfHour()	Get the minute of hour field value
BaseChronology.get(ReadablePeriod,long)	Gets the values of a period from an interval
DateTimeUtils.isContiguous(ReadablePartial)	Checks whether the partial is contiguous
Hours.toStandardWeeks()	Converts this period in hours to a period in weeks assuming a 7 day week and 24 hour day
DurationFieldType.getField(Chronology)	Gets a suitable field for this type from the given Chronology
BaseDateTime.BaseDateTime(int,int,int,int,int,int,int)	Constructs an instance from datetime field values using ISOChronology in the default time zone
LenientChronology.equals(Object)	A lenient chronology is only equal to a lenient chronology with the same base chronology
DateTimeParserBucket.reset()	Resets the state back to that when the object was constructed
LocalDateTime.getEra()	Get the era field value
DateTimeUtils.setCurrentMillisFixed(long)	Sets the current time to return a fixed millisecond time
DateMidnight.toYearMonthDay()	Converts this object to a YearMonthDay using the same date and chronology
DateMidnight.plusMonths(int)	Returns a copy of this date plus the specified number of months
OffsetDateTimeField.addWrapField(long,int)	Add to the offset component of the specified time instant wrapping around within that component if necessary
AbstractPartialFieldProperty.getMinimumValueOverall()	Gets the minimum value for the field ignoring the current time
MutableDateTime.minuteOfHour()	Get the minute of hour field property
MutablePeriod.setValue(int,int)	Sets the value of one of the fields by index
Days.parseDays(String)	Creates a new Days by parsing a string in the ISO8601 format PnD
AbstractDateTime.getYearOfCentury()	Get the year of century field value
BasePeriod.toDurationFrom(ReadableInstant)	Gets the total millisecond duration of this period relative to a start instant
Instant.getChronology()	Gets the chronology of the instant which is ISO in the UTC zone
Period.minusMillis(int)	Returns a new period minus the specified number of millis taken away
DecoratedDurationField.getUnitMillis()	Description copied from class DurationField
LocalDateTime.get(DateTimeFieldType)	Get the value of one of the fields of a datetime
LocalTime.getSecondOfMinute()	Get the second of minute field value
PeriodFormatterBuilder.appendPrefix(String,String)	Append a field prefix which applies only to the next appended field If the field is not printed neither is the prefix
DateTime.minusMillis(int)	Returns a copy of this datetime minus the specified number of millis
AbstractReadableInstantFieldProperty.getMinimumValue()	Gets the minimum value for the field
LocalDate.toDateTime(LocalTime)	Converts this object to a DateTime using a LocalTime to fill in the missing fields and using the default time zone
Duration.getStandardMinutes()	Gets the length of this duration in minutes assuming that there are the standard number of milliseconds in a minute
AbstractInterval.contains(ReadableInstant)	Does this time interval contain the specified instant
AbstractInstant.hashCode()	Gets a hash code for the instant as defined in ReadableInstant
UnsupportedDateTimeField.addWrapField(long,int)	Always throws UnsupportedOperationException
PeriodType.dayTime()	Gets a type that defines all standard fields from days downwards
DateTimeField.add(long,int)	Adds a value which may be negative to the millis value overflowing into larger fields if necessary
DelegatedDateTimeField.getMaximumShortTextLength(Locale)	Description copied from class DateTimeField
UnsupportedDateTimeField.getLeapAmount(long)	Always throws UnsupportedOperationException
AbstractInstant.equals(Object)	Compares this object with the specified object for equality based on the millisecond instant chronology and time zone
BaseChronology.days()	Get the days duration field for this chronology
TimeOfDay.getFieldType(int)	Gets the field type at the specified index
DateTimeFormatterBuilder.appendMonthOfYearText()	Instructs the printer to emit a short locale specific monthOfYear text The parser will accept a long or short monthOfYear text case insensitive
LocalDate.getDayOfWeek()	Get the day of week field value
LocalDateTime.toDate()	Get the date time as a java util Date
Chronology.yearOfEra()	Get the year of era field for this chronology
DateTime.DateTime(int,int,int,int,int,Chronology)	Constructs an instance from datetime field values using the specified chronology
ZonedChronology.hashCode()	A suitable hashcode for the chronology
BaseChronology.dayOfMonth()	Get the day of month field for this chronology
DateTimeZone.getName(long)	Gets the long name of this datetime zone suitable for display using the default locale
Duration.getStandardHours()	Gets the length of this duration in hours assuming that there are the standard number of milliseconds in an hour
DateTimeZone.getStandardOffset(long)	Gets the standard millisecond offset to add to UTC to get local time when standard time is in effect
Interval.Interval(ReadablePeriod,ReadableInstant)	Constructs an interval from a time period and an end instant
MutablePeriod.getMillis()	Gets the millis field part of the period
DateTime.weekyear()	Get the year of a week based year property which provides access to advanced functionality
DateTimeParserBucket.restoreState(Object)	Restores the state of this bucket from a previously saved state The state object passed into this method is not consumed and it can be used later to restore to that state again
DateTimeField.addWrapPartial(ReadablePartial,int,int[],int)	Adds a value which may be negative to the partial instant wrapping the whole partial if the maximum size of the partial is reached
PreciseDurationDateTimeField.roundFloor(long)	This method assumes that this field is properly rounded on 1970 01 01T00 00 00 If the rounding alignment differs override this method as follows return super roundFloor instant ALIGNMENT MILLIS ALIGNMENT MILLIS
ISODateTimeFormat.weekDate()	Returns a formatter for a full date as four digit weekyear two digit week of weekyear and one digit day of week xxxx W ww e
BaseDateTimeField.addWrapField(ReadablePartial,int,int[],int)	Adds a value which may be negative to the partial instant wrapping within this field
EthiopicChronology.getMinimumDaysInFirstWeek()	
MonthDay.toString()	Output the month day in ISO8601 format MM dd
TimeOfDay.getSecondOfMinute()	Get the second of minute field value
ReadWritableInstant.setZone(DateTimeZone)	Sets the time zone of the datetime changing the chronology and field values
DelegatedDateTimeField.set(ReadablePartial,int,int[],int)	Description copied from class DateTimeField
LocalTime.Property.withMinimumValue()	Returns a new LocalTime with this field set to the minimum value for this field
AssembledChronology.getDateTimeMillis(int,int,int,int,int,int,int)	Description copied from class BaseChronology
MutableDateTime.setSecondOfMinute(int)	Set the second of the minute to the specified value
DelegatedDateTimeField.roundCeiling(long)	Description copied from class DateTimeField
ReadableInstant.equals(Object)	Compares this object with the specified object for equality based on the millisecond instant and the Chronology All ReadableInstant instances are accepted
BaseDuration.getMillis()	Gets the length of this duration in milliseconds
FieldUtils.verifyValueBounds(String,int,int,int)	Verify that input values are within specified bounds
LocalTime.LocalTime()	Constructs an instance set to the current local time evaluated using ISO chronology in the default zone
MonthDay.MonthDay(DateTimeZone)	Constructs a MonthDay with the current month day using ISOChronology in the specified zone to extract the fields
ReadWritableInterval.setInterval(ReadableInterval)	Sets this interval to be the same as another
DateTimeField.DateTimeField()	
AbstractInstant.toDateTime()	Get this object as a DateTime in the same zone
OffsetDateTimeField.getLeapDurationField()	Description copied from class BaseDateTimeField
ISODateTimeFormat.tTimeNoMillis()	Returns a formatter for a two digit hour of day two digit minute of hour two digit second of minute and time zone offset prefixed by T T HH mm ssZZ
Days.toStandardWeeks()	Converts this period in days to a period in weeks assuming a 7 day week
LocalDate.getDayOfMonth()	Get the day of month field value
Months.parseMonths(String)	Creates a new Months by parsing a string in the ISO8601 format PnM
DateTime.withMonthOfYear(int)	Returns a copy of this datetime with the month of year field updated
AbstractInstant.toDateTimeISO()	Get this object as a DateTime using ISOChronology in the same zone
MutableDateTime.yearOfEra()	Get the year of era property
AbstractPartial.isAfter(ReadablePartial)	Is this partial later than the specified partial
DateTime.plus(ReadableDuration)	Returns a copy of this datetime with the specified duration added
DateMidnight.year()	Get the year property which provides access to advanced functionality
PeriodFormatterBuilder.appendSeconds()	Instruct the printer to emit an integer seconds field if supported
MutableDateTime.setRounding(DateTimeField)	Sets the status of rounding to use the specified field and ROUND FLOOR mode
PeriodFormatter.PeriodFormatter(PeriodPrinter,PeriodParser)	Creates a new formatter however you will normally use the factory or the builder
AbstractPartialFieldProperty.compareTo(ReadableInstant)	Compare this field to the same field on another instant
DateTimeUtils.MillisProvider.getMillis()	Gets the current time
RemainderDateTimeField.RemainderDateTimeField(DividedDateTimeField,DurationField,DateTimeFieldType)	Construct a RemainderDateTimeField that compliments the given DividedDateTimeField
DateTimeZone.forTimeZone(TimeZone)	Gets a time zone instance for a JDK TimeZone
DateMidnight.now(DateTimeZone)	Obtains a DateMidnight set to the current system millisecond time using ISOChronology in the specified time zone
DateTime.withYearOfCentury(int)	Returns a copy of this datetime with the year of century field updated
MutableDateTime.add(ReadablePeriod,int)	Adds a period to this instant specifying how many times to add
LocalTime.toString(String)	Output the time using the specified format pattern
Chronology.hourOfDay()	Get the hour of day 0 23 field for this chronology
DelegatedDateTimeField.isLenient()	Description copied from class DateTimeField
YearMonth.fromDateFields(Date)	Constructs a YearMonth from a java util Date using exactly the same field values avoiding any time zone effects
EthiopicChronology.toString()	Gets a debugging toString
DateTime.yearOfCentury()	Get the year of century property which provides access to advanced functionality
BaseChronology.minuteOfDay()	Get the minute of day field for this chronology
ISODateTimeFormat.year()	Returns a formatter for a four digit year yyyy
DateMidnight.DateMidnight(Chronology)	Constructs an instance set to the current system millisecond time using the specified chronology
LocalTime.LocalTime(Object,Chronology)	Constructs an instance from an Object that represents a datetime using the specified chronology
LocalDateTime.withWeekyear(int)	Returns a copy of this datetime with the weekyear field updated
DelegatedDateTimeField.roundHalfEven(long)	Description copied from class DateTimeField
Instant.Instant()	Constructs an instance set to the current system millisecond time
Period.Period(Object,PeriodType,Chronology)	Creates a period by converting or copying from another object
UnsupportedDateTimeField.getAsText(int,Locale)	Always throws UnsupportedOperationException
DurationField.getDifferenceAsLong(long,long)	Computes the difference between two instants as measured in the units of this field Any fractional units are dropped from the result Calling getDifference reverses the effect of calling add In the following code long instant
MutableDateTime.setZone(DateTimeZone)	Sets the time zone of the datetime changing the chronology and field values
UnsupportedDateTimeField.roundHalfFloor(long)	Always throws UnsupportedOperationException
PeriodPrinter.printTo(Writer,ReadablePeriod,Locale)	Prints a ReadablePeriod to a Writer
Months.toString()	Gets this instance as a String in the ISO8601 duration format
LocalDateTime.withYearOfCentury(int)	Returns a copy of this datetime with the year of century field updated
ISODateTimeFormat.basicOrdinalDateTimeNoMillis()	Returns a formatter for a full ordinal date and time without millis using a four digit year and three digit dayOfYear yyyyDDD T HHmmssZ
DateTime.dayOfMonth()	Get the day of month property which provides access to advanced functionality
ReadableInstant.getMillis()	Get the value as the number of milliseconds since the epoch 1970 01 01T00 00 00Z
Duration.toStandardDays()	Converts this duration to a period in days assuming that there are the standard number of milliseconds in a day
PeriodType.withWeeksRemoved()	Returns a version of this PeriodType instance that does not support weeks
ImpreciseDateTimeField.ImpreciseDateTimeField(DateTimeFieldType,long)	Constructor
DateTimeField.set(ReadablePartial,int,int[],String,Locale)	Sets a value in the milliseconds supplied from a human readable text value
PeriodType.withSecondsRemoved()	Returns a version of this PeriodType instance that does not support seconds
DateTime.millisOfDay()	Get the millis of day property which provides access to advanced functionality
LocalDateTime.size()	Gets the number of fields in this partial which is four
DateTime.minus(ReadablePeriod)	Returns a copy of this datetime with the specified period taken away
ReadableDateTime.getYearOfEra()	Get the year of era field value
DateTimeParserBucket.getOffsetInteger()	Returns the time zone offset in milliseconds used by computeMillis
ImpreciseDateTimeField.roundFloor(long)	Description copied from class BaseDateTimeField
LocalDateTime.getSecondOfMinute()	Get the second of minute field value
ReadablePeriod.isSupported(DurationFieldType)	Checks whether the field type specified is supported by this period
UnsupportedDateTimeField.set(ReadablePartial,int,int[],int)	Always throws UnsupportedOperationException
ConverterManager.addPartialConverter(PartialConverter)	Adds a converter to the set of converters If a matching converter is already in the set the given converter replaces it If the converter is exactly the same as one already in the set no changes are made
DateTimeFormat.mediumDate()	Creates a format that outputs a medium date format
DateMidnight.weekOfWeekyear()	Get the week of a week based year property which provides access to advanced functionality
DateTime.toDateTime(Chronology)	Get this object as a DateTime returning this if possible
Duration.toStandardSeconds()	Converts this duration to a period in seconds assuming that there are the standard number of milliseconds in a second
Period.plusSeconds(int)	Returns a new period plus the specified number of seconds added
BaseDateTimeField.set(long,String)	Sets a value in the milliseconds supplied from a human readable text value
Weeks.isGreaterThan(Weeks)	Is this weeks instance greater than the specified number of weeks
Period.Period(ReadablePartial,ReadablePartial,PeriodType)	Creates a period from two partially specified times
ReadableInstant.get(DateTimeFieldType)	Get the value of one of the fields of a datetime
BaseChronology.clockhourOfHalfday()	Get the hour of am pm offset to 1 12 field for this chronology
DateTimeFormatterBuilder.appendTimeZoneShortName()	Instructs the printer to emit a short locale specific time zone name
MutablePeriod.MutablePeriod(long,long,PeriodType,Chronology)	Creates a period from the given interval endpoints
DateTimeZoneBuilder.toDateTimeZone(String,boolean)	Processes all the rules and builds a DateTimeZone
RemainderDateTimeField.RemainderDateTimeField(DateTimeField,DurationField,DateTimeFieldType,int)	Constructor
DateTimeUtils.currentTimeMillis()	Gets the current time in milliseconds
Instant.toMutableDateTimeISO()	Get this object as a MutableDateTime using ISOChronology in the default zone
Chronology.add(ReadablePeriod,long,int)	Adds the period to the instant specifying the number of times to add
AssembledChronology.dayOfMonth()	Description copied from class BaseChronology
YearMonthDay.toDateTimeAtMidnight()	Converts this YearMonthDay to a full datetime at midnight using the default time zone
BaseDateTimeField.addWrapPartial(ReadablePartial,int,int[],int)	Adds a value which may be negative to the partial instant wrapping the whole partial if the maximum size of the partial is reached
ZeroIsMaxDateTimeField.getMaximumValue(long)	Get the maximum value for the field which is one more than the wrapped field s maximum value
AbstractReadableInstantFieldProperty.getAsText(Locale)	Gets the textual value of this property from the instant as a string in the specified locale
LocalDateTime.plusMinutes(int)	Returns a copy of this datetime plus the specified number of minutes
Period.withMonths(int)	Returns a new period with the specified number of months
DateTimeFormatterBuilder.appendYear(int,int)	Instructs the printer to emit a numeric year field
MonthDay.withField(DateTimeFieldType,int)	Returns a copy of this month day with the specified field set to a new value
TimeOfDay.Property.setCopy(int)	Sets this field in a copy of the TimeOfDay
DurationField.getMillis(int,long)	Get the millisecond duration of this field from its value relative to an instant For precise fields this method produces the same result as for the single argument getMillis method
ConverterManager.removeDurationConverter(DurationConverter)	Removes a converter from the set of converters If the converter was not in the set no changes are made
BaseDateTimeField.getMaximumValue(ReadablePartial)	Get the maximum value for this field evaluated at the specified instant
AssembledChronology.weeks()	Description copied from class BaseChronology
LocalDate.LocalDate(Chronology)	Constructs an instance set to the current local time evaluated using specified chronology
AbstractReadableInstantFieldProperty.getAsShortText()	Gets the short textual value of this property from the instant as a string in the default locale
DateTime.withYearOfEra(int)	Returns a copy of this datetime with the year of era field updated
Days.multipliedBy(int)	Returns a new instance with the days multiplied by the specified scalar
AbstractPartialFieldProperty.getMinimumValue()	Gets the minimum value for this field given the current field values
BaseDateTimeField.getMaximumValue()	Get the maximum allowable value for this field
GJChronology.getInstance(DateTimeZone,ReadableInstant,int)	Factory method returns instances of the GJ cutover chronology Any cutover date may be specified
LocalDateTime.getDayOfYear()	Get the day of year field value
DateTime.plusDays(int)	Returns a copy of this datetime plus the specified number of days
MutableDateTime.Property.getField()	Gets the field being used
DateTimeParserBucket.computeMillis(boolean,String)	Computes the parsed datetime by setting the saved fields
ImpreciseDateTimeField.set(long,int)	Description copied from class BaseDateTimeField
DividedDateTimeField.DividedDateTimeField(RemainderDateTimeField,DurationField,DateTimeFieldType)	Construct a DividedDateTimeField that compliments the given RemainderDateTimeField
UnsupportedDurationField.getValue(long,long)	Always throws UnsupportedOperationException
LocalTime.Property.roundHalfCeilingCopy()	Rounds to the nearest whole unit of this field on a copy of this LocalTime favoring the ceiling if halfway
AbstractDuration.equals(Object)	Compares this object with the specified object for equality based on the millisecond length All ReadableDuration instances are accepted
DateTimeComparator.toString()	Gets a debugging string
BaseDateTime.BaseDateTime()	Constructs an instance set to the current system millisecond time using ISOChronology in the default time zone
FixedDateTimeZone.equals(Object)	Description copied from class DateTimeZone
PeriodType.standard()	Gets a type that defines all standard fields
DateTimeFormatter.getPrinter()	Gets the internal printer object that performs the real printing work
DateTimeUtils.setCurrentMillisSystem()	Resets the current time to return the system time
Seconds.multipliedBy(int)	Returns a new instance with the seconds multiplied by the specified scalar
CopticChronology.getDateTimeMillis(int,int,int,int,int,int,int)	Description copied from class BaseChronology
BaseDateTimeField.getType()	Description copied from class DateTimeField
YearMonth.toString()	Output the year month in ISO8601 format yyyy MM
AbstractPeriod.getFieldType(int)	Gets the field type at the specified index
DateTimeField.setExtended(long,int)	Sets a value in the milliseconds supplied allowing a little leniency at the margins
BaseChronology.months()	Get the months duration field for this chronology
LimitChronology.withUTC()	If this LimitChronology is already UTC then this is returned Otherwise a new instance is returned with the limits adjusted to the new time zone
ReadWritableInterval.setEnd(ReadableInstant)	Sets the end of this time interval as an Instant
JulianChronology.equals(Object)	Checks if this chronology instance equals another
Seconds.toStandardMinutes()	Converts this period in seconds to a period in minutes assuming a 60 second minute
ReadWritablePeriod.clear()	Clears the period setting all values back to zero
RemainderDateTimeField.getMinimumValue()	Get the minimum value for the field which is always zero
DateTime.withWeekyear(int)	Returns a copy of this datetime with the weekyear field updated
LocalTime.withFields(ReadablePartial)	Returns a copy of this time with the partial set of fields replacing those from this instance
UnsupportedDateTimeField.getAsText(long,Locale)	Always throws UnsupportedOperationException
BaseDateTime.BaseDateTime(long,Chronology)	Constructs an instance set to the milliseconds from 1970 01 01T00 00 00Z using the specified chronology
DateTimeFormatterBuilder.appendDecimal(DateTimeFieldType,int,int)	Instructs the printer to emit a field value as a decimal number and the parser to expect an unsigned decimal number
IllegalFieldValueException.IllegalFieldValueException(DateTimeFieldType,Number,String)	Constructor
TimeOfDay.getMinuteOfHour()	Get the minute of hour field value
ReadablePartial.getChronology()	Gets the chronology of the partial which is never null
YearMonth.Property.setCopy(String,Locale)	Sets this field in a copy of the YearMonth to a parsed text value
LocalDateTime.Property.roundHalfCeilingCopy()	Rounds to the nearest whole unit of this field on a copy of this LocalDateTime favoring the ceiling if halfway
DateMidnight.parse(String)	Parses a DateMidnight from the specified string
AbstractInterval.toPeriod()	Converts the duration of the interval to a Period using the All period type
Weeks.toStandardDuration()	Converts this period in weeks to a duration in milliweeks assuming a 7 day week 24 hour day 60 minute hour and 60 second minute
ReadWritableInterval.setStartMillis(long)	Sets the start of this time interval
UnsupportedDateTimeField.getAsShortText(long,Locale)	Always throws UnsupportedOperationException
Days.isGreaterThan(Days)	Is this days instance greater than the specified number of days
DecoratedDurationField.getWrappedField()	Gets the wrapped duration field
DelegatedDateTimeField.toString()	Description copied from class DateTimeField
DateMidnight.DateMidnight(Object,DateTimeZone)	Constructs an instance from an Object that represents a datetime forcing the time zone to that specified
UnsupportedDurationField.getMillis(long,long)	Always throws UnsupportedOperationException
Instant.plus(long)	Gets a copy of this instant with the specified duration added
YearMonth.toInterval()	Converts this object to an Interval representing the whole month
DateTimeFormatterBuilder.canBuildParser()	Returns true if toParser can be called without throwing an UnsupportedOperationException
Days.getPeriodType()	Gets the period type which is days
Hours.hoursIn(ReadableInterval)	Creates a Hours representing the number of whole hours in the specified interval
Years.plus(Years)	Returns a new instance with the specified number of years added
MutableDateTime.setDayOfWeek(int)	Set the day of week to the specified value
AbstractInterval.isBefore(ReadableInterval)	Is this time interval entirely before the specified instant
DateMidnight.DateMidnight(int,int,int)	Constructs an instance from datetime field values using ISOChronology in the default time zone
DateMidnight.Property.addToCopy(int)	Adds to this field in a copy of this DateMidnight
AbstractInterval.containsNow()	Does this time interval contain the current instant
Seconds.secondsIn(ReadableInterval)	Creates a Seconds representing the number of whole seconds in the specified interval
Partial.getFormatter()	Gets a formatter suitable for the fields in this partial
MutablePeriod.addHours(int)	Adds the specified hours to the number of hours in the period
DecoratedDurationField.add(long,int)	Description copied from class DurationField
LocalDate.plus(ReadablePeriod)	Returns a copy of this date with the specified period added
AbstractInterval.overlaps(ReadableInterval)	Does this time interval overlap the specified time interval
DateTime.DateTime(int,int,int,int,int,int,DateTimeZone)	Constructs an instance from datetime field values using ISOChronology in the specified time zone
BaseChronology.years()	Get the years duration field for this chronology
LocalDate.Property.getField()	Gets the field being used
BaseDurationField.getDifference(long,long)	Description copied from class DurationField
BaseDateTimeField.add(long,long)	Adds a value which may be negative to the instant value overflowing into larger fields if necessary
BaseDateTimeField.getLeapAmount(long)	Gets the amount by which this field is leap for the specified instant
DateTime.plusWeeks(int)	Returns a copy of this datetime plus the specified number of weeks
UnsupportedDurationField.getInstance(DurationFieldType)	Gets an instance of UnsupportedDurationField for a specific named field
LimitChronology.getInstance(Chronology,ReadableDateTime,ReadableDateTime)	Wraps another chronology with datetime limits When withUTC or withZone is called the returned LimitChronology instance has the same limits except they are time zone adjusted
ReadWritableDateTime.setSecondOfMinute(int)	Set the second of the minute to the specified value
DurationFieldType.days()	Get the days field type
Interval.Interval(ReadableInstant,ReadablePeriod)	Constructs an interval from a start instant and a time period
Period.Period(ReadableInstant,ReadableDuration,PeriodType)	Creates a period from the given start point and the duration
DividedDateTimeField.set(long,int)	Set the specified amount of scaled units to the specified time instant
ScaledDurationField.add(long,int)	Description copied from class DurationField
DelegatedDurationField.getMillis(int)	Description copied from class DurationField
MutableInterval.setDurationBeforeEnd(long)	Sets the duration of this time interval preserving the end instant
YearMonthDay.Property.setCopy(String,Locale)	Sets this field in a copy of the YearMonthDay to a parsed text value
DateMidnight.withFieldAdded(DurationFieldType,int)	Returns a copy of this date with the value of the specified field increased
LocalDate.getWeekOfWeekyear()	Get the week of weekyear field value
PeriodType.years()	Gets a type that defines just the years field
LocalDate.withFields(ReadablePartial)	Returns a copy of this date with the partial set of fields replacing those from this instance
Duration.negated()	Returns a new duration with this length negated
PeriodParser.parseInto(ReadWritablePeriod,String,int,Locale)	Parses a period from the given text at the given position saving the result into the fields of the given ReadWritablePeriod If the parse succeeds the return value is the new text position Note that the parse may succeed without fully reading the text
DateTimeField.remainder(long)	Returns the fractional duration milliseconds of this field In other words calling remainder returns the duration that roundFloor would subtract
Chronology.halfdays()	Get the halfdays duration field for this chronology
Partial.plus(ReadablePeriod)	Gets a copy of this instance with the specified period added
DateTimeFormatter.withChronology(Chronology)	Returns a new formatter that will use the specified chronology in preference to that of the printed object or ISO on a parse
Period.minusDays(int)	Returns a new period minus the specified number of days taken away
PeriodFormatter.isPrinter()	Is this formatter capable of printing
Partial.with(DateTimeFieldType,int)	Gets a copy of this date with the specified field set to a new value
Interval.parse(String)	Parses a Interval from the specified string
DelegatedDateTimeField.getAsText(ReadablePartial,int,Locale)	Description copied from class DateTimeField
DateTime.Property.roundHalfFloorCopy()	Rounds to the nearest whole unit of this field on a copy of this DateTime favoring the floor if halfway
PeriodFormatterBuilder.appendYears()	Instruct the printer to emit an integer years field if supported
UnsupportedDateTimeField.set(long,String,Locale)	Always throws UnsupportedOperationException
Chronology.validate(ReadablePartial,int[])	Validates whether the values are valid for the fields of a partial instant
MutablePeriod.clone()	Clone this object
Weeks.toString()	Gets this instance as a String in the ISO8601 duration format
Partial.Property.getPartial()	Gets the partial that this property belongs to
LocalTime.withHourOfDay(int)	Returns a copy of this time with the hour of day field updated
BaseDateTimeField.getAsShortText(int,Locale)	Get the human readable short text value of this field from the field value
DateTimePrinter.estimatePrintedLength()	Returns the expected maximum number of characters produced
Chronology.get(ReadablePeriod,long)	Gets the values of a period from an interval
LocalDate.getDayOfYear()	Get the day of year field value
DateTimeZone.getAvailableIDs()	Gets all the available IDs supported
UnsupportedDurationField.getName()	Description copied from class DurationField
DateTimeZoneBuilder.readFrom(InputStream,String)	Decodes a built DateTimeZone from the given stream as encoded by writeTo
DelegatedDateTimeField.DelegatedDateTimeField(DateTimeField)	Constructor
MonthDay.toLocalDate(int)	Converts this object to a LocalDate with the same month day and chronology
Seconds.getFieldType()	Gets the duration field type which is seconds
Years.isLessThan(Years)	Is this years instance less than the specified number of years
LocalDateTime.Property.withMaximumValue()	Returns a new LocalDateTime with this field set to the maximum value for this field
DateTimeZone.equals(Object)	Compare this datetime zone with another
LocalDate.withWeekyear(int)	Returns a copy of this date with the weekyear field updated
LocalTime.getValue(int)	Gets the value of the field at the specified index
MillisDurationField.getDifference(long,long)	Description copied from class DurationField
MonthDay.MonthDay(int,int)	Constructs a MonthDay with specified year and month using ISOChronology
DateTime.withMillisOfDay(int)	Returns a copy of this datetime with the millis of day field updated
Duration.multipliedBy(long)	Returns a new duration with this length multiplied by the specified multiplicand
LocalDateTime.toDateTime(DateTimeZone)	Converts this object to a DateTime using the specified zone
PeriodType.weeks()	Gets a type that defines just the weeks field
LocalDateTime.year()	Get the year property which provides access to advanced functionality
DateTimeFormatter.withZoneUTC()	Returns a new formatter that will use the UTC zone in preference to the zone of the printed object or default zone on a parse
Partial.getValues()	Gets an array of the value of each of the fields that this partial supports
LocalDateTime.minusYears(int)	Returns a copy of this datetime minus the specified number of years
IllegalInstantException.isIllegalInstant(Throwable)	Checks if the exception is or has a cause of IllegalInstantException
PeriodFormatterBuilder.toParser()	Internal method to create a PeriodParser instance using all the appended elements
AbstractInstant.get(DateTimeField)	Get the value of one of the fields of a datetime
BaseDateTimeField.getMaximumValue(ReadablePartial,int[])	Get the maximum value for this field using the partial instant and the specified values
AbstractInterval.equals(Object)	Compares this object with the specified object for equality based on start and end millis plus the chronology
DateTimeFormatter.printTo(Writer,long)	Prints an instant from milliseconds since 1970 01 01T00 00 00Z using ISO chronology in the default DateTimeZone
YearMonthDay.year()	Get the year field property which provides access to advanced functionality
MutablePeriod.setMonths(int)	Sets the number of months of the period
DecoratedDurationField.getValueAsLong(long,long)	Description copied from class DurationField
ReadableDateTime.toDateTime()	Get this object as a DateTime
GJChronology.withZone(DateTimeZone)	Gets the Chronology in a specific time zone
ISOChronology.getInstance()	Gets an instance of the ISOChronology in the default time zone
DateMidnight.withCenturyOfEra(int)	Returns a copy of this date with the century of era field updated
ZeroIsMaxDateTimeField.addWrapField(ReadablePartial,int,int[],int)	Description copied from class BaseDateTimeField
DelegatedDateTimeField.getDifference(long,long)	Description copied from class DateTimeField
Hours.toString()	Gets this instance as a String in the ISO8601 duration format
Instant.parse(String,DateTimeFormatter)	Parses a Instant from the specified string using a formatter
ReadWritablePeriod.addHours(int)	Adds the specified hours to the number of hours in the period
DateTimeField.getMaximumValue(ReadablePartial)	Get the maximum value for this field evaluated at the specified time
TimeOfDay.minusSeconds(int)	Returns a copy of this time minus the specified number of seconds
DateTimeField.add(ReadablePartial,int,int[],int)	Adds a value which may be negative to the partial instant throwing an exception if the maximum size of the instant is reached
LocalTime.size()	Gets the number of fields in this partial which is four
YearMonth.toInterval(DateTimeZone)	Converts this object to an Interval representing the whole month
MutableDateTime.setMillis(long)	Set the milliseconds of the datetime
MutableDateTime.getRoundingField()	Gets the field used for rounding this instant returning null if rounding is not enabled
LocalDate.withFieldAdded(DurationFieldType,int)	Returns a copy of this date with the value of the specified field increased
DateTimeParserBucket.computeMillis()	Computes the parsed datetime by setting the saved fields
DividedDateTimeField.getDifference(long,long)	Description copied from class BaseDateTimeField
AbstractReadableInstantFieldProperty.getName()	Gets the name of the field
DateTime.now(Chronology)	Obtains a DateTime set to the current system millisecond time using the specified chronology
AbstractInterval.isAfter(ReadableInterval)	Is this time interval entirely after the specified interval
ScaledDurationField.getValue(long,long)	Description copied from class BaseDurationField
Duration.toDuration()	Get this duration as an immutable Duration object by returning this
PartialConverter.getChronology(Object,Chronology)	Extracts the chronology from an object of this converter s type where the chronology is specified
LocalDateTime.weekOfWeekyear()	Get the week of a week based year property which provides access to advanced functionality
DateTime.DateTime(int,int,int,int,int,int,int,Chronology)	Constructs an instance from datetime field values using the specified chronology
BaseDuration.toPeriodTo(ReadableInstant,PeriodType)	Converts this duration to a Period instance by subtracting the duration from an end instant to obtain an interval using the standard period type
MillisDurationField.isSupported()	Returns true as this field is supported
Partial.toString(String)	Output the date using the specified format pattern
MutableDateTime.add(ReadableDuration,int)	Adds a duration to this instant specifying how many times to add
MonthDay.withChronologyRetainFields(Chronology)	Returns a copy of this month day with the specified chronology
MutablePeriod.getYears()	Gets the years field part of the period
AbstractInterval.toPeriod(PeriodType)	Converts the duration of the interval to a Period using the specified period type
TimeOfDay.minusHours(int)	Returns a copy of this time minus the specified number of hours
DateTime.withMinuteOfHour(int)	Returns a copy of this datetime with the minute of hour updated
DateMidnight.plusYears(int)	Returns a copy of this date plus the specified number of years
BaseDateTime.getMillis()	Gets the milliseconds of the datetime instant from the Java epoch of 1970 01 01T00 00 00Z
MutableDateTime.Property.add(long)	Adds a value to the millis value
IllegalFieldValueException.getIllegalNumberValue()	Returns the illegal integer value assigned to the field or null if not applicable
YearMonthDay.toDateTime(TimeOfDay,DateTimeZone)	Converts this object to a DateTime using a TimeOfDay to fill in the missing fields
LocalDate.toDate()	Get the date time as a java util Date
Days.minus(int)	Returns a new instance with the specified number of days taken away
YearMonthDay.toDateTimeAtCurrentTime()	Converts this partial to a full datetime using the default time zone setting the date fields from this instance and the time fields from the current time
Minutes.minutesIn(ReadableInterval)	Creates a Minutes representing the number of whole minutes in the specified interval
LenientChronology.hashCode()	A suitable hashcode for the chronology
DateMidnight.Property.addWrapFieldToCopy(int)	Adds to this field possibly wrapped in a copy of this DateMidnight
YearMonthDay.plusDays(int)	Returns a copy of this date plus the specified number of days
DateTimeZone.getNameProvider()	Gets the name provider factory
AbstractDateTime.getMonthOfYear()	Get the month of year field value
ReadableInterval.getStartMillis()	Gets the start of this time interval which is inclusive
DefaultNameProvider.getName(Locale,String,String,boolean)	
YearMonthDay.YearMonthDay(long,Chronology)	Constructs a YearMonthDay extracting the partial fields from the specified milliseconds using the chronology provided
DateTimePrinter.printTo(StringBuffer,ReadablePartial,Locale)	Prints a ReadablePartial
Instant.now()	Obtains an Instant set to the current system millisecond time
AbstractInstant.getZone()	Gets the time zone of the instant from the chronology
DateTime.Property.setCopy(String,Locale)	Sets this field in a copy of the DateTime to a parsed text value
ReadWritableInterval.setInterval(long,long)	Sets this interval from two millisecond instants
AbstractConverter.toString()	Gets a debugging string version of this converter
LocalTime.now(DateTimeZone)	Obtains a LocalTime set to the current system millisecond time using ISOChronology in the specified time zone
BaseChronology.withZone(DateTimeZone)	Returns an instance of this Chronology that operates in any time zone
PeriodFormatterBuilder.appendSuffix(String,String)	Append a field suffix which applies only to the last appended field If the field is not printed neither is the suffix
YearMonth.now()	Obtains a YearMonth set to the current system millisecond time using ISOChronology in the default time zone
TimeOfDay.minusMinutes(int)	Returns a copy of this time minus the specified number of minutes
IllegalFieldValueException.IllegalFieldValueException(DurationFieldType,String)	Constructor
MutableInterval.setInterval(ReadableInstant,ReadableInstant)	Sets this interval from two instants replacing the chronology with that from the start instant
DateMidnight.minusYears(int)	Returns a copy of this date minus the specified number of years
UnsupportedDateTimeField.getName()	Description copied from class DateTimeField
DateTimeFormatterBuilder.toParser()	Internal method to create a DateTimeParser instance using all the appended elements
DateTimeZone.toString()	Gets the datetime zone as a string which is simply its ID
PeriodFormatterBuilder.appendDays()	Instruct the printer to emit an integer days field if supported
Interval.Interval(ReadableInstant,ReadableDuration)	Constructs an interval from a start instant and a duration
Period.plusDays(int)	Returns a new period plus the specified number of days added
PeriodFormat.wordBased()	Returns a word based formatter for the JDK default locale
LocalTime.Property.roundCeilingCopy()	Rounds to the highest whole unit of this field on a copy of this LocalTime
DateTime.withHourOfDay(int)	Returns a copy of this datetime with the hour of day field updated
DateTime.minusHours(int)	Returns a copy of this datetime minus the specified number of hours
PreciseDurationField.equals(Object)	Compares this duration field to another
LocalTime.parse(String,DateTimeFormatter)	Parses a LocalTime from the specified string using a formatter
RemainderDateTimeField.getDurationField()	Description copied from class BaseDateTimeField
FieldUtils.safeMultiply(long,int)	Multiply two values throwing an exception if overflow occurs
ZoneInfoCompiler.ZoneInfoCompiler()	
LocalTime.millisOfDay()	Get the millis of day property which provides access to advanced functionality
Seconds.plus(int)	Returns a new instance with the specified number of seconds added
CopticChronology.getInstanceUTC()	Gets an instance of the CopticChronology
Chronology.toString()	Gets a debugging toString
MutableDateTime.now()	Obtains a MutableDateTime set to the current system millisecond time using ISOChronology in the default time zone
DateTimeField.addWrapField(ReadablePartial,int,int[],int)	Adds a value which may be negative to the partial instant wrapping within this field
DelegatedDateTimeField.getRangeDurationField()	Description copied from class DateTimeField
DateTimeFormatter.isOffsetParsed()	Checks whether the offset from the string is used as the zone of the parsed datetime
Seconds.isLessThan(Seconds)	Is this seconds instance less than the specified number of seconds
Duration.parse(String)	Parses a Duration from the specified string
AbstractPartialFieldProperty.getFieldType()	Gets the field type being used
DateTimeUtils.getIntervalChronology(ReadableInterval)	Gets the chronology from the specified interval object handling null
DateTimeUtils.setCurrentMillisOffset(long)	Sets the current time to return the system time plus an offset
LocalDateTime.LocalDateTime(int,int,int,int,int,int,int)	Constructs an instance set to the specified date and time using ISOChronology
BaseDateTimeField.getAsText(int,Locale)	Get the human readable text value of this field from the field value
GJChronology.getZone()	Description copied from class BaseChronology
LocalTime.withMillisOfDay(int)	Returns a copy of this time with the millis of day field updated
PeriodType.time()	Gets a type that defines all standard time fields
LocalTime.LocalTime(Object,DateTimeZone)	Constructs an instance from an Object that represents a datetime forcing the time zone to that specified
JulianChronology.withUTC()	Gets the Chronology in the UTC time zone
Interval.withEndMillis(long)	Creates a new interval with the specified end millisecond instant
ReadWritableInstant.add(ReadableDuration,int)	Adds a duration to this instant specifying how many times to add
AssembledChronology.days()	Description copied from class BaseChronology
ConverterManager.getDurationConverter(Object)	Gets the best converter for the object specified
LocalTime.compareTo(ReadablePartial)	Compares this partial with another returning an integer indicating the order
MutablePeriod.MutablePeriod(Object)	Creates a period by converting or copying from another object
LocalDate.parse(String)	Parses a LocalDate from the specified string
ReadableDateTime.getEra()	Get the era field value
Days.toStandardHours()	Converts this period in days to a period in hours assuming a 24 hour day
DelegatedDurationField.hashCode()	
PeriodFormatterBuilder.append(PeriodPrinter,PeriodParser)	Appends a printer parser pair
AbstractConverter.getPeriodType(Object)	Selects a suitable period type for the given object
DateMidnight.withDayOfYear(int)	Returns a copy of this date with the day of year field updated
LocalDateTime.getMonthOfYear()	Get the month of year field value
ReadableDateTime.getMillisOfDay()	Get the millis of day field value
UTCProvider.UTCProvider()	Constructor
MutableInterval.setChronology(Chronology)	Sets the chronology of this time interval
ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long)	Description copied from class BaseDateTimeField
MutableDateTime.addDays(int)	Add a number of days to the date
AbstractInstant.compareTo(ReadableInstant)	Compares this object with the specified object for ascending millisecond instant order This ordering is inconsistent with equals as it ignores the Chronology
LocalTime.Property.roundHalfEvenCopy()	Rounds to the nearest whole unit of this field on a copy of this LocalTime If halfway the ceiling is favored over the floor only if it makes this field s value even
AbstractInterval.toString()	Output a string in ISO8601 interval format
AssembledChronology.years()	Description copied from class BaseChronology
ISODateTimeFormat.basicTTime()	Returns a basic formatter for a two digit hour of day two digit minute of hour two digit second of minute three digit millis and time zone offset prefixed by T T HHmmss SSSZ
DurationFieldType.halfdays()	Get the halfdays field type
DateTime.withDurationAdded(long,int)	Returns a copy of this datetime with the specified duration added
Duration.withDurationAdded(ReadableDuration,int)	Returns a new duration with this length plus that specified multiplied by the scalar
MillisDurationField.equals(Object)	
TimeOfDay.Property.addToCopy(int)	Adds to the value of this field in a copy of this TimeOfDay wrapping to what would be the next day if necessary
LocalTime.now(Chronology)	Obtains a LocalTime set to the current system millisecond time using the specified chronology
BaseDateTimeField.getAsShortText(long,Locale)	Get the human readable short text value of this field from the milliseconds
DateTime.Property.setCopy(String)	Sets this field in a copy of the DateTime to a parsed text value
AssembledChronology.minuteOfHour()	Description copied from class BaseChronology
ConverterManager.addDurationConverter(DurationConverter)	Adds a converter to the set of converters If a matching converter is already in the set the given converter replaces it If the converter is exactly the same as one already in the set no changes are made
UnsupportedDateTimeField.remainder(long)	Always throws UnsupportedOperationException
ZeroIsMaxDateTimeField.getMaximumValue()	Get the maximum value for the field which is one more than the wrapped field s maximum value
DurationField.getMillis(int)	Get the millisecond duration of this field from its value which is approximate if this field is imprecise
LocalTime.property(DateTimeFieldType)	Gets the property object for the specified type which contains many useful methods
Years.multipliedBy(int)	Returns a new instance with the years multiplied by the specified scalar
MonthDay.Property.addToCopy(int)	Adds to the value of this field in a copy of this MonthDay
DateTimeFormatter.printTo(StringBuffer,long)	Prints an instant from milliseconds since 1970 01 01T00 00 00Z using ISO chronology in the default DateTimeZone
DateTimeField.get(long)	Get the value of this field from the milliseconds
PreciseDurationField.hashCode()	Gets a hash code for this instance
DateTimeFormatter.isPrinter()	Is this formatter capable of printing
Days.daysIn(ReadableInterval)	Creates a Days representing the number of whole days in the specified interval This method correctly handles any daylight savings time changes that may occur during the interval
LocalDateTime.toString()	Output the date time in ISO8601 format yyyy MM ddTHH mm ss SSS
MutableDateTime.MutableDateTime(long,Chronology)	Constructs an instance set to the milliseconds from 1970 01 01T00 00 00Z using the specified chronology
DateTimeFormatterBuilder.appendMonthOfYear(int)	Instructs the printer to emit a numeric monthOfYear field
MutableDateTime.Property.roundHalfCeiling()	Round to the nearest whole unit of this field favoring the ceiling if halfway
PeriodType.forFields(DurationFieldType[])	Gets a period type that contains the duration types of the array
Weeks.toStandardDays()	Converts this period in weeks to a period in days assuming a 7 day week
BaseChronology.year()	Get the year field for this chronology
MutableDateTime.setDate(ReadableInstant)	Set the date from another instant
LocalDateTime.withDate(int,int,int)	Returns a copy of this datetime with the specified date retaining the time fields
Interval.overlap(ReadableInterval)	Gets the overlap between this interval and another interval
DateTime.withZone(DateTimeZone)	Returns a copy of this datetime with a different time zone preserving the millisecond instant
ISODateTimeFormat.basicWeekDateTime()	Returns a basic formatter that combines a basic weekyear date and time separated by a T xxxx W wwe T HHmmss SSSZ
DateTimePrinter.printTo(Writer,long,Chronology,int,DateTimeZone,Locale)	Prints an instant from milliseconds since 1970 01 01T00 00 00Z using the given Chronology
YearMonthDay.property(DateTimeFieldType)	Gets the property object for the specified type which contains many useful methods
AbstractDateTime.getMinuteOfHour()	Get the minute of hour field value
DateTimeParser.estimateParsedLength()	Returns the expected maximum number of characters consumed
DelegatedDateTimeField.add(ReadablePartial,int,int[],int)	Description copied from class DateTimeField
BaseDateTimeField.getMinimumValue()	Get the minimum allowable value for this field
AssembledChronology.millisOfSecond()	Description copied from class BaseChronology
DelegatedDateTimeField.addWrapPartial(ReadablePartial,int,int[],int)	Description copied from class DateTimeField
LocalDateTime.parse(String)	Parses a LocalDateTime from the specified string
IllegalFieldValueException.getFieldName()	Returns the name of the field whose value was invalid
JulianChronology.hashCode()	A suitable hash code for the chronology
MonthDay.Property.getMonthDay()	Gets the partial that this property belongs to
MutableDateTime.setDateTime(int,int,int,int,int,int,int)	Set the date and time from fields
Years.getPeriodType()	Gets the period type which is years
ZonedChronology.equals(Object)	A zoned chronology is only equal to a zoned chronology with the same base chronology and zone
Period.getSeconds()	Gets the seconds field part of the period
ISOChronology.getInstanceUTC()	Gets an instance of the ISOChronology
DateTimeFormatter.withDefaultYear(int)	Returns a new formatter that will use the specified default year
ConverterManager.addIntervalConverter(IntervalConverter)	Adds a converter to the set of converters If a matching converter is already in the set the given converter replaces it If the converter is exactly the same as one already in the set no changes are made
FixedDateTimeZone.previousTransition(long)	Description copied from class DateTimeZone
CachedDateTimeZone.forZone(DateTimeZone)	Returns a new CachedDateTimeZone unless given zone is already cached
Weeks.getPeriodType()	Gets the period type which is weeks
PeriodFormatterBuilder.appendSeparatorIfFieldsAfter(String)	Append a separator which is output only if fields are printed after the separator
CopticChronology.hashCode()	A suitable hash code for the chronology
UnsupportedDateTimeField.getMaximumTextLength(Locale)	Always throws UnsupportedOperationException
DateTimeZone.getShortName(long)	Gets the short name of this datetime zone suitable for display using the default locale
LocalTime.getHourOfDay()	Get the hour of day field value
ReadableDuration.isShorterThan(ReadableDuration)	Is the length of this duration shorter than the duration passed in
GJChronology.getDateTimeMillis(int,int,int,int)	Description copied from class BaseChronology
UnsupportedDurationField.getMillis(int,long)	Always throws UnsupportedOperationException
FormatUtils.writeUnpaddedInteger(Writer,long)	Converts an integer to a string and writes it to the given writer
ReadablePeriod.toMutablePeriod()	Get this object as a MutablePeriod
LocalTime.millisOfSecond()	Get the millis of second property which provides access to advanced functionality
Months.getPeriodType()	Gets the period type which is months
UnsupportedDateTimeField.getAsShortText(ReadablePartial,Locale)	Always throws UnsupportedOperationException
DateTime.millisOfSecond()	Get the millis of second property which provides access to advanced functionality
IslamicChronology.toString()	Gets a debugging toString
LocalDateTime.Property.addToCopy(int)	Adds to this field in a copy of this LocalDateTime
PeriodType.hours()	Gets a type that defines just the hours field
LocalTime.withMinuteOfHour(int)	Returns a copy of this time with the minute of hour field updated
CopticChronology.withUTC()	Gets the Chronology in the UTC time zone
AbstractDateTime.toCalendar(Locale)	Get the date time as a java util Calendar assigning exactly the same millisecond instant
Converter.getSupportedType()	Returns the object type that this converter supports which may specified by a class superclass abstract class interface or null
ReadableDuration.isEqual(ReadableDuration)	Is the length of this duration equal to the duration passed in
DateTimeField.getMinimumValue()	Get the minimum allowable value for this field
FieldUtils.equals(Object,Object)	Compares two objects as equals handling null
MutableDateTime.MutableDateTime(Chronology)	Constructs an instance set to the current system millisecond time using the specified chronology
DelegatedDateTimeField.getMaximumValue(ReadablePartial)	Description copied from class DateTimeField
Instant.parse(String)	Parses a Instant from the specified string
DateTime.DateTime(int,int,int,int,int,DateTimeZone)	Constructs an instance from datetime field values using ISOChronology in the specified time zone
Years.yearsBetween(ReadablePartial,ReadablePartial)	Creates a Years representing the number of whole years between the two specified partial datetimes
DateTimeField.getAsShortText(ReadablePartial,Locale)	Get the human readable short text value of this field from a partial instant
PeriodFormatter.parsePeriod(String)	Parses a period from the given text returning a new Period
AbstractDateTime.getYear()	Get the year field value
DateTimeField.getType()	Get the type of the field
ReadablePeriod.equals(Object)	Compares this object with the specified object for equality based on the value and type of each supported field
ZeroIsMaxDateTimeField.getMinimumValue(ReadablePartial)	Always returns 1
AbstractInterval.isAfter(long)	Is this time interval after the specified millisecond instant
AssembledChronology.getDateTimeMillis(long,int,int,int,int)	Description copied from class BaseChronology
AbstractDateTime.getHourOfDay()	Get the hour of day field value
PreciseDurationField.getMillis(long,long)	Get the millisecond duration of this field from its value
BuddhistChronology.getInstanceUTC()	Standard instance of a Buddhist Chronology that matches Sun s BuddhistCalendar class This means that it follows the GregorianJulian calendar rules with a cutover date
ReadableInstant.isBefore(ReadableInstant)	Is this instant before the instant passed in comparing solely by millisecond
AbstractInterval.isBefore(long)	Is this time interval before the specified millisecond instant
SkipDateTimeField.get(long)	Description copied from class DateTimeField
IslamicChronology.getInstance()	Gets an instance of the IslamicChronology in the default time zone
ReadWritableDateTime.setMinuteOfHour(int)	Set the minute of the hour to the specified value
DateTimeZone.forID(String)	Gets a time zone instance for the specified time zone id
DividedDateTimeField.addWrapField(long,int)	Add to the scaled component of the specified time instant wrapping around within that component if necessary
AbstractInterval.getStart()	Gets the start of this time interval which is inclusive as a DateTime
ReadWritablePeriod.add(ReadablePeriod)	Adds a period to this one by adding each field in turn
DateTimeFieldType.weekyear()	Get the year of a week based year field type
LocalDate.weekOfWeekyear()	Get the week of a week based year property which provides access to advanced functionality
DateTimeFormatterBuilder.appendMillisOfSecond(int)	Instructs the printer to emit a numeric millisOfSecond field
DateMidnight.withDayOfMonth(int)	Returns a copy of this date with the day of month field updated
ReadWritablePeriod.setMinutes(int)	Sets the number of minutes of the period
DateTimeFormatter.parseMillis(String)	Parses a datetime from the given text returning the number of milliseconds since the epoch 1970 01 01T00 00 00Z
LocalDate.LocalDate(long,DateTimeZone)	Constructs an instance set to the local time defined by the specified instant evaluated using ISO chronology in the specified zone
Minutes.minutesBetween(ReadablePartial,ReadablePartial)	Creates a Minutes representing the number of whole minutes between the two specified partial datetimes
SkipDateTimeField.set(long,int)	Description copied from class DateTimeField
UnsupportedDateTimeField.roundCeiling(long)	Always throws UnsupportedOperationException
BaseChronology.halfdayOfDay()	Get the AM 0 PM 1 field for this chronology
MonthDay.Property.setCopy(String,Locale)	Sets this field in a copy of the MonthDay to a parsed text value
TimeOfDay.withMinuteOfHour(int)	Returns a copy of this time with the minute of hour field updated
YearMonthDay.toDateMidnight(DateTimeZone)	Converts this object to a DateMidnight
MutableDateTime.addMinutes(int)	Add a number of minutes to the date
ReadWritableInstant.add(long)	Adds a millisecond duration to this instant
TimeOfDay.TimeOfDay(int,int,int,int)	Constructs a TimeOfDay with specified time field values using ISOChronology in the default zone
EthiopicChronology.getInstance(DateTimeZone)	Gets an instance of the EthiopicChronology in the given time zone
TimeOfDay.fromMillisOfDay(long)	Constructs a TimeOfDay from the specified millis of day using the ISO chronology
DateTimeFormatterBuilder.appendYearOfCentury(int,int)	Instructs the printer to emit a numeric year of century field
PartialConverter.getPartialValues(ReadablePartial,Object,Chronology)	Extracts the values of the partial from an object of this converter s type
YearMonth.withField(DateTimeFieldType,int)	Returns a copy of this year month with the specified field set to a new value
DateMidnight.withField(DateTimeFieldType,int)	Returns a copy of this date with the specified field set to a new value
Hours.hoursBetween(ReadablePartial,ReadablePartial)	Creates a Hours representing the number of whole hours between the two specified partial datetimes
FormatUtils.writeUnpaddedInteger(Writer,int)	Converts an integer to a string and writes it to the given writer
BaseChronology.get(ReadablePeriod,long,long)	Gets the values of a period from an interval
MonthDay.MonthDay(long,Chronology)	Constructs a MonthDay extracting the partial fields from the specified milliseconds using the chronology provided
DateTimeParserBucket.getPivotYear()	Returns the default year used when information is incomplete
DateTimeFormatter.getLocale()	Gets the locale that will be used for printing and parsing
FormatUtils.writePaddedInteger(Writer,long,int)	Converts an integer to a string prepended with a variable amount of 0 pad characters and writes it to the given writer
DateTimeFormatterBuilder.appendClockhourOfDay(int)	Instructs the printer to emit a numeric clockhourOfDay field
LocalDate.dayOfMonth()	Get the day of month property which provides access to advanced functionality
LocalDate.Property.roundHalfEvenCopy()	Rounds to the nearest whole unit of this field on a copy of this LocalDate If halfway the ceiling is favored over the floor only if it makes this field s value even
ISODateTimeFormat.dateParser()	Returns a generic ISO date parser for parsing dates with a possible zone
EthiopicChronology.getZone()	Description copied from class BaseChronology
MutableDateTime.addWeeks(int)	Add a number of weeks to the date
DateTimeZoneBuilder.DateTimeZoneBuilder()	
LocalDate.LocalDate(long)	Constructs an instance set to the local time defined by the specified instant evaluated using ISO chronology in the default zone
AbstractPartial.toString(DateTimeFormatter)	Uses the specified formatter to convert this partial to a String
DateTimeFormatter.getChronology()	Gets the chronology to use as an override
AssembledChronology.millisOfDay()	Description copied from class BaseChronology
DurationFieldType.weekyears()	Get the weekyears field type
ConverterManager.getPartialConverter(Object)	Gets the best converter for the object specified
TimeOfDay.TimeOfDay(Chronology)	Constructs a TimeOfDay with the current time using the specified chronology and zone to extract the fields
RemainderDateTimeField.get(long)	Get the remainder from the specified time instant
LocalDate.getCenturyOfEra()	Get the year of era field value
YearMonthDay.Property.setCopy(int)	Sets this field in a copy of the YearMonthDay
Duration.standardDays(long)	Create a duration with the specified number of days assuming that there are the standard number of milliseconds in a day
MonthDay.toString(String)	Output the month day using the specified format pattern
DateTimeZone.setProvider(Provider)	Sets the zone provider factory
LocalDate.Property.setCopy(String,Locale)	Sets this field in a copy of the LocalDate to a parsed text value
Years.negated()	Returns a new instance with the years value negated
LimitChronology.equals(Object)	A limit chronology is only equal to a limit chronology with the same base chronology and limits
ReadablePartial.getValue(int)	Gets the value at the specified index
MonthDay.parse(String,DateTimeFormatter)	Parses a MonthDay from the specified string using a formatter
DateTime.withDurationAdded(ReadableDuration,int)	Returns a copy of this datetime with the specified duration added
YearMonthDay.Property.get()	Gets the value of this field
DateTime.withDayOfYear(int)	Returns a copy of this datetime with the day of year field updated
DateTimeFormatterBuilder.canBuildPrinter()	Returns true if toPrinter can be called without throwing an UnsupportedOperationException
AbstractPartial.compareTo(ReadablePartial)	Compares this partial with another returning an integer indicating the order
MonthDay.getDayOfMonth()	Get the day of month field value
LocalTime.Property.roundHalfFloorCopy()	Rounds to the nearest whole unit of this field on a copy of this LocalTime favoring the floor if halfway
MutablePeriod.MutablePeriod(long,Chronology)	Creates a period from the given millisecond duration using the standard set of fields
ZoneInfoCompiler.compile(File,File[])	Returns a map of ids to DateTimeZones
DateMidnight.withDurationAdded(ReadableDuration,int)	Returns a copy of this date with the specified duration added
PreciseDurationField.getUnitMillis()	Returns the amount of milliseconds per unit value of this field
FormatUtils.appendUnpaddedInteger(Appendable,int)	Converts an integer to a string and appends it to the given appendable
Weeks.dividedBy(int)	Returns a new instance with the weeks divided by the specified divisor
AbstractPartialFieldProperty.compareTo(ReadablePartial)	Compare this field to the same field on another partial instant
DateMidnight.minusMonths(int)	Returns a copy of this date minus the specified number of months
BaseDateTimeField.getDifferenceAsLong(long,long)	Computes the difference between two instants as measured in the units of this field Any fractional units are dropped from the result Calling getDifference reverses the effect of calling add In the following code long instant
Days.dividedBy(int)	Returns a new instance with the days divided by the specified divisor
MutableDateTime.addWeekyears(int)	Add a number of weekyears to the date
ReadWritableDateTime.addSeconds(int)	Add a number of seconds to the date
UnsupportedDurationField.hashCode()	Gets a suitable hashcode
DateTimeUtils.getReadableInterval(ReadableInterval)	Gets the interval handling null
AbstractPartial.toDateTime(ReadableInstant)	Resolves this partial against another complete instant to create a new full instant The combination is performed using the chronology of the specified instant
YearMonthDay.Property.getField()	Gets the field that this property uses
MutableInterval.setStartMillis(long)	Sets the start of this time interval
DateTimeZone.setDefault(DateTimeZone)	Sets the default time zone
ZeroIsMaxDateTimeField.roundCeiling(long)	Description copied from class BaseDateTimeField
BasePartial.toString(String,Locale)	Output the date using the specified format pattern
FixedDateTimeZone.toTimeZone()	Override to return the correct timezone instance
AbstractReadableInstantFieldProperty.getLeapDurationField()	If this field were to leap then it would be in units described by the returned duration If this field doesn t ever leap null is returned
ZonedChronology.withZone(DateTimeZone)	Description copied from class BaseChronology
ISODateTimeFormat.localTimeParser()	Returns a generic ISO time parser for parsing local times
ConverterManager.removeInstantConverter(InstantConverter)	Removes a converter from the set of converters If the converter was not in the set no changes are made
MutablePeriod.mergePeriod(ReadablePeriod)	Merges all the fields from the specified period into this one
BaseChronology.secondOfDay()	Get the second of day field for this chronology
AbstractReadableInstantFieldProperty.getMinimumValueOverall()	Gets the minimum value for the field ignoring the current time
ReadableInterval.isBefore(ReadableInterval)	Is this time interval entirely before the specified interval
BaseChronology.yearOfEra()	Get the year of era field for this chronology
LocalDate.minusMonths(int)	Returns a copy of this date minus the specified number of months
IslamicChronology.getInstance(DateTimeZone,LeapYearPatternType)	Gets an instance of the IslamicChronology in the given time zone
ZoneInfoCompiler.main(String[])	Launches the ZoneInfoCompiler tool
ReadableDateTime.getMillisOfSecond()	Get the millis of second field value
GJChronology.getMinimumDaysInFirstWeek()	Gets the minimum days needed for a week to be the first week in a year
DateTimeFormatterBuilder.appendWeekyear(int,int)	Instructs the printer to emit a numeric weekyear field
ReadableDateTime.getSecondOfMinute()	Get the second of minute field value
FormatUtils.writePaddedInteger(Writer,int,int)	Converts an integer to a string prepended with a variable amount of 0 pad characters and writes it to the given writer
CachedDateTimeZone.getUncachedZone()	Returns the DateTimeZone being wrapped
Minutes.minutesBetween(ReadableInstant,ReadableInstant)	Creates a Minutes representing the number of whole minutes between the two specified datetimes
UnsupportedDateTimeField.getAsText(ReadablePartial,Locale)	Always throws UnsupportedOperationException
DateTimeFormatter.parseMutableDateTime(String)	Parses a date time from the given text returning a new MutableDateTime
DateTime.Property.withMinimumValue()	Returns a new DateTime with this field set to the minimum value for this field
MutablePeriod.MutablePeriod()	Creates a zero length period using the standard period type
DateMidnight.minusWeeks(int)	Returns a copy of this date minus the specified number of weeks
LocalDate.minusWeeks(int)	Returns a copy of this date minus the specified number of weeks
Duration.getStandardSeconds()	Gets the length of this duration in seconds assuming that there are the standard number of milliseconds in a second
Period.getYears()	Gets the years field part of the period
PeriodFormatterBuilder.minimumPrintedDigits(int)	Set the minimum digits printed for the next and following appended fields By default the minimum digits printed is one If the field value is zero it is not printed unless a printZero rule is applied
EthiopicChronology.getDateTimeMillis(int,int,int,int,int,int,int)	Description copied from class BaseChronology
DateTimeFieldType.getDurationType()	Get the duration unit of the field
AbstractPartial.get(DateTimeFieldType)	Get the value of one of the fields of a datetime
DateMidnight.withDurationAdded(long,int)	Returns a copy of this date with the specified duration added
BaseDurationField.getType()	Description copied from class DurationField
DateTimeZone.getID()	Gets the ID of this datetime zone
Years.yearsBetween(ReadableInstant,ReadableInstant)	Creates a Years representing the number of whole years between the two specified datetimes This method correctly handles any daylight savings time changes that may occur during the interval
YearMonth.now(Chronology)	Obtains a YearMonth set to the current system millisecond time using the specified chronology
DateTimeFormatter.parseDateTime(String)	Parses a date time from the given text returning a new DateTime
LocalDate.withEra(int)	Returns a copy of this date with the era field updated
AbstractDateTime.toString(String)	Output the instant using the specified format pattern
Period.plus(ReadablePeriod)	Returns a new period with the specified period added
YearMonthDay.toDateTimeAtMidnight(DateTimeZone)	Converts this YearMonthDay to a full datetime at midnight using the specified time zone
Period.Period(ReadableInstant,ReadableInstant)	Creates a period between the given instants using the standard set of fields
DateTimeFormatterBuilder.appendTimeZoneOffset(String,boolean,int,int)	Instructs the printer to emit text and numbers to display time zone offset from UTC A parser will use the parsed time zone offset to adjust the datetime
DateTimeFormatterBuilder.appendDayOfWeek(int)	Instructs the printer to emit a numeric dayOfWeek field
AbstractPartialFieldProperty.getAsShortText(Locale)	Gets the short textual value of this property from the instant as a string in the specified locale
Months.monthsBetween(ReadablePartial,ReadablePartial)	Creates a Months representing the number of whole months between the two specified partial datetimes
DelegatedDateTimeField.add(long,int)	Description copied from class DateTimeField
PreciseDurationField.PreciseDurationField(DurationFieldType,long)	Constructor
EthiopicChronology.equals(Object)	Checks if this chronology instance equals another
DateTimeUtils.getDateFormatSymbols(Locale)	Gets the DateFormatSymbols based on the given locale
MonthDay.minus(ReadablePeriod)	Returns a copy of this month day with the specified period taken away
Chronology.weekyearOfCentury()	Get the year of a week based year in a century field for this chronology
DateTimeFormatterBuilder.appendTwoDigitYear(int)	Instructs the printer to emit a numeric year field which always prints and parses two digits A pivot year is used during parsing to determine the range of supported years as pivot 50 pivot 49
IllegalFieldValueException.IllegalFieldValueException(DateTimeFieldType,Number,Number,Number)	Constructor
DateTimeFormatter.printTo(Writer,ReadableInstant)	Prints a ReadableInstant using the chronology supplied by the instant
ISOChronology.equals(Object)	Checks if this chronology instance equals another
ReadWritablePeriod.setMonths(int)	Sets the number of months of the period
ReadWritableDateTime.setWeekyear(int)	Set the weekyear to the specified value
DelegatedDateTimeField.set(long,int)	Description copied from class DateTimeField
DateMidnight.Property.setCopy(String,Locale)	Sets this field in a copy of the DateMidnight to a parsed text value
DefaultNameProvider.DefaultNameProvider()	
Period.withField(DurationFieldType,int)	Creates a new Period instance with the specified field set to a new value
Chronology.weekyear()	Get the year of a week based year field for this chronology
UnsupportedDateTimeField.roundFloor(long)	Always throws UnsupportedOperationException
MutableDateTime.Property.roundHalfFloor()	Round to the nearest whole unit of this field favoring the floor if halfway
DateTimeFormatterBuilder.appendMinuteOfHour(int)	Instructs the printer to emit a numeric minuteOfHour field
SkipDateTimeField.SkipDateTimeField(Chronology,DateTimeField)	Constructor that skips zero
DateTimeField.isLenient()	Returns true if the set method is lenient If so it accepts values that are out of bounds For example a lenient day of month field accepts 32 for January converting it to February 1
Period.plusMonths(int)	Returns a new period plus the specified number of months added
LocalDate.now()	Obtains a LocalDate set to the current system millisecond time using ISOChronology in the default time zone
LocalDateTime.getYearOfEra()	Get the year of era field value
LocalTime.now()	Obtains a LocalTime set to the current system millisecond time using ISOChronology in the default time zone
LocalDateTime.getYearOfCentury()	Get the year of century field value
AbstractDuration.toDuration()	Get this duration as an immutable Duration object
DateTime.minusYears(int)	Returns a copy of this datetime minus the specified number of years
Days.daysBetween(ReadablePartial,ReadablePartial)	Creates a Days representing the number of whole days between the two specified partial datetimes
UnsupportedDateTimeField.addWrapField(ReadablePartial,int,int[],int)	Always throws UnsupportedOperationException
DelegatedDateTimeField.getMinimumValue(ReadablePartial,int[])	Description copied from class DateTimeField
MutablePeriod.addMillis(int)	Adds the specified millis to the number of millis in the period
YearMonth.getFieldType(int)	Gets the field type at the specified index
DateTimePrinter.printTo(Writer,ReadablePartial,Locale)	Prints a ReadablePartial
BaseDurationField.getMillis(int)	Get the millisecond duration of this field from its value which is approximate if this field is imprecise
Period.Period(long,Chronology)	Creates a period from the given millisecond duration using the standard set of fields
AssembledChronology.centuries()	Description copied from class BaseChronology
DateTimeField.getAsShortText(long,Locale)	Get the human readable short text value of this field from the milliseconds If the specified locale is null the default locale is used
LocalDate.withMonthOfYear(int)	Returns a copy of this date with the month of year field updated
DateTime.weekOfWeekyear()	Get the week of a week based year property which provides access to advanced functionality
PreciseDateTimeField.PreciseDateTimeField(DateTimeFieldType,DurationField,DurationField)	Constructor
DelegatedDurationField.getMillis(int,long)	Description copied from class DurationField
MutableInterval.MutableInterval(long,long)	Constructs an interval from a start and end instant with the ISO default chronology
DelegatedDurationField.add(long,long)	Description copied from class DurationField
BaseChronology.withUTC()	Returns an instance of this Chronology that operates in the UTC time zone Chronologies that do not operate in a time zone or are already UTC must return themselves
PreciseDateTimeField.getMaximumValue()	Get the maximum value for the field
LocalDateTime.equals(Object)	Compares this ReadablePartial with another returning true if the chronology field types and values are equal
DateMidnight.withYearOfCentury(int)	Returns a copy of this date with the year of century field updated
DateTime.DateTime(long,DateTimeZone)	Constructs an instance set to the milliseconds from 1970 01 01T00 00 00Z using ISOChronology in the specified time zone
DateTimeFormatter.parseLocalDateTime(String)	Parses only the local date time from the given text returning a new LocalDateTime
AssembledChronology.getZone()	Description copied from class BaseChronology
ISODateTimeFormat.tTime()	Returns a formatter for a two digit hour of day two digit minute of hour two digit second of minute three digit fraction of second and time zone offset prefixed by T T HH mm ss SSSZZ
Partial.getValue(int)	Gets the value of the field at the specified index
ReadWritableDateTime.setDayOfMonth(int)	Set the day of the month to the specified value
ISODateTimeFormat.dateTimeNoMillis()	Returns a formatter that combines a full date and time without millis separated by a T yyyy MM dd T HH mm ssZZ
PreciseDurationField.add(long,int)	Description copied from class DurationField
LocalDateTime.withEra(int)	Returns a copy of this datetime with the era field updated
UTCProvider.getAvailableIDs()	Returns a singleton collection containing only UTC
DateTime.Property.roundHalfEvenCopy()	Rounds to the nearest whole unit of this field on a copy of this DateTime If halfway the ceiling is favored over the floor only if it makes this field s value even
DateMidnight.Property.roundHalfCeilingCopy()	Rounds to the nearest whole unit of this field on a copy of this DateMidnight favoring the ceiling if halfway
Chronology.millis()	Get the millis duration field for this chronology
DateTime.minusMinutes(int)	Returns a copy of this datetime minus the specified number of minutes
YearMonth.toString(String,Locale)	Output the year month using the specified format pattern
DateTimeParserBucket.parseMillis(DateTimeParser,CharSequence)	Parses a datetime from the given text returning the number of milliseconds since the epoch 1970 01 01T00 00 00Z
YearMonth.withYear(int)	Returns a copy of this year month with the year field updated
DateTime.withTime(LocalTime)	Returns a copy of this datetime with the specified time retaining the date fields
GregorianChronology.getInstance()	Gets an instance of the GregorianChronology in the default time zone
MutableInterval.setStart(ReadableInstant)	Sets the start of this time interval as an Instant
Weeks.minus(int)	Returns a new instance with the specified number of weeks taken away
LocalDateTime.compareTo(ReadablePartial)	Compares this partial with another returning an integer indicating the order
DurationFieldType.minutes()	Get the minutes field type
Interval.withStart(ReadableInstant)	Creates a new interval with the specified start instant
MutableInterval.MutableInterval(Object,Chronology)	Constructs a time interval by converting or copying from another object overriding the chronology
DateTimeFieldType.minuteOfDay()	Get the minute of day field type
DateTimeZone.nextTransition(long)	Advances the given instant to where the time zone offset or name changes
DateTimePrinter.printTo(StringBuffer,long,Chronology,int,DateTimeZone,Locale)	Prints an instant from milliseconds since 1970 01 01T00 00 00Z using the given Chronology
Partial.getChronology()	Gets the chronology of the partial which is never null
DateTime.toYearMonthDay()	Converts this object to a YearMonthDay using the same millis and chronology
DateTime.DateTime(long)	Constructs an instance set to the milliseconds from 1970 01 01T00 00 00Z using ISOChronology in the default time zone
LocalDate.getYearOfEra()	Get the year of era field value
DecoratedDateTimeField.getMinimumValue()	Description copied from class BaseDateTimeField
DateMidnight.Property.roundFloorCopy()	Rounds to the lowest whole unit of this field on a copy of this DateMidnight
LocalTime.minus(ReadablePeriod)	Returns a copy of this time with the specified period taken away
ReadableInterval.contains(ReadableInterval)	Does this time interval contain the specified time interval
BaseChronology.eras()	Get the eras duration field for this chronology
AbstractDuration.toPeriod()	Converts this duration to a Period instance using the standard period type and the ISO chronology
YearMonthDay.YearMonthDay(DateTimeZone)	Constructs a YearMonthDay with the current date using ISOChronology in the specified zone to extract the fields
ReadablePartial.toString()	Get the value as a String in a recognisable ISO8601 format only displaying supported fields
FieldUtils.safeAdd(int,int)	Add two values throwing an exception if overflow occurs
DelegatedDateTimeField.getType()	Description copied from class DateTimeField
DateMidnight.withYearOfEra(int)	Returns a copy of this date with the year of era field updated
MonthDay.minusDays(int)	Returns a copy of this month day minus the specified number of months
LocalDate.weekyear()	Get the weekyear property which provides access to advanced functionality
YearMonthDay.toString()	Output the date in the ISO8601 format YYYY MM DD
OffsetDateTimeField.getMinimumValue()	Get the minimum value for the field
LocalDateTime.withSecondOfMinute(int)	Returns a copy of this datetime with the second of minute field updated
AbstractReadableInstantFieldProperty.get()	Gets the value of this property from the instant
CopticChronology.getZone()	Description copied from class BaseChronology
MutableInterval.copy()	Clone this object without having to cast the returned object
DelegatedDateTimeField.DelegatedDateTimeField(DateTimeField,DurationField,DateTimeFieldType)	Constructor
Months.negated()	Returns a new instance with the months value negated
LocalDateTime.parse(String,DateTimeFormatter)	Parses a LocalDateTime from the specified string using a formatter
MillisDurationField.getValueAsLong(long,long)	Description copied from class DurationField
TimeOfDay.hourOfDay()	Get the hour of day field property which provides access to advanced functionality
UnsupportedDateTimeField.getLeapDurationField()	Always returns null
EthiopicChronology.getDateTimeMillis(int,int,int,int)	Description copied from class BaseChronology
Minutes.toStandardSeconds()	Converts this period in minutes to a period in seconds assuming a 60 second minute
YearMonth.withFieldAdded(DurationFieldType,int)	Returns a copy of this year month with the value of the specified field increased
DateTime.year()	Get the year property which provides access to advanced functionality
DateMidnight.monthOfYear()	Get the month of year property which provides access to advanced functionality
AbstractPartialFieldProperty.getDurationField()	Returns the duration per unit value of this field For example if this field represents hour of day then the duration is an hour
LocalDate.LocalDate(Object)	Constructs an instance from an Object that represents a datetime
TimeOfDay.Property.addNoWrapToCopy(int)	Adds to the value of this field in a copy of this TimeOfDay throwing an Exception if the bounds are exceeded
BaseChronology.toString()	Gets a debugging toString
Chronology.weekyears()	Get the weekyears duration field for this chronology
PeriodType.withMinutesRemoved()	Returns a version of this PeriodType instance that does not support minutes
LimitChronology.getUpperLimit()	Returns the inclusive upper limit instant
LocalDate.compareTo(ReadablePartial)	Compares this partial with another returning an integer indicating the order
DelegatedDurationField.isSupported()	Returns true if this field is supported
Chronology.minuteOfHour()	Get the minute of hour field for this chronology
MutableDateTime.Property.roundHalfEven()	Round to the nearest whole unit of this field If halfway the ceiling is favored over the floor only if it makes this field s value even
DateTimeFieldType.dayOfMonth()	Get the day of month field type
MutablePeriod.setPeriod(long)	Sets all the fields in one go from a millisecond duration dividing the fields using the period type
DateTimeFormatterBuilder.appendTimeZoneShortName(Map)	Instructs the printer to emit a short locale specific time zone name providing a lookup for parsing
AbstractInstant.toString(DateTimeFormatter)	Uses the specified formatter to convert this partial to a String
MutableDateTime.setDayOfMonth(int)	Set the day of the month to the specified value
LocalDateTime.getCenturyOfEra()	Get the year of era field value
MonthDay.monthOfYear()	Get the month of year field property which provides access to advanced functionality
AbstractInterval.hashCode()	Hashcode compatible with equals method
AssembledChronology.seconds()	Description copied from class BaseChronology
UnsupportedDateTimeField.getMaximumValue(ReadablePartial)	Always throws UnsupportedOperationException
PeriodFormatterBuilder.appendPrefix(String)	Append a field prefix which applies only to the next appended field If the field is not printed neither is the prefix
CachedDateTimeZone.isFixed()	Description copied from class DateTimeZone
UnsupportedDateTimeField.getDifference(long,long)	Delegates to the duration field
DateTimeFormatterBuilder.appendMillisOfDay(int)	Instructs the printer to emit a numeric millisOfDay field
Minutes.standardMinutesIn(ReadablePeriod)	Creates a new Minutes representing the number of complete standard length minutes in the specified period
ScaledDurationField.getValueAsLong(long,long)	Description copied from class DurationField
TimeOfDay.secondOfMinute()	Get the second of minute field property which provides access to advanced functionality
Minutes.toStandardDays()	Converts this period in minutes to a period in days assuming a 24 hour day and 60 minute hour
Period.withFieldAdded(DurationFieldType,int)	Creates a new Period instance with the valueToAdd added to the specified field
BaseDurationField.compareTo(DurationField)	
YearMonth.Property.getField()	Gets the field that this property uses
BaseSingleFieldPeriod.toPeriod()	Get this period as an immutable Period object
MutableDateTime.property(DateTimeFieldType)	Gets the property object for the specified type which contains many useful methods
DateTimeField.roundHalfEven(long)	Round to the nearest whole unit of this field If the given millisecond value is closer to the floor this function behaves like roundFloor If the millisecond value is closer to the ceiling this function behaves like roundCeiling
BaseSingleFieldPeriod.getValue(int)	Gets the value at the specified index
LocalTime.minusMinutes(int)	Returns a copy of this time minus the specified number of minutes
Years.parseYears(String)	Creates a new Years by parsing a string in the ISO8601 format PnY
ScaledDurationField.getUnitMillis()	Description copied from class DurationField
Minutes.dividedBy(int)	Returns a new instance with the minutes divided by the specified divisor
LocalDate.fromDateFields(Date)	Constructs a LocalDate from a java util Date using exactly the same field values
DateTime.withDayOfMonth(int)	Returns a copy of this datetime with the day of month field updated
YearMonthDay.withMonthOfYear(int)	Returns a copy of this date with the month of year field updated
IllegalFieldValueException.getLowerBound()	Returns the lower bound of the legal value range or null if not applicable
DateTimeFormat.longDateTime()	Creates a format that outputs a long datetime format
MutableDateTime.weekyear()	Get the year of a week based year property
PeriodType.yearMonthDayTime()	Gets a type that defines all standard fields except weeks
LocalTime.Property.getField()	Gets the field being used
UnsupportedDateTimeField.getType()	Description copied from class DateTimeField
IllegalFieldValueException.IllegalFieldValueException(DurationFieldType,Number,Number,Number)	Constructor
MutableDateTime.MutableDateTime(Object,DateTimeZone)	Constructs an instance from an Object that represents a datetime forcing the time zone to that specified
DateTimeParserBucket.computeMillis(boolean)	Computes the parsed datetime by setting the saved fields
DefaultNameProvider.getShortName(Locale,String,String,boolean)	
AssembledChronology.hours()	Description copied from class BaseChronology
PeriodFormatter.printTo(Writer,ReadablePeriod)	Prints a ReadablePeriod to a Writer
LocalDateTime.minusDays(int)	Returns a copy of this datetime minus the specified number of days
OffsetDateTimeField.getMaximumValue()	Get the maximum value for the field
AbstractDateTime.getDayOfWeek()	Get the day of week field value
LocalDate.centuryOfEra()	Get the century of era property which provides access to advanced functionality
UnsupportedDurationField.add(long,int)	Always throws UnsupportedOperationException
DateTime.Property.setCopy(int)	Sets this field in a copy of the DateTime
ISODateTimeFormat.hourMinuteSecondFraction()	Returns a formatter for a two digit hour of day two digit minute of hour two digit second of minute and three digit fraction of second HH mm ss SSS Parsing will parse up to 9 fractional second digits throwing away all except the first three
AbstractPartial.hashCode()	Gets a hash code for the ReadablePartial that is compatible with the equals method
ReadableInterval.hashCode()	Gets a hash code for the time interval that is compatible with the equals method
DateMidnight.era()	Get the era property which provides access to advanced functionality
DateTimeFormatter.getChronolgy()	Gets the chronology to use as an override
DateTime.minusDays(int)	Returns a copy of this datetime minus the specified number of days
MutablePeriod.addWeeks(int)	Adds the specified weeks to the number of weeks in the period
TimeOfDay.plus(ReadablePeriod)	Returns a copy of this time with the specified period added wrapping to what would be a new day if required
LimitChronology.getLowerLimit()	Returns the inclusive lower limit instant
ReadWritablePeriod.setWeeks(int)	Sets the number of weeks of the period
YearMonth.YearMonth(Object)	Constructs a YearMonth from an Object that represents some form of time
DateTimeFormatterBuilder.appendCenturyOfEra(int,int)	Instructs the printer to emit a numeric century of era field
ReadWritablePeriod.add(ReadableInterval)	Adds an interval to this one by dividing the interval into fields and then adding each field in turn
ReadWritablePeriod.add(DurationFieldType,int)	Adds to the value of one of the fields
AbstractReadableInstantFieldProperty.getRangeDurationField()	Returns the range duration of this field For example if this field represents hour of day then the range duration is a day
ReadableInterval.toMutableInterval()	Get this time interval as a MutableInterval
ZoneInfoLogger.set(boolean)	
TimeOfDay.getFieldTypes()	Gets an array of the field type of each of the fields that this partial supports
LocalDate.property(DateTimeFieldType)	Gets the property object for the specified type which contains many useful methods
LocalDateTime.withDayOfWeek(int)	Returns a copy of this datetime with the day of week field updated
LocalTime.LocalTime(int,int,int)	Constructs an instance set to the specified time using ISOChronology
YearMonthDay.minus(ReadablePeriod)	Returns a copy of this date with the specified period taken away
ReadablePeriod.getPeriodType()	Gets the period type that defines which fields are included in the period
LocalDateTime.withMonthOfYear(int)	Returns a copy of this datetime with the month of year field updated
MutablePeriod.MutablePeriod(long,long)	Creates a period from the given interval endpoints using the standard set of fields
MutablePeriod.setWeeks(int)	Sets the number of weeks of the period
DateMidnight.Property.roundHalfFloorCopy()	Rounds to the nearest whole unit of this field on a copy of this DateMidnight favoring the floor if halfway
Duration.getStandardDays()	Gets the length of this duration in days assuming that there are the standard number of milliseconds in a day
ReadWritableDateTime.setDayOfWeek(int)	Set the day of week to the specified value
LocalTime.minusHours(int)	Returns a copy of this time minus the specified number of hours
DateTime.withTime(int,int,int,int)	Returns a copy of this datetime with the specified time retaining the date fields
YearMonthDay.plus(ReadablePeriod)	Returns a copy of this date with the specified period added
BaseChronology.millisOfSecond()	Get the millis of second field for this chronology
IllegalFieldValueException.getDateTimeFieldType()	Returns the DateTimeFieldType whose value was invalid or null if not applicable
JodaTimePermission.JodaTimePermission(String)	Constructs a new permission object
YearMonth.Property.addWrapFieldToCopy(int)	Adds to the value of this field in a copy of this YearMonth wrapping within this field if the maximum value is reached
Period.plusWeeks(int)	Returns a new period plus the specified number of weeks added
MutablePeriod.set(DurationFieldType,int)	Sets the value of one of the fields
DividedDateTimeField.DividedDateTimeField(RemainderDateTimeField,DateTimeFieldType)	Construct a DividedDateTimeField that compliments the given RemainderDateTimeField
ISODateTimeFormat.ordinalDateTimeNoMillis()	Returns a formatter for a full ordinal date and time without millis using a four digit year and three digit dayOfYear yyyy DDD T HH mm ssZZ
ImpreciseDateTimeField.get(long)	Description copied from class BaseDateTimeField
DateTimeFormatterBuilder.appendHourOfDay(int)	Instructs the printer to emit a numeric hourOfDay field
LocalDateTime.plusMillis(int)	Returns a copy of this datetime plus the specified number of millis
FormatUtils.appendUnpaddedInteger(Appendable,long)	Converts an integer to a string and appends it to the given appendable
FieldUtils.safeMultiplyToInt(long,long)	Multiply two values to return an int throwing an exception if overflow occurs
DateTimeComparator.getDateOnlyInstance()	Returns a comparator that only considers date fields
BaseSingleFieldPeriod.hashCode()	Gets a hash code for the period as defined by ReadablePeriod
Years.isGreaterThan(Years)	Is this years instance greater than the specified number of years
DurationFieldType.isSupported(Chronology)	Checks whether this field supported in the given Chronology
ReadableInterval.getEnd()	Gets the end of this time interval which is exclusive as a DateTime
CachedDateTimeZone.hashCode()	Description copied from class DateTimeZone
Hours.toStandardDuration()	Converts this period in hours to a duration in milliseconds assuming a 60 minute hour and 60 second minute
MutableDateTime.now(DateTimeZone)	Obtains a MutableDateTime set to the current system millisecond time using ISOChronology in the specified time zone
LocalDate.LocalDate(DateTimeZone)	Constructs an instance set to the current local time evaluated using ISO chronology in the specified zone
DelegatedDateTimeField.set(long,String)	Description copied from class DateTimeField
LocalDate.toDateTime(LocalTime,DateTimeZone)	Converts this object to a DateTime using a LocalTime to fill in the missing fields
PeriodFormatterBuilder.PeriodFormatterBuilder()	
LocalDateTime.now()	Obtains a LocalDateTime set to the current system millisecond time using ISOChronology in the default time zone
AbstractInterval.isEqual(ReadableInterval)	Is this interval equal to the specified interval ignoring the chronology
LocalTime.plusMinutes(int)	Returns a copy of this time plus the specified number of minutes
Minutes.multipliedBy(int)	Returns a new instance with the minutes multiplied by the specified scalar
BaseDateTimeField.getRangeDurationField()	Returns the range duration of this field For example if this field represents hour of day then the range duration is a day
PeriodFormatter.withParseType(PeriodType)	Returns a new formatter with a different PeriodType for parsing
AbstractInstant.toMutableDateTimeISO()	Get this object as a MutableDateTime using ISOChronology in the same zone
LocalDate.yearOfEra()	Get the year of era property which provides access to advanced functionality
ReadWritableDateTime.setMinuteOfDay(int)	Set the minute of the day to the specified value
FixedDateTimeZone.hashCode()	Description copied from class DateTimeZone
MutableDateTime.setTime(ReadableInstant)	Set the time from another instant
DateTimeParserBucket.getChronology()	Gets the chronology of the bucket which will be a local UTC chronology
MillisDurationField.add(long,int)	Description copied from class DurationField
LocalDateTime.secondOfMinute()	Get the second of minute field property which provides access to advanced functionality
YearMonthDay.YearMonthDay(int,int,int)	Constructs a YearMonthDay with specified time field values using ISOChronology in the default zone
ISODateTimeFormat.dateTime()	Returns a formatter that combines a full date and time separated by a T yyyy MM dd T HH mm ss SSSZZ
Partial.Partial(DateTimeFieldType,int,Chronology)	Constructs a Partial with the specified field and value
LocalDateTime.withYear(int)	Returns a copy of this datetime with the year field updated
Minutes.parseMinutes(String)	Creates a new Minutes by parsing a string in the ISO8601 format PTnM
ISODateTimeFormat.basicDateTimeNoMillis()	Returns a basic formatter that combines a basic date and time without millis separated by a T yyyyMMdd T HHmmssZ
BaseDateTimeField.getDurationField()	Returns the duration per unit value of this field For example if this field represents hour of day then the unit duration is an hour
DateTimeField.getAsShortText(int,Locale)	Get the human readable short text value of this field from the field value
TimeOfDay.TimeOfDay(DateTimeZone)	Constructs a TimeOfDay with the current time using ISOChronology in the specified zone to extract the fields
LocalDateTime.toString(String)	Output the date using the specified format pattern
MutablePeriod.setSeconds(int)	Sets the number of seconds of the period
DateTimeParserBucket.saveField(DateTimeField,int)	Saves a datetime field value
MutablePeriod.getSeconds()	Gets the seconds field part of the period
DateTimeFieldType.secondOfMinute()	Get the second of minute field type
BaseDateTimeField.toString()	Get a suitable debug string
ReadableDateTime.getDayOfYear()	Get the day of year field value
YearMonthDay.toInterval(DateTimeZone)	Converts this object to an Interval representing the whole day
DelegatedDurationField.equals(Object)	
Minutes.minus(int)	Returns a new instance with the specified number of minutes taken away
YearMonthDay.YearMonthDay(long)	Constructs a YearMonthDay extracting the partial fields from the specified milliseconds using the ISOChronology in the default zone
PreciseDurationField.getMillis(int,long)	Get the millisecond duration of this field from its value
UnsupportedDurationField.getType()	Description copied from class DurationField
ConverterManager.addInstantConverter(InstantConverter)	Adds a converter to the set of converters If a matching converter is already in the set the given converter replaces it If the converter is exactly the same as one already in the set no changes are made
ZonedChronology.getDateTimeMillis(int,int,int,int,int,int,int)	Description copied from class BaseChronology
DelegatedDurationField.add(long,int)	Description copied from class DurationField
DateTimeParserBucket.DateTimeParserBucket(long,Chronology,Locale)	Constructs a bucket
PreciseDateTimeField.set(long,int)	Set the specified amount of units to the specified time instant
LocalDate.Property.roundHalfFloorCopy()	Rounds to the nearest whole unit of this field on a copy of this LocalDate favoring the floor if halfway
MutableDateTime.Property.roundCeiling()	Round to the highest whole unit of this field
RemainderDateTimeField.remainder(long)	Description copied from class BaseDateTimeField
Minutes.getMinutes()	Gets the number of minutes that this period represents
DateTime.plusSeconds(int)	Returns a copy of this datetime plus the specified number of seconds
MutablePeriod.add(long)	Adds a millisecond duration to this one by dividing the duration into fields and calling add ReadablePeriod
Duration.dividedBy(long)	Returns a new duration with this length divided by the specified divisor
DecoratedDurationField.isPrecise()	Description copied from class DurationField
TimeOfDay.Property.get()	Gets the value of this field
Period.toStandardHours()	Converts this period to a period in hours assuming a 7 day week 24 hour day 60 minute hour and 60 second minute
ISODateTimeFormat.hourMinuteSecond()	Returns a formatter for a two digit hour of day two digit minute of hour and two digit second of minute HH mm ss
DateTime.plusMinutes(int)	Returns a copy of this datetime plus the specified number of minutes
Period.minusWeeks(int)	Returns a new period minus the specified number of weeks taken away
Partial.Partial(DateTimeFieldType[],int[],Chronology)	Constructs a Partial with the specified fields and values
ReadWritableDateTime.setHourOfDay(int)	Set the hour of the day to the specified value
ConverterManager.getPeriodConverter(Object)	Gets the best converter for the object specified
FieldUtils.getWrappedValue(int,int,int,int)	Utility method used by addWrapField implementations to ensure the new value lies within the field s legal value range
Seconds.toStandardDuration()	Converts this period in seconds to a duration in milliseconds assuming a 24 hour day 60 minute hour and 60 second minute
ISODateTimeFormat.yearMonthDay()	Returns a formatter for a four digit year two digit month of year and two digit day of month yyyy MM dd
ReadWritableInstant.setZoneRetainFields(DateTimeZone)	Sets the time zone of the datetime changing the chronology and millisecond
GregorianChronology.toString()	Gets a debugging toString
DurationFieldType.weeks()	Get the weeks field type
BuddhistChronology.getInstance(DateTimeZone)	Standard instance of a Buddhist Chronology that matches Sun s BuddhistCalendar class This means that it follows the GregorianJulian calendar rules with a cutover date
Days.minus(Days)	Returns a new instance with the specified number of days taken away
DateTimeFieldType.getRangeDurationType()	Get the duration range of the field
MutablePeriod.MutablePeriod(ReadableDuration,ReadableInstant,PeriodType)	Creates a period from the given duration and end point
DateTimeFormatterBuilder.appendSecondOfDay(int)	Instructs the printer to emit a numeric secondOfDay field
OffsetDateTimeField.OffsetDateTimeField(DateTimeField,int)	Constructor
CopticChronology.getMinimumDaysInFirstWeek()	
YearMonthDay.plusMonths(int)	Returns a copy of this date plus the specified number of months
AbstractPeriod.getFieldTypes()	Gets an array of the field types that this period supports
MutableInterval.setDurationBeforeEnd(ReadableDuration)	Sets the duration of this time interval preserving the end instant
DateTimeFormat.shortDateTime()	Creates a format that outputs a short datetime format
ReadWritablePeriod.setYears(int)	Sets the number of years of the period
MutableDateTime.era()	Get the era property
PeriodFormatterBuilder.appendSuffix(String[],String[])	Append a field suffix which applies only to the last appended field
AbstractPartialFieldProperty.getMaximumValue()	Gets the maximum value for this field given the current field values
AbstractInstant.toDate()	Get the date time as a java util Date
ZeroIsMaxDateTimeField.getMinimumValue(ReadablePartial,int[])	Always returns 1
LocalTime.getMinuteOfHour()	Get the minute of hour field value
DateTime.minusMonths(int)	Returns a copy of this datetime minus the specified number of months
LocalTime.plus(ReadablePeriod)	Returns a copy of this time with the specified period added
UnsupportedDateTimeField.set(long,String)	Always throws UnsupportedOperationException
LocalDateTime.withDurationAdded(ReadableDuration,int)	Returns a copy of this datetime with the specified duration added
GregorianChronology.getMinimumDaysInFirstWeek()	
ZonedChronology.toString()	A debugging string for the chronology
Period.plusMillis(int)	Returns a new period plus the specified number of millis added
AbstractInstant.get(DateTimeFieldType)	Get the value of one of the fields of a datetime using the chronology of the instant
DateTimeFormat.patternForStyle(String,Locale)	Returns the pattern used by a particular style and locale
FormatUtils.appendPaddedInteger(Appendable,long,int)	Converts an integer to a string prepended with a variable amount of 0 pad characters and appends it to the given buffer
MutablePeriod.MutablePeriod(Object,PeriodType)	Creates a period by converting or copying from another object
LocalDate.toInterval()	Converts this object to an Interval representing the whole day in the default time zone
TimeOfDay.minusMillis(int)	Returns a copy of this time minus the specified number of millis
DelegatedDateTimeField.getAsShortText(int,Locale)	Description copied from class DateTimeField
BaseDuration.toPeriodFrom(ReadableInstant)	Converts this duration to a Period instance by adding the duration to a start instant to obtain an interval using the standard period type
BaseDateTimeField.getMaximumTextLength(Locale)	Get the maximum text value for this field The default implementation returns the equivalent of Integer toString getMaximumValue length
AbstractReadableInstantFieldProperty.getDifference(ReadableInstant)	Returns the difference between this field property instant and the one passed in in the units of this field The sign of the difference matches that of compareTo In other words this field property s instant is the minuend
MutableDateTime.setWeekOfWeekyear(int)	Set the week of weekyear to the specified value
MutableDateTime.setZoneRetainFields(DateTimeZone)	Sets the time zone of the datetime changing the chronology and millisecond
DateTime.withCenturyOfEra(int)	Returns a copy of this datetime with the century of era field updated
LocalDate.get(DateTimeFieldType)	Get the value of one of the fields of a datetime
DateMidnight.withWeekOfWeekyear(int)	Returns a copy of this date with the week of weekyear field updated
ZeroIsMaxDateTimeField.roundHalfEven(long)	Description copied from class BaseDateTimeField
AbstractDateTime.toGregorianCalendar()	Get the date time as a java util GregorianCalendar assigning exactly the same millisecond instant
BaseDateTimeField.isLeap(long)	Returns whether this field is leap for the specified instant
DateTimeFormatter.parseLocalTime(String)	Parses only the local time from the given text returning a new LocalTime
LocalDateTime.dayOfWeek()	Get the day of week property which provides access to advanced functionality
Period.withWeeks(int)	Returns a new period with the specified number of weeks
MutableDateTime.add(ReadablePeriod)	Adds a period to this instant
LocalDate.plusWeeks(int)	Returns a copy of this date plus the specified number of weeks
MutablePeriod.add(DurationFieldType,int)	Adds to the value of one of the fields
DelegatedDateTimeField.add(long,long)	Description copied from class DateTimeField
Period.getWeeks()	Gets the weeks field part of the period
ZeroIsMaxDateTimeField.getMinimumValue(long)	Always returns 1
ScaledDurationField.add(long,long)	Description copied from class DurationField
Days.toStandardMinutes()	Converts this period in days to a period in minutes assuming a 24 hour day and 60 minute hour
DateTimeZone.getMillisKeepLocal(DateTimeZone,long)	Gets the millisecond instant in another zone keeping the same local time
ReadWritableDateTime.addHours(int)	Add a number of hours to the date
ISODateTimeFormat.basicWeekDate()	Returns a basic formatter for a full date as four digit weekyear two digit week of weekyear and one digit day of week xxxx W wwe
Chronology.dayOfMonth()	Get the day of month field for this chronology
DateMidnight.weekyear()	Get the year of a week based year property which provides access to advanced functionality
BaseChronology.getDateTimeMillis(long,int,int,int,int)	Returns a datetime millisecond instant from from the given instant hour minute second and millisecond values The set of given values must refer to a valid datetime or else an IllegalArgumentException is thrown
DecoratedDateTimeField.get(long)	Description copied from class BaseDateTimeField
LocalDateTime.toDateTime()	Converts this object to a DateTime using the default zone
UnsupportedDateTimeField.add(ReadablePartial,int,int[],int)	Always throws UnsupportedOperationException
IslamicChronology.getDateTimeMillis(int,int,int,int,int,int,int)	Description copied from class BaseChronology
BaseDateTimeField.getMinimumValue(ReadablePartial,int[])	Get the minimum value for this field using the partial instant and the specified values
DurationFieldType.years()	Get the years field type
DateMidnight.yearOfCentury()	Get the year of century property which provides access to advanced functionality
Period.Period(long,long,Chronology)	Creates a period from the given interval endpoints using the standard set of fields
DateTime.plus(ReadablePeriod)	Returns a copy of this datetime with the specified period added
PeriodType.millis()	Gets a type that defines just the millis field
MutablePeriod.MutablePeriod(PeriodType)	Creates a zero length period using the specified period type
ReadableDateTime.getDayOfWeek()	Get the day of week field value
ImpreciseDateTimeField.getDifferenceAsLong(long,long)	Computes the difference between two instants as measured in the units of this field Any fractional units are dropped from the result Calling getDifference reverses the effect of calling add In the following code long instant
ISODateTimeFormat.dateHourMinute()	Returns a formatter that combines a full date two digit hour of day and two digit minute of hour yyyy MM dd T HH mm
LocalTime.toString(String,Locale)	Output the time using the specified format pattern
DateMidnight.DateMidnight(Object,Chronology)	Constructs an instance from an Object that represents a datetime using the specified chronology
Days.days(int)	Obtains an instance of Days that may be cached
UnsupportedDurationField.getValue(long)	Always throws UnsupportedOperationException
Period.getDays()	Gets the days field part of the period
MillisDurationField.getDifferenceAsLong(long,long)	Description copied from class DurationField
AbstractReadableInstantFieldProperty.equals(Object)	Compares this property to another
LocalDateTime.LocalDateTime(int,int,int,int,int,int)	Constructs an instance set to the specified date and time using ISOChronology
DateTimeZone.isFixed()	Returns true if this time zone has no transitions
YearMonthDay.monthOfYear()	Get the month of year field property which provides access to advanced functionality
DateTimeFormat.longDate()	Creates a format that outputs a long date format
AbstractInstant.isAfter(ReadableInstant)	Is this instant strictly after the instant passed in comparing solely by millisecond
DateTimeFormatterBuilder.DateTimeFormatterBuilder()	Creates a DateTimeFormatterBuilder
PreciseDurationField.isPrecise()	This field is precise
MonthDay.plus(ReadablePeriod)	Returns a copy of this month day with the specified period added
Hours.hoursBetween(ReadableInstant,ReadableInstant)	Creates a Hours representing the number of whole hours between the two specified datetimes
ReadablePeriod.toString()	Gets the value as a String in the style of the ISO8601 duration format
BaseDateTimeField.getMinimumValue(long)	Get the minimum value for this field evaluated at the specified time
ImpreciseDateTimeField.getRangeDurationField()	Description copied from class BaseDateTimeField
PeriodType.yearWeekDay()	Gets a type that defines year week and day fields
LocalTime.minusMillis(int)	Returns a copy of this time minus the specified number of millis
DateTimeZone.getNameKey(long)	Returns a non localized name that is unique to this time zone It can be combined with id to form a unique key for fetching localized names
DateTimeFormatterBuilder.appendOptional(DateTimeParser)	Appends just a parser element which is optional With no matching printer a printer cannot be built from this DateTimeFormatterBuilder
ZeroIsMaxDateTimeField.getMaximumValue(ReadablePartial)	Get the maximum value for the field which is one more than the wrapped field s maximum value
AssembledChronology.Fields.copyFieldsFrom(Chronology)	Copy the supported fields from a chronology into this container
UnsupportedDateTimeField.toString()	Get a suitable debug string
Period.minusMonths(int)	Returns a new period minus the specified number of months taken away
Chronology.eras()	Get the eras duration field for this chronology
TimeOfDay.Property.setCopy(String,Locale)	Sets this field in a copy of the TimeOfDay to a parsed text value
TimeOfDay.withMillisOfSecond(int)	Returns a copy of this time with the millis of second field updated
DateTimeParserBucket.getLocale()	Returns the locale to be used during parsing
ReadWritableInstant.add(ReadablePeriod)	Adds a period to this instant
ZoneInfoProvider.ZoneInfoProvider(File)	ZoneInfoProvider searches the given directory for compiled data files
DateTime.minuteOfDay()	Get the minute of day property which provides access to advanced functionality
ReadablePeriod.size()	Gets the number of fields that this period supports
BaseDateTime.getChronology()	Gets the chronology of the datetime
ReadWritablePeriod.set(DurationFieldType,int)	Sets the value of one of the fields
BaseDurationField.getValueAsLong(long)	Get the value of this field from the milliseconds which is approximate if this field is imprecise
DateMidnight.Property.roundCeilingCopy()	Rounds to the highest whole unit of this field on a copy of this DateMidnight
YearMonth.withMonthOfYear(int)	Returns a copy of this year month with the month of year field updated
DateMidnight.withMonthOfYear(int)	Returns a copy of this date with the month of year field updated
LocalDate.isSupported(DurationFieldType)	Checks if the duration type specified is supported by this local date and chronology
ReadWritableInstant.set(DateTimeFieldType,int)	Sets the value of one of the fields of the instant such as hourOfDay
DateTimeZone.toTimeZone()	Get the datetime zone as a TimeZone
YearMonthDay.getFieldType(int)	Gets the field type at the specified index
Period.minusMinutes(int)	Returns a new period minus the specified number of minutes taken away
Partial.Property.withMaximumValue()	Returns a new Partial with this field set to the maximum value for this field
DelegatedDurationField.getType()	Description copied from class DurationField
Weeks.toStandardSeconds()	Converts this period in weeks to a period in seconds assuming a 7 day week 24 hour day 60 minute hour and 60 second minute
UnsupportedDateTimeField.add(long,long)	Delegates to the duration field
ReadWritableDateTime.setYear(int)	Set the year to the specified value
Period.getMillis()	Gets the millis field part of the period
DateMidnight.now()	Obtains a DateMidnight set to the current system millisecond time using ISOChronology in the default time zone
MutableInterval.setPeriodBeforeEnd(ReadablePeriod)	Sets the period of this time interval preserving the end instant and using the ISOChronology in the default zone for calculations
FieldUtils.safeDivide(long,long,RoundingMode)	Divides the dividend by divisor Rounding of result occurs as per the roundingMode
MutablePeriod.MutablePeriod(ReadableInstant,ReadableInstant,PeriodType)	Creates a period from the given interval endpoints
ZeroIsMaxDateTimeField.roundHalfFloor(long)	Description copied from class BaseDateTimeField
FieldUtils.getWrappedValue(int,int,int)	Utility method that ensures the given value lies within the field s legal value range
DateTimeZoneBuilder.setStandardOffset(int)	Sets the standard offset to use for newly added rules until the next cutover is added
SkipUndoDateTimeField.getMinimumValue()	Description copied from class DateTimeField
DateTime.era()	Get the era property which provides access to advanced functionality
MutableDateTime.secondOfDay()	Get the second of day property Calling a setter on the property will replace the values of second of minute minute of hour and hour of day
Period.withYears(int)	Returns a new period with the specified number of years
MutablePeriod.setYears(int)	Sets the number of years of the period
LocalDate.toLocalDateTime(LocalTime)	Converts this object to a LocalDateTime using a LocalTime to fill in the missing fields
DateTimeField.getMaximumShortTextLength(Locale)	Get the maximum short text value for this field
PeriodFormatterBuilder.printZeroAlways()	Always print zero values for the next and following appended fields even if the period doesn t support it The parser requires values for fields that always print zero
DateMidnight.withZoneRetainFields(DateTimeZone)	Returns a copy of this date with a different time zone preserving the day The returned object will have a local time of midnight in the new zone on the same day as the original instant
DelegatedDurationField.getMillis(long)	Description copied from class DurationField
PeriodFormatterBuilder.appendHours()	Instruct the printer to emit an integer hours field if supported
MutableInterval.MutableInterval(ReadableInstant,ReadableInstant)	Constructs an interval from a start and end instant
MutableDateTime.monthOfYear()	Get the month of year property
Days.isLessThan(Days)	Is this days instance less than the specified number of days
DateTime.DateTime(int,int,int,int,int,int,int,DateTimeZone)	Constructs an instance from datetime field values using ISOChronology in the specified time zone
DateMidnight.toLocalDate()	Converts this object to a LocalDate with the same date and chronology
LocalDateTime.getHourOfDay()	Get the hour of day field value
MutableDateTime.setMillis(ReadableInstant)	Sets the millisecond instant of this instant from another
ReadableDuration.toString()	Gets the value as a String in the ISO8601 duration format using hours minutes and seconds including fractional milliseconds
Partial.Partial(DateTimeFieldType,int)	Constructs a Partial with the specified field and value
RemainderDateTimeField.addWrapField(long,int)	Add the specified amount to the specified time instant wrapping around within the remainder range if necessary The amount added may be negative
GJChronology.getInstance()	Factory method returns instances of the default GJ cutover chronology This uses a cutover date of October 15 1582 Gregorian 00 00 00 UTC For this value October 4 1582 Julian is followed by October 15 1582 Gregorian
IslamicChronology.getZone()	Description copied from class BaseChronology
LocalDateTime.yearOfCentury()	Get the year of century property which provides access to advanced functionality
BaseDuration.toPeriod(PeriodType)	Converts this duration to a Period instance using the specified period type and the ISO chronology
TimeOfDay.minus(ReadablePeriod)	Returns a copy of this time with the specified period taken away wrapping to what would be a new day if required
MutableDateTime.add(DurationFieldType,int)	Adds to the instant specifying the duration and multiple to add
EthiopicChronology.getInstance()	Gets an instance of the EthiopicChronology in the default time zone
YearMonth.plusYears(int)	Returns a copy of this year month plus the specified number of years
LocalTime.Property.addCopy(long)	Adds to this field in a copy of this LocalTime
AbstractReadableInstantFieldProperty.getAsShortText(Locale)	Gets the short textual value of this property from the instant as a string in the specified locale
LocalTime.getMillisOfDay()	Get the millis of day field value
AbstractPartialFieldProperty.getMaximumTextLength(Locale)	Gets the maximum text length for the field
DateMidnight.minus(long)	Returns a copy of this date with the specified duration taken away
MillisDurationField.getUnitMillis()	Returns the amount of milliseconds per unit value of this field
ReadablePeriod.getFieldType(int)	Gets the field type at the specified index
DateTimeFormatterBuilder.clear()	Clears out all the appended elements allowing this builder to be reused
DelegatedDateTimeField.set(ReadablePartial,int,int[],String,Locale)	Description copied from class DateTimeField
AbstractPartialFieldProperty.getAsText()	Gets the textual value of this property from the instant as a string in the default locale
LocalDate.getChronology()	Gets the chronology of the date
FormatUtils.appendPaddedInteger(StringBuffer,int,int)	Converts an integer to a string prepended with a variable amount of 0 pad characters and appends it to the given buffer
YearMonth.getMonthOfYear()	Get the month of year field value
ReadableDateTime.getYear()	Get the year field value
StrictChronology.toString()	A debugging string for the chronology
DecoratedDateTimeField.getWrappedField()	Gets the wrapped date time field
UnsupportedDateTimeField.getMaximumValue(ReadablePartial,int[])	Always throws UnsupportedOperationException
Period.seconds(int)	Create a period with a specified number of seconds
LocalDate.equals(Object)	Compares this ReadablePartial with another returning true if the chronology field types and values are equal
YearMonthDay.minusYears(int)	Returns a copy of this date minus the specified number of years
LocalDate.Property.withMinimumValue()	Returns a new LocalDate with this field set to the minimum value for this field
MutablePeriod.getMonths()	Gets the months field part of the period
DateTimeParser.parseInto(DateTimeParserBucket,String,int)	Parse an element from the given text saving any fields into the given DateTimeParserBucket If the parse succeeds the return value is the new text position Note that the parse may succeed without fully reading the text
OffsetDateTimeField.getLeapAmount(long)	Description copied from class BaseDateTimeField
DateMidnight.DateMidnight(long)	Constructs an instance set to the milliseconds from 1970 01 01T00 00 00Z using ISOChronology in the default time zone
BaseChronology.weekyearOfCentury()	Get the year of a week based year in a century field for this chronology
IslamicChronology.getInstance(DateTimeZone)	Gets an instance of the IslamicChronology in the given time zone
DateTimeZone.setNameProvider(NameProvider)	Sets the name provider factory
DateTimeUtils.getZone(DateTimeZone)	Gets the zone handling null
AbstractPartial.equals(Object)	Compares this ReadablePartial with another returning true if the chronology field types and values are equal
MutableDateTime.add(long)	Add an amount of time to the datetime
LocalDateTime.toLocalTime()	Converts this object to a LocalTime with the same time and chronology
DateTimeField.getAsText(ReadablePartial,int,Locale)	Get the human readable text value of this field from a partial instant
Days.standardDaysIn(ReadablePeriod)	Creates a new Days representing the number of complete standard length days in the specified period
YearMonth.minus(ReadablePeriod)	Returns a copy of this year month with the specified period taken away
DateTimeField.getAsShortText(long)	Get the human readable short text value of this field from the milliseconds
ReadableDateTime.toString(String)	Output the instant using the specified format pattern
ConverterManager.removeIntervalConverter(IntervalConverter)	Removes a converter from the set of converters If the converter was not in the set no changes are made
Provider.getAvailableIDs()	Returns an unmodifiable set of ids All providers must at least support id UTC
UnsupportedDateTimeField.getMaximumValue(long)	Always throws UnsupportedOperationException
Chronology.minuteOfDay()	Get the minute of day field for this chronology
UnsupportedDurationField.getMillis(long)	Always throws UnsupportedOperationException
MutablePeriod.setPeriod(long,long)	Sets all the fields in one go from a millisecond interval using ISOChronology and dividing the fields using the period type
LocalDateTime.getYear()	Get the year field value
DurationField.getDifference(long,long)	Computes the difference between two instants as measured in the units of this field Any fractional units are dropped from the result Calling getDifference reverses the effect of calling add In the following code long instant
StrictChronology.hashCode()	A suitable hashcode for the chronology
LocalDate.LocalDate(int,int,int)	Constructs an instance set to the specified date and time using ISOChronology
AbstractPeriod.isSupported(DurationFieldType)	Checks whether the field specified is supported by this period
DelegatedDateTimeField.DelegatedDateTimeField(DateTimeField,DateTimeFieldType)	Constructor
Instant.toDateTime()	Get this object as a DateTime using ISOChronology in the default zone
CachedDateTimeZone.equals(Object)	Description copied from class DateTimeZone
MonthDay.Property.setCopy(int)	Sets this field in a copy of the MonthDay
Chronology.minutes()	Get the minutes duration field for this chronology
MutablePeriod.addYears(int)	Adds the specified years to the number of years in the period
Duration.withDurationAdded(long,int)	Returns a new duration with this length plus that specified multiplied by the scalar
AbstractReadableInstantFieldProperty.getMaximumValue()	Gets the maximum value for the field
AbstractInstant.toDateTime(DateTimeZone)	Get this object as a DateTime using the same chronology but a different zone
MutableDateTime.dayOfYear()	Get the day of year property
Chronology.clockhourOfDay()	Get the hour of day offset to 1 24 field for this chronology
InstantConverter.getInstantMillis(Object,Chronology)	Extracts the millis from an object of this converter s type
DateTime.minus(ReadableDuration)	Returns a copy of this datetime with the specified duration taken away
BaseDateTimeField.set(long,String,Locale)	Sets a value in the milliseconds supplied from a human readable text value
AbstractConverter.getChronology(Object,Chronology)	Extracts the chronology from an object of this converter s type where the chronology is specified
DelegatedDurationField.getWrappedField()	Gets the wrapped duration field
BaseDateTime.BaseDateTime(int,int,int,int,int,int,int,Chronology)	Constructs an instance from datetime field values using the specified chronology
ReadWritableDateTime.addMonths(int)	Add a number of months to the date
DateTime.withEra(int)	Returns a copy of this datetime with the era field updated
JulianChronology.toString()	Gets a debugging toString
BaseDurationField.getName()	Description copied from class DurationField
DateTime.withSecondOfMinute(int)	Returns a copy of this datetime with the second of minute field updated
MillisDurationField.getMillis(long)	Description copied from class DurationField
DateTimeField.isSupported()	Returns true if this field is supported
LocalTime.equals(Object)	Compares this ReadablePartial with another returning true if the chronology field types and values are equal
GJChronology.withUTC()	Gets the Chronology in the UTC time zone
LocalTime.LocalTime(int,int,int,int)	Constructs an instance set to the specified time using ISOChronology
DateTimeFieldType.getField(Chronology)	Gets a suitable field for this type from the given Chronology
UnsupportedDateTimeField.roundHalfEven(long)	Always throws UnsupportedOperationException
ReadableDateTime.getDayOfMonth()	Get the day of month field value
Partial.toString(String,Locale)	Output the date using the specified format pattern
DateTime.withDate(int,int,int)	Returns a copy of this datetime with the specified date retaining the time fields
PeriodType.withMillisRemoved()	Returns a version of this PeriodType instance that does not support milliseconds
MutableDateTime.copy()	Clone this object without having to cast the returned object
OffsetDateTimeField.roundHalfFloor(long)	Description copied from class BaseDateTimeField
LocalDate.getMonthOfYear()	Get the month of year field value
AbstractPartial.getFields()	Gets an array of the fields that this partial supports
Seconds.minus(Seconds)	Returns a new instance with the specified number of seconds taken away
AbstractDateTime.getSecondOfDay()	Get the second of day field value
MonthDay.toString(String,Locale)	Output the month day using the specified format pattern
Weeks.getFieldType()	Gets the duration field type which is weeks
AbstractConverter.getChronology(Object,DateTimeZone)	Extracts the chronology from an object of this converter s type where the time zone is specified
Partial.Property.addWrapFieldToCopy(int)	Adds to the value of this field in a copy of this Partial wrapping within this field if the maximum value is reached
DateTime.DateTime(Chronology)	Constructs an instance set to the current system millisecond time using the specified chronology
TimeOfDay.withPeriodAdded(ReadablePeriod,int)	Returns a copy of this time with the specified period added wrapping to what would be a new day if required
ReadableInterval.getStart()	Gets the start of this time interval which is inclusive as a DateTime
LocalDate.now(Chronology)	Obtains a LocalDate set to the current system millisecond time using the specified chronology
MutableDateTime.dayOfMonth()	Get the day of month property
Partial.Property.addToCopy(int)	Adds to the value of this field in a copy of this Partial
LocalDateTime.getMillisOfSecond()	Get the millis of second field value
DateMidnight.Property.getField()	Gets the field being used
ISODateTimeFormat.localDateParser()	Returns a generic ISO date parser for parsing local dates
OffsetDateTimeField.add(long,int)	Add the specified amount of offset units to the specified time instant The amount added may be negative
Seconds.isGreaterThan(Seconds)	Is this seconds instance greater than the specified number of seconds
ScaledDurationField.getScalar()	Returns the scalar applied in the field s units
OffsetDateTimeField.set(long,int)	Set the specified amount of offset units to the specified time instant
LocalDate.Property.addToCopy(int)	Adds to this field in a copy of this LocalDate
DateTimeField.getAsText(ReadablePartial,Locale)	Get the human readable text value of this field from a partial instant
Period.getMinutes()	Gets the minutes field part of the period
LocalTime.fromCalendarFields(Calendar)	Constructs a LocalTime from a java util Calendar using exactly the same field values
AbstractConverter.getPartialValues(ReadablePartial,Object,Chronology)	Extracts the values of the partial from an object of this converter s type
GJChronology.getGregorianCutover()	Gets the cutover instant between Gregorian and Julian chronologies
LocalDate.Property.roundFloorCopy()	Rounds to the lowest whole unit of this field on a copy of this LocalDate
ReadableInstant.toInstant()	Get the value as a simple immutable Instant object
DecoratedDateTimeField.getDurationField()	Description copied from class BaseDateTimeField
IllegalFieldValueException.IllegalFieldValueException(String,Number,Number,Number)	Constructor
DateTimeFormatterBuilder.appendTimeZoneName()	Instructs the printer to emit a locale specific time zone name
LocalDateTime.now(DateTimeZone)	Obtains a LocalDateTime set to the current system millisecond time using ISOChronology in the specified time zone
PeriodFormatter.getParser()	Gets the internal parser object that performs the real parsing work
FormatUtils.appendUnpaddedInteger(StringBuffer,long)	Converts an integer to a string and appends it to the given buffer
Hours.isLessThan(Hours)	Is this hours instance less than the specified number of hours
MutablePeriod.setPeriod(ReadableDuration,Chronology)	Sets all the fields in one go from a duration dividing the fields using the period type
DateTimeZoneBuilder.setFixedSavings(String,int)	Set a fixed savings rule at the cutover
UnsupportedDateTimeField.getInstance(DateTimeFieldType,DurationField)	Gets an instance of UnsupportedDateTimeField for a specific named field
Weeks.weeksBetween(ReadablePartial,ReadablePartial)	Creates a Weeks representing the number of whole weeks between the two specified partial datetimes
LocalTime.plusHours(int)	Returns a copy of this time plus the specified number of hours
StrictChronology.withZone(DateTimeZone)	Description copied from class BaseChronology
DateTime.toLocalTime()	Converts this object to a LocalTime with the same time and chronology
ReadableInterval.getChronology()	Gets the chronology of the interval which is the chronology of the first datetime
GJChronology.toString()	Gets a debugging toString
BaseSingleFieldPeriod.getPeriodType()	Gets the period type which matches the duration field type
LocalDateTime.Property.getLocalDateTime()	Gets the LocalDateTime object linked to this property
AbstractInstant.toMutableDateTime(Chronology)	Get this object as a MutableDateTime using the given chronology and its zone
MutablePeriod.addSeconds(int)	Adds the specified seconds to the number of seconds in the period
Months.multipliedBy(int)	Returns a new instance with the months multiplied by the specified scalar
DateTimeZone.getOffsetFromLocal(long)	Gets the millisecond offset to subtract from local time to get UTC time
DateTimeField.roundHalfCeiling(long)	Round to the nearest whole unit of this field If the given millisecond value is closer to the floor this function behaves like roundFloor If the millisecond value is closer to the ceiling or is exactly halfway this function behaves like roundCeiling
MutableDateTime.Property.addWrapField(int)	Adds a value possibly wrapped to the millis value
Seconds.getPeriodType()	Gets the period type which is seconds
AbstractReadableInstantFieldProperty.getAsText()	Gets the textual value of this property from the instant as a string in the default locale
ReadWritableInstant.setMillis(long)	Sets the value as the number of milliseconds since the epoch 1970 01 01T00 00 00Z
LocalDate.toDateTimeAtMidnight(DateTimeZone)	Converts this LocalDate to a full datetime at midnight using the specified time zone
BaseChronology.validate(ReadablePartial,int[])	Validates whether the fields stored in a partial instant are valid
YearMonth.toString(String)	Output the year month using the specified format pattern
LocalDateTime.LocalDateTime(long,Chronology)	Constructs an instance set to the local time defined by the specified instant evaluated using the specified chronology
Period.toPeriod()	Get this period as an immutable Period object by returning this
UnsupportedDurationField.getMillis(int)	Always throws UnsupportedOperationException
Duration.minus(ReadableDuration)	Returns a new duration with this length minus that specified
Duration.dividedBy(long,RoundingMode)	Returns a new duration with its length divided by the specified divisor RoundingMode can be specified
AbstractInterval.toDuration()	Gets the duration of this time interval
DateTimeFormatterBuilder.appendWeekOfWeekyear(int)	Instructs the printer to emit a numeric weekOfWeekyear field
DateTimeField.add(long,long)	Adds a value which may be negative to the millis value overflowing into larger fields if necessary
TimeOfDay.TimeOfDay(int,int,Chronology)	Constructs a TimeOfDay with specified hour and minute and zero seconds and milliseconds
LocalDateTime.withTime(int,int,int,int)	Returns a copy of this datetime with the specified time retaining the date fields
ReadableDuration.isLongerThan(ReadableDuration)	Is the length of this duration longer than the duration passed in
LocalDateTime.LocalDateTime(int,int,int,int,int)	Constructs an instance set to the specified date and time using ISOChronology
LocalDateTime.minusWeeks(int)	Returns a copy of this datetime minus the specified number of weeks
Seconds.toStandardWeeks()	Converts this period in seconds to a period in weeks assuming a 7 day week 24 hour day 60 minute hour and 60 second minute
ReadablePartial.get(DateTimeFieldType)	Gets the value of one of the fields
DateTimeComparator.getUpperLimit()	Gets the field type that represents the upper limit of comparison
ScaledDurationField.hashCode()	Gets a hash code for this instance
BaseDateTime.BaseDateTime(Object,DateTimeZone)	Constructs an instance from an Object that represents a datetime forcing the time zone to that specified
TimeOfDay.withChronologyRetainFields(Chronology)	Returns a copy of this time with the specified chronology
Months.plus(int)	Returns a new instance with the specified number of months added
YearMonth.size()	Gets the number of fields in this partial which is two
MutableInterval.setDurationAfterStart(long)	Sets the duration of this time interval preserving the start instant
DateTimeFormatter.printTo(Appendable,ReadablePartial)	Prints a ReadablePartial
UnsupportedDateTimeField.getMinimumValue(ReadablePartial)	Always throws UnsupportedOperationException
ISODateTimeFormat.ordinalDateTime()	Returns a formatter for a full ordinal date and time using a four digit year and three digit dayOfYear yyyy DDD T HH mm ss SSSZZ
MutableDateTime.MutableDateTime(Object)	Constructs an instance from an Object that represents a datetime
MillisDurationField.add(long,long)	Description copied from class DurationField
DateTimeField.getDifferenceAsLong(long,long)	Computes the difference between two instants as measured in the units of this field Any fractional units are dropped from the result Calling getDifference reverses the effect of calling add In the following code long instant
LocalTime.toDateTimeToday(DateTimeZone)	Converts this LocalTime to a full datetime using the specified time zone setting the time fields from this instance and the date fields from the current time
PeriodFormatterBuilder.rejectSignedValues(boolean)	Reject signed values when parsing the next and following appended fields
ReadWritableDateTime.setSecondOfDay(int)	Set the second of the day to the specified value
MonthDay.now()	Obtains a MonthDay set to the current system millisecond time using ISOChronology in the default time zone
LocalDate.getWeekyear()	Get the weekyear field value
ZeroIsMaxDateTimeField.add(long,int)	Description copied from class BaseDateTimeField
ScaledDurationField.getMillis(int,long)	Description copied from class DurationField
BaseChronology.secondOfMinute()	Get the second of minute field for this chronology
BaseDurationField.getMillis(long)	Get the millisecond duration of this field from its value which is approximate if this field is imprecise
LocalDateTime.fromDateFields(Date)	Constructs a LocalDateTime from a java util Date using exactly the same field values
Period.toStandardMinutes()	Converts this period to a period in minutes assuming a 7 day week 24 hour day 60 minute hour and 60 second minute
DateTimeFormatterBuilder.appendMonthOfYearShortText()	Instructs the printer to emit a locale specific monthOfYear text The parser will accept a long or short monthOfYear text case insensitive
BaseChronology.hourOfHalfday()	Get the hour of am pm 0 11 field for this chronology
DateTimeFormatter.printTo(Appendable,ReadableInstant)	Prints a ReadableInstant using the chronology supplied by the instant
Period.Period(long,long,PeriodType)	Creates a period from the given interval endpoints
PeriodType.getFieldType(int)	Gets the field type by index
DateTime.Property.getDateTime()	Gets the datetime being used
MillisDurationField.toString()	Get a suitable debug string
Duration.toStandardHours()	Converts this duration to a period in hours assuming that there are the standard number of milliseconds in an hour
BaseSingleFieldPeriod.isSupported(DurationFieldType)	Checks whether the duration field specified is supported by this period
Chronology.yearOfCentury()	Get the year of century field for this chronology
Period.parse(String,PeriodFormatter)	Parses a Period from the specified string using a formatter
BaseDateTimeField.addWrapField(long,int)	Adds a value which may be negative to the instant value wrapping within this field
DurationField.add(long,long)	Adds a duration value which may be negative to the instant
DefaultNameProvider.getName(Locale,String,String)	Description copied from interface NameProvider
DateTime.Property.roundCeilingCopy()	Rounds to the highest whole unit of this field on a copy of this DateTime
DateTime.plusMillis(int)	Returns a copy of this datetime plus the specified number of millis
Minutes.getFieldType()	Gets the duration field type which is minutes
MonthDay.now(Chronology)	Obtains a MonthDay set to the current system millisecond time using the specified chronology
MutableDateTime.MutableDateTime(int,int,int,int,int,int,int)	Constructs an instance from datetime field values using ISOChronology in the default time zone
LocalTime.minusSeconds(int)	Returns a copy of this time minus the specified number of seconds
AssembledChronology.minutes()	Description copied from class BaseChronology
CopticChronology.equals(Object)	Checks if this chronology instance equals another
Hours.toStandardMinutes()	Converts this period in hours to a period in minutes assuming a 60 minute hour
AbstractDuration.isEqual(ReadableDuration)	Is the length of this duration equal to the duration passed in
AbstractPartialFieldProperty.toString()	Output a debugging string
MutableDateTime.yearOfCentury()	Get the year of century property
StrictChronology.withUTC()	Description copied from class BaseChronology
DurationField.getValue(long,long)	Get the value of this field from the milliseconds relative to an instant For precise fields this method produces the same result as for the single argument get method
ISODateTimeFormat.weekyearWeek()	Returns a formatter for a four digit weekyear and two digit week of weekyear xxxx W ww
PeriodType.yearDayTime()	Gets a type that defines all standard fields except months and weeks
DateTimeField.getAsText(long,Locale)	Get the human readable text value of this field from the milliseconds
ISODateTimeFormat.basicTimeNoMillis()	Returns a basic formatter for a two digit hour of day two digit minute of hour two digit second of minute and time zone offset HHmmssZ
ISODateTimeFormat.hour()	Returns a formatter for a two digit hour of day HH
LocalDate.getEra()	Get the era field value
YearMonth.toLocalDate(int)	Converts this object to a LocalDate with the same year month and chronology
DelegatedDateTimeField.remainder(long)	Description copied from class DateTimeField
AssembledChronology.weekyears()	Description copied from class BaseChronology
Minutes.plus(Minutes)	Returns a new instance with the specified number of minutes added
StrictChronology.equals(Object)	A strict chronology is only equal to a strict chronology with the same base chronology
DurationField.getValue(long)	Get the value of this field from the milliseconds which is approximate if this field is imprecise
BaseChronology.getDateTimeMillis(int,int,int,int,int,int,int)	Returns a datetime millisecond instant formed from the given year month day hour minute second and millisecond values The set of given values must refer to a valid datetime or else an IllegalArgumentException is thrown
ReadWritablePeriod.setPeriod(ReadableInterval)	Sets all the fields in one go from an interval dividing the fields using the period type
DateTime.toDateTime(DateTimeZone)	Get this object as a DateTime returning this if possible
ZeroIsMaxDateTimeField.roundHalfCeiling(long)	Description copied from class BaseDateTimeField
LocalDateTime.hourOfDay()	Get the hour of day field property which provides access to advanced functionality
Partial.Partial(DateTimeFieldType[],int[])	Constructs a Partial with the specified fields and values
ReadWritableInterval.setPeriodAfterStart(ReadablePeriod)	Sets the period of this time interval preserving the start instant
DateMidnight.DateMidnight(long,DateTimeZone)	Constructs an instance set to the milliseconds from 1970 01 01T00 00 00Z using ISOChronology in the specified time zone
DateTimeFormatterBuilder.appendTimeZoneId()	Instructs the printer to emit the identifier of the time zone
Instant.minus(ReadableDuration)	Gets a copy of this instant with the specified duration taken away
DateTimeComparator.getInstance()	Returns a DateTimeComparator the compares the entire date time value
MutableDateTime.setMonthOfYear(int)	Set the month of the year to the specified value
LenientChronology.getInstance(Chronology)	Create a LenientChronology for any chronology
PeriodType.yearMonthDay()	Gets a type that defines the year month and day fields
LocalDate.plusMonths(int)	Returns a copy of this date plus the specified number of months
LocalDate.withYearOfEra(int)	Returns a copy of this date with the year of era field updated
AssembledChronology.eras()	Description copied from class BaseChronology
ReadablePartial.size()	Gets the number of fields that this partial supports
DurationField.getType()	Get the type of the field
GregorianChronology.getInstanceUTC()	Gets an instance of the GregorianChronology
MutableDateTime.clone()	Clone this object
ReadWritablePeriod.addMillis(int)	Adds the specified millis to the number of millis in the period
DateTimeZoneBuilder.addCutover(int,char,int,int,int,boolean,int)	Adds a cutover for added rules The standard offset at the cutover defaults to 0 Call setStandardOffset afterwards to change it
PeriodFormatterBuilder.appendSeparator(String,String,String[])	Append a separator which is output if fields are printed both before and after the separator
BaseDuration.toIntervalTo(ReadableInstant)	Converts this duration to an Interval ending at the specified instant
DateTimeFieldType.clockhourOfDay()	Get the hour of day offset to 1 24 field type
MutableInterval.clone()	Clone this object
DateTimeField.roundFloor(long)	Round to the lowest whole unit of this field After rounding the value of this field and all fields of a higher magnitude are retained The fractional millis that cannot be expressed in whole increments of this field are set to minimum
Period.Period(Object,Chronology)	Creates a period by converting or copying from another object
PreciseDurationDateTimeField.PreciseDurationDateTimeField(DateTimeFieldType,DurationField)	Constructor
DateTime.withTimeAtStartOfDay()	Returns a copy of this datetime with the time set to the start of the day
ReadableDuration.hashCode()	Gets a hash code for the duration that is compatible with the equals method
TimeOfDay.withSecondOfMinute(int)	Returns a copy of this time with the second of minute field updated
ReadableInterval.contains(ReadableInstant)	Does this time interval contain the specified instant
ReadWritableInstant.add(DurationFieldType,int)	Adds to the instant specifying the duration and multiple to add
ImpreciseDateTimeField.getDurationField()	Description copied from class BaseDateTimeField
ImpreciseDateTimeField.add(long,int)	Description copied from class BaseDateTimeField
AssembledChronology.centuryOfEra()	Description copied from class BaseChronology
Chronology.millisOfSecond()	Get the millis of second field for this chronology
DelegatedDateTimeField.addWrapField(ReadablePartial,int,int[],int)	Description copied from class DateTimeField
DateTimeField.getLeapAmount(long)	Gets the amount by which this field is leap for the specified instant
MonthDay.Property.get()	Gets the value of this field
Months.plus(Months)	Returns a new instance with the specified number of months added
RemainderDateTimeField.set(long,int)	Set the specified amount of remainder units to the specified time instant
Period.minusHours(int)	Returns a new period minus the specified number of hours taken away
AbstractConverter.isReadableInterval(Object,Chronology)	Checks if the input is a ReadableInterval
BaseSingleFieldPeriod.getFieldType()	Gets the single duration field type
LocalDateTime.plus(ReadablePeriod)	Returns a copy of this datetime with the specified period added
DateTimeUtils.getDefaultTimeZoneNames()	Gets the default map of time zone names
DelegatedDateTimeField.getAsText(long)	Description copied from class DateTimeField
MutablePeriod.MutablePeriod(int,int,int,int,int,int,int,int)	Create a period from a set of field values using the standard set of fields
Chronology.withUTC()	Returns an instance of this Chronology that operates in the UTC time zone Chronologies that do not operate in a time zone or are already UTC must return themselves
BaseChronology.add(ReadablePeriod,long,int)	Adds the period to the instant specifying the number of times to add
YearMonth.Property.setCopy(int)	Sets this field in a copy of the YearMonth
LocalTime.Property.setCopy(String)	Sets this field in a copy of the LocalTime to a parsed text value
ReadableInterval.overlaps(ReadableInterval)	Does this time interval overlap the specified time interval
DurationConverter.getDurationMillis(Object)	Extracts the millis from an object of this converter s type
DateTimeFormat.mediumTime()	Creates a format that outputs a medium time format
DateTimeFieldType.millisOfDay()	Get the millis of day field type
DateTimeField.roundHalfFloor(long)	Round to the nearest whole unit of this field If the given millisecond value is closer to the floor or is exactly halfway this function behaves like roundFloor If the millisecond value is closer to the ceiling this function behaves like roundCeiling
CachedDateTimeZone.previousTransition(long)	Description copied from class DateTimeZone
ReadableInterval.toDuration()	Gets the millisecond duration of this time interval
LocalTime.fromMillisOfDay(long)	Constructs a LocalTime from the specified millis of day using the ISO chronology
UnsupportedDurationField.toString()	Get a suitable debug string
DateTimeField.getRangeDurationField()	Returns the range duration of this field For example if this field represents hour of day then the range duration is a day
DurationFieldType.seconds()	Get the seconds field type
TimeOfDay.getHourOfDay()	Get the hour of day 0 23 field value
LocalDateTime.dayOfYear()	Get the day of year property which provides access to advanced functionality
DurationField.subtract(long,int)	Subtracts a duration value which may be negative from the instant
BaseDateTimeField.getAsShortText(ReadablePartial,int,Locale)	Get the human readable short text value of this field from a partial instant
LocalDate.getYear()	Get the year field value
ISODateTimeFormat.weekDateTimeNoMillis()	Returns a formatter that combines a full weekyear date and time without millis separated by a T xxxx W ww e T HH mm ssZZ
Chronology.clockhourOfHalfday()	Get the hour of am pm offset to 1 12 field for this chronology
DateTimeFormatterBuilder.toPrinter()	Internal method to create a DateTimePrinter instance using all the appended elements
BaseDurationField.isSupported()	Description copied from class DurationField
TimeOfDay.millisOfSecond()	Get the millis of second property which provides access to advanced functionality
DateTimeField.getAsText(long)	Get the human readable text value of this field from the milliseconds
MonthDay.MonthDay(Object)	Constructs a MonthDay from an Object that represents some form of time
Months.dividedBy(int)	Returns a new instance with the months divided by the specified divisor
MutablePeriod.MutablePeriod(ReadableInstant,ReadableInstant)	Creates a period from the given interval endpoints using the standard set of fields
LocalDate.dayOfYear()	Get the day of year property which provides access to advanced functionality
Period.Period(long,PeriodType,Chronology)	Creates a period from the given millisecond duration
DateTime.Property.addToCopy(long)	Adds to this field in a copy of this DateTime
ScaledDurationField.getMillis(int)	Description copied from class BaseDurationField
SkipDateTimeField.getMinimumValue()	Description copied from class DateTimeField
AbstractPeriod.getValues()	Gets an array of the value of each of the fields that this period supports
AbstractPartialFieldProperty.getField()	Gets the field being used
DecoratedDurationField.add(long,long)	Description copied from class DurationField
DelegatedDateTimeField.isSupported()	Description copied from class DateTimeField
YearMonthDay.toDateTime(TimeOfDay)	Converts this object to a DateTime using a TimeOfDay to fill in the missing fields and using the default time zone
AbstractReadableInstantFieldProperty.getMaximumShortTextLength(Locale)	Gets the maximum short text length for the field
DurationField.getValueAsLong(long,long)	Get the value of this field from the milliseconds relative to an instant For precise fields this method produces the same result as for the single argument get method
RemainderDateTimeField.RemainderDateTimeField(DateTimeField,DateTimeFieldType,int)	Constructor
Years.years(int)	Obtains an instance of Years that may be cached
BaseChronology.getZone()	Returns the DateTimeZone that this Chronology operates in or null if unspecified
AbstractConverter.getInstantMillis(Object,Chronology)	Extracts the millis from an object of this converter s type
ReadableDuration.toDuration()	Get this duration as an immutable Duration object
YearMonth.Property.getYearMonth()	Gets the partial that this property belongs to
UnsupportedDurationField.getUnitMillis()	Always returns zero
ZeroIsMaxDateTimeField.remainder(long)	Description copied from class BaseDateTimeField
Seconds.secondsBetween(ReadableInstant,ReadableInstant)	Creates a Seconds representing the number of whole seconds between the two specified datetimes
YearMonthDay.toLocalDate()	Converts this object to a LocalDate with the same date and chronology
Chronology.getZone()	Returns the DateTimeZone that this Chronology operates in or null if unspecified
Months.monthsIn(ReadableInterval)	Creates a Months representing the number of whole months in the specified interval This method correctly handles any daylight savings time changes that may occur during the interval
ISODateTimeFormat.ordinalDate()	Returns a formatter for a full ordinal date using a four digit year and three digit dayOfYear yyyy DDD
PreciseDurationDateTimeField.roundCeiling(long)	This method assumes that this field is properly rounded on 1970 01 01T00 00 00 If the rounding alignment differs override this method as follows return super roundCeiling instant ALIGNMENT MILLIS ALIGNMENT MILLIS
IllegalFieldValueException.IllegalFieldValueException(DateTimeFieldType,String)	Constructor
PeriodType.months()	Gets a type that defines just the months field
DateTimeFormatter.getPivotYear()	Gets the pivot year to use as an override
DateTimeFormatterBuilder.appendFraction(DateTimeFieldType,int,int)	Instructs the printer to emit a remainder of time as a decimal fraction without decimal point For example if the field is specified as minuteOfHour and the time is 12 30 45 the value printed is 75 A decimal point is implied so the fraction is 0 75 or three quarters of a minute
TimeOfDay.Property.getField()	Gets the field that this property uses
JulianChronology.getInstance(DateTimeZone)	Gets an instance of the JulianChronology in the given time zone
DelegatedDurationField.getValueAsLong(long)	Description copied from class DurationField
Duration.standardSeconds(long)	Create a duration with the specified number of seconds assuming that there are the standard number of milliseconds in a second
LocalDateTime.getMillisOfDay()	Get the millis of day field value
MutablePeriod.getWeeks()	Gets the weeks field part of the period
LocalDate.withWeekOfWeekyear(int)	Returns a copy of this date with the week of weekyear field updated
DurationField.add(long,int)	Adds a duration value which may be negative to the instant
LocalDate.minus(ReadablePeriod)	Returns a copy of this date with the specified period taken away
RemainderDateTimeField.RemainderDateTimeField(DividedDateTimeField)	Construct a RemainderDateTimeField that compliments the given DividedDateTimeField
TimeOfDay.TimeOfDay(int,int,int,int,Chronology)	Constructs a TimeOfDay with specified time field values and chronology
DelegatedDurationField.getUnitMillis()	Description copied from class DurationField
Chronology.monthOfYear()	Get the month of year field for this chronology
LocalDateTime.LocalDateTime(int,int,int,int,int,int,int,Chronology)	Constructs an instance set to the specified date and time using the specified chronology whose zone is ignored
DateTimeField.set(ReadablePartial,int,int[],int)	Sets a value using the specified partial instant
AbstractPartial.isSupported(DateTimeFieldType)	Checks whether the field specified is supported by this partial
AbstractDateTime.getDayOfYear()	Get the day of year field value
IllegalFieldValueException.IllegalFieldValueException(String,String)	Constructor
LocalDate.monthOfYear()	Get the month of year property which provides access to advanced functionality
ZoneInfoProvider.ZoneInfoProvider(String,ClassLoader)	ZoneInfoProvider searches the given ClassLoader resource path for compiled data files
DelegatedDateTimeField.getMinimumValue()	Description copied from class DateTimeField
YearMonth.fromCalendarFields(Calendar)	Constructs a YearMonth from a java util Calendar using exactly the same field values avoiding any time zone effects
AbstractReadableInstantFieldProperty.hashCode()	Returns a hashcode compatible with the equals method
GJChronology.getInstance(DateTimeZone,ReadableInstant)	Factory method returns instances of the GJ cutover chronology Any cutover date may be specified
LocalDateTime.plusSeconds(int)	Returns a copy of this datetime plus the specified number of seconds
PeriodType.seconds()	Gets a type that defines just the seconds field
ReadablePeriod.getValue(int)	Gets the value at the specified index
CachedDateTimeZone.getStandardOffset(long)	Description copied from class DateTimeZone
DateTimeFormatterBuilder.appendTwoDigitWeekyear(int)	Instructs the printer to emit a numeric weekyear field which always prints and parses two digits A pivot year is used during parsing to determine the range of supported years as pivot 50 pivot 49
DateTimeFormatterBuilder.append(DateTimeParser)	Appends just a parser With no matching printer a printer cannot be built from this builder
Days.toStandardSeconds()	Converts this period in days to a period in seconds assuming a 24 hour day 60 minute hour and 60 second minute
MonthDay.withPeriodAdded(ReadablePeriod,int)	Returns a copy of this month day with the specified period added
ReadWritableDateTime.setTime(int,int,int,int)	Set the time from fields
PreciseDurationDateTimeField.getUnitMillis()	
LocalDateTime.Property.setCopy(int)	Sets this field in a copy of the LocalDateTime
IslamicChronology.equals(Object)	Checks if this chronology instance equals another
AssembledChronology.hourOfDay()	Description copied from class BaseChronology
PeriodFormatter.printTo(StringBuffer,ReadablePeriod)	Prints a ReadablePeriod to a StringBuffer
ReadWritableDateTime.addMillis(int)	Add a number of milliseconds to the date The implementation of this method differs from the ReadWritableInstant add long method in that a DateTimeField performs the addition
PeriodFormatterBuilder.appendSeparatorIfFieldsBefore(String)	Append a separator which is output only if fields are printed before the separator
DelegatedDateTimeField.getMaximumValue(ReadablePartial,int[])	Description copied from class DateTimeField
LocalDate.Property.roundCeilingCopy()	Rounds to the highest whole unit of this field on a copy of this LocalDate
DateTimeFormatter.print(long)	Prints a millisecond instant to a String
DateTimeFormatterBuilder.appendSignedDecimal(DateTimeFieldType,int,int)	Instructs the printer to emit a field value as a decimal number and the parser to expect a signed decimal number
LocalDate.Property.addWrapFieldToCopy(int)	Adds to this field possibly wrapped in a copy of this LocalDate
DateTimeParserBucket.DateTimeParserBucket(long,Chronology,Locale,Integer,int)	Constructs a bucket with the option of specifying the pivot year for two digit year parsing
DelegatedDurationField.getValue(long,long)	Description copied from class DurationField
Chronology.hours()	Get the hours duration field for this chronology
DateTimeParserBucket.computeMillis(boolean,CharSequence)	Computes the parsed datetime by setting the saved fields
LocalDateTime.withWeekOfWeekyear(int)	Returns a copy of this datetime with the week of weekyear field updated
Period.plusYears(int)	Returns a new period with the specified number of years added
UnsupportedDurationField.equals(Object)	Compares this duration field to another
MutableDateTime.setYear(int)	Set the year to the specified value
DateTimeFormatter.withPivotYear(Integer)	Returns a new formatter that will use the specified pivot year for two digit year parsing in preference to that stored in the parser
AbstractInstant.isEqual(ReadableInstant)	Is this instant equal to the instant passed in comparing solely by millisecond
DateTimeZone.convertUTCToLocal(long)	Converts a standard UTC instant to a local instant with the same local time This conversion is used before performing a calculation so that the calculation can be done using a simple local zone
ReadableInstant.hashCode()	Gets a hash code for the instant that is compatible with the equals method
ReadablePartial.getField(int)	Gets the field at the specified index
Chronology.get(ReadablePartial,long)	Gets the values of a partial from an instant
DateTimeFormatter.printTo(Appendable,long)	Prints an instant from milliseconds since 1970 01 01T00 00 00Z using ISO chronology in the default DateTimeZone
LocalDateTime.plusDays(int)	Returns a copy of this datetime plus the specified number of days
MutablePeriod.add(long,Chronology)	Adds a millisecond duration to this one by dividing the duration into fields and calling add ReadablePeriod
BaseInterval.getChronology()	Gets the chronology of this interval
ReadableDuration.toPeriod()	Converts this duration to a Period instance using the standard period type and the ISO chronology
LocalDate.LocalDate()	Constructs an instance set to the current local time evaluated using ISO chronology in the default zone
Seconds.secondsBetween(ReadablePartial,ReadablePartial)	Creates a Seconds representing the number of whole seconds between the two specified partial datetimes
OffsetDateTimeField.getOffset()	Returns the offset added to the field values
MutablePeriod.getMinutes()	Gets the minutes field part of the period
DateTimeParserBucket.setOffset(Integer)	Set a time zone offset to be used when computeMillis is called
BaseSingleFieldPeriod.size()	Gets the number of fields that this period supports which is one
Hours.plus(Hours)	Returns a new instance with the specified number of hours added
DateMidnight.plusDays(int)	Returns a copy of this date plus the specified number of days
Period.Period(int,int,int,int,int,int,int,int)	Create a period from a set of field values using the standard set of fields
MutablePeriod.setPeriod(int,int,int,int,int,int,int,int)	Sets all the fields in one go
DateTimeFormatter.withLocale(Locale)	Returns a new formatter with a different locale that will be used for printing and parsing
UnsupportedDurationField.getValueAsLong(long,long)	Always throws UnsupportedOperationException
IllegalInstantException.IllegalInstantException(long,String)	Constructor
MutableDateTime.Property.getMutableDateTime()	Gets the mutable datetime being used
BaseDateTimeField.roundHalfCeiling(long)	Round to the nearest whole unit of this field If the given millisecond value is closer to the floor this function behaves like roundFloor If the millisecond value is closer to the ceiling or is exactly halfway this function behaves like roundCeiling
DateTime.property(DateTimeFieldType)	Gets the property object for the specified type which contains many useful methods
FormatUtils.appendPaddedInteger(StringBuffer,long,int)	Converts an integer to a string prepended with a variable amount of 0 pad characters and appends it to the given buffer
ISODateTimeFormat.basicDate()	Returns a basic formatter for a full date as four digit year two digit month of year and two digit day of month yyyyMMdd
AbstractDuration.isLongerThan(ReadableDuration)	Is the length of this duration longer than the duration passed in
LocalDate.LocalDate(Object,Chronology)	Constructs an instance from an Object that represents a datetime using the specified chronology
AbstractDateTime.get(DateTimeFieldType)	Get the value of one of the fields of a datetime
AbstractInstant.isEqualNow()	Is this instant equal to the current instant comparing solely by millisecond
Chronology.centuryOfEra()	Get the century of era field for this chronology
AbstractDateTime.getWeekyear()	Get the weekyear field value
FieldUtils.safeToInt(long)	Casts to an int throwing an exception if overflow occurs
ISODateTimeFormat.dateHour()	Returns a formatter that combines a full date and two digit hour of day yyyy MM dd T HH
MonthDay.getMonthOfYear()	Get the month of year field value
MutableDateTime.minuteOfDay()	Get the minute of day property Calling a setter on the property will replace the values of minute of hour and hour of day
Partial.Property.getField()	Gets the field that this property uses
BaseChronology.weekyears()	Get the weekyears duration field for this chronology
ConverterManager.getIntervalConverter(Object)	Gets the best converter for the object specified
PreciseDateTimeField.addWrapField(long,int)	Add to the component of the specified time instant wrapping around within that component if necessary
DelegatedDateTimeField.getDurationField()	Description copied from class DateTimeField
Partial.Partial()	Constructs a Partial with no fields or values which can be considered to represent any date
DurationFieldType.millis()	Get the millis field type
DelegatedDateTimeField.getAsShortText(ReadablePartial,Locale)	Description copied from class DateTimeField
SkipUndoDateTimeField.SkipUndoDateTimeField(Chronology,DateTimeField,int)	Constructor
ReadWritablePeriod.addMinutes(int)	Adds the specified minutes to the number of minutes in the period
AbstractPeriod.hashCode()	Gets a hash code for the period as defined by ReadablePeriod
ReadWritableInterval.setStart(ReadableInstant)	Sets the start of this time interval as an Instant
PreciseDurationDateTimeField.getMinimumValue()	Get the minimum value for the field
Chronology.weekOfWeekyear()	Get the week of a week based year field for this chronology
Seconds.toString()	Gets this instance as a String in the ISO8601 duration format
DateTimeUtils.getDurationMillis(ReadableDuration)	Gets the millisecond duration from the specified duration object handling null
MutablePeriod.setPeriod(ReadableInterval)	Sets all the fields in one go from an interval using the ISO chronology and dividing the fields using the period type
ReadableInstant.getChronology()	Gets the chronology of the instant
ReadWritableInstant.add(ReadablePeriod,int)	Adds a period to this instant specifying how many times to add
MutablePeriod.setPeriod(ReadableDuration)	Sets all the fields in one go from a duration dividing the fields using the period type
Interval.parseWithOffset(String)	Parses a Interval from the specified string using any offset it contains
Instant.Instant(long)	Constructs an instance set to the milliseconds from 1970 01 01T00 00 00Z
LenientDateTimeField.getInstance(DateTimeField,Chronology)	Returns a lenient version of the given field If it is already lenient then it is returned as is Otherwise a new LenientDateTimeField is returned
PartialConverter.getChronology(Object,DateTimeZone)	Extracts the chronology from an object of this converter s type where the time zone is specified
BuddhistChronology.toString()	Gets a debugging toString
MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,DateTimeZone)	Constructs an instance from datetime field values using ISOChronology in the specified time zone
DateTimeComparator.getInstance(DateTimeFieldType)	Returns a DateTimeComparator with a lower limit only Fields of a magnitude less than the lower limit are excluded from comparisons
BaseDateTimeField.getMaximumValue(long)	Get the maximum value for this field evaluated at the specified time
OffsetDateTimeField.roundHalfCeiling(long)	Description copied from class BaseDateTimeField
LocalTime.withField(DateTimeFieldType,int)	Returns a copy of this time with the specified field set to a new value
ISODateTimeFormat.dateHourMinuteSecond()	Returns a formatter that combines a full date two digit hour of day two digit minute of hour and two digit second of minute yyyy MM dd T HH mm ss
DateTimeFormatterBuilder.appendHourOfHalfday(int)	Instructs the printer to emit a numeric hourOfHalfday field
YearMonth.plusMonths(int)	Returns a copy of this year month plus the specified number of months
DateMidnight.Property.addToCopy(long)	Adds to this field in a copy of this DateMidnight
Period.negated()	Returns a new instance with each amount in this period negated
BaseDateTimeField.getAsText(long)	Get the human readable text value of this field from the milliseconds
LocalTime.getChronology()	Gets the chronology of the time
DateTimeField.getLeapDurationField()	If this field were to leap then it would be in units described by the returned duration If this field doesn t ever leap null is returned
Weeks.multipliedBy(int)	Returns a new instance with the weeks multiplied by the specified scalar
LocalDateTime.LocalDateTime(DateTimeZone)	Constructs an instance set to the current local time evaluated using ISO chronology in the specified zone
MutableDateTime.MutableDateTime(Object,Chronology)	Constructs an instance from an Object that represents a datetime using the specified chronology
FixedDateTimeZone.getOffsetFromLocal(long)	Description copied from class DateTimeZone
MutableDateTime.millisOfDay()	Get the millis of day property Calling a setter on the property will replace the values of milli of second second of minute minute of hour and hour of day
BuddhistChronology.withUTC()	Gets the Chronology in the UTC time zone
Seconds.minus(int)	Returns a new instance with the specified number of seconds taken away
AssembledChronology.getDateTimeMillis(int,int,int,int)	Description copied from class BaseChronology
JulianChronology.getInstance(DateTimeZone,int)	Gets an instance of the JulianChronology in the given time zone
DateTimeFormatterBuilder.appendFixedDecimal(DateTimeFieldType,int)	Instructs the printer to emit a field value as a fixed width decimal number smaller numbers will be left padded with zeros and the parser to expect an unsigned decimal number with the same fixed width
LimitChronology.getDateTimeMillis(long,int,int,int,int)	Description copied from class BaseChronology
DateTimeParserBucket.getOffset()	Returns the time zone offset in milliseconds used by computeMillis
DateTimeFormatterBuilder.append(DateTimeFormatter)	Appends another formatter
DateTimeFormatter.printTo(StringBuilder,long)	Prints an instant from milliseconds since 1970 01 01T00 00 00Z using ISO chronology in the default DateTimeZone
DateTimeFieldType.yearOfCentury()	Get the year of century field type
ZeroIsMaxDateTimeField.ZeroIsMaxDateTimeField(DateTimeField,DateTimeFieldType)	Constructor
ReadWritableDateTime.addWeekyears(int)	Add a number of weekyears to the date
ReadableInstant.isEqual(ReadableInstant)	Is this instant equal to the instant passed in comparing solely by millisecond
DateTimeFormatterBuilder.appendTwoDigitWeekyear(int,boolean)	Instructs the printer to emit a numeric weekyear field which always prints two digits A pivot year is used during parsing to determine the range of supported years as pivot 50 pivot 49 If parse is instructed to be lenient and the digit count is not two it is treated as an absolute weekyear With lenient parsing specifying a positive or negative sign before the weekyear also makes it absolute
MutableInterval.setEnd(ReadableInstant)	Sets the end of this time interval as an Instant
LenientChronology.withZone(DateTimeZone)	Description copied from class BaseChronology
MutableDateTime.year()	Get the year property
Interval.withPeriodAfterStart(ReadablePeriod)	Creates a new interval with the specified period after the start instant
PeriodType.withHoursRemoved()	Returns a version of this PeriodType instance that does not support hours
DateTimeFormatter.withPivotYear(int)	Returns a new formatter that will use the specified pivot year for two digit year parsing in preference to that stored in the parser
BaseDateTimeField.add(long,int)	Adds a value which may be negative to the instant value overflowing into larger fields if necessary
TimeOfDay.Property.addWrapFieldToCopy(int)	Adds to the value of this field in a copy of this TimeOfDay wrapping within this field if the maximum value is reached
PreciseDurationDateTimeField.getDurationField()	Returns the duration per unit value of this field For example if this field represents minute of hour then the duration field is minutes
MonthDay.getFieldTypes()	Gets an array of the field type of each of the fields that this partial supports
DateTime.plusMonths(int)	Returns a copy of this datetime plus the specified number of months
MutableDateTime.setTime(int,int,int,int)	Set the time from fields
GJChronology.equals(Object)	Checks if this chronology instance equals another
TimeOfDay.Property.setCopy(String)	Sets this field in a copy of the TimeOfDay to a parsed text value
LocalTime.plusMillis(int)	Returns a copy of this time plus the specified number of millis
ReadWritablePeriod.setValue(int,int)	Sets the value of one of the fields by index
Duration.Duration(long)	Creates a duration from the given millisecond duration
MonthDay.plusDays(int)	Returns a copy of this month day plus the specified number of days
DateTime.secondOfMinute()	Get the second of minute field property which provides access to advanced functionality
DateTimeFormatter.printTo(StringBuilder,ReadablePartial)	Prints a ReadablePartial
DateTimeFieldType.hourOfHalfday()	Get the hour of am pm 0 11 field type
DateMidnight.Property.withMaximumValue()	Returns a new DateMidnight with this field set to the maximum value for this field
LocalDateTime.LocalDateTime(Chronology)	Constructs an instance set to the current local time evaluated using specified chronology
Hours.hours(int)	Obtains an instance of Hours that may be cached
AbstractInterval.toMutableInterval()	Get this time interval as a MutableInterval
MutablePeriod.add(int,int,int,int,int,int,int,int)	Adds to each field of this period
MutableDateTime.setMillisOfDay(int)	Set the millis of the day to the specified value
DateTimeParserBucket.getZone()	Returns the time zone used by computeMillis
BaseDateTime.BaseDateTime(int,int,int,int,int,int,int,DateTimeZone)	Constructs an instance from datetime field values using ISOChronology in the specified time zone
Duration.standardHours(long)	Create a duration with the specified number of hours assuming that there are the standard number of milliseconds in an hour
Seconds.plus(Seconds)	Returns a new instance with the specified number of seconds added
TimeOfDay.withField(DateTimeFieldType,int)	Returns a copy of this time with the specified field set to a new value
LocalDateTime.withCenturyOfEra(int)	Returns a copy of this datetime with the century of era field updated
ImpreciseDateTimeField.getDifference(long,long)	Computes the difference between two instants as measured in the units of this field Any fractional units are dropped from the result Calling getDifference reverses the effect of calling add In the following code long instant
LocalTime.Property.addCopy(int)	Adds to this field in a copy of this LocalTime
SkipUndoDateTimeField.get(long)	Description copied from class DateTimeField
Weeks.weeksIn(ReadableInterval)	Creates a Weeks representing the number of whole weeks in the specified interval
DateTimeUtils.getChronology(Chronology)	Gets the chronology handling null
DateTime.DateTime(int,int,int,int,int,int,int)	Constructs an instance from datetime field values using ISOChronology in the default time zone
DateTimeFormat.fullTime()	Creates a format that outputs a full time format
DateMidnight.DateMidnight(Object)	Constructs an instance from an Object that represents a datetime
DelegatedDurationField.getDifferenceAsLong(long,long)	Description copied from class DurationField
MutableDateTime.MutableDateTime(DateTimeZone)	Constructs an instance set to the current system millisecond time using ISOChronology in the specified time zone
DelegatedDateTimeField.getAsShortText(long)	Description copied from class DateTimeField
BaseInterval.getEndMillis()	Gets the end of this time interval which is exclusive
DateTime.withMillisOfSecond(int)	Returns a copy of this datetime with the millis of second field updated
LocalDateTime.getMinuteOfHour()	Get the minute of hour field value
IntervalConverter.isReadableInterval(Object,Chronology)	Checks if the input is a ReadableInterval
FixedDateTimeZone.getNameKey(long)	Description copied from class DateTimeZone
MutablePeriod.MutablePeriod(int,int,int,int)	Create a period from a set of field values using the standard set of fields
BaseDateTimeField.isSupported()	Description copied from class DateTimeField
YearMonth.YearMonth(int,int)	Constructs a YearMonth with specified year and month using ISOChronology
MonthDay.MonthDay()	Constructs a MonthDay with the current monthOfYear using ISOChronology in the default zone to extract the fields
AbstractInstant.isAfterNow()	Is this instant strictly after the current instant comparing solely by millisecond
LocalTime.LocalTime(int,int,int,int,Chronology)	Constructs an instance set to the specified time using the specified chronology whose zone is ignored
IslamicChronology.hashCode()	A suitable hash code for the chronology
ScaledDurationField.getDifferenceAsLong(long,long)	Description copied from class DurationField
Period.plusMinutes(int)	Returns a new period plus the specified number of minutes added
Partial.Property.setCopy(String,Locale)	Sets this field in a copy of the Partial to a parsed text value
Period.Period(long,long,PeriodType,Chronology)	Creates a period from the given interval endpoints
AbstractInstant.isBefore(long)	Is this instant strictly before the millisecond instant passed in comparing solely by millisecond
ISODateTimeFormat.dateElementParser()	Returns a generic ISO date parser for parsing dates
PreciseDurationField.add(long,long)	Description copied from class DurationField
DurationField.getMillis(long)	Get the millisecond duration of this field from its value which is approximate if this field is imprecise
LocalDateTime.yearOfEra()	Get the year of era property which provides access to advanced functionality
AbstractDateTime.toString()	Output the date time in ISO8601 format yyyy MM ddTHH mm ss SSSZZ
CopticChronology.getInstance(DateTimeZone)	Gets an instance of the CopticChronology in the given time zone
DelegatedDateTimeField.getMinimumValue(ReadablePartial)	Description copied from class DateTimeField
DateTimeField.isLeap(long)	Returns whether this field is leap for the specified instant
ZoneInfoLogger.verbose()	Gets a flag indicating that verbose logging is required
BaseChronology.minuteOfHour()	Get the minute of hour field for this chronology
PeriodFormat.wordBased(Locale)	Returns a word based formatter for the specified locale
Hours.minus(int)	Returns a new instance with the specified number of hours taken away
YearMonth.Property.addToCopy(int)	Adds to the value of this field in a copy of this YearMonth
DateMidnight.plus(long)	Returns a copy of this date with the specified duration added
Hours.toStandardDays()	Converts this period in hours to a period in days assuming a 24 hour day
DelegatedDurationField.isPrecise()	Description copied from class DurationField
LocalDateTime.minuteOfHour()	Get the minute of hour field property which provides access to advanced functionality
Interval.Interval(Object)	Constructs a time interval by converting or copying from another object
LocalDateTime.withYearOfEra(int)	Returns a copy of this datetime with the year of era field updated
YearMonthDay.fromCalendarFields(Calendar)	Constructs a YearMonthDay from a java util Calendar using exactly the same field values avoiding any time zone effects
Period.Period(long)	Creates a period from the given millisecond duration using the standard set of fields
YearMonthDay.getYear()	Get the year field value
PeriodType.size()	Gets the number of fields in the period type
Period.millis(int)	Create a period with a specified number of millis
Chronology.years()	Get the years duration field for this chronology
BuddhistChronology.withZone(DateTimeZone)	Gets the Chronology in a specific time zone
ZonedChronology.getInstance(Chronology,DateTimeZone)	Create a ZonedChronology for any chronology overriding any time zone it may already have
AbstractInterval.contains(long)	Does this time interval contain the specified millisecond instant
TimeOfDay.TimeOfDay(int,int)	Constructs a TimeOfDay with specified hour and minute and zero seconds and milliseconds using ISOChronology in the default zone
FieldUtils.safeDivide(long,long)	Divides the dividend by the divisor throwing an exception if overflow occurs or the divisor is zero
Interval.withDurationAfterStart(ReadableDuration)	Creates a new interval with the specified duration after the start instant
TimeOfDay.TimeOfDay()	Constructs a TimeOfDay with the current time using ISOChronology in the default zone to extract the fields
ZonedChronology.getZone()	Description copied from class BaseChronology
DateTime.withField(DateTimeFieldType,int)	Returns a copy of this datetime with the specified field set to a new value
PreciseDateTimeField.getRangeDurationField()	Returns the range duration of this field For example if this field represents minute of hour then the range duration field is an hours
BaseDateTime.BaseDateTime(DateTimeZone)	Constructs an instance set to the current system millisecond time using ISOChronology in the specified time zone
UnsupportedDateTimeField.set(long,int)	Always throws UnsupportedOperationException
DateMidnight.dayOfWeek()	Get the day of week property which provides access to advanced functionality
DateTimeFieldType.millisOfSecond()	Get the millis of second field type
BaseDuration.toPeriodTo(ReadableInstant)	Converts this duration to a Period instance by subtracting the duration from an end instant to obtain an interval using the standard period type
MutablePeriod.add(ReadableInterval)	Adds an interval to this one by dividing the interval into fields and calling add ReadablePeriod
DividedDateTimeField.roundFloor(long)	Description copied from class BaseDateTimeField
ISODateTimeFormat.localDateOptionalTimeParser()	Returns a generic ISO datetime parser where the date is mandatory and the time is optional
AssembledChronology.clockhourOfDay()	Description copied from class BaseChronology
YearMonthDay.YearMonthDay(int,int,int,Chronology)	Constructs a YearMonthDay with specified time field values
Days.getFieldType()	Gets the duration field type which is days
Hours.getHours()	Gets the number of hours that this period represents
DateTimeFormatter.isParser()	Is this formatter capable of parsing
UnsupportedDateTimeField.addWrapPartial(ReadablePartial,int,int[],int)	Always throws UnsupportedOperationException
Hours.plus(int)	Returns a new instance with the specified number of hours added
MillisDurationField.getMillis(int,long)	Description copied from class DurationField
LocalTime.parse(String)	Parses a LocalTime from the specified string
IntervalConverter.setInto(ReadWritableInterval,Object,Chronology)	Extracts interval endpoint values from an object of this converter s type and sets them into the given ReadWritableInterval
ReadableInterval.toDurationMillis()	Gets the millisecond duration of this time interval
LocalDateTime.plusMonths(int)	Returns a copy of this datetime plus the specified number of months
DateTimeFormat.mediumDateTime()	Creates a format that outputs a medium datetime format
ReadWritableDateTime.addWeeks(int)	Add a number of weeks to the date
DateTime.withZoneRetainFields(DateTimeZone)	Returns a copy of this datetime with a different time zone preserving the field values
BaseDuration.toPeriod(PeriodType,Chronology)	Converts this duration to a Period instance using the specified period type and chronology
UnsupportedDateTimeField.isLenient()	This field is not lenient
EthiopicChronology.hashCode()	A suitable hash code for the chronology
TimeOfDay.TimeOfDay(Object)	Constructs a TimeOfDay from an Object that represents a time
LocalDate.Property.withMaximumValue()	Returns a new LocalDate with this field set to the maximum value for this field
Days.daysBetween(ReadableInstant,ReadableInstant)	Creates a Days representing the number of whole days between the two specified datetimes This method correctly handles any daylight savings time changes that may occur during the interval
LocalTime.toString()	Output the time in ISO8601 format HH mm ss SSS
YearMonthDay.size()	Gets the number of fields in this partial
TimeOfDay.withHourOfDay(int)	Returns a copy of this time with the hour of day field updated
RemainderDateTimeField.roundFloor(long)	Description copied from class BaseDateTimeField
LimitChronology.withZone(DateTimeZone)	If this LimitChronology has the same time zone as the one given then this is returned Otherwise a new instance is returned with the limits adjusted to the new time zone
PeriodFormatterBuilder.appendWeeks()	Instruct the printer to emit an integer weeks field if supported
MutableInterval.setEndMillis(long)	Sets the end of this time interval
MutablePeriod.MutablePeriod(int,int,int,int,int,int,int,int,PeriodType)	Create a period from a set of field values
YearMonthDay.Property.withMaximumValue()	Returns a new YearMonthDay with this field set to the maximum value for this field
Duration.plus(ReadableDuration)	Returns a new duration with this length plus that specified
ReadWritablePeriod.setHours(int)	Sets the number of hours of the period
ReadablePeriod.toPeriod()	Get this period as an immutable Period object
DateTimeZone.forOffsetHours(int)	Gets a time zone instance for the specified offset to UTC in hours
DelegatedDateTimeField.getMaximumValue(long)	Description copied from class DateTimeField
DelegatedDateTimeField.get(long)	Description copied from class DateTimeField
ISODateTimeFormat.basicTime()	Returns a basic formatter for a two digit hour of day two digit minute of hour two digit second of minute three digit millis and time zone offset HHmmss SSSZ
BaseChronology.seconds()	Get the seconds duration field for this chronology
LocalDate.getYearOfCentury()	Get the year of century field value
DurationField.getName()	Get the name of the field
CopticChronology.getInstance(DateTimeZone,int)	Gets an instance of the CopticChronology in the given time zone
DelegatedDurationField.getValueAsLong(long,long)	Description copied from class DurationField
ReadablePartial.isSupported(DateTimeFieldType)	Checks whether the field type specified is supported by this partial
LocalTime.fromMillisOfDay(long,Chronology)	Constructs a LocalTime from the specified millis of day using the specified chronology
MutableDateTime.setMinuteOfDay(int)	Set the minute of the day to the specified value
AbstractInstant.isSupported(DateTimeFieldType)	Checks if the field type specified is supported by this instant and chronology
ReadWritableInterval.setPeriodBeforeEnd(ReadablePeriod)	Sets the period of this time interval preserving the end instant
DateTimeZone.convertLocalToUTC(long,boolean,long)	Converts a local instant to a standard UTC instant with the same local time attempting to use the same offset as the original
DateTimeFormatter.getDefaultYear()	Gets the default year for parsing months and days
CachedDateTimeZone.getNameKey(long)	Description copied from class DateTimeZone
DurationField.subtract(long,long)	Subtracts a duration value which may be negative from the instant
AbstractDateTime.getEra()	Get the era field value
YearMonth.now(DateTimeZone)	Obtains a YearMonth set to the current system millisecond time using ISOChronology in the specified time zone
DateTimeFieldType.halfdayOfDay()	Get the AM 0 PM 1 field type
LocalDate.isSupported(DateTimeFieldType)	Checks if the field type specified is supported by this local date and chronology
GregorianChronology.getInstance(DateTimeZone,int)	Gets an instance of the GregorianChronology in the given time zone
DelegatedDurationField.getDifference(long,long)	Description copied from class DurationField
GregorianChronology.getDateTimeMillis(int,int,int,int,int,int,int)	Description copied from class BaseChronology
ZoneInfoLogger.ZoneInfoLogger()	
Chronology.millisOfDay()	Get the millis of day field for this chronology
MutableDateTime.addSeconds(int)	Add a number of seconds to the date
DividedDateTimeField.add(long,long)	Add the specified amount of scaled units to the specified time instant The amount added may be negative
Period.years(int)	Create a period with a specified number of years
ConverterManager.getIntervalConverters()	Gets a copy of the list of converters
MillisDurationField.getMillis(long,long)	Description copied from class DurationField
BasePartial.getValue(int)	Gets the value of the field at the specified index
ISOPeriodFormat.alternateWithWeeks()	The alternate ISO format PyyyyWwwddThhmmss which excludes months
DateMidnight.plusWeeks(int)	Returns a copy of this date plus the specified number of weeks
Weeks.getWeeks()	Gets the number of weeks that this period represents
UnsupportedDateTimeField.getAsText(long)	Always throws UnsupportedOperationException
AbstractInterval.getEnd()	Gets the end of this time interval which is exclusive as a DateTime
DateTime.now()	Obtains a DateTime set to the current system millisecond time using ISOChronology in the default time zone
PeriodFormatterBuilder.appendSecondsWithMillis()	Instruct the printer to emit a combined seconds and millis field if supported
NameProvider.getShortName(Locale,String,String)	Returns a localized short name or null if not found
AssembledChronology.year()	Description copied from class BaseChronology
ZonedChronology.getDateTimeMillis(long,int,int,int,int)	Description copied from class BaseChronology
LocalTime.LocalTime(long)	Constructs an instance set to the local time defined by the specified instant evaluated using ISO chronology in the default zone
ReadablePeriod.get(DurationFieldType)	Gets the value of one of the fields
DateTime.Property.withMaximumValue()	Returns a new DateTime with this field set to the maximum value for this field
Chronology.months()	Get the months duration field for this chronology
ReadWritableInstant.setChronology(Chronology)	Sets the chronology of the datetime which has no effect if not applicable
MutableDateTime.hourOfDay()	Get the hour of day field property
AbstractDuration.toString()	Gets the value as a String in the ISO8601 duration format including only seconds and milliseconds
Years.yearsIn(ReadableInterval)	Creates a Years representing the number of whole years in the specified interval This method correctly handles any daylight savings time changes that may occur during the interval
DateTime.toLocalDateTime()	Converts this object to a LocalDateTime with the same datetime and chronology
LocalDate.withPeriodAdded(ReadablePeriod,int)	Returns a copy of this date with the specified period added
DateTimeZone.forOffsetHoursMinutes(int,int)	Gets a time zone instance for the specified offset to UTC in hours and minutes
EthiopicChronology.withUTC()	Gets the Chronology in the UTC time zone
UnsupportedDurationField.compareTo(DurationField)	Always returns zero indicating that sort order is not relevant
Partial.without(DateTimeFieldType)	Gets a copy of this date with the specified field removed
DateTimeFormat.shortTime()	Creates a format that outputs a short time format
AbstractReadableInstantFieldProperty.getDifferenceAsLong(ReadableInstant)	Returns the difference between this field property instant and the one passed in in the units of this field The sign of the difference matches that of compareTo In other words this field property s instant is the minuend
LocalTime.secondOfMinute()	Get the second of minute field property which provides access to advanced functionality
ReadWritableDateTime.setMonthOfYear(int)	Set the month of the year to the specified value
DateTime.toDateMidnight()	Converts this object to a DateMidnight using the same millis and chronology
DateMidnight.withEra(int)	Returns a copy of this date with the era field updated
DelegatedDateTimeField.roundFloor(long)	Description copied from class DateTimeField
DateTimeFieldType.dayOfWeek()	Get the day of week field type
FixedDateTimeZone.getStandardOffset(long)	Description copied from class DateTimeZone
DateTimeZone.getDefault()	Gets the default time zone
Partial.withPeriodAdded(ReadablePeriod,int)	Gets a copy of this Partial with the specified period added
LocalTime.withSecondOfMinute(int)	Returns a copy of this time with the second of minute field updated
SkipUndoDateTimeField.set(long,int)	Description copied from class DateTimeField
Period.minusYears(int)	Returns a new period with the specified number of years taken away
PeriodPrinter.printTo(StringBuffer,ReadablePeriod,Locale)	Prints a ReadablePeriod to a StringBuffer
DateTime.withDate(LocalDate)	Returns a copy of this datetime with the specified date retaining the time fields
LocalDateTime.minusMillis(int)	Returns a copy of this datetime minus the specified number of millis
LocalDateTime.Property.roundCeilingCopy()	Rounds to the highest whole unit of this field on a copy of this LocalDateTime
FieldUtils.safeNegate(int)	Negates the input throwing an exception if it can t negate it
DateTimeFormatterBuilder.append(DateTimePrinter,DateTimeParser)	Appends a printer parser pair
ZeroIsMaxDateTimeField.addWrapField(long,int)	Description copied from class BaseDateTimeField
LocalDate.Property.roundHalfCeilingCopy()	Rounds to the nearest whole unit of this field on a copy of this LocalDate favoring the ceiling if halfway
Partial.minus(ReadablePeriod)	Gets a copy of this instance with the specified period take away
MillisDurationField.isPrecise()	Returns true as this field is precise
AssembledChronology.era()	Description copied from class BaseChronology
MutablePeriod.parse(String,PeriodFormatter)	Parses a MutablePeriod from the specified string using a formatter
LocalTime.LocalTime(DateTimeZone)	Constructs an instance set to the current local time evaluated using ISO chronology in the specified zone
ReadableInstant.toString()	Get the value as a String in a recognisable ISO8601 format
DateMidnight.Property.roundHalfEvenCopy()	Rounds to the nearest whole unit of this field on a copy of this DateMidnight
MonthDay.getFieldType(int)	Gets the field type at the specified index
ISOChronology.withUTC()	Gets the Chronology in the UTC time zone
PeriodFormat.getDefault()	Gets the default formatter that outputs words in English
AssembledChronology.clockhourOfHalfday()	Description copied from class BaseChronology
MutableDateTime.parse(String,DateTimeFormatter)	Parses a MutableDateTime from the specified string using a formatter
Chronology.hourOfHalfday()	Get the hour of am pm 0 11 field for this chronology
UnsupportedDateTimeField.getRangeDurationField()	Always returns null
DateTimeFormatter.printTo(Writer,ReadablePartial)	Prints a ReadablePartial
FixedDateTimeZone.FixedDateTimeZone(String,String,int,int)	
EthiopicChronology.getInstance(DateTimeZone,int)	Gets an instance of the EthiopicChronology in the given time zone
DateTimeComparator.getInstance(DateTimeFieldType,DateTimeFieldType)	Returns a DateTimeComparator with a lower and upper limit Fields of a magnitude less than the lower limit are excluded from comparisons
DateTimeUtils.getInstantChronology(ReadableInstant)	Gets the chronology from the specified instant object handling null
Partial.Partial(Chronology)	Constructs a Partial with no fields or values which can be considered to represent any date
ReadWritableInterval.setDurationBeforeEnd(ReadableDuration)	Sets the duration of this time interval preserving the end instant
BasePartial.getChronology()	Gets the chronology of the partial which is never null
DateTime.minusSeconds(int)	Returns a copy of this datetime minus the specified number of seconds
Period.Period(int,int,int,int,int,int,int,int,PeriodType)	Create a period from a set of field values
MutableDateTime.Property.set(String)	Sets a text value
AbstractPartialFieldProperty.getAsShortText()	Gets the short textual value of this property from the instant as a string in the default locale
MillisDurationField.getValue(long)	Description copied from class DurationField
FixedDateTimeZone.isFixed()	Description copied from class DateTimeZone
ReadWritableDateTime.setMillisOfSecond(int)	Set the millis of the second to the specified value
GJChronology.getInstance(DateTimeZone,long,int)	Factory method returns instances of the GJ cutover chronology Any cutover date may be specified
Period.Period(ReadableDuration,ReadableInstant,PeriodType)	Creates a period from the given duration and end point
AbstractDateTime.getSecondOfMinute()	Get the second of minute field value
Period.Period(ReadableInstant,ReadableInstant,PeriodType)	Creates a period between the given instants
Instant.toMutableDateTime()	Get this object as a MutableDateTime using ISOChronology in the default zone
IllegalFieldValueException.getUpperBound()	Returns the upper bound of the legal value range or null if not applicable
LocalTime.toDateTimeToday()	Converts this LocalTime to a full datetime using the default time zone setting the time fields from this instance and the date fields from the current date
BaseDateTimeField.set(ReadablePartial,int,int[],String,Locale)	Sets a value in the milliseconds supplied from a human readable text value
TimeOfDay.toLocalTime()	Converts this object to a LocalTime with the same time and chronology
DelegatedDateTimeField.getWrappedField()	Gets the wrapped date time field
YearMonth.Property.get()	Gets the value of this field
IslamicChronology.getInstanceUTC()	Gets an instance of the IslamicChronology
JulianChronology.getZone()	Description copied from class BaseChronology
MutableInterval.MutableInterval(Object)	Constructs a time interval by converting or copying from another object
DateTime.DateTime(int,int,int,int,int,int,Chronology)	Constructs an instance from datetime field values using the specified chronology
DurationField.toString()	Get a suitable debug string
MutableDateTime.dayOfWeek()	Get the day of week property
AssembledChronology.weekyearOfCentury()	Description copied from class BaseChronology
DateTimeFieldType.isSupported(Chronology)	Checks whether this field supported in the given Chronology
Period.months(int)	Create a period with a specified number of months
DateTimeUtils.toJulianDayNumber(long)	Calculates the astronomical Julian Day Number for an instant
AbstractReadableInstantFieldProperty.getField()	Gets the field being used
MutableDateTime.set(DateTimeFieldType,int)	Sets the value of one of the fields of the instant such as hourOfDay
LocalDate.toDateTimeAtCurrentTime(DateTimeZone)	Converts this LocalDate to a full datetime using the specified time zone setting the date fields from this instance and the time fields from the current time
LocalDateTime.plusWeeks(int)	Returns a copy of this datetime plus the specified number of weeks
StrictDateTimeField.set(long,int)	Does a bounds check before setting the value
AbstractPeriod.toMutablePeriod()	Get this object as a MutablePeriod
DelegatedDurationField.getMillis(long,long)	Description copied from class DurationField
DateTimeUtils.toJulianDay(long)	Calculates the astronomical Julian Day for an instant
DelegatedDateTimeField.roundHalfCeiling(long)	Description copied from class DateTimeField
DateTimeField.getDurationField()	Returns the duration per unit value of this field For example if this field represents hour of day then the duration is an hour
DateTimeZone.getName(long,Locale)	Gets the long name of this datetime zone suitable for display using the specified locale
Chronology.Chronology()	
DividedDateTimeField.getDurationField()	Returns a scaled version of the wrapped field s unit duration field
Years.plus(int)	Returns a new instance with the specified number of years added
Interval.withPeriodBeforeEnd(ReadablePeriod)	Creates a new interval with the specified period before the end instant
DateTimeParserBucket.DateTimeParserBucket(long,Chronology,Locale,Integer)	Constructs a bucket with the option of specifying the pivot year for two digit year parsing
DateTimeZone.getOffset(ReadableInstant)	Gets the millisecond offset to add to UTC to get local time
ZeroIsMaxDateTimeField.getDifference(long,long)	Description copied from class BaseDateTimeField
PeriodPrinter.countFieldsToPrint(ReadablePeriod,int,Locale)	Returns the amount of fields from the given period that this printer will print
UnsupportedDurationField.isSupported()	This field is not supported
BaseDateTimeField.getMaximumShortTextLength(Locale)	Get the maximum short text value for this field The default implementation returns getMaximumTextLength
Months.isLessThan(Months)	Is this months instance less than the specified number of months
DateTimeFieldType.era()	Get the era field type
ReadableDateTime.getMinuteOfDay()	Get the minute of day field value
LocalTime.Property.roundFloorCopy()	Rounds to the lowest whole unit of this field on a copy of this LocalTime
DateTimeField.roundCeiling(long)	Round to the highest whole unit of this field The value of this field and all fields of a higher magnitude may be incremented in order to achieve this result The fractional millis that cannot be expressed in whole increments of this field are set to minimum
LenientChronology.toString()	A debugging string for the chronology
ISODateTimeFormat.yearMonth()	Returns a formatter for a four digit year and two digit month of year yyyy MM
Seconds.dividedBy(int)	Returns a new instance with the seconds divided by the specified divisor
BaseChronology.hourOfDay()	Get the hour of day 0 23 field for this chronology
LocalDateTime.withField(DateTimeFieldType,int)	Returns a copy of this datetime with the specified field set to a new value
AbstractDateTime.getYearOfEra()	Get the year of era field value
ISODateTimeFormat.timeElementParser()	Returns a generic ISO time parser
DateTimeFormat.fullDateTime()	Creates a format that outputs a full datetime format
DateTime.withEarlierOffsetAtOverlap()	Returns a copy of this ZonedDateTime changing the zone offset to the earlier of the two valid offsets at a local time line overlap
BaseDateTime.BaseDateTime(long)	Constructs an instance set to the milliseconds from 1970 01 01T00 00 00Z using ISOChronology in the default time zone
MutableDateTime.setSecondOfDay(int)	Set the second of the day to the specified value
Period.getHours()	Gets the hours field part of the period
DelegatedDateTimeField.getMinimumValue(long)	Description copied from class DateTimeField
MutableDateTime.addMonths(int)	Add a number of months to the date
LocalDateTime.minus(ReadableDuration)	Returns a copy of this datetime with the specified duration taken away
Partial.toString()	Output the date in an appropriate ISO8601 format
LocalDateTime.Property.roundHalfFloorCopy()	Rounds to the nearest whole unit of this field on a copy of this LocalDateTime favoring the floor if halfway
FieldUtils.verifyValueBounds(DateTimeFieldType,int,int,int)	Verify that input values are within specified bounds
MonthDay.fromCalendarFields(Calendar)	Constructs a MonthDay from a java util Calendar using exactly the same field values avoiding any time zone effects
ReadablePartial.toDateTime(ReadableInstant)	Converts this partial to a full datetime by resolving it against another datetime
DateTimeFieldType.yearOfEra()	Get the year of era field type
LocalTime.LocalTime(Chronology)	Constructs an instance set to the current local time evaluated using specified chronology and zone
TimeOfDay.fromCalendarFields(Calendar)	Constructs a TimeOfDay from a java util Calendar using exactly the same field values avoiding any time zone effects
AssembledChronology.minuteOfDay()	Description copied from class BaseChronology
PeriodType.indexOf(DurationFieldType)	Gets the index of the field in this period
Years.toString()	Gets this instance as a String in the ISO8601 duration format
Minutes.negated()	Returns a new instance with the minutes value negated
ConverterManager.getDurationConverters()	Gets a copy of the list of converters
DateTimeFormatter.printTo(StringBuffer,ReadablePartial)	Prints a ReadablePartial
DateTimeField.getAsShortText(ReadablePartial,int,Locale)	Get the human readable short text value of this field from a partial instant
Chronology.dayOfWeek()	Get the day of week field for this chronology
YearMonthDay.YearMonthDay(Object)	Constructs a YearMonthDay from an Object that represents a time
MutablePeriod.MutablePeriod(ReadableInstant,ReadableDuration)	Creates a period from the given start point and the duration
Chronology.dayOfYear()	Get the day of year field for this chronology
TimeOfDay.TimeOfDay(int,int,int)	Constructs a TimeOfDay with specified time field values and zero milliseconds using ISOChronology in the default zone
DateTimeField.getMinimumValue(ReadablePartial,int[])	Get the minimum value for this field using the partial instant and the specified values
Partial.getFieldType(int)	Gets the field type at the specified index
DelegatedDateTimeField.getName()	Description copied from class DateTimeField
DateTime.DateTime(long,Chronology)	Constructs an instance set to the milliseconds from 1970 01 01T00 00 00Z using the specified chronology
BaseSingleFieldPeriod.equals(Object)	Compares this object with the specified object for equality based on the value of each field All ReadablePeriod instances are accepted but only those with a matching PeriodType can return true
ReadableDateTime.toMutableDateTime()	Get this object as a MutableDateTime always returning a new instance
ZonedChronology.getDateTimeMillis(int,int,int,int)	Description copied from class BaseChronology
AbstractInstant.toInstant()	Get this object as an Instant
Partial.Property.withMinimumValue()	Returns a new Partial with this field set to the minimum value for this field
DateTimeFormatterBuilder.appendShortText(DateTimeFieldType)	Instructs the printer to emit a field value as short text and the parser to expect text
PeriodFormatterBuilder.printZeroNever()	Never print zero values for the next and following appended fields unless no fields would be printed If no fields are printed the printer forces the last printZeroRarely field to print a zero
AbstractPartial.getFieldType(int)	Gets the field type at the specified index
MutablePeriod.copy()	Clone this object without having to cast the returned object
MutablePeriod.MutablePeriod(long,PeriodType)	Creates a period from the given millisecond duration
LocalDateTime.getChronology()	Gets the chronology of the datetime
ConverterManager.toString()	Gets a debug representation of the object
LocalDate.toDateTimeAtStartOfDay(DateTimeZone)	Converts this LocalDate to a full datetime at the earliest valid time for the date using the specified time zone
Hours.isGreaterThan(Hours)	Is this hours instance greater than the specified number of hours
DateTimeFormatterBuilder.appendDayOfYear(int)	Instructs the printer to emit a numeric dayOfYear field
ReadWritableDateTime.setMillisOfDay(int)	Set the millis of the day to the specified value
AbstractDuration.compareTo(ReadableDuration)	Compares this duration with the specified duration based on length
MillisDurationField.getValueAsLong(long)	Description copied from class DurationField
ZeroIsMaxDateTimeField.get(long)	Description copied from class BaseDateTimeField
PeriodFormatter.getParseType()	Gets the PeriodType that will be used for parsing
DateMidnight.DateMidnight(int,int,int,DateTimeZone)	Constructs an instance from datetime field values using ISOChronology in the specified time zone
DateTimeFieldType.centuryOfEra()	Get the century of era field type
ZonedChronology.withUTC()	Description copied from class BaseChronology
DateTime.centuryOfEra()	Get the century of era property which provides access to advanced functionality
DateTimeFieldType.weekOfWeekyear()	Get the week of a week based year field type
ConverterManager.getPeriodConverters()	Gets a copy of the list of converters
ReadableDateTime.getWeekOfWeekyear()	Get the week of weekyear field value
MonthDay.size()	Gets the number of fields in this partial which is two
TimeOfDay.toDateTimeToday()	Converts this partial to a full datetime using the default time zone setting the time fields from this instance and the date fields from the current time
DateTimeFormatterBuilder.toFormatter()	Constructs a DateTimeFormatter using all the appended elements
AbstractInstant.toMutableDateTime(DateTimeZone)	Get this object as a MutableDateTime using the same chronology but a different zone
TimeOfDay.plusMillis(int)	Returns a copy of this time plus the specified number of millis
LocalDate.withYearOfCentury(int)	Returns a copy of this date with the year of century field updated
AbstractDuration.hashCode()	Gets a hash code for the duration that is compatible with the equals method
ISODateTimeFormat.weekyearWeekDay()	Returns a formatter for a four digit weekyear two digit week of weekyear and one digit day of week xxxx W ww e
Period.Period(long,PeriodType)	Creates a period from the given millisecond duration
DateTime.DateTime(DateTimeZone)	Constructs an instance set to the current system millisecond time using ISOChronology in the specified time zone
Days.toStandardDuration()	Converts this period in days to a duration in milliseconds assuming a 24 hour day 60 minute hour and 60 second minute
ISODateTimeFormat.weekyear()	Returns a formatter for a four digit weekyear xxxx
MutableDateTime.millisOfSecond()	Get the millis of second property
LocalTime.Property.getLocalTime()	Gets the LocalTime object linked to this property
GJChronology.getDateTimeMillis(int,int,int,int,int,int,int)	Description copied from class BaseChronology
Minutes.toStandardDuration()	Converts this period in minutes to a duration in milliseconds assuming a 60 second minute
LocalDate.year()	Get the year property which provides access to advanced functionality
Weeks.weeksBetween(ReadableInstant,ReadableInstant)	Creates a Weeks representing the number of whole weeks between the two specified datetimes
BaseChronology.clockhourOfDay()	Get the hour of day offset to 1 24 field for this chronology
DateMidnight.Property.setCopy(String)	Sets this field in a copy of the DateMidnight to a parsed text value
JulianChronology.withZone(DateTimeZone)	Gets the Chronology in a specific time zone
Weeks.toStandardMinutes()	Converts this period in weeks to a period in minutes assuming a 7 day week 24 hour day and 60 minute hour
DateMidnight.minus(ReadablePeriod)	Returns a copy of this date with the specified period taken away
YearMonth.getFieldTypes()	Gets an array of the field type of each of the fields that this partial supports
DateTimeField.getMaximumTextLength(Locale)	Get the maximum text value for this field
AbstractDateTime.getMillisOfDay()	Get the millis of day field value
DividedDateTimeField.DividedDateTimeField(DateTimeField,DurationField,DateTimeFieldType,int)	Constructor
MutableInterval.setPeriodAfterStart(ReadablePeriod)	Sets the period of this time interval preserving the start instant and using the ISOChronology in the default zone for calculations
MutablePeriod.parse(String)	Parses a MutablePeriod from the specified string
CopticChronology.getDateTimeMillis(int,int,int,int)	Description copied from class BaseChronology
AbstractPartialFieldProperty.get()	Gets the value of this property from the instant
AssembledChronology.yearOfCentury()	Description copied from class BaseChronology
Instant.plus(ReadableDuration)	Gets a copy of this instant with the specified duration added
LocalTime.Property.withMaximumValue()	Returns a new LocalTime with this field set to the maximum value for this field
DurationField.getMillis(long,long)	Get the millisecond duration of this field from its value relative to an instant For precise fields this method produces the same result as for the single argument getMillis method
ISODateTimeFormat.dateHourMinuteSecondFraction()	Returns a formatter that combines a full date two digit hour of day two digit minute of hour two digit second of minute and three digit fraction of second yyyy MM dd T HH mm ss SSS Parsing will parse up to 9 fractional second digits throwing away all except the first three
DateMidnight.withPeriodAdded(ReadablePeriod,int)	Returns a copy of this date with the specified period added
DateTime.plusHours(int)	Returns a copy of this datetime plus the specified number of hours
DateTimeZone.hashCode()	Gets a hash code compatible with equals
BaseChronology.minutes()	Get the minutes duration field for this chronology
Interval.Interval(long,long,DateTimeZone)	Constructs an interval from a start and end instant with the ISO default chronology in the specified time zone
PeriodFormatter.withLocale(Locale)	Returns a new formatter with a different locale that will be used for printing and parsing
MutableDateTime.Property.add(int)	Adds a value to the millis value
DateTimeUtils.setDefaultTimeZoneNames(Map)	Sets the default map of time zone names
YearMonth.YearMonth(Object,Chronology)	Constructs a YearMonth from an Object that represents some form of time using the specified chronology
GJChronology.hashCode()	A suitable hash code for the chronology
TimeOfDay.toString()	Output the time in the ISO8601 format THH mm ss SSS
ConverterManager.removePartialConverter(PartialConverter)	Removes a converter from the set of converters If the converter was not in the set no changes are made
ReadableInterval.toPeriod(PeriodType)	Converts the duration of the interval to a period using the specified period type
AbstractReadableInstantFieldProperty.getAsString()	Gets the value of this property from the instant as a string
Weeks.minus(Weeks)	Returns a new instance with the specified number of weeks taken away
DateMidnight.withDayOfWeek(int)	Returns a copy of this date with the day of week field updated
ReadWritablePeriod.setMillis(int)	Sets the number of millis of the period
DateTime.toDateTimeISO()	Get this object as a DateTime using ISOChronology in the default zone returning this if possible
DateTime.secondOfDay()	Get the second of day property which provides access to advanced functionality
DateTimeZone.isStandardOffset(long)	Checks whether at a particular instant the offset is standard or not
DateTime.DateTime(int,int,int,int,int)	Constructs an instance from datetime field values using ISOChronology in the default time zone
CopticChronology.withZone(DateTimeZone)	Gets the Chronology in a specific time zone
StrictChronology.getInstance(Chronology)	Create a StrictChronology for any chronology
BaseDuration.toIntervalFrom(ReadableInstant)	Converts this duration to an Interval starting at the specified instant
Chronology.getDateTimeMillis(int,int,int,int,int,int,int)	Returns a datetime millisecond instant formed from the given year month day hour minute second and millisecond values The set of given values must refer to a valid datetime or else an IllegalArgumentException is thrown
DateTimeFormatter.withOffsetParsed()	Returns a new formatter that will create a datetime with a time zone equal to that of the offset of the parsed string
ISOChronology.withZone(DateTimeZone)	Gets the Chronology in a specific time zone
LocalDate.toString(String,Locale)	Output the date using the specified format pattern
Period.Period(Object,PeriodType)	Creates a period by converting or copying from another object
ReadableDuration.getMillis()	Gets the total length of this duration in milliseconds
BaseChronology.dayOfYear()	Get the day of year field for this chronology
DurationFieldType.getName()	Get the name of the field
LocalTime.LocalTime(int,int)	Constructs an instance set to the specified time using ISOChronology
DateTimeFormatter.printTo(StringBuffer,ReadableInstant)	Prints a ReadableInstant using the chronology supplied by the instant
LocalDateTime.minusHours(int)	Returns a copy of this datetime minus the specified number of hours
PeriodFormatterBuilder.maximumParsedDigits(int)	Set the maximum digits parsed for the next and following appended fields By default the maximum digits parsed is ten
UnsupportedDateTimeField.set(ReadablePartial,int,int[],String,Locale)	Always throws UnsupportedOperationException
LocalDate.Property.setCopy(String)	Sets this field in a copy of the LocalDate to a parsed text value
LocalDate.withCenturyOfEra(int)	Returns a copy of this date with the century of era field updated
PeriodFormatterBuilder.appendSuffix(String)	Append a field suffix which applies only to the last appended field If the field is not printed neither is the suffix
AbstractPeriod.get(DurationFieldType)	Gets the value of one of the fields
MutablePeriod.getDays()	Gets the days field part of the period
Instant.getMillis()	Gets the milliseconds of the instant
YearMonth.withChronologyRetainFields(Chronology)	Returns a copy of this year month with the specified chronology
LocalTime.isSupported(DateTimeFieldType)	Checks if the field type specified is supported by this local time and chronology
