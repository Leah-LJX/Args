ConcurrentLinkedDeque.ConcurrentLinkedDeque()	Constructs an empty deque
AbstractPreferences.keys()	Implements the keys method as per the specification in Preferences keys
Matcher.matches()	Attempts to match the entire region against the pattern
Collections.min(Collection,Comparator)	Returns the minimum element of the given collection according to the order induced by the specified comparator All elements in the collection must be mutually comparable by the specified comparator that is comp compare e1 e2 must not throw a ClassCastException for any elements e1 and e2 in the collection
Preferences.exportNode(OutputStream)	Emits on the specified output stream an XML document representing all of the preferences contained in this node but not its descendants
ResourceBundle.Control.getFallbackLocale(String,Locale)	Returns a Locale to be used as a fallback locale for further resource bundle searches by the ResourceBundle getBundle factory method This method is called from the factory method every time when no resulting resource bundle has been found for baseName and locale where locale is either the parameter for ResourceBundle getBundle or the previous fallback locale returned by this method
TreeMap.floorEntry(K)	Description copied from interface NavigableMap
LinkedList.clone()	Returns a shallow copy of this LinkedList The elements themselves are not cloned
Locale.Builder.setExtension(char,String)	Sets the extension for the given key If the value is null or the empty string the extension is removed Otherwise the extension must be well formed or an exception is thrown
Matcher.regionStart()	Reports the start index of this matcher s region The searches this matcher conducts are limited to finding matches within regionStart inclusive and regionEnd exclusive
GZIPInputStream.GZIPInputStream(InputStream,int)	Creates a new input stream with the specified buffer size
AtomicReferenceArray.getAndSet(int,E)	Atomically sets the element at position i to the given value and returns the old value
ReentrantReadWriteLock.isFair()	Returns true if this lock has fairness set true
AbstractPreferences.get(String,String)	Implements the get method as per the specification in Preferences get String String
ResourceBundle.Control.getControl(List)	Returns a ResourceBundle Control in which the getFormats method returns the specified formats The formats must be equal to one of FORMAT PROPERTIES FORMAT CLASS or FORMAT DEFAULT ResourceBundle Control instances returned by this method are singletons and thread safe
Arrays.copyOfRange(U[],int,int,Class)	Copies the specified range of the specified array into a new array
Adler32.update(byte[],int,int)	Updates the checksum with the specified array of bytes
Collections.reverseOrder(Comparator)	Returns a comparator that imposes the reverse ordering of the specified comparator If the specified comparator is null this method is equivalent to reverseOrder in other words it returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface
JarFile.JarFile(String,boolean)	Creates a new JarFile to read from the specified file name
Vector.copyInto(Object[])	Copies the components of this vector into the specified array
Attributes.Name.equals(Object)	Compares this attribute name to another for equality
CountDownLatch.toString()	Returns a string identifying this latch as well as its state
CopyOnWriteArrayList.contains(Object)	Returns true if this list contains the specified element
Deflater.setDictionary(byte[],int,int)	Sets preset dictionary for compression A preset dictionary is used when the history buffer can be predetermined When the data is later uncompressed with Inflater inflate Inflater getAdler can be called in order to get the Adler 32 value of the dictionary required for decompression
SocketHandler.SocketHandler(String,int)	Construct a SocketHandler using a specified host and port
Objects.toString(Object,String)	Returns the result of calling toString on the first argument if the first argument is not null and returns the second argument otherwise
Locale.getDisplayName(Locale)	Returns a name for the locale that is appropriate for display to the user This will be the values returned by getDisplayLanguage getDisplayScript getDisplayCountry and getDisplayVariant assembled into a single string
LinkedBlockingQueue.poll(long,TimeUnit)	Description copied from interface BlockingQueue
ZipEntry.getCrc()	Returns the CRC 32 checksum of the uncompressed entry data or 1 if not known
ForkJoinTask.adapt(Runnable,T)	Returns a new ForkJoinTask that performs the run method of the given Runnable as its action and returns the given result upon join
ArrayList.ArrayList(int)	Constructs an empty list with the specified initial capacity
AbstractQueuedSynchronizer.tryAcquireSharedNanos(int,long)	Attempts to acquire in shared mode aborting if interrupted and failing if the given timeout elapses Implemented by first checking interrupt status then invoking at least once tryAcquireShared int returning on success Otherwise the thread is queued possibly repeatedly blocking and unblocking invoking tryAcquireShared int until success or the thread is interrupted or the timeout elapses
CopyOnWriteArrayList.remove(Object)	Removes the first occurrence of the specified element from this list if it is present If this list does not contain the element it is unchanged More formally removes the element with the lowest index i such that o null get i null o equals get i if such an element exists Returns true if this list contained the specified element or equivalently if this list changed as a result of the call
ArrayList.listIterator(int)	Returns a list iterator over the elements in this list in proper sequence starting at the specified position in the list
Scanner.nextBigInteger()	Scans the next token of the input as a BigInteger
TreeMap.put(K,V)	Associates the specified value with the specified key in this map
LinkedBlockingDeque.offerFirst(E,long,TimeUnit)	Description copied from interface BlockingDeque
Collections.checkedMap(Map,Class,Class)	Returns a dynamically typesafe view of the specified map
ForkJoinPool.getQueuedSubmissionCount()	Returns an estimate of the number of tasks submitted to this pool that have not yet begun executing This method may take time proportional to the number of submissions
MissingResourceException.getKey()	Gets parameter passed by constructor
LinkedList.peekFirst()	Retrieves but does not remove the first element of this list or returns null if this list is empty
Logger.log(Level,String,Throwable)	Log a message with associated Throwable information
ForkJoinTask.fork()	Arranges to asynchronously execute this task While it is not necessarily enforced it is a usage error to fork a task more than once unless it has completed and been reinitialized
EnumSet.of(E)	Creates an enum set initially containing the specified element
ReentrantReadWriteLock.isWriteLockedByCurrentThread()	Queries if the write lock is held by the current thread
AbstractQueuedSynchronizer.release(int)	Releases in exclusive mode Implemented by unblocking one or more threads if tryRelease int returns true
LogRecord.getSourceMethodName()	Get the name of the method that allegedly issued the logging request
WeakHashMap.WeakHashMap(Map)	Constructs a new WeakHashMap with the same mappings as the specified map The WeakHashMap is created with the default load factor 0 75 and an initial capacity sufficient to hold the mappings in the specified map
ConcurrentSkipListMap.tailMap(K)	Description copied from interface NavigableMap
BlockingDeque.offerFirst(E,long,TimeUnit)	Inserts the specified element at the front of this deque waiting up to the specified wait time if necessary for space to become available
PriorityBlockingQueue.offer(E)	Inserts the specified element into this priority queue
LinkedTransferQueue.drainTo(Collection,int)	Description copied from interface BlockingQueue
EventObject.getSource()	The object on which the Event initially occurred
InflaterOutputStream.write(byte[],int,int)	Writes an array of bytes to the uncompressed output stream
LinkedBlockingQueue.toString()	Description copied from class AbstractCollection
Arrays.fill(long[],int,int,long)	Assigns the specified long value to each element of the specified range of the specified array of longs The range to be filled extends from index fromIndex inclusive to index toIndex exclusive If fromIndex toIndex the range to be filled is empty
GregorianCalendar.setGregorianChange(Date)	Sets the GregorianCalendar change date This is the point when the switch from Julian dates to Gregorian dates occurred Default is October 15 1582 Gregorian Previous to this dates will be in the Julian calendar
ListResourceBundle.ListResourceBundle()	Sole constructor For invocation by subclass constructors typically implicit
Deflater.Deflater(int)	Creates a new compressor using the specified compression level
Locale.Builder.setLanguageTag(String)	Resets the Builder to match the provided IETF BCP 47 language tag Discards the existing state Null and the empty string cause the builder to be reset like clear Grandfathered tags see Locale forLanguageTag java lang String are converted to their canonical form before being processed Otherwise the language tag must be well formed see Locale or an exception is thrown unlike Locale forLanguageTag which just discards ill formed and following portions of the tag
ReentrantReadWriteLock.WriteLock.isHeldByCurrentThread()	Queries if this write lock is held by the current thread
Matcher.reset(CharSequence)	Resets this matcher with a new input sequence
PriorityBlockingQueue.comparator()	Returns the comparator used to order the elements in this queue or null if this queue uses the natural ordering of its elements
Scanner.Scanner(InputStream)	Constructs a new Scanner that produces values scanned from the specified input stream Bytes from the stream are converted into characters using the underlying platform s default charset
ReentrantReadWriteLock.WriteLock.tryLock()	Acquires the write lock only if it is not held by another thread at the time of invocation
Map.equals(Object)	Compares the specified object with this map for equality Returns true if the given object is also a map and the two maps represent the same mappings More formally two maps m1 and m2 represent the same mappings if m1 entrySet equals m2 entrySet This ensures that the equals method works properly across different implementations of the Map interface
Handler.getFilter()	Get the current Filter for this Handler
LinkedBlockingDeque.pollLast()	Description copied from interface Deque
HashMap.HashMap()	Constructs an empty HashMap with the default initial capacity 16 and the default load factor 0 75
ConcurrentLinkedDeque.removeLastOccurrence(Object)	Removes the last element e such that o equals e if such an element exists in this deque
LinkedList.offerLast(E)	Inserts the specified element at the end of this list
AbstractQueuedSynchronizer.releaseShared(int)	Releases in shared mode Implemented by unblocking one or more threads if tryReleaseShared int returns true
Executors.defaultThreadFactory()	Returns a default thread factory used to create new threads
ConcurrentLinkedQueue.size()	Returns the number of elements in this queue If this queue contains more than Integer MAX VALUE elements returns Integer MAX VALUE
Arrays.deepToString(Object[])	Returns a string representation of the deep contents of the specified array If the array contains other arrays as elements the string representation contains their contents and so on This method is designed for converting multidimensional arrays to strings
ExecutionException.ExecutionException(String,Throwable)	Constructs an ExecutionException with the specified detail message and cause
Arrays.copyOf(short[],int)	Copies the specified array truncating or padding with zeros if necessary so the copy has the specified length For all indices that are valid in both the original array and the copy the two arrays will contain identical values For any indices that are valid in the copy but not the original the copy will contain short 0
ThreadLocalRandom.nextLong(long,long)	Returns a pseudorandom uniformly distributed value between the given least value inclusive and bound exclusive
AbstractQueue.addAll(Collection)	Adds all of the elements in the specified collection to this queue Attempts to addAll of a queue to itself result in IllegalArgumentException Further the behavior of this operation is undefined if the specified collection is modified while the operation is in progress
LinkedBlockingDeque.removeFirstOccurrence(Object)	Description copied from interface BlockingDeque
ZipInputStream.closeEntry()	Closes the current ZIP entry and positions the stream for reading the next entry
Calendar.getTimeInMillis()	Returns this Calendar s time value in milliseconds
Vector.Vector()	Constructs an empty vector so that its internal data array has size 10 and its standard capacity increment is zero
Deflater.deflate(byte[],int,int)	Compresses the input data and fills specified buffer with compressed data Returns actual number of bytes of compressed data A return value of 0 indicates that needsInput should be called in order to determine if more input data is required
TreeMap.TreeMap()	Constructs a new empty tree map using the natural ordering of its keys All keys inserted into the map must implement the Comparable interface Furthermore all such keys must be mutually comparable k1 compareTo k2 must not throw a ClassCastException for any keys k1 and k2 in the map If the user attempts to put a key into the map that violates this constraint for example the user attempts to put a string key into a map whose keys are integers the put Object key Object value call will throw a ClassCastException
Vector.indexOf(Object,int)	Returns the index of the first occurrence of the specified element in this vector searching forwards from index or returns 1 if the element is not found
AbstractMap.containsKey(Object)	Returns true if this map contains a mapping for the specified key More formally returns true if and only if this map contains a mapping for a key k such that key null k null key equals k There can be at most one such mapping This implementation iterates over entrySet searching for an entry with the specified key If such an entry is found true is returned If the iteration terminates without finding such an entry false is returned Note that this implementation requires linear time in the size of the map many implementations will override this method
Scanner.Scanner(String)	Constructs a new Scanner that produces values scanned from the specified string
LinkedBlockingDeque.offer(E)	Description copied from interface BlockingDeque
LinkedBlockingQueue.LinkedBlockingQueue(int)	Creates a LinkedBlockingQueue with the given fixed capacity
IdentityHashMap.IdentityHashMap(int)	Constructs a new empty map with the specified expected maximum size
AbstractQueuedSynchronizer.acquireShared(int)	Acquires in shared mode ignoring interrupts Implemented by first invoking at least once tryAcquireShared int returning on success Otherwise the thread is queued possibly repeatedly blocking and unblocking invoking tryAcquireShared int until success
Arrays.sort(int[])	Sorts the specified array into ascending numerical order
AbstractPreferences.sync()	Implements the sync method as per the specification in Preferences sync
Scanner.findWithinHorizon(String,int)	Attempts to find the next occurrence of a pattern constructed from the specified string ignoring delimiters
ExecutorService.submit(Runnable,T)	Submits a Runnable task for execution and returns a Future representing that task The Future s get method will return the given result upon successful completion
Manifest.equals(Object)	Returns true if the specified Object is also a Manifest and has the same main Attributes and entries
Arrays.fill(short[],short)	Assigns the specified short value to each element of the specified array of shorts
Logger.logrb(Level,String,String,String,String,Object[])	Log a message specifying source class method and resource bundle name with an array of object arguments
ConcurrentSkipListMap.headMap(K)	Description copied from interface NavigableMap
Calendar.getMinimalDaysInFirstWeek()	Gets what the minimal days required in the first week of the year are e g if the first week is defined as one that contains the first day of the first month of a year this method returns 1 If the minimal days required must be a full week this method returns 7
LinkedList.clear()	Removes all of the elements from this list
ConcurrentNavigableMap.descendingKeySet()	Returns a reverse order NavigableSet view of the keys contained in this map
AbstractCollection.iterator()	Returns an iterator over the elements contained in this collection
Timer.Timer()	Creates a new timer The associated thread does not run as a daemon
Manifest.getEntries()	Returns a Map of the entries contained in this Manifest Each entry is represented by a String name key and associated Attributes value
ForkJoinTask.invoke()	Commences performing this task awaits its completion if necessary and returns its result or throws an unchecked RuntimeException or Error if the underlying computation did so
Deque.addFirst(E)	Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions
Logger.setParent(Logger)	Set the parent for this Logger This method is used by the LogManager to update a Logger when the namespace changes
ZipFile.ZipFile(String)	Opens a zip file for reading
ArrayBlockingQueue.drainTo(Collection,int)	Description copied from interface BlockingQueue
TreeMap.values()	Returns a Collection view of the values contained in this map
RecursiveTask.RecursiveTask()	
AtomicReferenceFieldUpdater.set(T,V)	Sets the field of the given object managed by this updater to the given updated value This operation is guaranteed to act as a volatile store with respect to subsequent invocations of compareAndSet
Arrays.copyOf(char[],int)	Copies the specified array truncating or padding with null characters if necessary so the copy has the specified length For all indices that are valid in both the original array and the copy the two arrays will contain identical values For any indices that are valid in the copy but not the original the copy will contain u000 Such indices will exist if and only if the specified length is greater than that of the original array
ConcurrentSkipListMap.subMap(K,boolean,K,boolean)	Description copied from interface NavigableMap
ConcurrentNavigableMap.headMap(K)	Description copied from interface NavigableMap
ConcurrentSkipListMap.ConcurrentSkipListMap()	Constructs a new empty map sorted according to the natural ordering of the keys
ConcurrentSkipListSet.clear()	Removes all of the elements from this set
AbstractQueuedLongSynchronizer.ConditionObject.awaitUntil(Date)	Implements absolute timed condition wait
ZipException.ZipException()	Constructs a ZipException with null as its error detail message
Collections.binarySearch(List,T)	Searches the specified list for the specified object using the binary search algorithm The list must be sorted into ascending order according to the natural ordering of its elements as by the sort List method prior to making this call If it is not sorted the results are undefined If the list contains multiple elements equal to the specified object there is no guarantee which one will be found
CancellationException.CancellationException()	Constructs a CancellationException with no detail message
Deque.size()	Returns the number of elements in this deque
AtomicIntegerArray.getAndAdd(int,int)	Atomically adds the given value to the element at index i
Collection.toArray(T[])	Returns an array containing all of the elements in this collection the runtime type of the returned array is that of the specified array
NavigableSet.pollFirst()	Retrieves and removes the first lowest element or returns null if this set is empty
Preferences.importPreferences(InputStream)	Imports all of the preferences represented by the XML document on the specified input stream The document may represent user preferences or system preferences If it represents user preferences the preferences will be imported into the calling user s preference tree even if they originally came from a different user s preference tree If any of the preferences described by the document inhabit preference nodes that do not exist the nodes will be created
ListIterator.next()	Returns the next element in the list and advances the cursor position
Future.get(long,TimeUnit)	Waits if necessary for at most the given time for the computation to complete and then retrieves its result if available
AbstractCollection.toArray()	Returns an array containing all of the elements in this collection
BlockingDeque.poll()	Retrieves and removes the head of the queue represented by this deque in other words the first element of this deque or returns null if this deque is empty
List.listIterator()	Returns a list iterator over the elements in this list in proper sequence
ReentrantLock.lock()	Acquires the lock
Calendar.setMinimalDaysInFirstWeek(int)	Sets what the minimal days required in the first week of the year are For example if the first week is defined as one that contains the first day of the first month of a year call this method with value 1 If it must be a full week use value 7
ArrayDeque.offerLast(E)	Inserts the specified element at the end of this deque
JarEntry.JarEntry(String)	Creates a new JarEntry for the specified JAR file entry name
DelayQueue.remainingCapacity()	Always returns Integer MAX VALUE because a DelayQueue is not capacity constrained
PatternSyntaxException.getIndex()	Retrieves the error index
AbstractQueuedSynchronizer.getWaitQueueLength(ConditionObject)	Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer Note that because timeouts and interrupts may occur at any time the estimate serves only as an upper bound on the actual number of waiters This method is designed for use in monitoring of the system state not for synchronization control
Arrays.copyOf(T[],int)	Copies the specified array truncating or padding with nulls if necessary so the copy has the specified length For all indices that are valid in both the original array and the copy the two arrays will contain identical values For any indices that are valid in the copy but not the original the copy will contain null
Formatter.Formatter(PrintStream)	Constructs a new formatter with the specified print stream
ForkJoinPool.awaitTermination(long,TimeUnit)	Blocks until all tasks have completed execution after a shutdown request or the timeout occurs or the current thread is interrupted whichever happens first
AbstractQueuedSynchronizer.hasQueuedPredecessors()	Queries whether any threads have been waiting to acquire longer than the current thread
ThreadPoolExecutor.setKeepAliveTime(long,TimeUnit)	Sets the time limit for which threads may remain idle before being terminated If there are more than the core number of threads currently in the pool after waiting this amount of time without processing a task excess threads will be terminated This overrides any value set in the constructor
Logger.getUseParentHandlers()	Discover whether or not this logger is sending its output to its parent logger
AtomicReferenceArray.length()	Returns the length of the array
Scanner.nextBigInteger(int)	Scans the next token of the input as a BigInteger
AbstractQueuedLongSynchronizer.acquireShared(long)	Acquires in shared mode ignoring interrupts Implemented by first invoking at least once tryAcquireShared long returning on success Otherwise the thread is queued possibly repeatedly blocking and unblocking invoking tryAcquireShared long until success
ExecutorService.invokeAll(Collection,long,TimeUnit)	Executes the given tasks returning a list of Futures holding their status and results when all complete or the timeout expires whichever happens first
Vector.remove(int)	Removes the element at the specified position in this Vector
InputMismatchException.InputMismatchException()	Constructs an InputMismatchException with null as its error message string
DelayQueue.toArray()	Returns an array containing all of the elements in this queue
AtomicReferenceArray.compareAndSet(int,E,E)	Atomically sets the element at position i to the given updated value if the current value the expected value
ZipOutputStream.close()	Closes the ZIP output stream as well as the stream being filtered
LogRecord.getSequenceNumber()	Get the sequence number
IllegalFormatWidthException.getMessage()	Description copied from class Throwable
AbstractQueuedLongSynchronizer.toString()	Returns a string identifying this synchronizer as well as its state
Inflater.getTotalOut()	Returns the total number of uncompressed bytes output so far
NodeChangeEvent.NodeChangeEvent(Preferences,Preferences)	Constructs a new NodeChangeEvent instance
Collections.rotate(List,int)	Rotates the elements in the specified list by the specified distance
Properties.list(PrintStream)	Prints this property list out to the specified output stream
TimeZone.setID(String)	Sets the time zone ID This does not change any other data in the time zone object
Preferences.userRoot()	Returns the root preference node for the calling user
AbstractPreferences.toString()	Returns the absolute path name of this preferences node
LogManager.readConfiguration(InputStream)	Reinitialize the logging properties and reread the logging configuration from the given stream which should be in java util Properties format
Lock.tryLock(long,TimeUnit)	Acquires the lock if it is free within the given waiting time and the current thread has not been interrupted
LogRecord.setResourceBundle(ResourceBundle)	Set the localization resource bundle
Scanner.hasNext()	Returns true if this scanner has another token in its input
PriorityQueue.peek()	Description copied from interface Queue
Formatter.Formatter(String,String,Locale)	Constructs a new formatter with the specified file name charset and locale
ExecutorCompletionService.poll(long,TimeUnit)	Description copied from interface CompletionService
AbstractQueuedSynchronizer.toString()	Returns a string identifying this synchronizer as well as its state
ConsoleHandler.ConsoleHandler()	Create a ConsoleHandler for System err
TimeZone.getOffset(int,int,int,int,int,int)	Gets the time zone offset for current date modified in case of daylight savings This is the offset to add to UTC to get local time
Map.hashCode()	Returns the hash code value for this map The hash code of a map is defined to be the sum of the hash codes of each entry in the map s entrySet view This ensures that m1 equals m2 implies that m1 hashCode m2 hashCode for any two maps m1 and m2 as required by the general contract of Object hashCode
GZIPInputStream.GZIPInputStream(InputStream)	Creates a new input stream with a default buffer size
ForkJoinWorkerThread.getPool()	Returns the pool hosting this thread
AtomicLongFieldUpdater.decrementAndGet(T)	Atomically decrements by one the current value of the field of the given object managed by this updater
HashSet.clone()	Returns a shallow copy of this HashSet instance the elements themselves are not cloned
Lock.unlock()	Releases the lock
Formatter.format(String,)	Writes a formatted string to this object s destination using the specified format string and arguments The locale used is the one defined during the construction of this formatter
AbstractMap.SimpleEntry.equals(Object)	Compares the specified object with this entry for equality
CheckedInputStream.skip(long)	Skips specified number of bytes of input
Logger.getGlobal()	Return global logger object with the name Logger GLOBAL LOGGER NAME
TimeZone.getOffset(long)	Returns the offset of this time zone from UTC at the specified date If Daylight Saving Time is in effect at the specified date the offset value is adjusted with the amount of daylight saving
PropertyPermission.equals(Object)	Checks two PropertyPermission objects for equality Checks that obj is a PropertyPermission and has the same name and actions as this object
ConcurrentSkipListMap.higherKey(K)	Description copied from interface NavigableMap
Deque.removeFirstOccurrence(Object)	Removes the first occurrence of the specified element from this deque
Arrays.binarySearch(short[],short)	Searches the specified array of shorts for the specified value using the binary search algorithm The array must be sorted as by the sort short method prior to making this call If it is not sorted the results are undefined If the array contains multiple elements with the specified value there is no guarantee which one will be found
PreferencesFactory.systemRoot()	Returns the system root preference node Multiple calls on this method will return the same object reference
ConcurrentSkipListMap.pollLastEntry()	Removes and returns a key value mapping associated with the greatest key in this map or null if the map is empty
Condition.signalAll()	Wakes up all waiting threads
ZipEntry.getExtra()	Returns the extra field data for the entry or null if none
ResourceBundle.getStringArray(String)	Gets a string array for the given key from this resource bundle or one of its parents
UnknownFormatFlagsException.UnknownFormatFlagsException(String)	Constructs an instance of this class with the specified flags
Stack.pop()	Removes the object at the top of this stack and returns that object as the value of this function
Hashtable.size()	Returns the number of keys in this hashtable
UnknownFormatFlagsException.getMessage()	Description copied from class Throwable
AbstractExecutorService.invokeAny(Collection,long,TimeUnit)	Description copied from interface ExecutorService
CRC32.update(int)	Updates the CRC 32 checksum with the specified byte the low eight bits of the argument b
ConcurrentLinkedDeque.offer(E)	Inserts the specified element at the tail of this deque
AbstractQueuedSynchronizer.getQueueLength()	Returns an estimate of the number of threads waiting to acquire The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures This method is designed for use in monitoring system state not for synchronization control
Matcher.group()	Returns the input subsequence matched by the previous match
RejectedExecutionException.RejectedExecutionException(String,Throwable)	Constructs a RejectedExecutionException with the specified detail message and cause
SimpleTimeZone.hashCode()	Generates the hash code for the SimpleDateFormat object
Observable.deleteObservers()	Clears the observer list so that this object no longer has any observers
Locale.Builder.setRegion(String)	Sets the region If region is null or the empty string the region in this Builder is removed Otherwise the region must be well formed or an exception is thrown
ArrayBlockingQueue.ArrayBlockingQueue(int,boolean)	Creates an ArrayBlockingQueue with the given fixed capacity and the specified access policy
Locale.getDefault(Category)	Gets the current value of the default locale for the specified Category for this instance of the Java Virtual Machine
ThreadPoolExecutor.getRejectedExecutionHandler()	Returns the current handler for unexecutable tasks
ReentrantReadWriteLock.WriteLock.tryLock(long,TimeUnit)	Acquires the write lock if it is not held by another thread within the given waiting time and the current thread has not been interrupted
GregorianCalendar.isWeekDateSupported()	Returns true indicating this GregorianCalendar supports week dates
Calendar.set(int,int,int,int,int)	Sets the values for the calendar fields YEAR MONTH DAY OF MONTH HOUR OF DAY and MINUTE
AtomicInteger.getAndSet(int)	Atomically sets to the given value and returns the old value
ForkJoinPool.invoke(ForkJoinTask)	Performs the given task returning its result upon completion
LinkedTransferQueue.poll()	Description copied from interface Queue
NavigableMap.lowerEntry(K)	Returns a key value mapping associated with the greatest key strictly less than the given key or null if there is no such key
ServiceLoader.loadInstalled(Class)	Creates a new service loader for the given service type using the extension class loader
Locale.getDisplayCountry(Locale)	Returns a name for the locale s country that is appropriate for display to the user
Matcher.quoteReplacement(String)	Returns a literal replacement String for the specified String
Logger.log(Level,String)	Log a message with no arguments
Matcher.start()	Returns the start index of the previous match
ReentrantLock.getWaitQueueLength(Condition)	Returns an estimate of the number of threads waiting on the given condition associated with this lock Note that because timeouts and interrupts may occur at any time the estimate serves only as an upper bound on the actual number of waiters
PropertyResourceBundle.PropertyResourceBundle(Reader)	Creates a property resource bundle from a Reader Unlike the constructor PropertyResourceBundle InputStream there is no limitation as to the encoding of the input property file
AtomicLong.incrementAndGet()	Atomically increments by one the current value
ThreadPoolExecutor.DiscardPolicy.ThreadPoolExecutor.DiscardPolicy()	Creates a DiscardPolicy
ConcurrentHashMap.ConcurrentHashMap()	Creates a new empty map with a default initial capacity 16 load factor 0 75 and concurrencyLevel 16
Inflater.getAdler()	Returns the ADLER 32 value of the uncompressed data
Logger.logp(Level,String,String,String,Object[])	Log a message specifying source class and method with an array of object arguments
LoggingMXBean.setLoggerLevel(String,String)	Sets the specified logger to the specified new level
CopyOnWriteArraySet.retainAll(Collection)	Retains only the elements in this set that are contained in the specified collection In other words removes from this set all of its elements that are not contained in the specified collection If the specified collection is also a set this operation effectively modifies this set so that its value is the intersection of the two sets
Pack200.Unpacker.properties()	Get the set of this engine s properties This set is a live view so that changing its contents immediately affects the Packer engine and changes from the engine such as progress indications are immediately visible in the map
ConcurrentSkipListSet.tailSet(E)	Description copied from interface NavigableSet
ThreadPoolExecutor.remove(Runnable)	Removes this task from the executor s internal queue if it is present thus causing it not to be run if it has not already started
GZIPInputStream.read(byte[],int,int)	Reads uncompressed data into an array of bytes If len is not zero the method will block until some input can be decompressed otherwise no bytes are read and 0 is returned
ConcurrentSkipListSet.first()	Description copied from interface SortedSet
Arrays.copyOfRange(int[],int,int)	Copies the specified range of the specified array into a new array
PreferencesFactory.userRoot()	Returns the user root preference node corresponding to the calling user In a server the returned value will typically depend on some implicit client context
EnumMap.remove(Object)	Removes the mapping for this key from this map if present
Calendar.getMaximum(int)	Returns the maximum value for the given calendar field of this Calendar instance The maximum value is defined as the largest value returned by the get method for any possible time value The maximum value depends on calendar system specific parameters of the instance
Deque.removeLast()	Retrieves and removes the last element of this deque This method differs from pollLast only in that it throws an exception if this deque is empty
Pattern.split(CharSequence,int)	Splits the given input sequence around matches of this pattern
ForkJoinPool.ForkJoinPool(int)	Creates a ForkJoinPool with the indicated parallelism level the default thread factory no UncaughtExceptionHandler and non async LIFO processing mode
NavigableMap.pollLastEntry()	Removes and returns a key value mapping associated with the greatest key in this map or null if the map is empty
AtomicStampedReference.getStamp()	Returns the current value of the stamp
Arrays.fill(float[],float)	Assigns the specified float value to each element of the specified array of floats
Executors.newFixedThreadPool(int,ThreadFactory)	Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue using the provided ThreadFactory to create new threads when needed At any point at most nThreads threads will be active processing tasks If additional tasks are submitted when all threads are active they will wait in the queue until a thread is available If any thread terminates due to a failure during execution prior to shutdown a new one will take its place if needed to execute subsequent tasks The threads in the pool will exist until it is explicitly shutdown
Calendar.setWeekDate(int,int,int)	Sets the date of this Calendar with the the given date specifiers week year week of year and day of week
Locale.getUnicodeLocaleAttributes()	Returns the set of unicode locale attributes associated with this locale or the empty set if it has no attributes The returned set is unmodifiable
AtomicInteger.getAndAdd(int)	Atomically adds the given value to the current value
MemoryHandler.getPushLevel()	Get the pushLevel
Formatter.Formatter(String)	Constructs a new formatter with the specified file name
Handler.isLoggable(LogRecord)	Check if this Handler would actually log a given LogRecord
Date.setHours(int)	Sets the hour of this Date object to the specified value
AtomicInteger.floatValue()	Description copied from class Number
LinkedTransferQueue.remainingCapacity()	Always returns Integer MAX VALUE because a LinkedTransferQueue is not capacity constrained
Arrays.fill(short[],int,int,short)	Assigns the specified short value to each element of the specified range of the specified array of shorts The range to be filled extends from index fromIndex inclusive to index toIndex exclusive If fromIndex toIndex the range to be filled is empty
CopyOnWriteArrayList.listIterator(int)	Returns a list iterator over the elements in this list in proper sequence starting at the specified position in the list
Properties.store(OutputStream,String)	Writes this property list key and element pairs in this Properties table to the output stream in a format suitable for loading into a Properties table using the load InputStream method
ScheduledThreadPoolExecutor.submit(Callable)	Description copied from interface ExecutorService
LinkedBlockingDeque.putFirst(E)	Description copied from interface BlockingDeque
Preferences.node(String)	Returns the named preference node in the same tree as this node creating it and any of its ancestors if they do not already exist
Adler32.update(byte[])	Updates the checksum with the specified array of bytes
MemoryHandler.flush()	Causes a flush on the target Handler
Collections.sort(List)	Sorts the specified list into ascending order according to the natural ordering of its elements
ForkJoinTask.invokeAll(Collection)	Forks all tasks in the specified collection returning when isDone holds for each task or an unchecked exception is encountered in which case the exception is rethrown If more than one task encounters an exception then this method throws any one of these exceptions If any task encounters an exception others may be cancelled However the execution status of individual tasks is not guaranteed upon exceptional return The status of each task may be obtained using getException and related methods to check if they have been cancelled completed normally or exceptionally or left unprocessed
FileHandler.FileHandler(String,int,int,boolean)	Initialize a FileHandler to write to a set of files with optional append When approximately the given limit has been written to one file another file will be opened The output will cycle through a set of count files
ReentrantReadWriteLock.ReadLock.tryLock()	Acquires the read lock only if the write lock is not held by another thread at the time of invocation
DelayQueue.add(E)	Inserts the specified element into this delay queue
LinkedBlockingDeque.pollLast(long,TimeUnit)	Description copied from interface BlockingDeque
Date.setYear(int)	Sets the year of this Date object to be the specified value plus 1900 This Date object is modified so that it represents a point in time within the specified year with the month date hour minute and second the same as before as interpreted in the local time zone Of course if the date was February 29 for example and the year is set to a non leap year then the new date will be treated as if it were on March 1
MatchResult.start()	Returns the start index of the match
Hashtable.isEmpty()	Tests if this hashtable maps no keys to values
SimpleTimeZone.SimpleTimeZone(int,String,int,int,int,int,int,int,int,int,int)	Constructs a SimpleTimeZone with the given base time zone offset from GMT time zone ID and rules for starting and ending the daylight time
ZipException.ZipException(String)	Constructs a ZipException with the specified detail message
NavigableMap.lastEntry()	Returns a key value mapping associated with the greatest key in this map or null if the map is empty
AbstractQueuedSynchronizer.ConditionObject.awaitNanos(long)	Implements timed condition wait
Preferences.getByteArray(String,byte[])	Returns the byte array value represented by the string associated with the specified key in this preference node Valid strings are Base64 encoded binary data as defined in RFC 2045 Section 6 8 with one minor change the string must consist solely of characters from the Base64 Alphabet no newline characters or extraneous characters are permitted This method is intended for use in conjunction with putByteArray java lang String byte
ThreadPoolExecutor.getTaskCount()	Returns the approximate total number of tasks that have ever been scheduled for execution Because the states of tasks and threads may change dynamically during computation the returned value is only an approximation
Dictionary.elements()	Returns an enumeration of the values in this dictionary The general contract for the elements method is that an Enumeration is returned that will generate all the elements contained in entries in this dictionary
BlockingQueue.offer(E)	Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions returning true upon success and false if no space is currently available When using a capacity restricted queue this method is generally preferable to add E which can fail to insert an element only by throwing an exception
ExecutorService.shutdownNow()	Attempts to stop all actively executing tasks halts the processing of waiting tasks and returns a list of the tasks that were awaiting execution
Date.Date(String)	Allocates a Date object and initializes it so that it represents the date and time indicated by the string s which is interpreted as if by the parse java lang String method
ConcurrentHashMap.putAll(Map)	Copies all of the mappings from the specified map to this one
CurrencyNameProvider.getSymbol(String,Locale)	Gets the symbol of the given currency code for the specified locale
Arrays.equals(Object[],Object[])	Returns true if the two specified arrays of Objects are equal to one another The two arrays are considered equal if both arrays contain the same number of elements and all corresponding pairs of elements in the two arrays are equal Two objects e1 and e2 are considered equal if e1 null e2 null e1 equals e2 In other words the two arrays are equal if they contain the same elements in the same order Also two array references are considered equal if both are null
LinkedList.size()	Returns the number of elements in this list
ForkJoinTask.complete(V)	Completes this task and if not already aborted or cancelled returning the given value as the result of subsequent invocations of join and related operations This method may be used to provide results for asynchronous tasks or to provide alternative handling for tasks that would not otherwise complete normally Its use in other situations is discouraged This method is overridable but overridden versions must invoke super implementation to maintain guarantees
Deque.removeFirst()	Retrieves and removes the first element of this deque This method differs from pollFirst only in that it throws an exception if this deque is empty
TimeZoneNameProvider.getDisplayName(String,boolean,int,Locale)	Returns a name for the given time zone ID that s suitable for presentation to the user in the specified locale The given time zone ID is GMT or one of the names defined using Zone entries in the tz database a public domain time zone database at ftp elsie nci nih gov pub
AbstractCollection.toArray(T[])	Returns an array containing all of the elements in this collection the runtime type of the returned array is that of the specified array
LinkedHashMap.get(Object)	Returns the value to which the specified key is mapped or null if this map contains no mapping for the key
LinkedTransferQueue.take()	Description copied from interface BlockingQueue
ArrayBlockingQueue.clear()	Atomically removes all of the elements from this queue
CopyOnWriteArrayList.toString()	Returns a string representation of this list The string representation consists of the string representations of the list s elements in the order they are returned by its iterator enclosed in square brackets Adjacent elements are separated by the characters comma and space Elements are converted to strings as by String valueOf Object
CopyOnWriteArrayList.clear()	Removes all of the elements from this list
AbstractMap.toString()	Returns a string representation of this map The string representation consists of a list of key value mappings in the order returned by the map s entrySet view s iterator enclosed in braces Adjacent mappings are separated by the characters comma and space Each key value mapping is rendered as the key followed by an equals sign followed by the associated value Keys and values are converted to strings as by String valueOf Object
CopyOnWriteArrayList.lastIndexOf(Object)	Returns the index of the last occurrence of the specified element in this list or 1 if this list does not contain the element
ConcurrentHashMap.size()	Returns the number of key value mappings in this map If the map contains more than Integer MAX VALUE elements returns Integer MAX VALUE
TreeMap.tailMap(K)	Description copied from interface NavigableMap
List.addAll(int,Collection)	Inserts all of the elements in the specified collection into this list at the specified position optional operation Shifts the element currently at that position if any and any subsequent elements to the right increases their indices The new elements will appear in this list in the order that they are returned by the specified collection s iterator The behavior of this operation is undefined if the specified collection is modified while the operation is in progress Note that this will occur if the specified collection is this list and it s nonempty
SortedSet.headSet(E)	Returns a view of the portion of this set whose elements are strictly less than toElement The returned set is backed by this set so changes in the returned set are reflected in this set and vice versa The returned set supports all optional set operations that this set supports
HashSet.HashSet()	Constructs a new empty set the backing HashMap instance has default initial capacity 16 and load factor 0 75
CRC32.update(byte[],int,int)	Updates the CRC 32 checksum with the specified array of bytes
LinkedList.addLast(E)	Appends the specified element to the end of this list
Collection.add(E)	Ensures that this collection contains the specified element optional operation Returns true if this collection changed as a result of the call Returns false if this collection does not permit duplicates and already contains the specified element Collections that support this operation may place limitations on what elements may be added to this collection In particular some collections will refuse to add null elements and others will impose restrictions on the type of elements that may be added
HashMap.HashMap(Map)	Constructs a new HashMap with the same mappings as the specified Map The HashMap is created with default load factor 0 75 and an initial capacity sufficient to hold the mappings in the specified Map
TreeMap.subMap(K,boolean,K,boolean)	Description copied from interface NavigableMap
ListResourceBundle.getKeys()	Returns an Enumeration of the keys contained in this ResourceBundle and its parent bundles
Observable.notifyObservers()	If this object has changed as indicated by the hasChanged method then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed
CheckedInputStream.CheckedInputStream(InputStream,Checksum)	Creates an input stream using the specified Checksum
ConcurrentHashMap.put(K,V)	Maps the specified key to the specified value in this table
StringTokenizer.countTokens()	Calculates the number of times that this tokenizer s nextToken method can be called before it generates an exception The current position is not advanced
Arrays.sort(char[],int,int)	Sorts the specified range of the array into ascending order The range to be sorted extends from the index fromIndex inclusive to the index toIndex exclusive If fromIndex toIndex the range to be sorted is empty
Date.parse(String)	Attempts to interpret the string s as a representation of a date and time If the attempt is successful the time indicated is returned represented as the distance measured in milliseconds of that time from the epoch 00 00 00 GMT on January 1 1970 If the attempt fails an IllegalArgumentException is thrown
Map.size()	Returns the number of key value mappings in this map If the map contains more than Integer MAX VALUE elements returns Integer MAX VALUE
InvalidPropertiesFormatException.InvalidPropertiesFormatException(Throwable)	Constructs an InvalidPropertiesFormatException with the specified cause
ArrayBlockingQueue.peek()	Description copied from interface Queue
ArrayBlockingQueue.toArray(T[])	Returns an array containing all of the elements in this queue in proper sequence the runtime type of the returned array is that of the specified array If the queue fits in the specified array it is returned therein Otherwise a new array is allocated with the runtime type of the specified array and the size of this queue
Collection.addAll(Collection)	Adds all of the elements in the specified collection to this collection optional operation The behavior of this operation is undefined if the specified collection is modified while the operation is in progress
ConcurrentLinkedDeque.push(E)	Description copied from interface Deque
AbstractPreferences.isUserNode()	Implements the isUserNode method as per the specification in Preferences isUserNode
AbstractQueuedSynchronizer.hasWaiters(ConditionObject)	Queries whether any threads are waiting on the given condition associated with this synchronizer Note that because timeouts and interrupts may occur at any time a true return does not guarantee that a future signal will awaken any threads This method is designed primarily for use in monitoring of the system state
SynchronousQueue.peek()	Always returns null
Set.clear()	Removes all of the elements from this set optional operation
Condition.signal()	Wakes up one waiting thread
PriorityQueue.PriorityQueue(int,Comparator)	Creates a PriorityQueue with the specified initial capacity that orders its elements according to the specified comparator
ThreadPoolExecutor.allowsCoreThreadTimeOut()	Returns true if this pool allows core threads to time out and terminate if no tasks arrive within the keepAlive time being replaced if needed when new tasks arrive When true the same keep alive policy applying to non core threads applies also to core threads When false the default core threads are never terminated due to lack of incoming tasks
ServiceConfigurationError.ServiceConfigurationError(String)	Constructs a new instance with the specified message
AtomicLongFieldUpdater.getAndIncrement(T)	Atomically increments by one the current value of the field of the given object managed by this updater
ThreadPoolExecutor.isTerminating()	Returns true if this executor is in the process of terminating after shutdown or shutdownNow but has not completely terminated This method may be useful for debugging A return of true reported a sufficient period after shutdown may indicate that submitted tasks have ignored or suppressed interruption causing this executor not to properly terminate
Preferences.putByteArray(String,byte[])	Associates a string representing the specified byte array with the specified key in this preference node The associated string is the Base64 encoding of the byte array as defined in RFC 2045 Section 6 8 with one minor change the string will consist solely of characters from the Base64 Alphabet it will not contain any newline characters Note that the maximum length of the byte array is limited to three quarters of MAX VALUE LENGTH so that the length of the Base64 encoded String does not exceed MAX VALUE LENGTH
BlockingDeque.takeFirst()	Retrieves and removes the first element of this deque waiting if necessary until an element becomes available
Pattern.toString()	Returns the string representation of this pattern This is the regular expression from which this pattern was compiled
Preferences.isUserNode()	Returns true if this preference node is in the user preference tree false if it s in the system preference tree
AtomicLongArray.compareAndSet(int,long,long)	Atomically sets the element at position i to the given updated value if the current value the expected value
ArrayList.retainAll(Collection)	Retains only the elements in this list that are contained in the specified collection In other words removes from this list all of its elements that are not contained in the specified collection
List.equals(Object)	Compares the specified object with this list for equality Returns true if and only if the specified object is also a list both lists have the same size and all corresponding pairs of elements in the two lists are equal Two elements e1 and e2 are equal if e1 null e2 null e1 equals e2 In other words two lists are defined to be equal if they contain the same elements in the same order This definition ensures that the equals method works properly across different implementations of the List interface
Arrays.binarySearch(long[],long)	Searches the specified array of longs for the specified value using the binary search algorithm The array must be sorted as by the sort long method prior to making this call If it is not sorted the results are undefined If the array contains multiple elements with the specified value there is no guarantee which one will be found
SynchronousQueue.contains(Object)	Always returns false
Preferences.put(String,String)	Associates the specified value with the specified key in this preference node
Locale.Builder.Locale.Builder()	Constructs an empty Builder The default value of all fields extensions and private use information is the empty string
ArrayDeque.ArrayDeque(int)	Constructs an empty array deque with an initial capacity sufficient to hold the specified number of elements
UUID.hashCode()	Returns a hash code for this UUID
Phaser.Phaser(Phaser,int)	Creates a new phaser with the given parent and number of registered unarrived parties When the given parent is non null and the given number of parties is greater than zero this child phaser is registered with its parent
List.get(int)	Returns the element at the specified position in this list
LogRecord.setParameters(Object[])	Set the parameters to the log message
JarFile.getManifest()	Returns the jar file manifest or null if none
Properties.storeToXML(OutputStream,String)	Emits an XML document representing all of the properties contained in this table
ArrayBlockingQueue.toString()	Description copied from class AbstractCollection
Preferences.removeNodeChangeListener(NodeChangeListener)	Removes the specified NodeChangeListener so it no longer receives change events
AtomicLongFieldUpdater.lazySet(T,long)	Eventually sets the field of the given object managed by this updater to the given updated value
ForkJoinTask.adapt(Runnable)	Returns a new ForkJoinTask that performs the run method of the given Runnable as its action and returns a null result upon join
Random.nextBoolean()	Returns the next pseudorandom uniformly distributed boolean value from this random number generator s sequence The general contract of nextBoolean is that one boolean value is pseudorandomly generated and returned The values true and false are produced with approximately equal probability
Arrays.toString(int[])	Returns a string representation of the contents of the specified array
ZipOutputStream.closeEntry()	Closes the current ZIP entry and positions the stream for writing the next entry
Timer.scheduleAtFixedRate(TimerTask,Date,long)	Schedules the specified task for repeated fixed rate execution beginning at the specified time Subsequent executions take place at approximately regular intervals separated by the specified period
AbstractCollection.containsAll(Collection)	Returns true if this collection contains all of the elements in the specified collection
Deque.push(E)	Pushes an element onto the stack represented by this deque in other words at the head of this deque if it is possible to do so immediately without violating capacity restrictions returning true upon success and throwing an IllegalStateException if no space is currently available
AbstractSet.equals(Object)	Compares the specified object with this set for equality Returns true if the given object is also a set the two sets have the same size and every member of the given set is contained in this set This ensures that the equals method works properly across different implementations of the Set interface
ArrayDeque.offer(E)	Inserts the specified element at the end of this deque
Hashtable.toString()	Returns a string representation of this Hashtable object in the form of a set of entries enclosed in braces and separated by the ASCII characters comma and space Each entry is rendered as the key an equals sign and the associated element where the toString method is used to convert the key and element to strings
Inflater.needsInput()	Returns true if no data remains in the input buffer This can be used to determine if setInput should be called in order to provide more input
AtomicReferenceArray.lazySet(int,E)	Eventually sets the element at position i to the given value
SynchronousQueue.SynchronousQueue(boolean)	Creates a SynchronousQueue with the specified fairness policy
ConcurrentLinkedDeque.pop()	Description copied from interface Deque
RejectedExecutionHandler.rejectedExecution(Runnable,ThreadPoolExecutor)	Method that may be invoked by a ThreadPoolExecutor when execute cannot accept a task This may occur when no more threads or queue slots are available because their bounds would be exceeded or upon shutdown of the Executor
RunnableFuture.run()	Sets this Future to the result of its computation unless it has been cancelled
Inflater.setInput(byte[],int,int)	Sets input data for decompression Should be called whenever needsInput returns true indicating that more input data is required
DeflaterInputStream.DeflaterInputStream(InputStream,Deflater)	Creates a new input stream with the specified compressor and a default buffer size
Calendar.toString()	Return a string representation of this calendar This method is intended to be used only for debugging purposes and the format of the returned string may vary between implementations
ScheduledThreadPoolExecutor.shutdownNow()	Attempts to stop all actively executing tasks halts the processing of waiting tasks and returns a list of the tasks that were awaiting execution
AtomicIntegerArray.decrementAndGet(int)	Atomically decrements by one the element at index i
ExecutorService.shutdown()	Initiates an orderly shutdown in which previously submitted tasks are executed but no new tasks will be accepted
RejectedExecutionException.RejectedExecutionException(String)	Constructs a RejectedExecutionException with the specified detail message The cause is not initialized and may subsequently be initialized by a call to initCause
BitSet.andNot(BitSet)	Clears all of the bits in this BitSet whose corresponding bit is set in the specified BitSet
Formatter.Formatter(OutputStream,String)	Constructs a new formatter with the specified output stream and charset
ThreadPoolExecutor.CallerRunsPolicy.ThreadPoolExecutor.CallerRunsPolicy()	Creates a CallerRunsPolicy
Executors.callable(Runnable,T)	Returns a Callable object that when called runs the given task and returns the given result This can be useful when applying methods requiring a Callable to an otherwise resultless action
NavigableSet.headSet(E)	Returns a view of the portion of this set whose elements are strictly less than toElement The returned set is backed by this set so changes in the returned set are reflected in this set and vice versa The returned set supports all optional set operations that this set supports
IllformedLocaleException.IllformedLocaleException(String)	Constructs a new IllformedLocaleException with the given message and 1 as the error index
RecursiveAction.RecursiveAction()	
ReentrantLock.isLocked()	Queries if this lock is held by any thread This method is designed for use in monitoring of the system state not for synchronization control
Collection.contains(Object)	Returns true if this collection contains the specified element
LinkedBlockingQueue.LinkedBlockingQueue()	Creates a LinkedBlockingQueue with a capacity of Integer MAX VALUE
Comparator.compare(T,T)	Compares its two arguments for order Returns a negative integer zero or a positive integer as the first argument is less than equal to or greater than the second
ConcurrentSkipListMap.floorEntry(K)	Returns a key value mapping associated with the greatest key less than or equal to the given key or null if there is no such key The returned entry does not support the Entry setValue method
AbstractQueuedLongSynchronizer.hasQueuedPredecessors()	Queries whether any threads have been waiting to acquire longer than the current thread
Scanner.hasNextShort(int)	Returns true if the next token in this scanner s input can be interpreted as a short value in the specified radix using the nextShort method The scanner does not advance past any input
ListIterator.previous()	Returns the previous element in the list and moves the cursor position backwards This method may be called repeatedly to iterate through the list backwards or intermixed with calls to next to go back and forth Note that alternating calls to next and previous will return the same element repeatedly
ForkJoinTask.cancel(boolean)	Attempts to cancel execution of this task This attempt will fail if the task has already completed or could not be cancelled for some other reason If successful and this task has not started when cancel is called execution of this task is suppressed After this method returns successfully unless there is an intervening call to reinitialize subsequent calls to isCancelled isDone and cancel will return true and calls to join and related methods will result in CancellationException
SimpleTimeZone.clone()	Returns a clone of this SimpleTimeZone instance
Locale.Builder.setVariant(String)	Sets the variant If variant is null or the empty string the variant in this Builder is removed Otherwise it must consist of one or more well formed subtags or an exception is thrown
Logger.addHandler(Handler)	Add a log Handler to receive logging messages
IdentityHashMap.equals(Object)	Compares the specified object with this map for equality Returns true if the given object is also a map and the two maps represent identical object reference mappings More formally this map is equal to another map m if and only if this entrySet equals m entrySet
Scanner.next(String)	Returns the next token if it matches the pattern constructed from the specified string If the match is successful the scanner advances past the input that matched the pattern
ConcurrentLinkedDeque.peekLast()	Description copied from interface Deque
Handler.getFormatter()	Return the Formatter for this Handler
EnumSet.complementOf(EnumSet)	Creates an enum set with the same element type as the specified enum set initially containing all the elements of this type that are not contained in the specified set
Executors.newSingleThreadScheduledExecutor(ThreadFactory)	Creates a single threaded executor that can schedule commands to run after a given delay or to execute periodically Note however that if this single thread terminates due to a failure during execution prior to shutdown a new one will take its place if needed to execute subsequent tasks Tasks are guaranteed to execute sequentially and no more than one task will be active at any given time Unlike the otherwise equivalent newScheduledThreadPool 1 threadFactory the returned executor is guaranteed not to be reconfigurable to use additional threads
AtomicReference.lazySet(V)	Eventually sets to the given value
ReentrantLock.ReentrantLock(boolean)	Creates an instance of ReentrantLock with the given fairness policy
AtomicReferenceArray.get(int)	Gets the current value at position i
ForkJoinPool.toString()	Returns a string identifying this pool as well as its state including indications of run state parallelism level and worker and task counts
ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue)	Creates a new ThreadPoolExecutor with the given initial parameters and default thread factory and rejected execution handler
Calendar.setTime(Date)	Sets this Calendar s time with the given Date
TimeZone.inDaylightTime(Date)	Queries if the given date is in Daylight Saving Time in this time zone
ZipOutputStream.setLevel(int)	Sets the compression level for subsequent entries which are DEFLATED
Locale.getDisplayVariant(Locale)	Returns a name for the locale s variant code that is appropriate for display to the user If possible the name will be localized for inLocale If the locale doesn t specify a variant code this function returns the empty string
Arrays.fill(char[],int,int,char)	Assigns the specified char value to each element of the specified range of the specified array of chars The range to be filled extends from index fromIndex inclusive to index toIndex exclusive If fromIndex toIndex the range to be filled is empty
LogRecord.setThreadID(int)	Set an identifier for the thread where the message originated
Map.remove(Object)	Removes the mapping for a key from this map if it is present optional operation More formally if this map contains a mapping from key k to value v such that key null k null key equals k that mapping is removed The map can contain at most one such mapping Returns the value to which this map previously associated the key or null if the map contained no mapping for the key
Logger.getParent()	Return the parent for this Logger
Vector.get(int)	Returns the element at the specified position in this Vector
Arrays.fill(double[],double)	Assigns the specified double value to each element of the specified array of doubles
Inflater.needsDictionary()	Returns true if a preset dictionary is needed for decompression
Scanner.hasNext(String)	Returns true if the next token matches the pattern constructed from the specified string The scanner does not advance past any input
AbstractQueuedLongSynchronizer.tryAcquireNanos(long,long)	Attempts to acquire in exclusive mode aborting if interrupted and failing if the given timeout elapses Implemented by first checking interrupt status then invoking at least once tryAcquire long returning on success Otherwise the thread is queued possibly repeatedly blocking and unblocking invoking tryAcquire long until success or the thread is interrupted or the timeout elapses This method can be used to implement method Lock tryLock long TimeUnit
ZipInputStream.read(byte[],int,int)	Reads from the current ZIP entry into an array of bytes
ArrayDeque.removeLastOccurrence(Object)	Removes the last occurrence of the specified element in this deque when traversing the deque from head to tail
AbstractList.equals(Object)	Compares the specified object with this list for equality Returns true if and only if the specified object is also a list both lists have the same size and all corresponding pairs of elements in the two lists are equal Two elements e1 and e2 are equal if e1 null e2 null e1 equals e2 In other words two lists are defined to be equal if they contain the same elements in the same order
ZipEntry.isDirectory()	Returns true if this is a directory entry A directory entry is defined to be one whose name ends with a
Collections.swap(List,int,int)	Swaps the elements at the specified positions in the specified list
ConcurrentModificationException.ConcurrentModificationException(Throwable)	Constructs a new exception with the specified cause and a detail message of cause null null cause toString which typically contains the class and detail message of cause
ConcurrentLinkedQueue.iterator()	Returns an iterator over the elements in this queue in proper sequence
Arrays.hashCode(float[])	Returns a hash code based on the contents of the specified array
AbstractQueuedLongSynchronizer.hasContended()	Queries whether any threads have ever contended to acquire this synchronizer that is if an acquire method has ever blocked
AtomicReferenceFieldUpdater.get(T)	Gets the current value held in the field of the given object managed by this updater
Logger.info(String)	Log an INFO message
InflaterInputStream.available()	Returns 0 after EOF has been reached otherwise always return 1
Locale.getUnicodeLocaleKeys()	Returns the set of Unicode locale keys defined by this locale or the empty set if this locale has none The returned set is immutable Keys are all lower case
JarInputStream.getNextEntry()	Reads the next ZIP file entry and positions the stream at the beginning of the entry data If verification has been enabled any invalid signature detected while positioning the stream for the next entry will result in an exception
SimpleTimeZone.getOffset(long)	Returns the offset of this time zone from UTC at the given time If daylight saving time is in effect at the given time the offset value is adjusted with the amount of daylight saving
ConsoleHandler.publish(LogRecord)	Publish a LogRecord
Handler.setEncoding(String)	Set the character encoding used by this Handler
List.size()	Returns the number of elements in this list If this list contains more than Integer MAX VALUE elements returns Integer MAX VALUE
Arrays.copyOfRange(float[],int,int)	Copies the specified range of the specified array into a new array
ReentrantReadWriteLock.getReadHoldCount()	Queries the number of reentrant read holds on this lock by the current thread A reader thread has a hold on a lock for each lock action that is not matched by an unlock action
ConcurrentLinkedDeque.toArray(T[])	Returns an array containing all of the elements in this deque in proper sequence from first to last element the runtime type of the returned array is that of the specified array If the deque fits in the specified array it is returned therein
Arrays.copyOf(long[],int)	Copies the specified array truncating or padding with zeros if necessary so the copy has the specified length For all indices that are valid in both the original array and the copy the two arrays will contain identical values For any indices that are valid in the copy but not the original the copy will contain 0L
Observable.deleteObserver(Observer)	Deletes an observer from the set of observers of this object
CopyOnWriteArrayList.addAllAbsent(Collection)	Appends all of the elements in the specified collection that are not already contained in this list to the end of this list in the order that they are returned by the specified collection s iterator
ArrayBlockingQueue.poll(long,TimeUnit)	Description copied from interface BlockingQueue
AbstractQueuedLongSynchronizer.acquireSharedInterruptibly(long)	Acquires in shared mode aborting if interrupted Implemented by first checking interrupt status then invoking at least once tryAcquireShared long returning on success Otherwise the thread is queued possibly repeatedly blocking and unblocking invoking tryAcquireShared long until success or the thread is interrupted
Timer.scheduleAtFixedRate(TimerTask,long,long)	Schedules the specified task for repeated fixed rate execution beginning after the specified delay Subsequent executions take place at approximately regular intervals separated by the specified period
Locale.getDisplayScript()	Returns a name for the the locale s script that is appropriate for display to the user If possible the name will be localized for the default locale Returns the empty string if this locale doesn t specify a script code
ZipOutputStream.finish()	Finishes writing the contents of the ZIP output stream without closing the underlying stream Use this method when applying multiple filters in succession to the same output stream
Scanner.hasNextLong()	Returns true if the next token in this scanner s input can be interpreted as a long value in the default radix using the nextLong method The scanner does not advance past any input
ConcurrentSkipListMap.ConcurrentSkipListMap(Map)	Constructs a new map containing the same mappings as the given map sorted according to the natural ordering of the keys
PriorityBlockingQueue.peek()	Description copied from interface Queue
ArrayDeque.peekLast()	Description copied from interface Deque
DelayQueue.iterator()	Returns an iterator over all the elements both expired and unexpired in this queue The iterator does not return the elements in any particular order
AtomicStampedReference.set(V,int)	Unconditionally sets the value of both the reference and stamp
Calendar.compareTo(Calendar)	Compares the time values millisecond offsets from the Epoch represented by two Calendar objects
Scanner.Scanner(File,String)	Constructs a new Scanner that produces values scanned from the specified file Bytes from the file are converted into characters using the specified charset
PriorityQueue.poll()	Description copied from interface Queue
SortedSet.last()	Returns the last highest element currently in this set
AbstractCollection.remove(Object)	Removes a single instance of the specified element from this collection if it is present optional operation More formally removes an element e such that o null e null o equals e if this collection contains one or more such elements Returns true if this collection contained the specified element or equivalently if this collection changed as a result of the call
ThreadPoolExecutor.setRejectedExecutionHandler(RejectedExecutionHandler)	Sets a new handler for unexecutable tasks
ForkJoinPool.submit(Runnable,T)	Description copied from interface ExecutorService
ConcurrentNavigableMap.subMap(K,K)	Description copied from interface NavigableMap
LinkedList.lastIndexOf(Object)	Returns the index of the last occurrence of the specified element in this list or 1 if this list does not contain the element
ArrayList.listIterator()	Returns a list iterator over the elements in this list in proper sequence
Arrays.hashCode(int[])	Returns a hash code based on the contents of the specified array
MissingFormatWidthException.getMessage()	Description copied from class Throwable
InflaterInputStream.skip(long)	Skips specified number of bytes of uncompressed data
ConcurrentSkipListSet.higher(E)	Description copied from interface NavigableSet
FileHandler.FileHandler(String,int,int)	Initialize a FileHandler to write to a set of files When approximately the given limit has been written to one file another file will be opened The output will cycle through a set of count files
Set.removeAll(Collection)	Removes from this set all of its elements that are contained in the specified collection optional operation If the specified collection is also a set this operation effectively modifies this set so that its value is the asymmetric set difference of the two sets
DeflaterInputStream.DeflaterInputStream(InputStream,Deflater,int)	Creates a new input stream with the specified compressor and buffer size
ScheduledThreadPoolExecutor.ScheduledThreadPoolExecutor(int,ThreadFactory)	Creates a new ScheduledThreadPoolExecutor with the given initial parameters
NavigableMap.navigableKeySet()	Returns a NavigableSet view of the keys contained in this map
Phaser.Phaser(Phaser)	Equivalent to Phaser parent 0
ForkJoinTask.join()	Returns the result of the computation when it is done This method differs from get in that abnormal completion results in RuntimeException or Error not ExecutionException and that interrupts of the calling thread do not cause the method to abruptly return by throwing InterruptedException
Map.Entry.equals(Object)	Compares the specified object with this entry for equality
DataFormatException.DataFormatException()	Constructs a DataFormatException with no detail message
ConcurrentSkipListMap.subMap(K,K)	Description copied from interface NavigableMap
Executors.newSingleThreadExecutor(ThreadFactory)	Creates an Executor that uses a single worker thread operating off an unbounded queue and uses the provided ThreadFactory to create a new thread when needed Unlike the otherwise equivalent newFixedThreadPool 1 threadFactory the returned executor is guaranteed not to be reconfigurable to use additional threads
ZipInputStream.ZipInputStream(InputStream)	Creates a new ZIP input stream
ExecutorCompletionService.take()	Description copied from interface CompletionService
LinkedTransferQueue.peek()	Description copied from interface Queue
DeflaterOutputStream.flush()	Flushes the compressed output stream
PriorityBlockingQueue.add(E)	Inserts the specified element into this priority queue
TreeMap.pollFirstEntry()	Description copied from interface NavigableMap
ArrayDeque.push(E)	Pushes an element onto the stack represented by this deque In other words inserts the element at the front of this deque
Phaser.register()	Adds a new unarrived party to this phaser If an ongoing invocation of onAdvance int int is in progress this method may await its completion before returning If this phaser has a parent and this phaser previously had no registered parties this child phaser is also registered with its parent If this phaser is terminated the attempt to register has no effect and a negative value is returned
WeakHashMap.entrySet()	Returns a Set view of the mappings contained in this map
UUID.version()	The version number associated with this UUID The version number describes how this UUID was generated
Deque.iterator()	Returns an iterator over the elements in this deque in proper sequence
AtomicReferenceFieldUpdater.weakCompareAndSet(T,V,V)	Atomically sets the field of the given object managed by this updater to the given updated value if the current value the expected value This method is guaranteed to be atomic with respect to other calls to compareAndSet and set but not necessarily with respect to other changes in the field
IllegalFormatCodePointException.getMessage()	Description copied from class Throwable
ConcurrentSkipListMap.replace(K,V,V)	Replaces the entry for a key only if currently mapped to a given value
InflaterInputStream.read(byte[],int,int)	Reads uncompressed data into an array of bytes If len is not zero the method will block until some input can be decompressed otherwise no bytes are read and 0 is returned
ConcurrentHashMap.ConcurrentHashMap(Map)	Creates a new map with the same mappings as the given map
LinkedBlockingDeque.size()	Returns the number of elements in this deque
Inflater.setDictionary(byte[],int,int)	Sets the preset dictionary to the given array of bytes Should be called when inflate returns 0 and needsDictionary returns true indicating that a preset dictionary is required The method getAdler can be used to get the Adler 32 value of the dictionary needed
ConcurrentHashMap.clear()	Removes all of the mappings from this map
Lock.newCondition()	Returns a new Condition instance that is bound to this Lock instance
ForkJoinPool.submit(Callable)	Description copied from interface ExecutorService
ExecutorService.isShutdown()	Returns true if this executor has been shut down
AbstractMap.putAll(Map)	Copies all of the mappings from the specified map to this map optional operation The effect of this call is equivalent to that of calling put k v on this map once for each mapping from key k to value v in the specified map The behavior of this operation is undefined if the specified map is modified while the operation is in progress
CountDownLatch.countDown()	Decrements the count of the latch releasing all waiting threads if the count reaches zero
AtomicLong.addAndGet(long)	Atomically adds the given value to the current value
Logger.entering(String,String,Object[])	Log a method entry with an array of parameters
IdentityHashMap.IdentityHashMap(Map)	Constructs a new identity hash map containing the keys value mappings in the specified map
GZIPOutputStream.write(byte[],int,int)	Writes array of bytes to the compressed output stream This method will block until all the bytes are written
Scanner.hasNextBigInteger(int)	Returns true if the next token in this scanner s input can be interpreted as a BigInteger in the specified radix using the nextBigInteger method The scanner does not advance past any input
Timer.cancel()	Terminates this timer discarding any currently scheduled tasks
AbstractSequentialList.iterator()	Returns an iterator over the elements in this list in proper sequence
LinkedBlockingDeque.peek()	Description copied from interface BlockingDeque
Deque.getFirst()	Retrieves but does not remove the first element of this deque
EnumMap.EnumMap(EnumMap)	Creates an enum map with the same key type as the specified enum map initially containing the same mappings if any
Matcher.toString()	Returns the string representation of this matcher The string representation of a Matcher contains information that may be useful for debugging The exact format is unspecified
AtomicReferenceFieldUpdater.newUpdater(Class,Class,String)	Creates and returns an updater for objects with the given field
Attributes.getValue(String)	Returns the value of the specified attribute name specified as a string or null if the attribute was not found The attribute name is case insensitive
UUID.UUID(long,long)	Constructs a new UUID using the specified data mostSigBits is used for the most significant 64 bits of the UUID and leastSigBits becomes the least significant 64 bits of the UUID
Locale.Builder.clear()	Resets the builder to its initial empty state
ConcurrentSkipListMap.get(Object)	Returns the value to which the specified key is mapped or null if this map contains no mapping for the key
ZipInputStream.skip(long)	Skips specified number of bytes in the current ZIP entry
Logger.logp(Level,String,String,String,Object)	Log a message specifying source class and method with a single object parameter to the log message
ForkJoinPool.invokeAll(Collection)	Description copied from interface ExecutorService
ConcurrentLinkedQueue.remove(Object)	Removes a single instance of the specified element from this queue if it is present More formally removes an element e such that o equals e if this queue contains one or more such elements
Adler32.Adler32()	Creates a new Adler32 object
Enumeration.nextElement()	Returns the next element of this enumeration if this enumeration object has at least one more element to provide
Objects.deepEquals(Object,Object)	Returns true if the arguments are deeply equal to each other and false otherwise
BlockingQueue.remove(Object)	Removes a single instance of the specified element from this queue if it is present More formally removes an element e such that o equals e if this queue contains one or more such elements
AtomicIntegerArray.addAndGet(int,int)	Atomically adds the given value to the element at index i
LinkedBlockingDeque.LinkedBlockingDeque()	Creates a LinkedBlockingDeque with a capacity of Integer MAX VALUE
UUID.getMostSignificantBits()	Returns the most significant 64 bits of this UUID s 128 bit value
AtomicLong.get()	Gets the current value
PriorityBlockingQueue.PriorityBlockingQueue()	Creates a PriorityBlockingQueue with the default initial capacity 11 that orders its elements according to their natural ordering
Dictionary.size()	Returns the number of entries distinct keys in this dictionary
LogRecord.getMillis()	Get event time in milliseconds since 1970
LinkedTransferQueue.put(E)	Inserts the specified element at the tail of this queue
AbstractQueuedLongSynchronizer.getExclusiveQueuedThreads()	Returns a collection containing threads that may be waiting to acquire in exclusive mode This has the same properties as getQueuedThreads except that it only returns those threads waiting due to an exclusive acquire
IllegalFormatFlagsException.getFlags()	Returns the set of flags which contains an illegal combination
Manifest.getMainAttributes()	Returns the main Attributes for the Manifest
DeflaterOutputStream.DeflaterOutputStream(OutputStream,boolean)	Creates a new output stream with a default compressor a default buffer size and the specified flush mode
NodeChangeEvent.getParent()	Returns the parent of the node that was added or removed
ThreadPoolExecutor.isTerminated()	Description copied from interface ExecutorService
Locale.Builder.setLanguage(String)	Sets the language If language is the empty string or null the language in this Builder is removed Otherwise the language must be well formed or an exception is thrown
PatternSyntaxException.getPattern()	Retrieves the erroneous regular expression pattern
AbstractQueuedSynchronizer.getExclusiveQueuedThreads()	Returns a collection containing threads that may be waiting to acquire in exclusive mode This has the same properties as getQueuedThreads except that it only returns those threads waiting due to an exclusive acquire
Collections.synchronizedSortedSet(SortedSet)	Returns a synchronized thread safe sorted set backed by the specified sorted set In order to guarantee serial access it is critical that all access to the backing sorted set is accomplished through the returned sorted set or its views
WeakHashMap.clear()	Removes all of the mappings from this map
CancellationException.CancellationException(String)	Constructs a CancellationException with the specified detail message
CopyOnWriteArrayList.clone()	Returns a shallow copy of this list The elements themselves are not copied
AtomicInteger.AtomicInteger()	Creates a new AtomicInteger with initial value 0
Arrays.toString(char[])	Returns a string representation of the contents of the specified array
WeakHashMap.containsKey(Object)	Returns true if this map contains a mapping for the specified key
Date.getYear()	Returns a value that is the result of subtracting 1900 from the year that contains or begins with the instant in time represented by this Date object as interpreted in the local time zone
AbstractPreferences.getByteArray(String,byte[])	Implements the getByteArray method as per the specification in Preferences getByteArray String byte
Arrays.copyOfRange(char[],int,int)	Copies the specified range of the specified array into a new array
Queue.peek()	Retrieves but does not remove the head of this queue or returns null if this queue is empty
Locale.getUnicodeLocaleType(String)	Returns the Unicode locale type associated with the specified Unicode locale key for this locale Returns the empty string for keys that are defined with no type
BlockingQueue.add(E)	Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions returning true upon success and throwing an IllegalStateException if no space is currently available
ArrayDeque.contains(Object)	Returns true if this deque contains the specified element
JarFile.JarFile(String)	Creates a new JarFile to read from the specified file name The JarFile will be verified if it is signed
TreeSet.headSet(E)	Description copied from interface NavigableSet
LinkedList.descendingIterator()	Description copied from interface Deque
ArrayDeque.remove()	Retrieves and removes the head of the queue represented by this deque
Inflater.inflate(byte[])	Uncompresses bytes into specified buffer Returns actual number of bytes uncompressed A return value of 0 indicates that needsInput or needsDictionary should be called in order to determine if more input data or a preset dictionary is required
ArrayList.add(int,E)	Inserts the specified element at the specified position in this list Shifts the element currently at that position if any and any subsequent elements to the right adds one to their indices
LinkedList.removeLastOccurrence(Object)	Removes the last occurrence of the specified element in this list when traversing the list from head to tail If the list does not contain the element it is unchanged
LocaleNameProvider.getDisplayLanguage(String,Locale)	Returns a localized name for the given IETF BCP47 language code and the given locale that is appropriate for display to the user
PatternSyntaxException.PatternSyntaxException(String,String,int)	Constructs a new instance of this class
ConcurrentSkipListMap.ceilingKey(K)	Description copied from interface NavigableMap
Arrays.copyOf(float[],int)	Copies the specified array truncating or padding with zeros if necessary so the copy has the specified length For all indices that are valid in both the original array and the copy the two arrays will contain identical values For any indices that are valid in the copy but not the original the copy will contain 0f
ResourceBundle.Control.getNoFallbackControl(List)	Returns a ResourceBundle Control in which the getFormats method returns the specified formats and the getFallbackLocale method returns null The formats must be equal to one of FORMAT PROPERTIES FORMAT CLASS or FORMAT DEFAULT
Phaser.getRegisteredParties()	Returns the number of parties registered at this phaser
WeakHashMap.WeakHashMap(int,float)	Constructs a new empty WeakHashMap with the given initial capacity and the given load factor
LinkedTransferQueue.offer(E)	Inserts the specified element at the tail of this queue
Collections.checkedCollection(Collection,Class)	Returns a dynamically typesafe view of the specified collection
Collections.reverse(List)	Reverses the order of the elements in the specified list
AtomicInteger.get()	Gets the current value
CopyOnWriteArrayList.removeAll(Collection)	Removes from this list all of its elements that are contained in the specified collection This is a particularly expensive operation in this class because of the need for an internal temporary array
LinkedList.getLast()	Returns the last element in this list
Map.keySet()	Returns a Set view of the keys contained in this map
ConcurrentSkipListMap.put(K,V)	Associates the specified value with the specified key in this map
ZipEntry.toString()	Returns a string representation of the ZIP entry
Calendar.setFirstDayOfWeek(int)	Sets what the first day of the week is e g SUNDAY in the U S MONDAY in France
List.containsAll(Collection)	Returns true if this list contains all of the elements of the specified collection
Dictionary.keys()	Returns an enumeration of the keys in this dictionary The general contract for the keys method is that an Enumeration object is returned that will generate all the keys for which this dictionary contains entries
Stack.empty()	Tests if this stack is empty
AtomicMarkableReference.compareAndSet(V,V,boolean,boolean)	Atomically sets the value of both the reference and mark to the given update values if the current reference is to the expected reference and the current mark is equal to the expected mark
Vector.toArray(T[])	Returns an array containing all of the elements in this Vector in the correct order the runtime type of the returned array is that of the specified array If the Vector fits in the specified array it is returned therein Otherwise a new array is allocated with the runtime type of the specified array and the size of this Vector
Semaphore.hasQueuedThreads()	Queries whether any threads are waiting to acquire Note that because cancellations may occur at any time a true return does not guarantee that any other thread will ever acquire This method is designed primarily for use in monitoring of the system state
Arrays.fill(boolean[],int,int,boolean)	Assigns the specified boolean value to each element of the specified range of the specified array of booleans The range to be filled extends from index fromIndex inclusive to index toIndex exclusive If fromIndex toIndex the range to be filled is empty
SortedMap.tailMap(K)	Returns a view of the portion of this map whose keys are greater than or equal to fromKey The returned map is backed by this map so changes in the returned map are reflected in this map and vice versa The returned map supports all optional map operations that this map supports
Semaphore.acquire(int)	Acquires the given number of permits from this semaphore blocking until all are available or the thread is interrupted
Calendar.add(int,int)	Adds or subtracts the specified amount of time to the given calendar field based on the calendar s rules For example to subtract 5 days from the current time of the calendar you can achieve it by calling add Calendar DAY OF MONTH 5
TreeMap.clear()	Removes all of the mappings from this map
LinkedList.poll()	Retrieves and removes the head first element of this list
ReentrantReadWriteLock.WriteLock.toString()	Returns a string identifying this lock as well as its lock state The state in brackets includes either the String Unlocked or the String Locked by followed by the name of the owning thread
TreeSet.higher(E)	Description copied from interface NavigableSet
AtomicLong.toString()	Returns the String representation of the current value
Matcher.replaceFirst(String)	Replaces the first subsequence of the input sequence that matches the pattern with the given replacement string
Scanner.hasNextBoolean()	Returns true if the next token in this scanner s input can be interpreted as a boolean value using a case insensitive pattern created from the string true false The scanner does not advance past the input that matched
ZipEntry.getSize()	Returns the uncompressed size of the entry data or 1 if not known
ZipEntry.getTime()	Returns the modification time of the entry or 1 if not specified
EnumMap.EnumMap(Class)	Creates an empty enum map with the specified key type
Formatter.Formatter(Locale)	Constructs a new formatter with the specified locale
Deque.removeLastOccurrence(Object)	Removes the last occurrence of the specified element from this deque
CountDownLatch.CountDownLatch(int)	Constructs a CountDownLatch initialized with the given count
AbstractPreferences.putByteArray(String,byte[])	Implements the putByteArray method as per the specification in Preferences putByteArray String byte
DeflaterInputStream.reset()	This operation is not supported
Locale.Builder.removeUnicodeLocaleAttribute(String)	Removes a unicode locale attribute if present otherwise has no effect The attribute must not be null and must be well formed or an exception is thrown
LinkedBlockingDeque.offerLast(E)	Description copied from interface BlockingDeque
Adler32.reset()	Resets the checksum to initial value
TreeMap.floorKey(K)	Description copied from interface NavigableMap
Executors.newSingleThreadScheduledExecutor()	Creates a single threaded executor that can schedule commands to run after a given delay or to execute periodically
LinkedList.contains(Object)	Returns true if this list contains the specified element
TreeMap.headMap(K)	Description copied from interface NavigableMap
Vector.addAll(Collection)	Appends all of the elements in the specified Collection to the end of this Vector in the order that they are returned by the specified Collection s Iterator The behavior of this operation is undefined if the specified Collection is modified while the operation is in progress
Date.setTime(long)	Sets this Date object to represent a point in time that is time milliseconds after January 1 1970 00 00 00 GMT
Arrays.hashCode(boolean[])	Returns a hash code based on the contents of the specified array
ZipEntry.ZipEntry(ZipEntry)	Creates a new zip entry with fields taken from the specified zip entry
ReentrantReadWriteLock.WriteLock.lock()	Acquires the write lock
LinkedBlockingDeque.pollFirst(long,TimeUnit)	Description copied from interface BlockingDeque
CyclicBarrier.CyclicBarrier(int,Runnable)	Creates a new CyclicBarrier that will trip when the given number of parties threads are waiting upon it and which will execute the given barrier action when the barrier is tripped performed by the last thread entering the barrier
AtomicLongArray.addAndGet(int,long)	Atomically adds the given value to the element at index i
ConcurrentSkipListSet.remove(Object)	Removes the specified element from this set if it is present
FutureTask.FutureTask(Runnable,V)	Creates a FutureTask that will upon running execute the given Runnable and arrange that get will return the given result on successful completion
Executors.newSingleThreadExecutor()	Creates an Executor that uses a single worker thread operating off an unbounded queue Note however that if this single thread terminates due to a failure during execution prior to shutdown a new one will take its place if needed to execute subsequent tasks Tasks are guaranteed to execute sequentially and no more than one task will be active at any given time Unlike the otherwise equivalent newFixedThreadPool 1 the returned executor is guaranteed not to be reconfigurable to use additional threads
Arrays.equals(boolean[],boolean[])	Returns true if the two specified arrays of booleans are equal to one another Two arrays are considered equal if both arrays contain the same number of elements and all corresponding pairs of elements in the two arrays are equal In other words two arrays are equal if they contain the same elements in the same order Also two array references are considered equal if both are null
Phaser.getRoot()	Returns the root ancestor of this phaser which is the same as this phaser if it has no parent
BitSet.and(BitSet)	Performs a logical AND of this target bit set with the argument bit set This bit set is modified so that each bit in it has the value true if and only if it both initially had the value true and the corresponding bit in the bit set argument also had the value true
Formatter.ioException()	Returns the IOException last thrown by this formatter s Appendable
DelayQueue.poll()	Retrieves and removes the head of this queue or returns null if this queue has no elements with an expired delay
AtomicReference.get()	Gets the current value
CopyOnWriteArraySet.removeAll(Collection)	Removes from this set all of its elements that are contained in the specified collection If the specified collection is also a set this operation effectively modifies this set so that its value is the asymmetric set difference of the two sets
AtomicIntegerFieldUpdater.getAndDecrement(T)	Atomically decrements by one the current value of the field of the given object managed by this updater
Arrays.binarySearch(byte[],byte)	Searches the specified array of bytes for the specified value using the binary search algorithm The array must be sorted as by the sort byte method prior to making this call If it is not sorted the results are undefined If the array contains multiple elements with the specified value there is no guarantee which one will be found
LinkedBlockingDeque.toArray(T[])	Returns an array containing all of the elements in this deque in proper sequence the runtime type of the returned array is that of the specified array If the deque fits in the specified array it is returned therein Otherwise a new array is allocated with the runtime type of the specified array and the size of this deque
SynchronousQueue.SynchronousQueue()	Creates a SynchronousQueue with nonfair access policy
AbstractList.hashCode()	Returns the hash code value for this list
LinkedBlockingDeque.element()	Retrieves but does not remove the head of the queue represented by this deque This method differs from peek only in that it throws an exception if this deque is empty
ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue,ThreadFactory,RejectedExecutionHandler)	Creates a new ThreadPoolExecutor with the given initial parameters
ExecutorCompletionService.ExecutorCompletionService(Executor,BlockingQueue)	Creates an ExecutorCompletionService using the supplied executor for base task execution and the supplied queue as its completion queue
Phaser.toString()	Returns a string identifying this phaser as well as its state The state in brackets includes the String phase followed by the phase number parties followed by the number of registered parties and arrived followed by the number of arrived parties
Collections.copy(List,List)	Copies all of the elements from one list into another After the operation the index of each copied element in the destination list will be identical to its index in the source list The destination list must be at least as long as the source list If it is longer the remaining elements in the destination list are unaffected This method runs in linear time
GregorianCalendar.GregorianCalendar(TimeZone,Locale)	Constructs a GregorianCalendar based on the current time in the given time zone with the given locale
Scanner.skip(Pattern)	Skips input that matches the specified pattern ignoring delimiters
TreeMap.remove(Object)	Removes the mapping for this key from this TreeMap if present
CopyOnWriteArrayList.get(int)	Returns the element at the specified position in this list
CopyOnWriteArraySet.size()	Returns the number of elements in this set
ZipEntry.getName()	Returns the name of the entry
Locale.Builder.addUnicodeLocaleAttribute(String)	Adds a unicode locale attribute if not already present otherwise has no effect The attribute must not be null and must be well formed or an exception is thrown
Formatter.Formatter(File)	Constructs a new formatter with the specified file
Arrays.sort(double[],int,int)	Sorts the specified range of the array into ascending order The range to be sorted extends from the index fromIndex inclusive to the index toIndex exclusive If fromIndex toIndex the range to be sorted is empty
Manifest.Manifest(Manifest)	Constructs a new Manifest that is a copy of the specified Manifest
AbstractCollection.removeAll(Collection)	Removes all of this collection s elements that are also contained in the specified collection optional operation After this call returns this collection will contain no elements in common with the specified collection
Deflater.getAdler()	Returns the ADLER 32 value of the uncompressed data
LinkedBlockingDeque.poll(long,TimeUnit)	Description copied from interface BlockingDeque
Formatter.close()	Closes this formatter If the destination implements the Closeable interface its close method will be invoked
AbstractQueue.remove()	Retrieves and removes the head of this queue This method differs from poll only in that it throws an exception if this queue is empty
ThreadPoolExecutor.purge()	Tries to remove from the work queue all Future tasks that have been cancelled This method can be useful as a storage reclamation operation that has no other impact on functionality Cancelled tasks are never executed but may accumulate in work queues until worker threads can actively remove them Invoking this method instead tries to remove them now
ConcurrentSkipListSet.contains(Object)	Returns true if this set contains the specified element
Hashtable.clone()	Creates a shallow copy of this hashtable All the structure of the hashtable itself is copied but the keys and values are not cloned
WeakHashMap.get(Object)	Returns the value to which the specified key is mapped or null if this map contains no mapping for the key
Collections.indexOfSubList(List,List)	Returns the starting position of the first occurrence of the specified target list within the specified source list or 1 if there is no such occurrence More formally returns the lowest index i such that source subList i i target size equals target or 1 if there is no such index Returns 1 if target size source size This implementation uses the brute force technique of scanning over the source list looking for a match with the target at each location in turn
Vector.removeAll(Collection)	Removes from this Vector all of its elements that are contained in the specified Collection
Collections.synchronizedSet(Set)	Returns a synchronized thread safe set backed by the specified set In order to guarantee serial access it is critical that all access to the backing set is accomplished through the returned set
Arrays.binarySearch(short[],int,int,short)	Searches a range of the specified array of shorts for the specified value using the binary search algorithm
CopyOnWriteArraySet.CopyOnWriteArraySet(Collection)	Creates a set containing all of the elements of the specified collection
Observable.addObserver(Observer)	Adds an observer to the set of observers for this object provided that it is not the same as some observer already in the set
ConcurrentSkipListMap.firstKey()	Description copied from interface SortedMap
Scanner.hasNextDouble()	Returns true if the next token in this scanner s input can be interpreted as a double value using the nextDouble method The scanner does not advance past any input
Logger.logp(Level,String,String,String,Throwable)	Log a message specifying source class and method with associated Throwable information
TreeSet.subSet(E,E)	Description copied from interface NavigableSet
AtomicLongFieldUpdater.compareAndSet(T,long,long)	Atomically sets the field of the given object managed by this updater to the given updated value if the current value the expected value This method is guaranteed to be atomic with respect to other calls to compareAndSet and set but not necessarily with respect to other changes in the field
Formatter.Formatter(Appendable)	Constructs a new formatter with the specified destination
Date.toString()	Converts this Date object to a String of the form dow mon dd hh mm ss zzz yyyy where dow is the day of the week Sun Mon Tue Wed Thu Fri Sat
AtomicStampedReference.compareAndSet(V,V,int,int)	Atomically sets the value of both the reference and stamp to the given update values if the current reference is to the expected reference and the current stamp is equal to the expected stamp
List.subList(int,int)	Returns a view of the portion of this list between the specified fromIndex inclusive and toIndex exclusive If fromIndex and toIndex are equal the returned list is empty The returned list is backed by this list so non structural changes in the returned list are reflected in this list and vice versa
CyclicBarrier.await()	Waits until all parties have invoked await on this barrier
StreamHandler.StreamHandler(OutputStream,Formatter)	Create a StreamHandler with a given Formatter and output stream
AbstractQueuedLongSynchronizer.ConditionObject.AbstractQueuedLongSynchronizer.ConditionObject()	Creates a new ConditionObject instance
GregorianCalendar.GregorianCalendar(TimeZone)	Constructs a GregorianCalendar based on the current time in the given time zone with the default locale
MissingFormatArgumentException.getFormatSpecifier()	Returns the unmatched format specifier
LinkedBlockingQueue.toArray()	Returns an array containing all of the elements in this queue in proper sequence
ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)	Sets the policy governing whether core threads may time out and terminate if no tasks arrive within the keep alive time being replaced if needed when new tasks arrive When false core threads are never terminated due to lack of incoming tasks When true the same keep alive policy applying to non core threads applies also to core threads To avoid continual thread replacement the keep alive time must be greater than zero when setting true This method should in general be called before the pool is actively used
Arrays.toString(Object[])	Returns a string representation of the contents of the specified array
BrokenBarrierException.BrokenBarrierException(String)	Constructs a BrokenBarrierException with the specified detail message
Preferences.removeNode()	Removes this preference node and all of its descendants invalidating any preferences contained in the removed nodes Once a node has been removed attempting any method other than name absolutePath isUserNode flush or nodeExists on the corresponding Preferences instance will fail with an IllegalStateException The methods defined on Object can still be invoked on a node after it has been removed they will not throw IllegalStateException The removal is not guaranteed to be persistent until the flush method is called on this node or an ancestor
ArrayBlockingQueue.size()	Returns the number of elements in this queue
Arrays.toString(float[])	Returns a string representation of the contents of the specified array
IdentityHashMap.size()	Returns the number of key value mappings in this identity hash map
Calendar.hashCode()	Returns a hash code for this calendar
ForkJoinTask.getPool()	Returns the pool hosting the current task execution or null if this task is executing outside of any ForkJoinPool
Calendar.getDisplayNames(int,int,Locale)	Returns a Map containing all names of the calendar field in the given style and locale and their corresponding field values For example if this Calendar is a GregorianCalendar the returned map would contain Jan to JANUARY Feb to FEBRUARY and so on in the short style in an English locale
Formatter.Formatter(String,String)	Constructs a new formatter with the specified file name and charset
BlockingDeque.removeFirstOccurrence(Object)	Removes the first occurrence of the specified element from this deque
Arrays.toString(long[])	Returns a string representation of the contents of the specified array
ThreadPoolExecutor.toString()	Returns a string identifying this pool as well as its state including indications of run state and estimated worker and task counts
AtomicBoolean.lazySet(boolean)	Eventually sets to the given value
Date.getSeconds()	Returns the number of seconds past the minute represented by this date
EnumMap.values()	Returns a Collection view of the values contained in this map
Vector.Vector(int)	Constructs an empty vector with the specified initial capacity and with its capacity increment equal to zero
TimeoutException.TimeoutException()	Constructs a TimeoutException with no specified detail message
RejectedExecutionException.RejectedExecutionException()	Constructs a RejectedExecutionException with no detail message
Preferences.putLong(String,long)	Associates a string representing the specified long value with the specified key in this preference node The associated string is the one that would be returned if the long value were passed to Long toString long This method is intended for use in conjunction with getLong java lang String long
TreeMap.clone()	Returns a shallow copy of this TreeMap instance The keys and values themselves are not cloned
ConcurrentNavigableMap.tailMap(K,boolean)	Description copied from interface NavigableMap
ScheduledThreadPoolExecutor.getQueue()	Returns the task queue used by this executor Each element of this queue is a ScheduledFuture including those tasks submitted using execute which are for scheduling purposes used as the basis of a zero delay ScheduledFuture Iteration over this queue is not guaranteed to traverse tasks in the order in which they will execute
Preferences.systemNodeForPackage(Class)	Returns the preference node from the system preference tree that is associated by convention with the specified class s package The convention is as follows the absolute path name of the node is the fully qualified package name preceded by a slash and with each period replaced by a slash For example the absolute path name of the node associated with the class com acme widget Foo is com acme widget
BitSet.clear()	Sets all of the bits in this BitSet to false
Phaser.getParent()	Returns the parent of this phaser or null if none
LinkedBlockingQueue.LinkedBlockingQueue(Collection)	Creates a LinkedBlockingQueue with a capacity of Integer MAX VALUE initially containing the elements of the given collection added in traversal order of the collection s iterator
ConcurrentLinkedDeque.peek()	Description copied from interface Deque
Condition.await(long,TimeUnit)	Causes the current thread to wait until it is signalled or interrupted or the specified waiting time elapses This method is behaviorally equivalent to awaitNanos unit toNanos time 0
MatchResult.end()	Returns the offset after the last character matched
InvalidPropertiesFormatException.InvalidPropertiesFormatException(String)	Constructs an InvalidPropertiesFormatException with the specified detail message
Level.equals(Object)	Compare two objects for value equality
Vector.listIterator(int)	Returns a list iterator over the elements in this list in proper sequence starting at the specified position in the list
LinkedBlockingDeque.peekLast()	Description copied from interface Deque
ConcurrentHashMap.replace(K,V)	Replaces the entry for a key only if currently mapped to some value
AtomicIntegerFieldUpdater.lazySet(T,int)	Eventually sets the field of the given object managed by this updater to the given updated value
ArrayDeque.descendingIterator()	Description copied from interface Deque
Arrays.fill(int[],int,int,int)	Assigns the specified int value to each element of the specified range of the specified array of ints The range to be filled extends from index fromIndex inclusive to index toIndex exclusive If fromIndex toIndex the range to be filled is empty
ArrayDeque.toArray(T[])	Returns an array containing all of the elements in this deque in proper sequence from first to last element the runtime type of the returned array is that of the specified array If the deque fits in the specified array it is returned therein Otherwise a new array is allocated with the runtime type of the specified array and the size of this deque
Pack200.Packer.pack(JarFile,OutputStream)	Takes a JarFile and converts it into a Pack200 archive
ReentrantReadWriteLock.ReadLock.lock()	Acquires the read lock
Hashtable.entrySet()	Returns a Set view of the mappings contained in this map
Arrays.copyOfRange(boolean[],int,int)	Copies the specified range of the specified array into a new array
ReentrantReadWriteLock.ReadLock.lockInterruptibly()	Acquires the read lock unless the current thread is interrupted
LockSupport.parkNanos(Object,long)	Disables the current thread for thread scheduling purposes for up to the specified waiting time unless the permit is available
CyclicBarrier.getNumberWaiting()	Returns the number of parties currently waiting at the barrier
AbstractExecutorService.submit(Runnable,T)	Description copied from interface ExecutorService
BlockingDeque.offer(E)	Inserts the specified element into the queue represented by this deque in other words at the tail of this deque if it is possible to do so immediately without violating capacity restrictions returning true upon success and false if no space is currently available When using a capacity restricted deque this method is generally preferable to the add E method which can fail to insert an element only by throwing an exception
LogRecord.setSequenceNumber(long)	Set the sequence number
Locale.getAvailableLocales()	Returns an array of all installed locales
Map.Entry.hashCode()	Returns the hash code value for this map entry The hash code of a map entry e is defined to be e getKey null 0 e getKey hashCode e getValue null 0 e getValue hashCode This ensures that e1 equals e2 implies that e1 hashCode e2 hashCode for any two Entries e1 and e2 as required by the general contract of Object hashCode
BrokenBarrierException.BrokenBarrierException()	Constructs a BrokenBarrierException with no specified detail message
FileHandler.publish(LogRecord)	Format and publish a LogRecord
InvalidPreferencesFormatException.InvalidPreferencesFormatException(Throwable)	Constructs an InvalidPreferencesFormatException with the specified cause
AbstractPreferences.getLong(String,long)	Implements the getLong method as per the specification in Preferences getLong String long
LinkedBlockingDeque.removeFirst()	Description copied from interface Deque
Logger.setLevel(Level)	Set the log level specifying which message levels will be logged by this logger Message levels lower than this value will be discarded The level value Level OFF can be used to turn off logging
Scanner.hasNextInt()	Returns true if the next token in this scanner s input can be interpreted as an int value in the default radix using the nextInt method The scanner does not advance past any input
TreeSet.clear()	Removes all of the elements from this set
TimeZone.getAvailableIDs()	Gets all the available IDs supported
Inflater.end()	Closes the decompressor and discards any unprocessed input
Random.nextLong()	Returns the next pseudorandom uniformly distributed long value from this random number generator s sequence The general contract of nextLong is that one long value is pseudorandomly generated and returned
TreeSet.lower(E)	Description copied from interface NavigableSet
TreeSet.tailSet(E,boolean)	Description copied from interface NavigableSet
Condition.awaitUninterruptibly()	Causes the current thread to wait until it is signalled
InflaterInputStream.InflaterInputStream(InputStream)	Creates a new input stream with a default decompressor and buffer size
Random.Random(long)	Creates a new random number generator using a single long seed
GregorianCalendar.isLeapYear(int)	Determines if the given year is a leap year Returns true if the given year is a leap year To specify BC year numbers 1 year number must be given For example year BC 4 is specified as 3
Formatter.Formatter(OutputStream)	Constructs a new formatter with the specified output stream
AtomicInteger.getAndDecrement()	Atomically decrements by one the current value
Preferences.getBoolean(String,boolean)	Returns the boolean value represented by the string associated with the specified key in this preference node Valid strings are true which represents true and false which represents false Case is ignored so for example TRUE and False are also valid This method is intended for use in conjunction with putBoolean java lang String boolean
ThreadPoolExecutor.shutdownNow()	Attempts to stop all actively executing tasks halts the processing of waiting tasks and returns a list of the tasks that were awaiting execution These tasks are drained removed from the task queue upon return from this method
Collections.emptyList()	Returns the empty list immutable This list is serializable
AbstractQueuedLongSynchronizer.ConditionObject.await()	Implements interruptible condition wait
Matcher.useTransparentBounds(boolean)	Sets the transparency of region bounds for this matcher
ConcurrentLinkedQueue.poll()	Description copied from interface Queue
PropertyResourceBundle.getKeys()	Returns an Enumeration of the keys contained in this ResourceBundle and its parent bundles
Attributes.containsValue(Object)	Returns true if this Map maps one or more attribute names keys to the specified value
StreamHandler.isLoggable(LogRecord)	Check if this Handler would actually log a given LogRecord
RecursiveAction.getRawResult()	Always returns null
ForkJoinTask.isDone()	Description copied from interface Future
NavigableMap.floorEntry(K)	Returns a key value mapping associated with the greatest key less than or equal to the given key or null if there is no such key
ArrayDeque.removeFirst()	Description copied from interface Deque
Stack.search(Object)	Returns the 1 based position where an object is on this stack
Arrays.copyOfRange(short[],int,int)	Copies the specified range of the specified array into a new array
SortedMap.headMap(K)	Returns a view of the portion of this map whose keys are strictly less than toKey The returned map is backed by this map so changes in the returned map are reflected in this map and vice versa The returned map supports all optional map operations that this map supports
ArrayList.clone()	Returns a shallow copy of this ArrayList instance The elements themselves are not copied
LinkedList.addAll(int,Collection)	Inserts all of the elements in the specified collection into this list starting at the specified position Shifts the element currently at that position if any and any subsequent elements to the right increases their indices The new elements will appear in the list in the order that they are returned by the specified collection s iterator
Semaphore.release(int)	Releases the given number of permits returning them to the semaphore
Iterator.hasNext()	Returns true if the iteration has more elements
Attributes.get(Object)	Returns the value of the specified attribute name or null if the attribute name was not found
UUID.randomUUID()	Static factory to retrieve a type 4 pseudo randomly generated UUID
WeakHashMap.WeakHashMap()	Constructs a new empty WeakHashMap with the default initial capacity 16 and load factor 0 75
Logger.config(String)	Log a CONFIG message
Vector.size()	Returns the number of components in this vector
Executors.privilegedCallable(Callable)	Returns a Callable object that will when called execute the given callable under the current access control context This method should normally be invoked within an AccessController doPrivileged java security PrivilegedAction T action to create callables that will if possible execute under the selected permission settings holding within that action or if not possible throw an associated AccessControlException
AtomicInteger.set(int)	Sets to the given value
ResourceBundle.Control.getTimeToLive(String,Locale)	Returns the time to live TTL value for resource bundles that are loaded under this ResourceBundle Control Positive time to live values specify the number of milliseconds a bundle can remain in the cache without being validated against the source data from which it was constructed The value 0 indicates that a bundle must be validated each time it is retrieved from the cache TTL DONT CACHE specifies that loaded resource bundles are not put in the cache TTL NO EXPIRATION CONTROL specifies that loaded resource bundles are put in the cache with no expiration control
Deflater.setInput(byte[],int,int)	Sets input data for compression This should be called whenever needsInput returns true indicating that more input data is required
Scanner.next()	Finds and returns the next complete token from this scanner
ResourceBundle.getString(String)	Gets a string for the given key from this resource bundle or one of its parents
CopyOnWriteArrayList.addAll(Collection)	Appends all of the elements in the specified collection to the end of this list in the order that they are returned by the specified collection s iterator
Preferences.putBoolean(String,boolean)	Associates a string representing the specified boolean value with the specified key in this preference node The associated string is true if the value is true and false if it is false This method is intended for use in conjunction with getBoolean java lang String boolean
ForkJoinTask.reinitialize()	Resets the internal bookkeeping state of this task allowing a subsequent fork This method allows repeated reuse of this task but only if reuse occurs when this task has either never been forked or has been forked then completed and all outstanding joins of this task have also completed Effects under any other usage conditions are not guaranteed
AbstractQueuedLongSynchronizer.getSharedQueuedThreads()	Returns a collection containing threads that may be waiting to acquire in shared mode This has the same properties as getQueuedThreads except that it only returns those threads waiting due to a shared acquire
IdentityHashMap.put(K,V)	Associates the specified value with the specified key in this identity hash map If the map previously contained a mapping for the key the old value is replaced
BitSet.previousClearBit(int)	Returns the index of the nearest bit that is set to false that occurs on or before the specified starting index
ConcurrentSkipListMap.size()	Returns the number of key value mappings in this map If this map contains more than Integer MAX VALUE elements it returns Integer MAX VALUE
Checksum.getValue()	Returns the current checksum value
LinkedBlockingQueue.size()	Returns the number of elements in this queue
IllegalFormatFlagsException.IllegalFormatFlagsException(String)	Constructs an instance of this class with the specified flags
Attributes.Attributes(int)	Constructs a new empty Attributes object with the specified initial size
ArrayDeque.add(E)	Inserts the specified element at the end of this deque
ExecutorService.submit(Runnable)	Submits a Runnable task for execution and returns a Future representing that task The Future s get method will return null upon successful completion
NavigableMap.subMap(K,boolean,K,boolean)	Returns a view of the portion of this map whose keys range from fromKey to toKey If fromKey and toKey are equal the returned map is empty unless fromInclusive and toInclusive are both true The returned map is backed by this map so changes in the returned map are reflected in this map and vice versa The returned map supports all optional map operations that this map supports
Arrays.fill(double[],int,int,double)	Assigns the specified double value to each element of the specified range of the specified array of doubles The range to be filled extends from index fromIndex inclusive to index toIndex exclusive If fromIndex toIndex the range to be filled is empty
LinkedBlockingQueue.offer(E)	Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue s capacity returning true upon success and false if this queue is full
AbstractPreferences.putBoolean(String,boolean)	Implements the putBoolean method as per the specification in Preferences putBoolean String boolean
AbstractExecutorService.invokeAll(Collection,long,TimeUnit)	Description copied from interface ExecutorService
ConcurrentSkipListSet.ConcurrentSkipListSet(SortedSet)	Constructs a new set containing the same elements and using the same ordering as the specified sorted set
Calendar.before(Object)	Returns whether this Calendar represents a time before the time represented by the specified Object This method is equivalent to compareTo when 0 if and only if when is a Calendar instance Otherwise the method returns false
LinkedHashMap.LinkedHashMap(int,float)	Constructs an empty insertion ordered LinkedHashMap instance with the specified initial capacity and load factor
ThreadPoolExecutor.setCorePoolSize(int)	Sets the core number of threads This overrides any value set in the constructor If the new value is smaller than the current value excess existing threads will be terminated when they next become idle If larger new threads will if needed be started to execute any queued tasks
AbstractPreferences.addPreferenceChangeListener(PreferenceChangeListener)	Description copied from class Preferences
Preferences.remove(String)	Removes the value associated with the specified key in this preference node if any
ConcurrentLinkedDeque.getLast()	Description copied from interface Deque
AbstractCollection.retainAll(Collection)	Retains only the elements in this collection that are contained in the specified collection optional operation In other words removes from this collection all of its elements that are not contained in the specified collection
Scanner.findInLine(String)	Attempts to find the next occurrence of a pattern constructed from the specified string ignoring delimiters
AtomicIntegerArray.incrementAndGet(int)	Atomically increments by one the element at index i
ReentrantReadWriteLock.ReadLock.newCondition()	Throws UnsupportedOperationException because ReadLocks do not support conditions
Observable.notifyObservers(Object)	If this object has changed as indicated by the hasChanged method then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed
TreeMap.subMap(K,K)	Description copied from interface NavigableMap
ConcurrentSkipListSet.isEmpty()	Returns true if this set contains no elements
Checksum.reset()	Resets the checksum to its initial value
AtomicInteger.AtomicInteger(int)	Creates a new AtomicInteger with the given initial value
CRC32.update(byte[])	Updates the CRC 32 checksum with the specified array of bytes
HashSet.isEmpty()	Returns true if this set contains no elements
ConcurrentHashMap.values()	Returns a Collection view of the values contained in this map
ScheduledExecutorService.schedule(Runnable,long,TimeUnit)	Creates and executes a one shot action that becomes enabled after the given delay
ConcurrentLinkedDeque.descendingIterator()	Returns an iterator over the elements in this deque in reverse sequential order The elements will be returned in order from last tail to first head
DuplicateFormatFlagsException.getMessage()	Description copied from class Throwable
LogRecord.LogRecord(Level,String)	Construct a LogRecord with the given level and message values
LocaleServiceProvider.getAvailableLocales()	Returns an array of all locales for which this locale service provider can provide localized objects or names
ZipFile.ZipFile(File,int,Charset)	Opens a new ZipFile to read from the specified File object in the specified mode The mode argument must be either OPEN READ or OPEN READ OPEN DELETE
AbstractMap.containsValue(Object)	Returns true if this map maps one or more keys to the specified value More formally returns true if and only if this map contains at least one mapping to a value v such that value null v null value equals v This operation will probably require time linear in the map size for most implementations of the Map interface
ConcurrentHashMap.remove(Object)	Removes the key and its corresponding value from this map
ReentrantReadWriteLock.getWriteHoldCount()	Queries the number of reentrant write holds on this lock by the current thread A writer thread has a hold on a lock for each lock action that is not matched by an unlock action
LinkedList.offer(E)	Adds the specified element as the tail last element of this list
AbstractSequentialList.addAll(int,Collection)	Inserts all of the elements in the specified collection into this list at the specified position optional operation Shifts the element currently at that position if any and any subsequent elements to the right increases their indices The new elements will appear in this list in the order that they are returned by the specified collection s iterator The behavior of this operation is undefined if the specified collection is modified while the operation is in progress Note that this will occur if the specified collection is this list and it s nonempty This implementation gets an iterator over the specified collection and a list iterator over this list pointing to the indexed element with listIterator index Then it iterates over the specified collection inserting the elements obtained from the iterator into this list one at a time using ListIterator add followed by ListIterator next to skip over the added element
ConcurrentSkipListMap.containsValue(Object)	Returns true if this map maps one or more keys to the specified value This operation requires time linear in the map size Additionally it is possible for the map to change during execution of this method in which case the returned result may be inaccurate
LinkedList.get(int)	Returns the element at the specified position in this list
Collections.nCopies(int,T)	Returns an immutable list consisting of n copies of the specified object The newly allocated data object is tiny it contains a single reference to the data object This method is useful in combination with the List addAll method to grow lists
PriorityBlockingQueue.remove(Object)	Removes a single instance of the specified element from this queue if it is present More formally removes an element e such that o equals e if this queue contains one or more such elements Returns true if and only if this queue contained the specified element or equivalently if this queue changed as a result of the call
Collections.max(Collection)	Returns the maximum element of the given collection according to the natural ordering of its elements All elements in the collection must implement the Comparable interface
ConcurrentSkipListSet.pollLast()	Description copied from interface NavigableSet
Logger.getFilter()	Get the current filter for this Logger
ArrayDeque.offerFirst(E)	Inserts the specified element at the front of this deque
AbstractQueuedLongSynchronizer.getQueuedThreads()	Returns a collection containing threads that may be waiting to acquire Because the actual set of threads may change dynamically while constructing this result the returned collection is only a best effort estimate The elements of the returned collection are in no particular order This method is designed to facilitate construction of subclasses that provide more extensive monitoring facilities
AbstractMap.get(Object)	Returns the value to which the specified key is mapped or null if this map contains no mapping for the key
AtomicLongArray.decrementAndGet(int)	Atomically decrements by one the element at index i
ThreadPoolExecutor.prestartCoreThread()	Starts a core thread causing it to idly wait for work This overrides the default policy of starting core threads only when new tasks are executed This method will return false if all core threads have already been started
DeflaterInputStream.skip(long)	Skips over and discards data from the input stream
Manifest.write(OutputStream)	Writes the Manifest to the specified OutputStream
Phaser.arriveAndAwaitAdvance()	Arrives at this phaser and awaits others Equivalent in effect to awaitAdvance arrive If you need to await with interruption or timeout you can arrange this with an analogous construction using one of the other forms of the awaitAdvance method If instead you need to deregister upon arrival use awaitAdvance arriveAndDeregister
TreeSet.clone()	Returns a shallow copy of this TreeSet instance The elements themselves are not cloned
List.clear()	Removes all of the elements from this list optional operation
Deque.peekFirst()	Retrieves but does not remove the first element of this deque or returns null if this deque is empty
ThreadPoolExecutor.setThreadFactory(ThreadFactory)	Sets the thread factory used to create new threads
Matcher.appendReplacement(StringBuffer,String)	Implements a non terminal append and replace step
NavigableMap.descendingKeySet()	Returns a reverse order NavigableSet view of the keys contained in this map
BitSet.set(int,int,boolean)	Sets the bits from the specified fromIndex inclusive to the specified toIndex exclusive to the specified value
ResourceBundle.getBundle(String,Locale,ClassLoader)	Gets a resource bundle using the specified base name locale and class loader
ReentrantLock.unlock()	Attempts to release this lock
CopyOnWriteArrayList.toArray(T[])	Returns an array containing all of the elements in this list in proper sequence from first to last element the runtime type of the returned array is that of the specified array If the list fits in the specified array it is returned therein Otherwise a new array is allocated with the runtime type of the specified array and the size of this list
InflaterInputStream.InflaterInputStream(InputStream,Inflater,int)	Creates a new input stream with the specified decompressor and buffer size
UUID.toString()	Returns a String object representing this UUID
AbstractQueuedLongSynchronizer.tryAcquireSharedNanos(long,long)	Attempts to acquire in shared mode aborting if interrupted and failing if the given timeout elapses Implemented by first checking interrupt status then invoking at least once tryAcquireShared long returning on success Otherwise the thread is queued possibly repeatedly blocking and unblocking invoking tryAcquireShared long until success or the thread is interrupted or the timeout elapses
AtomicReferenceArray.set(int,E)	Sets the element at position i to the given value
ArrayDeque.clear()	Removes all of the elements from this deque
BitSet.get(int,int)	Returns a new BitSet composed of bits from this BitSet from fromIndex inclusive to toIndex exclusive
Collection.clear()	Removes all of the elements from this collection optional operation
Collections.min(Collection)	Returns the minimum element of the given collection according to the natural ordering of its elements All elements in the collection must implement the Comparable interface
AbstractList.listIterator()	Returns a list iterator over the elements in this list in proper sequence
Arrays.equals(short[],short[])	Returns true if the two specified arrays of shorts are equal to one another Two arrays are considered equal if both arrays contain the same number of elements and all corresponding pairs of elements in the two arrays are equal In other words two arrays are equal if they contain the same elements in the same order Also two array references are considered equal if both are null
ArrayList.trimToSize()	Trims the capacity of this ArrayList instance to be the list s current size An application can use this operation to minimize the storage of an ArrayList instance
ConcurrentHashMap.replace(K,V,V)	Replaces the entry for a key only if currently mapped to a given value
SimpleTimeZone.setEndRule(int,int,int)	Sets the daylight saving time end rule to a fixed date within a month
Collections.emptyListIterator()	Returns a list iterator that has no elements More precisely hasNext and hasPrevious always return false
CompletionService.submit(Runnable,V)	Submits a Runnable task for execution and returns a Future representing that task Upon completion this task may be taken or polled
AbstractMap.values()	Returns a Collection view of the values contained in this map
ResourceBundle.getBundle(String,Control)	Returns a resource bundle using the specified base name the default locale and the specified control Calling this method is equivalent to calling getBundle baseName Locale getDefault this getClass getClassLoader control except that getClassLoader is run with the security privileges of ResourceBundle See getBundle for the complete description of the resource bundle loading process with a ResourceBundle Control
ConcurrentLinkedQueue.peek()	Description copied from interface Queue
GZIPInputStream.close()	Closes this input stream and releases any system resources associated with the stream
BitSet.or(BitSet)	Performs a logical OR of this bit set with the bit set argument This bit set is modified so that a bit in it has the value true if and only if it either already had the value true or the corresponding bit in the bit set argument has the value true
HashSet.HashSet(int,float)	Constructs a new empty set the backing HashMap instance has the specified initial capacity and the specified load factor
Map.isEmpty()	Returns true if this map contains no key value mappings
Iterator.remove()	Removes from the underlying collection the last element returned by this iterator optional operation This method can be called only once per call to next The behavior of an iterator is unspecified if the underlying collection is modified while the iteration is in progress in any way other than by calling this method
Calendar.isWeekDateSupported()	Returns whether this Calendar supports week dates
DataFormatException.DataFormatException(String)	Constructs a DataFormatException with the specified detail message
Attributes.keySet()	Returns a Set view of the attribute names keys contained in this Map
ZipError.ZipError(String)	Constructs a ZipError with the given detail message
ArrayList.set(int,E)	Replaces the element at the specified position in this list with the specified element
Vector.toArray()	Returns an array containing all of the elements in this Vector in the correct order
InflaterOutputStream.InflaterOutputStream(OutputStream)	Creates a new output stream with a default decompressor and buffer size
List.lastIndexOf(Object)	Returns the index of the last occurrence of the specified element in this list or 1 if this list does not contain the element
JarOutputStream.putNextEntry(ZipEntry)	Begins writing a new JAR file entry and positions the stream to the start of the entry data This method will also close any previous entry The default compression method will be used if no compression method was specified for the entry
MissingFormatArgumentException.MissingFormatArgumentException(String)	Constructs an instance of this class with the unmatched format specifier
Date.setSeconds(int)	Sets the seconds of this Date to the specified value
StringTokenizer.nextElement()	Returns the same value as the nextToken method except that its declared return value is Object rather than String It exists so that this class can implement the Enumeration interface
UUID.node()	The node value associated with this UUID
AbstractCollection.toString()	Returns a string representation of this collection The string representation consists of a list of the collection s elements in the order they are returned by its iterator enclosed in square brackets Adjacent elements are separated by the characters comma and space Elements are converted to strings as by String valueOf Object
Locale.getISOCountries()	Returns a list of all 2 letter country codes defined in ISO 3166
Calendar.getTime()	Returns a Date object representing this Calendar s time value millisecond offset from the Epoch
ZipEntry.hashCode()	Returns the hash code value for this entry
AbstractPreferences.exportSubtree(OutputStream)	Implements the exportSubtree method as per the specification in Preferences exportSubtree OutputStream
InflaterOutputStream.finish()	Finishes writing uncompressed data to the output stream without closing the underlying stream Use this method when applying multiple filters in succession to the same output stream
FutureTask.cancel(boolean)	Description copied from interface Future
ArrayDeque.removeFirstOccurrence(Object)	Removes the first occurrence of the specified element in this deque when traversing the deque from head to tail
UnknownFormatConversionException.getMessage()	Description copied from class Throwable
Random.nextFloat()	Returns the next pseudorandom uniformly distributed float value between 0 0 and 1 0 from this random number generator s sequence
LinkedBlockingDeque.push(E)	Description copied from interface BlockingDeque
FormatFlagsConversionMismatchException.getMessage()	Description copied from class Throwable
EnumMap.containsValue(Object)	Returns true if this map maps one or more keys to the specified value
ScheduledThreadPoolExecutor.ScheduledThreadPoolExecutor(int)	Creates a new ScheduledThreadPoolExecutor with the given core pool size
ScheduledExecutorService.scheduleWithFixedDelay(Runnable,long,long,TimeUnit)	Creates and executes a periodic action that becomes enabled first after the given initial delay and subsequently with the given delay between the termination of one execution and the commencement of the next If any execution of the task encounters an exception subsequent executions are suppressed
SimpleFormatter.MyClass.mash(java:9))	
UnknownFormatFlagsException.getFlags()	Returns the set of flags which contains an unknown flag
FormatFlagsConversionMismatchException.getFlags()	Returns the incompatible flag
JarInputStream.getManifest()	Returns the Manifest for this JAR file or null if none
SimpleFormatter.SimpleFormatter()	
GregorianCalendar.getActualMaximum(int)	Returns the maximum value that this calendar field could have taking into consideration the given time value and the current values of the getFirstDayOfWeek getMinimalDaysInFirstWeek getGregorianChange and getTimeZone methods
CopyOnWriteArrayList.add(E)	Appends the specified element to the end of this list
Inflater.getBytesRead()	Returns the total number of compressed bytes input so far
LogRecord.setResourceBundleName(String)	Set the localization resource bundle name
Handler.getErrorManager()	Retrieves the ErrorManager for this Handler
IdentityHashMap.entrySet()	Returns a Set view of the mappings contained in this map
AbstractMap.hashCode()	Returns the hash code value for this map The hash code of a map is defined to be the sum of the hash codes of each entry in the map s entrySet view This ensures that m1 equals m2 implies that m1 hashCode m2 hashCode for any two maps m1 and m2 as required by the general contract of Object hashCode
PropertyResourceBundle.handleGetObject(String)	Description copied from class ResourceBundle
AbstractQueuedSynchronizer.ConditionObject.AbstractQueuedSynchronizer.ConditionObject()	Creates a new ConditionObject instance
LinkedHashMap.LinkedHashMap(int,float,boolean)	Constructs an empty LinkedHashMap instance with the specified initial capacity load factor and ordering mode
ErrorManager.error(String,Exception,int)	The error method is called when a Handler failure occurs
Calendar.getInstance()	Gets a calendar using the default time zone and locale The Calendar returned is based on the current time in the default time zone with the default locale
FileHandler.FileHandler()	Construct a default FileHandler This will be configured entirely from LogManager properties or their default values
ScheduledThreadPoolExecutor.scheduleAtFixedRate(Runnable,long,long,TimeUnit)	Description copied from interface ScheduledExecutorService
Semaphore.tryAcquire(int,long,TimeUnit)	Acquires the given number of permits from this semaphore if all become available within the given waiting time and the current thread has not been interrupted
DeflaterOutputStream.finish()	Finishes writing compressed data to the output stream without closing the underlying stream Use this method when applying multiple filters in succession to the same output stream
Handler.setLevel(Level)	Set the log level specifying which message levels will be logged by this Handler Message levels lower than this value will be discarded
Vector.lastElement()	Returns the last component of the vector
ServiceLoader.load(Class)	Creates a new service loader for the given service type using the current thread s context class loader
Executors.privilegedThreadFactory()	Returns a thread factory used to create new threads that have the same permissions as the current thread
NavigableMap.subMap(K,K)	Returns a view of the portion of this map whose keys range from fromKey inclusive to toKey exclusive If fromKey and toKey are equal the returned map is empty The returned map is backed by this map so changes in the returned map are reflected in this map and vice versa
ConcurrentLinkedDeque.removeLast()	Description copied from interface Deque
Inflater.getRemaining()	Returns the total number of bytes remaining in the input buffer
LinkedBlockingQueue.toArray(T[])	Returns an array containing all of the elements in this queue in proper sequence the runtime type of the returned array is that of the specified array If the queue fits in the specified array it is returned therein Otherwise a new array is allocated with the runtime type of the specified array and the size of this queue
ConcurrentSkipListMap.containsKey(Object)	Returns true if this map contains a mapping for the specified key
LinkedBlockingDeque.remainingCapacity()	Returns the number of additional elements that this deque can ideally in the absence of memory or resource constraints accept without blocking This is always equal to the initial capacity of this deque less the current size of this deque
StringTokenizer.hasMoreTokens()	Tests if there are more tokens available from this tokenizer s string
AbstractQueuedSynchronizer.ConditionObject.signal()	Moves the longest waiting thread if one exists from the wait queue for this condition to the wait queue for the owning lock
AtomicLongFieldUpdater.addAndGet(T,long)	Atomically adds the given value to the current value of the field of the given object managed by this updater
BlockingDeque.iterator()	Returns an iterator over the elements in this deque in proper sequence
TimeZone.useDaylightTime()	Queries if this TimeZone uses Daylight Saving Time
AtomicBoolean.get()	Returns the current value
Semaphore.Semaphore(int,boolean)	Creates a Semaphore with the given number of permits and the given fairness setting
ConcurrentMap.replace(K,V)	Replaces the entry for a key only if currently mapped to some value
LinkedHashMap.LinkedHashMap(Map)	Constructs an insertion ordered LinkedHashMap instance with the same mappings as the specified map The LinkedHashMap instance is created with a default load factor 0 75 and an initial capacity sufficient to hold the mappings in the specified map
Scanner.Scanner(File)	Constructs a new Scanner that produces values scanned from the specified file Bytes from the file are converted into characters using the underlying platform s default charset
IllegalFormatConversionException.IllegalFormatConversionException(char,Class)	Constructs an instance of this class with the mismatched conversion and the corresponding argument class
Hashtable.remove(Object)	Removes the key and its corresponding value from this hashtable This method does nothing if the key is not in the hashtable
LockSupport.unpark(Thread)	Makes available the permit for the given thread if it was not already available If the thread was blocked on park then it will unblock Otherwise its next call to park is guaranteed not to block This operation is not guaranteed to have any effect at all if the given thread has not been started
JarEntry.getCodeSigners()	Returns the CodeSigner objects for this entry or null if none This method can only be called once the JarEntry has been completely verified by reading from the entry input stream until the end of the stream has been reached Otherwise this method will return null
EnumMap.hashCode()	Returns the hash code value for this map The hash code of a map is defined to be the sum of the hash codes of each entry in the map
NavigableSet.descendingIterator()	Returns an iterator over the elements in this set in descending order
GZIPOutputStream.GZIPOutputStream(OutputStream,int)	Creates a new output stream with the specified buffer size
ArrayList.contains(Object)	Returns true if this list contains the specified element
CopyOnWriteArrayList.remove(int)	Removes the element at the specified position in this list
AtomicLongArray.length()	Returns the length of the array
Attributes.put(Object,Object)	Associates the specified value with the specified attribute name key in this Map If the Map previously contained a mapping for the attribute name the old value is replaced
WeakHashMap.keySet()	Returns a Set view of the keys contained in this map
AtomicReferenceArray.toString()	Returns the String representation of the current values of array
JarInputStream.getNextJarEntry()	Reads the next JAR file entry and positions the stream at the beginning of the entry data If verification has been enabled any invalid signature detected while positioning the stream for the next entry will result in an exception
LinkedBlockingDeque.iterator()	Returns an iterator over the elements in this deque in proper sequence
ConcurrentSkipListSet.ConcurrentSkipListSet()	Constructs a new empty set that orders its elements according to their natural ordering
LoggingMXBean.getLoggerNames()	Returns the list of currently registered logger names This method calls LogManager getLoggerNames and returns a list of the logger names
Matcher.pattern()	Returns the pattern that is interpreted by this matcher
Scanner.nextLine()	Advances this scanner past the current line and returns the input that was skipped
BitSet.valueOf(ByteBuffer)	Returns a new bit set containing all the bits in the given byte buffer between its position and limit
Scanner.hasNextInt(int)	Returns true if the next token in this scanner s input can be interpreted as an int value in the specified radix using the nextInt method The scanner does not advance past any input
AbstractPreferences.getDouble(String,double)	Implements the getDouble method as per the specification in Preferences getDouble String double
FutureTask.run()	Description copied from interface RunnableFuture
ConcurrentLinkedDeque.removeFirst()	Description copied from interface Deque
LinkedList.getFirst()	Returns the first element in this list
Pack200.Unpacker.unpack(InputStream,JarOutputStream)	Read a Pack200 archive and write the encoded JAR to a JarOutputStream
Comparator.equals(Object)	Indicates whether some other object is equal to this comparator This method must obey the general contract of Object equals Object Additionally this method can return true only if the specified object is also a comparator and it imposes the same ordering as this comparator Thus comp1 equals comp2 implies that sgn comp1 compare o1 o2 sgn comp2 compare o1 o2 for every object reference o1 and o2
WeakHashMap.remove(Object)	Removes the mapping for a key from this weak hash map if it is present
CopyOnWriteArrayList.CopyOnWriteArrayList(Collection)	Creates a list containing the elements of the specified collection in the order they are returned by the collection s iterator
Hashtable.containsKey(Object)	Tests if the specified object is a key in this hashtable
Vector.toString()	Returns a string representation of this Vector containing the String representation of each element
Currency.getDisplayName(Locale)	Gets the name that is suitable for displaying this currency for the specified locale If there is no suitable display name found for the specified locale the ISO 4217 currency code is returned
HashMap.entrySet()	Returns a Set view of the mappings contained in this map
Locale.clone()	Overrides Cloneable
AtomicLongArray.AtomicLongArray(long[])	Creates a new AtomicLongArray with the same length as and all elements copied from the given array
IdentityHashMap.IdentityHashMap()	Constructs a new empty identity hash map with a default expected maximum size 21
HashSet.iterator()	Returns an iterator over the elements in this set The elements are returned in no particular order
ZipFile.getEntry(String)	Returns the zip file entry for the specified name or null if not found
AbstractMap.SimpleImmutableEntry.setValue(V)	Replaces the value corresponding to this entry with the specified value optional operation This implementation simply throws UnsupportedOperationException as this class implements an immutable map entry
CompletionService.take()	Retrieves and removes the Future representing the next completed task waiting if none are yet present
LoggingMXBean.getParentLoggerName(String)	Returns the name of the parent for the specified logger
TimeZone.observesDaylightTime()	Returns true if this TimeZone is currently in Daylight Saving Time or if a transition from Standard Time to Daylight Saving Time occurs at any future time
LinkedList.indexOf(Object)	Returns the index of the first occurrence of the specified element in this list or 1 if this list does not contain the element
Vector.removeElement(Object)	Removes the first lowest indexed occurrence of the argument from this vector If the object is found in this vector each component in the vector with an index greater or equal to the object s index is shifted downward to have an index one smaller than the value it had previously
ThreadPoolExecutor.getActiveCount()	Returns the approximate number of threads that are actively executing tasks
ConcurrentSkipListSet.size()	Returns the number of elements in this set If this set contains more than Integer MAX VALUE elements it returns Integer MAX VALUE
Pattern.quote(String)	Returns a literal pattern String for the specified String
Vector.elements()	Returns an enumeration of the components of this vector The returned Enumeration object will generate all items in this vector The first item generated is the item at index 0 then the item at index 1 and so on
Scanner.toString()	Returns the string representation of this Scanner The string representation of a Scanner contains information that may be useful for debugging The exact format is unspecified
ArrayBlockingQueue.iterator()	Returns an iterator over the elements in this queue in proper sequence
LinkedList.removeFirstOccurrence(Object)	Removes the first occurrence of the specified element in this list when traversing the list from head to tail If the list does not contain the element it is unchanged
NodeChangeListener.childAdded(NodeChangeEvent)	This method gets called when a child node is added
InvalidPreferencesFormatException.InvalidPreferencesFormatException(String,Throwable)	Constructs an InvalidPreferencesFormatException with the specified detail message and cause
Collections.singletonList(T)	Returns an immutable list containing only the specified object
ForkJoinTask.ForkJoinTask()	
InflaterInputStream.mark(int)	Marks the current position in this input stream
AbstractQueuedLongSynchronizer.acquire(long)	Acquires in exclusive mode ignoring interrupts Implemented by invoking at least once tryAcquire long returning on success Otherwise the thread is queued possibly repeatedly blocking and unblocking invoking tryAcquire long until success This method can be used to implement method Lock lock
AbstractMap.SimpleImmutableEntry.AbstractMap.SimpleImmutableEntry(Entry)	Creates an entry representing the same mapping as the specified entry
ResourceBundle.getObject(String)	Gets an object for the given key from this resource bundle or one of its parents
UnknownFormatConversionException.UnknownFormatConversionException(String)	Constructs an instance of this class with the unknown conversion
Calendar.set(int,int,int,int,int,int)	Sets the values for the fields YEAR MONTH DAY OF MONTH HOUR MINUTE and SECOND
Locale.getDisplayVariant()	Returns a name for the locale s variant code that is appropriate for display to the user If possible the name will be localized for the default locale If the locale doesn t specify a variant code this function returns the empty string
LinkedList.toArray(T[])	Returns an array containing all of the elements in this list in proper sequence from first to last element the runtime type of the returned array is that of the specified array If the list fits in the specified array it is returned therein Otherwise a new array is allocated with the runtime type of the specified array and the size of this list
AbstractPreferences.nodeExists(String)	Implements the nodeExists method as per the specification in Preferences nodeExists String
Pack200.Unpacker.addPropertyChangeListener(PropertyChangeListener)	Registers a listener for PropertyChange events on the properties map
LinkedList.peek()	Retrieves but does not remove the head first element of this list
DuplicateFormatFlagsException.getFlags()	Returns the set of flags which contains a duplicate flag
AtomicReference.AtomicReference()	Creates a new AtomicReference with null initial value
LinkedTransferQueue.remove(Object)	Removes a single instance of the specified element from this queue if it is present More formally removes an element e such that o equals e if this queue contains one or more such elements
TreeMap.descendingMap()	Description copied from interface NavigableMap
Arrays.fill(boolean[],boolean)	Assigns the specified boolean value to each element of the specified array of booleans
FormatterClosedException.FormatterClosedException()	Constructs an instance of this class
ExecutionException.ExecutionException(Throwable)	Constructs an ExecutionException with the specified cause
ReentrantLock.newCondition()	Returns a Condition instance for use with this Lock instance
ConcurrentSkipListSet.subSet(E,E)	Description copied from interface NavigableSet
IllformedLocaleException.getErrorIndex()	Returns the index where the error was found A negative value indicates either the error index is not applicable or unknown
ConcurrentHashMap.ConcurrentHashMap(int)	Creates a new empty map with the specified initial capacity and with default load factor 0 75 and concurrencyLevel 16
TooManyListenersException.TooManyListenersException(String)	Constructs a TooManyListenersException with the specified detail message
Handler.getEncoding()	Return the character encoding for this Handler
Arrays.binarySearch(double[],int,int,double)	Searches a range of the specified array of doubles for the specified value using the binary search algorithm
Calendar.clear(int)	Sets the given calendar field value and the time value millisecond offset from the Epoch of this Calendar undefined This means that isSet field will return false and the date and time calculations will treat the field as if it had never been set A Calendar implementation class may use the field s specific default value for date and time calculations
Exchanger.exchange(V,long,TimeUnit)	Waits for another thread to arrive at this exchange point unless the current thread is interrupted or the specified waiting time elapses and then transfers the given object to it receiving its object in return
Random.Random()	Creates a new random number generator This constructor sets the seed of the random number generator to a value very likely to be distinct from any other invocation of this constructor
ListResourceBundle.handleGetObject(String)	Description copied from class ResourceBundle
HashMap.remove(Object)	Removes the mapping for the specified key from this map if present
NavigableMap.pollFirstEntry()	Removes and returns a key value mapping associated with the least key in this map or null if the map is empty
AbstractPreferences.childrenNames()	Implements the children method as per the specification in Preferences childrenNames
CopyOnWriteArraySet.addAll(Collection)	Adds all of the elements in the specified collection to this set if they re not already present If the specified collection is also a set the addAll operation effectively modifies this set so that its value is the union of the two sets The behavior of this operation is undefined if the specified collection is modified while the operation is in progress
ConcurrentSkipListMap.pollFirstEntry()	Removes and returns a key value mapping associated with the least key in this map or null if the map is empty
IllegalFormatPrecisionException.IllegalFormatPrecisionException(int)	Constructs an instance of this class with the specified precision
ResourceBundle.Control.getFormats(String)	Returns a List of Strings containing formats to be used to load resource bundles for the given baseName The ResourceBundle getBundle factory method tries to load resource bundles with formats in the order specified by the list The list returned by this method must have at least one String The predefined formats are java class for class based resource bundles and java properties for properties based ones Strings starting with java are reserved for future extensions and must not be used by application defined formats
Matcher.group(int)	Returns the input subsequence captured by the given group during the previous match operation
Level.hashCode()	Generate a hashcode
Logger.exiting(String,String)	Log a method return
Vector.clear()	Removes all of the elements from this Vector The Vector will be empty after this call returns unless it throws an exception
ConcurrentHashMap.entrySet()	Returns a Set view of the mappings contained in this map
ForkJoinPool.getAsyncMode()	Returns true if this pool uses local first in first out scheduling mode for forked tasks that are never joined
Date.Date(int,int,int,int,int,int)	Allocates a Date object and initializes it so that it represents the instant at the start of the second specified by the year month date hrs min and sec arguments in the local time zone
ConcurrentLinkedDeque.clear()	Removes all of the elements from this deque
JarEntry.getAttributes()	Returns the Manifest Attributes for this entry or null if none
PriorityQueue.contains(Object)	Returns true if this queue contains the specified element
TreeSet.subSet(E,boolean,E,boolean)	Description copied from interface NavigableSet
GregorianCalendar.GregorianCalendar(Locale)	Constructs a GregorianCalendar based on the current time in the default time zone with the given locale
ResourceBundle.clearCache()	Removes all resource bundles from the cache that have been loaded using the caller s class loader
MatchResult.group()	Returns the input subsequence matched by the previous match
Arrays.copyOfRange(double[],int,int)	Copies the specified range of the specified array into a new array
AbstractPreferences.flush()	Implements the flush method as per the specification in Preferences flush
WeakHashMap.WeakHashMap(int)	Constructs a new empty WeakHashMap with the given initial capacity and the default load factor 0 75
Phaser.getPhase()	Returns the current phase number The maximum phase number is Integer MAX VALUE after which it restarts at zero Upon termination the phase number is negative in which case the prevailing phase prior to termination may be obtained via getPhase Integer MIN VALUE
Arrays.fill(byte[],byte)	Assigns the specified byte value to each element of the specified array of bytes
PriorityBlockingQueue.take()	Description copied from interface BlockingQueue
List.remove(Object)	Removes the first occurrence of the specified element from this list if it is present optional operation If this list does not contain the element it is unchanged More formally removes the element with the lowest index i such that o null get i null o equals get i if such an element exists Returns true if this list contained the specified element or equivalently if this list changed as a result of the call
LinkedTransferQueue.add(E)	Inserts the specified element at the tail of this queue
SocketHandler.close()	Close this output stream
CopyOnWriteArraySet.isEmpty()	Returns true if this set contains no elements
ReentrantLock.getQueueLength()	Returns an estimate of the number of threads waiting to acquire this lock The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures This method is designed for use in monitoring of the system state not for synchronization control
MemoryHandler.isLoggable(LogRecord)	Check if this Handler would actually log a given LogRecord into its internal buffer
Attributes.putValue(String,String)	Associates the specified value with the specified attribute name specified as a String The attributes name is case insensitive
Logger.throwing(String,String,Throwable)	Log throwing an exception
Arrays.copyOfRange(long[],int,int)	Copies the specified range of the specified array into a new array
LinkedHashMap.clear()	Removes all of the mappings from this map
Arrays.equals(long[],long[])	Returns true if the two specified arrays of longs are equal to one another Two arrays are considered equal if both arrays contain the same number of elements and all corresponding pairs of elements in the two arrays are equal In other words two arrays are equal if they contain the same elements in the same order Also two array references are considered equal if both are null
Map.get(Object)	Returns the value to which the specified key is mapped or null if this map contains no mapping for the key
Random.nextGaussian()	Returns the next pseudorandom Gaussian normally distributed double value with mean 0 0 and standard deviation 1 0 from this random number generator s sequence
Preferences.getInt(String,int)	Returns the int value represented by the string associated with the specified key in this preference node The string is converted to an integer as by Integer parseInt String Returns the specified default if there is no value associated with the key the backing store is inaccessible or if Integer parseInt String would throw a NumberFormatException if the associated value were passed This method is intended for use in conjunction with putInt java lang String int
Arrays.deepHashCode(Object[])	Returns a hash code based on the deep contents of the specified array If the array contains other arrays as elements the hash code is based on their contents and so on ad infinitum
ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue,RejectedExecutionHandler)	Creates a new ThreadPoolExecutor with the given initial parameters and default thread factory
Properties.stringPropertyNames()	Returns a set of keys in this property list where the key and its corresponding value are strings including distinct keys in the default property list if a key of the same name has not already been found from the main properties list Properties whose key or value is not of type String are omitted
Pack200.Unpacker.removePropertyChangeListener(PropertyChangeListener)	Remove a listener for PropertyChange events added by the addPropertyChangeListener java beans PropertyChangeListener
Exchanger.exchange(V)	Waits for another thread to arrive at this exchange point unless the current thread is interrupted and then transfers the given object to it receiving its object in return
Pattern.matcher(CharSequence)	Creates a matcher that will match the given input against this pattern
LinkedTransferQueue.isEmpty()	Returns true if this queue contains no elements
NavigableMap.lowerKey(K)	Returns the greatest key strictly less than the given key or null if there is no such key
IllegalFormatCodePointException.getCodePoint()	Returns the illegal code point as defined by Character isValidCodePoint int
BitSet.BitSet(int)	Creates a bit set whose initial size is large enough to explicitly represent bits with indices in the range 0 through nbits 1 All bits are initially false
Timer.Timer(String)	Creates a new timer whose associated thread has the specified name
TimerTask.run()	The action to be performed by this timer task
ForkJoinPool.ForkJoinPool()	Creates a ForkJoinPool with parallelism equal to Runtime availableProcessors using the default thread factory no UncaughtExceptionHandler and non async LIFO processing mode
ZipEntry.setComment(String)	Sets the optional comment string for the entry
AbstractList.lastIndexOf(Object)	Returns the index of the last occurrence of the specified element in this list or 1 if this list does not contain the element
ScheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)	Sets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown
Date.toGMTString()	Creates a string representation of this Date object of the form d mon yyyy hh mm ss GMT where d is the day of the month 1 through 31 as one or two decimal digits
Properties.setProperty(String,String)	Calls the Hashtable method put Provided for parallelism with the getProperty method Enforces use of strings for property keys and values The value returned is the result of the Hashtable call to put
Deque.peek()	Retrieves but does not remove the head of the queue represented by this deque in other words the first element of this deque or returns null if this deque is empty
BitSet.toString()	Returns a string representation of this bit set For every index for which this BitSet contains a bit in the set state the decimal representation of that index is included in the result Such indices are listed in order from lowest to highest separated by a comma and a space and surrounded by braces resulting in the usual mathematical notation for a set of integers
AtomicIntegerFieldUpdater.addAndGet(T,int)	Atomically adds the given value to the current value of the field of the given object managed by this updater
Logger.log(Level,String,Object[])	Log a message with an array of object arguments
Attributes.clear()	Removes all attributes from this Map
Locale.toString()	Returns a string representation of this Locale object consisting of language country variant script and extensions as below language country variant script extensions Language is always lower case country is always upper case script is always title case and extensions are always lower case Extensions and private use subtags will be in canonical order as explained in toLanguageTag
Deflater.getTotalIn()	Returns the total number of uncompressed bytes input so far
BitSet.toLongArray()	Returns a new long array containing all the bits in this bit set
Matcher.region(int,int)	Sets the limits of this matcher s region The region is the part of the input sequence that will be searched to find a match Invoking this method resets the matcher and then sets the region to start at the index specified by the start parameter and end at the index specified by the end parameter
ZipEntry.getMethod()	Returns the compression method of the entry or 1 if not specified
ThreadPoolExecutor.AbortPolicy.rejectedExecution(Runnable,ThreadPoolExecutor)	Always throws RejectedExecutionException
Dictionary.remove(Object)	Removes the key and its corresponding value from this dictionary This method does nothing if the key is not in this dictionary
BlockingQueue.contains(Object)	Returns true if this queue contains the specified element
BlockingDeque.removeLastOccurrence(Object)	Removes the last occurrence of the specified element from this deque
AbstractQueuedLongSynchronizer.owns(ConditionObject)	Queries whether the given ConditionObject uses this synchronizer as its lock
NavigableSet.subSet(E,boolean,E,boolean)	Returns a view of the portion of this set whose elements range from fromElement to toElement If fromElement and toElement are equal the returned set is empty unless fromInclusive and toInclusive are both true The returned set is backed by this set so changes in the returned set are reflected in this set and vice versa The returned set supports all optional set operations that this set supports
ThreadPoolExecutor.getCorePoolSize()	Returns the core number of threads
IllegalFormatPrecisionException.getMessage()	Description copied from class Throwable
EnumMap.containsKey(Object)	Returns true if this map contains a mapping for the specified key
FormatFlagsConversionMismatchException.FormatFlagsConversionMismatchException(String,char)	Constructs an instance of this class with the specified flag and conversion
NavigableSet.ceiling(E)	Returns the least element in this set greater than or equal to the given element or null if there is no such element
Semaphore.tryAcquire(long,TimeUnit)	Acquires a permit from this semaphore if one becomes available within the given waiting time and the current thread has not been interrupted
Collections.emptyEnumeration()	Returns an enumeration that has no elements More precisely hasMoreElements always returns false
CopyOnWriteArrayList.CopyOnWriteArrayList(E[])	Creates a list holding a copy of the given array
Arrays.binarySearch(char[],int,int,char)	Searches a range of the specified array of chars for the specified value using the binary search algorithm
LinkedHashSet.LinkedHashSet(int)	Constructs a new empty linked hash set with the specified initial capacity and the default load factor 0 75
ArrayBlockingQueue.contains(Object)	Returns true if this queue contains the specified element
ForkJoinTask.invokeAll(ForkJoinTask,ForkJoinTask)	Forks the given tasks returning when isDone holds for each task or an unchecked exception is encountered in which case the exception is rethrown If more than one task encounters an exception then this method throws any one of these exceptions If any task encounters an exception the other may be cancelled However the execution status of individual tasks is not guaranteed upon exceptional return The status of each task may be obtained using getException and related methods to check if they have been cancelled completed normally or exceptionally or left unprocessed
Future.isDone()	Returns true if this task completed
ResourceBundle.Control.needsReload(String,Locale,String,ClassLoader,ResourceBundle,long)	Determines if the expired bundle in the cache needs to be reloaded based on the loading time given by loadTime or some other criteria The method returns true if reloading is required false otherwise loadTime is a millisecond offset since the Calendar Epoch
Deque.addLast(E)	Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions
TreeMap.higherKey(K)	Description copied from interface NavigableMap
ConcurrentSkipListMap.replace(K,V)	Replaces the entry for a key only if currently mapped to some value
ForkJoinTask.getRawResult()	Returns the result that would be returned by join even if this task completed abnormally or null if this task is not known to have been completed This method is designed to aid debugging as well as to support extensions Its use in any other context is discouraged
LogRecord.getResourceBundle()	Get the localization resource bundle This is the ResourceBundle that should be used to localize the message string before formatting it The result may be null if the message is not localizable or if no suitable ResourceBundle is available
Scanner.Scanner(InputStream,String)	Constructs a new Scanner that produces values scanned from the specified input stream Bytes from the stream are converted into characters using the specified charset
ConcurrentSkipListMap.entrySet()	Returns a Set view of the mappings contained in this map
Delayed.getDelay(TimeUnit)	Returns the remaining delay associated with this object in the given time unit
AtomicLong.AtomicLong()	Creates a new AtomicLong with initial value 0
PreferenceChangeEvent.getNewValue()	Returns the new value for the preference
Scanner.useLocale(Locale)	Sets this scanner s locale to the specified locale
ThreadPoolExecutor.getQueue()	Returns the task queue used by this executor Access to the task queue is intended primarily for debugging and monitoring
AbstractPreferences.putFloat(String,float)	Implements the putFloat method as per the specification in Preferences putFloat String float
ArrayBlockingQueue.poll()	Description copied from interface Queue
Map.containsValue(Object)	Returns true if this map maps one or more keys to the specified value More formally returns true if and only if this map contains at least one mapping to a value v such that value null v null value equals v This operation will probably require time linear in the map size for most implementations of the Map interface
CyclicBarrier.getParties()	Returns the number of parties required to trip this barrier
AtomicBoolean.compareAndSet(boolean,boolean)	Atomically sets the value to the given updated value if the current value the expected value
Locale.Builder.setScript(String)	Sets the script If script is null or the empty string the script in this Builder is removed
CopyOnWriteArraySet.clear()	Removes all of the elements from this set
Matcher.appendTail(StringBuffer)	Implements a terminal append and replace step
Scanner.hasNext(Pattern)	Returns true if the next complete token matches the specified pattern
Timer.schedule(TimerTask,Date)	Schedules the specified task for execution at the specified time If the time is in the past the task is scheduled for immediate execution
NavigableMap.headMap(K)	Returns a view of the portion of this map whose keys are strictly less than toKey The returned map is backed by this map so changes in the returned map are reflected in this map and vice versa The returned map supports all optional map operations that this map supports
LinkedBlockingQueue.drainTo(Collection,int)	Description copied from interface BlockingQueue
AbstractList.iterator()	Returns an iterator over the elements in this list in proper sequence
Phaser.getArrivedParties()	Returns the number of registered parties that have arrived at the current phase of this phaser If this phaser has terminated the returned value is meaningless and arbitrary
ForkJoinPool.shutdownNow()	Attempts to cancel and or stop all tasks and reject all subsequently submitted tasks Tasks that are in the process of being submitted or executed concurrently during the course of this method may or may not be rejected This method cancels both existing and unexecuted tasks in order to permit termination in the presence of task dependencies So the method always returns an empty list unlike the case for some other Executors
SynchronousQueue.poll(long,TimeUnit)	Retrieves and removes the head of this queue waiting if necessary up to the specified wait time for another thread to insert it
ForkJoinPool.ForkJoinPool(int,ForkJoinWorkerThreadFactory,UncaughtExceptionHandler,boolean)	Creates a ForkJoinPool with the given parameters
Lock.lockInterruptibly()	Acquires the lock unless the current thread is interrupted
PriorityQueue.PriorityQueue()	Creates a PriorityQueue with the default initial capacity 11 that orders its elements according to their natural ordering
Hashtable.putAll(Map)	Copies all of the mappings from the specified map to this hashtable
MemoryHandler.publish(LogRecord)	Store a LogRecord in an internal buffer
AbstractQueuedSynchronizer.ConditionObject.await()	Implements interruptible condition wait
AtomicInteger.decrementAndGet()	Atomically decrements by one the current value
BitSet.clone()	Cloning this BitSet produces a new BitSet that is equal to it
TimerTask.cancel()	Cancels this timer task If the task has been scheduled for one time execution and has not yet run or has not yet been scheduled it will never run If the task has been scheduled for repeated execution it will never run again If the task is running when this call occurs the task will run to completion but will never run again Note that calling this method from within the run method of a repeating timer task absolutely guarantees that the timer task will not run again
NavigableSet.iterator()	Returns an iterator over the elements in this set in ascending order
Scanner.hasNextLong(int)	Returns true if the next token in this scanner s input can be interpreted as a long value in the specified radix using the nextLong method The scanner does not advance past any input
Exchanger.Exchanger()	Creates a new Exchanger
ConcurrentSkipListSet.lower(E)	Description copied from interface NavigableSet
List.iterator()	Returns an iterator over the elements in this list in proper sequence
ZipFile.getInputStream(ZipEntry)	Returns an input stream for reading the contents of the specified zip file entry
ConcurrentLinkedDeque.pollLast()	Description copied from interface Deque
Arrays.copyOf(boolean[],int)	Copies the specified array truncating or padding with false if necessary so the copy has the specified length For all indices that are valid in both the original array and the copy the two arrays will contain identical values For any indices that are valid in the copy but not the original the copy will contain false
Scanner.nextLong(int)	Scans the next token of the input as a long
LinkedList.listIterator(int)	Returns a list iterator of the elements in this list in proper sequence starting at the specified position in the list
Collections.unmodifiableMap(Map)	Returns an unmodifiable view of the specified map This method allows modules to provide users with read only access to internal maps Query operations on the returned map read through to the specified map and attempts to modify the returned map whether direct or via its collection views result in an UnsupportedOperationException
TreeSet.descendingIterator()	Returns an iterator over the elements in this set in descending order
Matcher.group(String)	Returns the input subsequence captured by the given named capturing group during the previous match operation
Checksum.update(byte[],int,int)	Updates the current checksum with the specified array of bytes
Condition.awaitNanos(long)	Causes the current thread to wait until it is signalled or interrupted or the specified waiting time elapses
SocketHandler.publish(LogRecord)	Format and publish a LogRecord
ReentrantLock.toString()	Returns a string identifying this lock as well as its lock state
ListIterator.add(E)	Inserts the specified element into the list optional operation
AbstractMap.SimpleImmutableEntry.getValue()	Returns the value corresponding to this entry
Semaphore.tryAcquire()	Acquires a permit from this semaphore only if one is available at the time of invocation
SynchronousQueue.remainingCapacity()	Always returns zero
PropertyPermission.getActions()	Returns the canonical string representation of the actions
AtomicBoolean.toString()	Returns the String representation of the current value
Vector.iterator()	Returns an iterator over the elements in this list in proper sequence
LinkedTransferQueue.iterator()	Returns an iterator over the elements in this queue in proper sequence
EnumMap.put(K,V)	Associates the specified value with the specified key in this map
MissingResourceException.MissingResourceException(String,String,String)	Constructs a MissingResourceException with the specified information
ExecutorService.invokeAny(Collection,long,TimeUnit)	Executes the given tasks returning the result of one that has completed successfully i e without throwing an exception if any do before the given timeout elapses
ScheduledExecutorService.schedule(Callable,long,TimeUnit)	Creates and executes a ScheduledFuture that becomes enabled after the given delay
JarFile.JarFile(File,boolean)	Creates a new JarFile to read from the specified File object
Collections.unmodifiableList(List)	Returns an unmodifiable view of the specified list This method allows modules to provide users with read only access to internal lists Query operations on the returned list read through to the specified list and attempts to modify the returned list whether direct or via its iterator result in an UnsupportedOperationException
Objects.toString(Object)	Returns the result of calling toString for a non null argument and null for a null argument
MissingFormatWidthException.MissingFormatWidthException(String)	Constructs an instance of this class with the specified format specifier
Set.isEmpty()	Returns true if this set contains no elements
ThreadPoolExecutor.setMaximumPoolSize(int)	Sets the maximum allowed number of threads This overrides any value set in the constructor If the new value is smaller than the current value excess existing threads will be terminated when they next become idle
AbstractMap.SimpleEntry.hashCode()	Returns the hash code value for this map entry The hash code of a map entry e is defined to be e getKey null 0 e getKey hashCode e getValue null 0 e getValue hashCode This ensures that e1 equals e2 implies that e1 hashCode e2 hashCode for any two Entries e1 and e2 as required by the general contract of Object hashCode
SynchronousQueue.put(E)	Adds the specified element to this queue waiting if necessary for another thread to receive it
InflaterInputStream.InflaterInputStream(InputStream,Inflater)	Creates a new input stream with the specified decompressor and a default buffer size
TreeMap.headMap(K,boolean)	Description copied from interface NavigableMap
StringTokenizer.StringTokenizer(String,String,boolean)	Constructs a string tokenizer for the specified string All characters in the delim argument are the delimiters for separating tokens
Semaphore.toString()	Returns a string identifying this semaphore as well as its state
TimeZone.getDSTSavings()	Returns the amount of time to be added to local standard time to get local wall clock time
Scanner.match()	Returns the match result of the last scanning operation performed by this scanner This method throws IllegalStateException if no match has been performed or if the last match was not successful
IllegalFormatConversionException.getArgumentClass()	Returns the class of the mismatched argument
Collection.retainAll(Collection)	Retains only the elements in this collection that are contained in the specified collection optional operation In other words removes from this collection all of its elements that are not contained in the specified collection
IllegalFormatWidthException.getWidth()	Returns the width
Locale.getScript()	Returns the script for this locale which should either be the empty string or an ISO 15924 4 letter script code The first letter is uppercase and the rest are lowercase for example Latn Cyrl
AtomicReferenceArray.AtomicReferenceArray(E[])	Creates a new AtomicReferenceArray with the same length as and all elements copied from the given array
CompletionService.poll(long,TimeUnit)	Retrieves and removes the Future representing the next completed task waiting if necessary up to the specified wait time if none are yet present
LinkedBlockingDeque.remove(Object)	Removes the first occurrence of the specified element from this deque
ArrayDeque.peek()	Retrieves but does not remove the head of the queue represented by this deque or returns null if this deque is empty
Arrays.sort(float[])	Sorts the specified array into ascending numerical order
ConcurrentLinkedDeque.addAll(Collection)	Appends all of the elements in the specified collection to the end of this deque in the order that they are returned by the specified collection s iterator Attempts to addAll of a deque to itself result in IllegalArgumentException
Arrays.fill(float[],int,int,float)	Assigns the specified float value to each element of the specified range of the specified array of floats The range to be filled extends from index fromIndex inclusive to index toIndex exclusive If fromIndex toIndex the range to be filled is empty
Deflater.deflate(byte[])	Compresses the input data and fills specified buffer with compressed data Returns actual number of bytes of compressed data A return value of 0 indicates that needsInput should be called in order to determine if more input data is required
ZipEntry.setSize(long)	Sets the uncompressed size of the entry data
ConcurrentSkipListSet.ceiling(E)	Description copied from interface NavigableSet
AtomicIntegerFieldUpdater.set(T,int)	Sets the field of the given object managed by this updater to the given updated value This operation is guaranteed to act as a volatile store with respect to subsequent invocations of compareAndSet
Set.containsAll(Collection)	Returns true if this set contains all of the elements of the specified collection If the specified collection is also a set this method returns true if it is a subset of this set
Deque.pop()	Pops an element from the stack represented by this deque In other words removes and returns the first element of this deque
GregorianCalendar.hashCode()	Generates the hash code for this GregorianCalendar object
EnumMap.clear()	Removes all mappings from this map
ZipFile.close()	Closes the ZIP file
Matcher.toMatchResult()	Returns the match state of this matcher as a MatchResult
Dictionary.isEmpty()	Tests if this dictionary maps no keys to value The general contract for the isEmpty method is that the result is true if and only if this dictionary contains no entries
JarFile.getInputStream(ZipEntry)	Returns an input stream for reading the contents of the specified zip file entry
AtomicInteger.toString()	Returns the String representation of the current value
BitSet.hashCode()	Returns the hash code value for this bit set The hash code depends only on which bits are set within this BitSet
SimpleTimeZone.getRawOffset()	Gets the GMT offset for this time zone
TreeMap.lowerEntry(K)	Description copied from interface NavigableMap
ConcurrentSkipListMap.ConcurrentSkipListMap(SortedMap)	Constructs a new map containing the same mappings and using the same ordering as the specified sorted map
Logger.logrb(Level,String,String,String,String,Throwable)	Log a message specifying source class method and resource bundle name with associated Throwable information
LinkedHashSet.LinkedHashSet(Collection)	Constructs a new linked hash set with the same elements as the specified collection The linked hash set is created with an initial capacity sufficient to hold the elements in the specified collection and the default load factor 0 75
SynchronousQueue.containsAll(Collection)	Returns false unless the given collection is empty
Pack200.Unpacker.unpack(File,JarOutputStream)	Read a Pack200 archive and write the encoded JAR to a JarOutputStream
NavigableSet.pollLast()	Retrieves and removes the last highest element or returns null if this set is empty
Scanner.hasNextBigInteger()	Returns true if the next token in this scanner s input can be interpreted as a BigInteger in the default radix using the nextBigInteger method The scanner does not advance past any input
LinkedList.remove()	Retrieves and removes the head first element of this list
CheckedOutputStream.CheckedOutputStream(OutputStream,Checksum)	Creates an output stream with the specified Checksum
CopyOnWriteArrayList.size()	Returns the number of elements in this list
Vector.removeAllElements()	Removes all components from this vector and sets its size to zero
Deque.add(E)	Inserts the specified element into the queue represented by this deque in other words at the tail of this deque if it is possible to do so immediately without violating capacity restrictions returning true upon success and throwing an IllegalStateException if no space is currently available
AbstractSet.removeAll(Collection)	Removes from this set all of its elements that are contained in the specified collection optional operation If the specified collection is also a set this operation effectively modifies this set so that its value is the asymmetric set difference of the two sets
Deflater.finished()	Returns true if the end of the compressed data output stream has been reached
Map.put(K,V)	Associates the specified value with the specified key in this map optional operation If the map previously contained a mapping for the key the old value is replaced by the specified value A map m is said to contain a mapping for a key k if and only if m containsKey k would return true
MemoryHandler.MemoryHandler(Handler,int,Level)	Create a MemoryHandler
ExecutorService.invokeAny(Collection)	Executes the given tasks returning the result of one that has completed successfully i e without throwing an exception if any do Upon normal or exceptional return tasks that have not completed are cancelled
Objects.requireNonNull(T,String)	Checks that the specified object reference is not null and throws a customized NullPointerException if it is This method is designed primarily for doing parameter validation in methods and constructors with multiple parameters as demonstrated below public Foo Bar bar Baz baz this bar Objects requireNonNull bar bar must not be null this baz Objects requireNonNull baz baz must not be null
Collections.sort(List,Comparator)	Sorts the specified list according to the order induced by the specified comparator All elements in the list must be mutually comparable using the specified comparator that is c compare e1 e2 must not throw a ClassCastException for any elements e1 and e2 in the list
Phaser.getUnarrivedParties()	Returns the number of registered parties that have not yet arrived at the current phase of this phaser If this phaser has terminated the returned value is meaningless and arbitrary
Arrays.equals(byte[],byte[])	Returns true if the two specified arrays of bytes are equal to one another Two arrays are considered equal if both arrays contain the same number of elements and all corresponding pairs of elements in the two arrays are equal In other words two arrays are equal if they contain the same elements in the same order Also two array references are considered equal if both are null
Arrays.copyOf(byte[],int)	Copies the specified array truncating or padding with zeros if necessary so the copy has the specified length For all indices that are valid in both the original array and the copy the two arrays will contain identical values For any indices that are valid in the copy but not the original the copy will contain byte 0
Deque.getLast()	Retrieves but does not remove the last element of this deque
Preferences.nodeExists(String)	Returns true if the named preference node exists in the same tree as this node Relative path names which do not begin with the slash character are interpreted relative to this preference node
Deque.offer(E)	Inserts the specified element into the queue represented by this deque in other words at the tail of this deque if it is possible to do so immediately without violating capacity restrictions returning true upon success and false if no space is currently available When using a capacity restricted deque this method is generally preferable to the add E method which can fail to insert an element only by throwing an exception
Deflater.Deflater()	Creates a new compressor with the default compression level
Logger.entering(String,String)	Log a method entry
Deflater.getBytesWritten()	Returns the total number of compressed bytes output so far
ZipEntry.getCompressedSize()	Returns the size of the compressed entry data or 1 if not known
LinkedBlockingDeque.put(E)	Description copied from interface BlockingDeque
RejectedExecutionException.RejectedExecutionException(Throwable)	Constructs a RejectedExecutionException with the specified cause The detail message is set to cause null null cause toString which typically contains the class and detail message of cause
ConcurrentLinkedDeque.remove(Object)	Removes the first element e such that o equals e if such an element exists in this deque
Manifest.hashCode()	Returns the hash code for this Manifest
Vector.removeElementAt(int)	Deletes the component at the specified index Each component in this vector with an index greater or equal to the specified index is shifted downward to have an index one smaller than the value it had previously The size of this vector is decreased by 1
ArrayDeque.addLast(E)	Inserts the specified element at the end of this deque
Vector.add(int,E)	Inserts the specified element at the specified position in this Vector
Date.hashCode()	Returns a hash code value for this object The result is the exclusive OR of the two halves of the primitive long value returned by the getTime method That is the hash code is the value of the expression int this getTime this getTime 32
UUID.variant()	The variant number associated with this UUID The variant number describes the layout of the UUID
AtomicMarkableReference.attemptMark(V,boolean)	Atomically sets the value of the mark to the given update value if the current reference is to the expected reference Any given invocation of this operation may fail return false spuriously but repeated invocation when the current value holds the expected value and no other thread is also attempting to set the value will eventually succeed
InflaterOutputStream.close()	Writes any remaining uncompressed data to the output stream and closes the underlying output stream
GregorianCalendar.GregorianCalendar(int,int,int)	Constructs a GregorianCalendar with the given date set in the default time zone with the default locale
AbstractPreferences.getBoolean(String,boolean)	Implements the getBoolean method as per the specification in Preferences getBoolean String boolean
AtomicLong.lazySet(long)	Eventually sets to the given value
LogRecord.setLevel(Level)	Set the logging message level for example Level SEVERE
Logger.warning(String)	Log a WARNING message
XMLFormatter.XMLFormatter()	
ThreadPoolExecutor.DiscardOldestPolicy.ThreadPoolExecutor.DiscardOldestPolicy()	Creates a DiscardOldestPolicy for the given executor
HashMap.HashMap(int,float)	Constructs an empty HashMap with the specified initial capacity and load factor
Semaphore.acquireUninterruptibly()	Acquires a permit from this semaphore blocking until one is available
SynchronousQueue.remove(Object)	Always returns false
AbstractQueuedLongSynchronizer.acquireInterruptibly(long)	Acquires in exclusive mode aborting if interrupted
AbstractCollection.contains(Object)	Returns true if this collection contains the specified element
Pattern.split(CharSequence)	Splits the given input sequence around matches of this pattern
LinkedBlockingDeque.remove()	Retrieves and removes the head of the queue represented by this deque
LinkedList.LinkedList(Collection)	Constructs a list containing the elements of the specified collection in the order they are returned by the collection s iterator
AtomicIntegerArray.getAndIncrement(int)	Atomically increments by one the element at index i
ConcurrentSkipListMap.higherEntry(K)	Returns a key value mapping associated with the least key strictly greater than the given key or null if there is no such key The returned entry does not support the Entry setValue method
BitSet.valueOf(byte[])	Returns a new bit set containing all the bits in the given byte array
Pack200.newPacker()	Obtain new instance of a class that implements Packer
BitSet.set(int)	Sets the bit at the specified index to true
BlockingDeque.poll(long,TimeUnit)	Retrieves and removes the head of the queue represented by this deque in other words the first element of this deque waiting up to the specified wait time if necessary for an element to become available
ArrayDeque.addFirst(E)	Inserts the specified element at the front of this deque
AbstractCollection.add(E)	Ensures that this collection contains the specified element optional operation Returns true if this collection changed as a result of the call Returns false if this collection does not permit duplicates and already contains the specified element Collections that support this operation may place limitations on what elements may be added to this collection In particular some collections will refuse to add null elements and others will impose restrictions on the type of elements that may be added
NavigableSet.tailSet(E)	Returns a view of the portion of this set whose elements are greater than or equal to fromElement The returned set is backed by this set so changes in the returned set are reflected in this set and vice versa The returned set supports all optional set operations that this set supports
AbstractQueuedLongSynchronizer.ConditionObject.signalAll()	Moves all threads from the wait queue for this condition to the wait queue for the owning lock
LogManager.getLogManager()	Return the global LogManager object
Arrays.sort(Object[],int,int)	Sorts the specified range of the specified array of objects into ascending order according to the natural ordering of its elements The range to be sorted extends from index fromIndex inclusive to index toIndex exclusive
Logger.getResourceBundle()	Retrieve the localization resource bundle for this logger for the current default locale Note that if the result is null then the Logger will use a resource bundle inherited from its parent
Arrays.hashCode(byte[])	Returns a hash code based on the contents of the specified array
Logger.exiting(String,String,Object)	Log a method return with result object
EnumMap.keySet()	Returns a Set view of the keys contained in this map
BlockingDeque.size()	Returns the number of elements in this deque
Observer.update(Observable,Object)	This method is called whenever the observed object is changed An application calls an Observable object s notifyObservers method to have all the object s observers notified of the change
AtomicReferenceArray.AtomicReferenceArray(int)	Creates a new AtomicReferenceArray of the given length with all elements initially null
PriorityBlockingQueue.contains(Object)	Returns true if this queue contains the specified element
Vector.isEmpty()	Tests if this vector has no components
LogManager.getProperty(String)	Get the value of a logging property
InflaterInputStream.reset()	Repositions this stream to the position at the time the mark method was last called on this input stream
Set.add(E)	Adds the specified element to this set if it is not already present optional operation More formally adds the specified element e to this set if the set contains no element e2 such that e null e2 null e equals e2
GregorianCalendar.setWeekDate(int,int,int)	Sets this GregorianCalendar to the date given by the date specifiers weekYear weekOfYear and dayOfWeek weekOfYear follows the WEEK OF YEAR numbering The dayOfWeek value must be one of the DAY OF WEEK values SUNDAY to SATURDAY
DelayQueue.offer(E)	Inserts the specified element into this delay queue
AbstractPreferences.exportNode(OutputStream)	Implements the exportNode method as per the specification in Preferences exportNode OutputStream
Currency.getDisplayName()	Gets the name that is suitable for displaying this currency for the default locale If there is no suitable display name found for the default locale the ISO 4217 currency code is returned
Collections.shuffle(List)	Randomly permutes the specified list using a default source of randomness All permutations occur with approximately equal likelihood
EnumMap.size()	Returns the number of key value mappings in this map
Arrays.binarySearch(char[],char)	Searches the specified array of chars for the specified value using the binary search algorithm The array must be sorted as by the sort char method prior to making this call If it is not sorted the results are undefined If the array contains multiple elements with the specified value there is no guarantee which one will be found
WeakHashMap.size()	Returns the number of key value mappings in this map
ListIterator.previousIndex()	Returns the index of the element that would be returned by a subsequent call to previous Returns 1 if the list iterator is at the beginning of the list
LockSupport.park()	Disables the current thread for thread scheduling purposes unless the permit is available
ConcurrentLinkedDeque.toArray()	Returns an array containing all of the elements in this deque in proper sequence from first to last element
DeflaterInputStream.read(byte[],int,int)	Reads compressed data into a byte array
PriorityQueue.toArray(T[])	Returns an array containing all of the elements in this queue the runtime type of the returned array is that of the specified array
Arrays.binarySearch(float[],float)	Searches the specified array of floats for the specified value using the binary search algorithm The array must be sorted as by the sort float method prior to making this call If it is not sorted the results are undefined If the array contains multiple elements with the specified value there is no guarantee which one will be found This method considers all NaN values to be equivalent and equal
Arrays.fill(int[],int)	Assigns the specified int value to each element of the specified array of ints
List.indexOf(Object)	Returns the index of the first occurrence of the specified element in this list or 1 if this list does not contain the element
Locale.getISO3Language()	Returns a three letter abbreviation of this locale s language
Logger.getLogger(String)	Find or create a logger for a named subsystem If a logger has already been created with the given name it is returned Otherwise a new logger is created
ZipFile.ZipFile(File,Charset)	Opens a ZIP file for reading given the specified File object
Map.clear()	Removes all of the mappings from this map optional operation
FileHandler.close()	Close all the files
Locale.getDisplayName()	Returns a name for the locale that is appropriate for display to the user This will be the values returned by getDisplayLanguage getDisplayScript getDisplayCountry and getDisplayVariant assembled into a single string The the non empty values are used in order with the second and subsequent names in parentheses For example language script country variant language country language variant script country country depending on which fields are specified in the locale If the language sacript country and variant fields are all empty this function returns the empty string
ZipOutputStream.write(byte[],int,int)	Writes an array of bytes to the current ZIP entry data This method will block until all the bytes are written
EmptyStackException.EmptyStackException()	Constructs a new EmptyStackException with null as its error message string
AtomicLong.getAndAdd(long)	Atomically adds the given value to the current value
GZIPOutputStream.GZIPOutputStream(OutputStream)	Creates a new output stream with a default buffer size
ThreadLocalRandom.setSeed(long)	Throws UnsupportedOperationException Setting seeds in this generator is not supported
Semaphore.getQueueLength()	Returns an estimate of the number of threads waiting to acquire
GregorianCalendar.getLeastMaximum(int)	Returns the lowest maximum value for the given calendar field of this GregorianCalendar instance The lowest maximum value is defined as the smallest value returned by getActualMaximum int for any possible time value taking into consideration the current values of the getFirstDayOfWeek getMinimalDaysInFirstWeek getGregorianChange and getTimeZone methods
LinkedBlockingQueue.poll()	Description copied from interface Queue
AtomicIntegerArray.get(int)	Gets the current value at position i
ThreadPoolExecutor.execute(Runnable)	Executes the given task sometime in the future The task may execute in a new thread or in an existing pooled thread
Properties.save(OutputStream,String)	Calls the store OutputStream out String comments method and suppresses IOExceptions that were thrown
AbstractMap.equals(Object)	Compares the specified object with this map for equality Returns true if the given object is also a map and the two maps represent the same mappings More formally two maps m1 and m2 represent the same mappings if m1 entrySet equals m2 entrySet This ensures that the equals method works properly across different implementations of the Map interface
CyclicBarrier.isBroken()	Queries if this barrier is in a broken state
Pack200.Packer.properties()	Get the set of this engine s properties
Objects.equals(Object,Object)	Returns true if the arguments are equal to each other and false otherwise
PriorityQueue.clear()	Removes all of the elements from this priority queue
Collections.lastIndexOfSubList(List,List)	Returns the starting position of the last occurrence of the specified target list within the specified source list or 1 if there is no such occurrence More formally returns the highest index i such that source subList i i target size equals target or 1 if there is no such index Returns 1 if target size source size This implementation uses the brute force technique of iterating over the source list looking for a match with the target at each location in turn
LinkedList.removeLast()	Removes and returns the last element from this list
UUID.clockSequence()	The clock sequence value associated with this UUID
Vector.trimToSize()	Trims the capacity of this vector to be the vector s current size If the capacity of this vector is larger than its current size then the capacity is changed to equal the size by replacing its internal data array kept in the field elementData with a smaller one An application can use this operation to minimize the storage of a vector
Executors.newCachedThreadPool()	Creates a thread pool that creates new threads as needed but will reuse previously constructed threads when they are available These pools will typically improve the performance of programs that execute many short lived asynchronous tasks
Preferences.putFloat(String,float)	Associates a string representing the specified float value with the specified key in this preference node The associated string is the one that would be returned if the float value were passed to Float toString float This method is intended for use in conjunction with getFloat java lang String float
LinkedHashSet.LinkedHashSet()	Constructs a new empty linked hash set with the default initial capacity 16 and load factor 0 75
BlockingQueue.drainTo(Collection)	Removes all available elements from this queue and adds them to the given collection This operation may be more efficient than repeatedly polling this queue A failure encountered while attempting to add elements to collection c may result in elements being in neither either or both collections when the associated exception is thrown Attempts to drain a queue to itself result in IllegalArgumentException Further the behavior of this operation is undefined if the specified collection is modified while the operation is in progress
Scanner.nextByte()	Scans the next token of the input as a byte
AbstractQueuedLongSynchronizer.ConditionObject.awaitUninterruptibly()	Implements uninterruptible condition wait
ArrayList.remove(Object)	Removes the first occurrence of the specified element from this list if it is present If the list does not contain the element it is unchanged More formally removes the element with the lowest index i such that o null get i null o equals get i if such an element exists Returns true if this list contained the specified element or equivalently if this list changed as a result of the call
IdentityHashMap.isEmpty()	Returns true if this identity hash map contains no key value mappings
ForkJoinPool.getActiveThreadCount()	Returns an estimate of the number of threads that are currently stealing or executing tasks This method may overestimate the number of active threads
AbstractQueuedSynchronizer.ConditionObject.signalAll()	Moves all threads from the wait queue for this condition to the wait queue for the owning lock
EventObject.toString()	Returns a String representation of this EventObject
LinkedTransferQueue.size()	Returns the number of elements in this queue If this queue contains more than Integer MAX VALUE elements returns Integer MAX VALUE
Arrays.sort(short[])	Sorts the specified array into ascending numerical order
ConcurrentLinkedDeque.ConcurrentLinkedDeque(Collection)	Constructs a deque initially containing the elements of the given collection added in traversal order of the collection s iterator
ConcurrentSkipListMap.isEmpty()	Returns true if this map contains no key value mappings
DelayQueue.DelayQueue()	Creates a new DelayQueue that is initially empty
InflaterOutputStream.InflaterOutputStream(OutputStream,Inflater,int)	Creates a new output stream with the specified decompressor and buffer size
NavigableSet.headSet(E,boolean)	Returns a view of the portion of this set whose elements are less than or equal to if inclusive is true toElement The returned set is backed by this set so changes in the returned set are reflected in this set and vice versa The returned set supports all optional set operations that this set supports
ConcurrentLinkedQueue.contains(Object)	Returns true if this queue contains the specified element
Arrays.equals(int[],int[])	Returns true if the two specified arrays of ints are equal to one another Two arrays are considered equal if both arrays contain the same number of elements and all corresponding pairs of elements in the two arrays are equal In other words two arrays are equal if they contain the same elements in the same order Also two array references are considered equal if both are null
Collections.emptyIterator()	Returns an iterator that has no elements More precisely hasNext always returns false
ConcurrentSkipListSet.floor(E)	Description copied from interface NavigableSet
ReentrantReadWriteLock.isWriteLocked()	Queries if the write lock is held by any thread This method is designed for use in monitoring system state not for synchronization control
BitSet.size()	Returns the number of bits of space actually in use by this BitSet to represent bit values
AtomicIntegerArray.toString()	Returns the String representation of the current values of array
Scanner.hasNextLine()	Returns true if there is another line in the input of this scanner
Scanner.Scanner(Path,String)	Constructs a new Scanner that produces values scanned from the specified file Bytes from the file are converted into characters using the specified charset
ZipOutputStream.ZipOutputStream(OutputStream,Charset)	Creates a new ZIP output stream
Arrays.binarySearch(byte[],int,int,byte)	Searches a range of the specified array of bytes for the specified value using the binary search algorithm
Currency.getAvailableCurrencies()	Gets the set of available currencies The returned set of currencies contains all of the available currencies which may include currencies that represent obsolete ISO 4217 codes The set can be modified without affecting the available currencies in the runtime
LinkedTransferQueue.tryTransfer(E)	Transfers the element to a waiting consumer immediately if possible
List.set(int,E)	Replaces the element at the specified position in this list with the specified element optional operation
Scanner.Scanner(Readable)	Constructs a new Scanner that produces values scanned from the specified source
LinkedList.element()	Retrieves but does not remove the head first element of this list
TreeMap.ceilingEntry(K)	Description copied from interface NavigableMap
CopyOnWriteArraySet.containsAll(Collection)	Returns true if this set contains all of the elements of the specified collection If the specified collection is also a set this method returns true if it is a subset of this set
AtomicInteger.getAndIncrement()	Atomically increments by one the current value
ArrayBlockingQueue.remainingCapacity()	Returns the number of additional elements that this queue can ideally in the absence of memory or resource constraints accept without blocking This is always equal to the initial capacity of this queue less the current size of this queue
InflaterOutputStream.flush()	Flushes this output stream forcing any pending buffered output bytes to be written
LinkedBlockingDeque.take()	Description copied from interface BlockingDeque
AtomicInteger.addAndGet(int)	Atomically adds the given value to the current value
AbstractPreferences.node(String)	Implements the node method as per the specification in Preferences node String
GregorianCalendar.getWeekYear()	Returns the week year represented by this GregorianCalendar The dates in the weeks between 1 and the maximum week number of the week year have the same week year value that may be one year before or after the YEAR calendar year value
Set.equals(Object)	Compares the specified object with this set for equality Returns true if the specified object is also a set the two sets have the same size and every member of the specified set is contained in this set or equivalently every member of this set is contained in the specified set This definition ensures that the equals method works properly across different implementations of the set interface
Preferences.exportSubtree(OutputStream)	Emits an XML document representing all of the preferences contained in this node and all of its descendants This XML document is in effect an offline backup of the subtree rooted at the node
Phaser.isTerminated()	Returns true if this phaser has been terminated
Random.setSeed(long)	Sets the seed of this random number generator using a single long seed The general contract of setSeed is that it alters the state of this random number generator object so as to be in exactly the same state as if it had just been created with the argument seed as a seed The method setSeed is implemented by class Random by atomically updating the seed to seed 0x5DEECE66DL 1L 48 1 and clearing the haveNextNextGaussian flag used by nextGaussian
GregorianCalendar.add(int,int)	Adds the specified signed amount of time to the given calendar field based on the calendar s rules
CopyOnWriteArrayList.indexOf(Object)	Returns the index of the first occurrence of the specified element in this list or 1 if this list does not contain the element
Hashtable.keySet()	Returns a Set view of the keys contained in this map
Locale.Locale(String,String,String)	Construct a locale from language country and variant
TimeZone.getID()	Gets the ID of this time zone
Collections.addAll(Collection,)	Adds all of the specified elements to the specified collection
TransferQueue.tryTransfer(E,long,TimeUnit)	Transfers the element to a consumer if it is possible to do so before the timeout elapses
Preferences.getDouble(String,double)	Returns the double value represented by the string associated with the specified key in this preference node The string is converted to an integer as by Double parseDouble String Returns the specified default if there is no value associated with the key the backing store is inaccessible or if Double parseDouble String would throw a NumberFormatException if the associated value were passed
CheckedOutputStream.write(int)	Writes a byte Will block until the byte is actually written
AtomicLong.AtomicLong(long)	Creates a new AtomicLong with the given initial value
JarEntry.JarEntry(ZipEntry)	Creates a new JarEntry with fields taken from the specified ZipEntry object
ConcurrentSkipListSet.tailSet(E,boolean)	Description copied from interface NavigableSet
AtomicBoolean.AtomicBoolean(boolean)	Creates a new AtomicBoolean with the given initial value
ConcurrentSkipListSet.headSet(E)	Description copied from interface NavigableSet
CopyOnWriteArraySet.CopyOnWriteArraySet()	Creates an empty set
ConcurrentLinkedDeque.offerFirst(E)	Inserts the specified element at the front of this deque
SynchronousQueue.take()	Retrieves and removes the head of this queue waiting if necessary for another thread to insert it
Currency.getSymbol()	Gets the symbol of this currency for the default locale
ConcurrentNavigableMap.descendingMap()	Returns a reverse order view of the mappings contained in this map
Date.getMonth()	Returns a number representing the month that contains or begins with the instant in time represented by this Date object
Properties.getProperty(String,String)	Searches for the property with the specified key in this property list
LinkedTransferQueue.hasWaitingConsumer()	Description copied from interface TransferQueue
Inflater.setInput(byte[])	Sets input data for decompression Should be called whenever needsInput returns true indicating that more input data is required
JarOutputStream.JarOutputStream(OutputStream,Manifest)	Creates a new JarOutputStream with the specified Manifest The manifest is written as the first entry to the output stream
Semaphore.release()	Releases a permit returning it to the semaphore
SimpleTimeZone.setStartRule(int,int,int)	Sets the daylight saving time start rule to a fixed date within a month
BitSet.flip(int)	Sets the bit at the specified index to the complement of its current value
AbstractMap.SimpleEntry.setValue(V)	Replaces the value corresponding to this entry with the specified value
LinkedTransferQueue.LinkedTransferQueue()	Creates an initially empty LinkedTransferQueue
PatternSyntaxException.getDescription()	Retrieves the description of the error
AbstractQueue.clear()	Removes all of the elements from this queue
Hashtable.equals(Object)	Compares the specified Object with this Map for equality as per the definition in the Map interface
LinkedBlockingDeque.getLast()	Description copied from interface Deque
AtomicInteger.doubleValue()	Description copied from class Number
LinkedList.LinkedList()	Constructs an empty list
IdentityHashMap.values()	Returns a Collection view of the values contained in this map
AbstractMap.SimpleImmutableEntry.hashCode()	Returns the hash code value for this map entry The hash code of a map entry e is defined to be e getKey null 0 e getKey hashCode e getValue null 0 e getValue hashCode This ensures that e1 equals e2 implies that e1 hashCode e2 hashCode for any two Entries e1 and e2 as required by the general contract of Object hashCode
PriorityBlockingQueue.PriorityBlockingQueue(Collection)	Creates a PriorityBlockingQueue containing the elements in the specified collection If the specified collection is a SortedSet or a PriorityQueue this priority queue will be ordered according to the same ordering
AbstractList.subList(int,int)	Returns a view of the portion of this list between the specified fromIndex inclusive and toIndex exclusive If fromIndex and toIndex are equal the returned list is empty The returned list is backed by this list so non structural changes in the returned list are reflected in this list and vice versa
GregorianCalendar.getActualMinimum(int)	Returns the minimum value that this calendar field could have taking into consideration the given time value and the current values of the getFirstDayOfWeek getMinimalDaysInFirstWeek getGregorianChange and getTimeZone methods
ReadWriteLock.writeLock()	Returns the lock used for writing
ForkJoinTask.quietlyJoin()	Joins this task without returning its result or throwing its exception This method may be useful when processing collections of tasks when some have been cancelled or otherwise known to have aborted
AtomicMarkableReference.get(boolean[])	Returns the current values of both the reference and the mark
ArrayBlockingQueue.toArray()	Returns an array containing all of the elements in this queue in proper sequence
Calendar.getFirstDayOfWeek()	Gets what the first day of the week is e g SUNDAY in the U S MONDAY in France
ZipEntry.clone()	Returns a copy of this entry
SimpleTimeZone.setRawOffset(int)	Sets the base time zone offset to GMT
LinkedList.push(E)	Pushes an element onto the stack represented by this list In other words inserts the element at the front of this list
WeakHashMap.put(K,V)	Associates the specified value with the specified key in this map
Preferences.toString()	Returns a string representation of this preferences node as if computed by the expression this isUserNode User System Preference Node this absolutePath
Locale.setDefault(Locale)	Sets the default locale for this instance of the Java Virtual Machine
Date.Date(long)	Allocates a Date object and initializes it to represent the specified number of milliseconds since the standard base time known as the epoch namely January 1 1970 00 00 00 GMT
CopyOnWriteArrayList.hashCode()	Returns the hash code value for this list
Arrays.asList()	Returns a fixed size list backed by the specified array Changes to the returned list write through to the array This method acts as bridge between array based and collection based APIs in combination with Collection toArray The returned list is serializable and implements RandomAccess
Matcher.end()	Returns the offset after the last character matched
ListIterator.set(E)	Replaces the last element returned by next or previous with the specified element optional operation
ResourceBundle.Control.toBundleName(String,Locale)	Converts the given baseName and locale to the bundle name This method is called from the default implementation of the newBundle and needsReload methods
Calendar.getActualMinimum(int)	Returns the minimum value that the specified calendar field could have given the time value of this Calendar
Inflater.getBytesWritten()	Returns the total number of uncompressed bytes output so far
AtomicInteger.lazySet(int)	Eventually sets to the given value
AbstractQueuedSynchronizer.ConditionObject.awaitUntil(Date)	Implements absolute timed condition wait
IdentityHashMap.get(Object)	Returns the value to which the specified key is mapped or null if this map contains no mapping for the key
AtomicLongFieldUpdater.getAndDecrement(T)	Atomically decrements by one the current value of the field of the given object managed by this updater
ForkJoinPool.getRunningThreadCount()	Returns an estimate of the number of worker threads that are not blocked waiting to join tasks or for other managed synchronization This method may overestimate the number of running threads
ConcurrentLinkedQueue.ConcurrentLinkedQueue()	Creates a ConcurrentLinkedQueue that is initially empty
ForkJoinPool.shutdown()	Initiates an orderly shutdown in which previously submitted tasks are executed but no new tasks will be accepted
Vector.firstElement()	Returns the first component the item at index 0 of this vector
Random.nextInt()	Returns the next pseudorandom uniformly distributed int value from this random number generator s sequence The general contract of nextInt is that one int value is pseudorandomly generated and returned All 232 possible int values are produced with approximately equal probability
Formatter.toString()	Returns the result of invoking toString on the destination for the output For example the following code formats text into a StringBuilder then retrieves the resultant string Formatter f new Formatter f format Last reboot at tc lastRebootDate String s f toString s Last reboot at Sat Jan 01 00 00 00 PST 2000 An invocation of this method behaves in exactly the same way as the invocation out toString Depending on the specification of toString for the Appendable the returned string may or may not contain the characters written to the destination For instance buffers typically return their contents in toString but streams cannot since the data is discarded
ConcurrentSkipListSet.iterator()	Returns an iterator over the elements in this set in ascending order
Arrays.binarySearch(Object[],Object)	Searches the specified array for the specified object using the binary search algorithm The array must be sorted into ascending order according to the natural ordering of its elements as by the sort Object method prior to making this call
Manifest.Manifest()	Constructs a new empty Manifest
ZipOutputStream.setComment(String)	Sets the ZIP file comment
CopyOnWriteArraySet.contains(Object)	Returns true if this set contains the specified element
ResourceBundle.getBundle(String,Locale,ClassLoader,Control)	Returns a resource bundle using the specified base name target locale class loader and control Unlike the getBundle factory methods with no control argument the given control specifies how to locate and instantiate resource bundles Conceptually the bundle loading process with the given control is performed in the following steps
GregorianCalendar.getMaximum(int)	Returns the maximum value for the given calendar field of this GregorianCalendar instance The maximum value is defined as the largest value returned by the get method for any possible time value taking into consideration the current values of the getFirstDayOfWeek getMinimalDaysInFirstWeek getGregorianChange and getTimeZone methods
Hashtable.Hashtable(int)	Constructs a new empty hashtable with the specified initial capacity and default load factor 0 75
AbstractList.addAll(int,Collection)	Inserts all of the elements in the specified collection into this list at the specified position optional operation Shifts the element currently at that position if any and any subsequent elements to the right increases their indices The new elements will appear in this list in the order that they are returned by the specified collection s iterator The behavior of this operation is undefined if the specified collection is modified while the operation is in progress Note that this will occur if the specified collection is this list and it s nonempty This implementation gets an iterator over the specified collection and iterates over it inserting the elements obtained from the iterator into this list at the appropriate position one at a time using add int E
Vector.addElement(E)	Adds the specified component to the end of this vector increasing its size by one The capacity of this vector is increased if its size becomes greater than its capacity
ArrayDeque.toArray()	Returns an array containing all of the elements in this deque in proper sequence from first to last element
AbstractMap.size()	Returns the number of key value mappings in this map If the map contains more than Integer MAX VALUE elements returns Integer MAX VALUE
ErrorManager.ErrorManager()	
LinkedList.offerFirst(E)	Inserts the specified element at the front of this list
Arrays.sort(char[])	Sorts the specified array into ascending numerical order
ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue,ThreadFactory)	Creates a new ThreadPoolExecutor with the given initial parameters and default rejected execution handler
RecursiveTask.getRawResult()	Description copied from class ForkJoinTask
Hashtable.elements()	Returns an enumeration of the values in this hashtable
CheckedOutputStream.getChecksum()	Returns the Checksum for this output stream
AbstractQueuedLongSynchronizer.releaseShared(long)	Releases in shared mode Implemented by unblocking one or more threads if tryReleaseShared long returns true
Calendar.isLenient()	Tells whether date time interpretation is to be lenient
PriorityBlockingQueue.size()	Description copied from interface Collection
Scanner.hasNextByte(int)	Returns true if the next token in this scanner s input can be interpreted as a byte value in the specified radix using the nextByte method The scanner does not advance past any input
Formatter.out()	Returns the destination for the output
Attributes.clone()	Returns a copy of the Attributes implemented as follows public Object clone return new Attributes this Since the attribute names and values are themselves immutable the Attributes returned can be safely modified without affecting the original
Arrays.deepEquals(Object[],Object[])	Returns true if the two specified arrays are deeply equal to one another Unlike the equals Object Object method this method is appropriate for use with nested arrays of arbitrary depth
Deflater.setStrategy(int)	Sets the compression strategy to the specified value
Preferences.putDouble(String,double)	Associates a string representing the specified double value with the specified key in this preference node The associated string is the one that would be returned if the double value were passed to Double toString double This method is intended for use in conjunction with getDouble java lang String double
Vector.containsAll(Collection)	Returns true if this Vector contains all of the elements in the specified Collection
Observable.hasChanged()	Tests if this object has changed
ReentrantReadWriteLock.getQueueLength()	Returns an estimate of the number of threads waiting to acquire either the read or write lock The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures This method is designed for use in monitoring of the system state not for synchronization control
LogManager.addPropertyChangeListener(PropertyChangeListener)	Adds an event listener to be invoked when the logging properties are re read Adding multiple instances of the same event Listener results in multiple entries in the property event listener table
Timer.purge()	Removes all cancelled tasks from this timer s task queue Calling this method has no effect on the behavior of the timer but eliminates the references to the cancelled tasks from the queue
IllformedLocaleException.IllformedLocaleException()	Constructs a new IllformedLocaleException with no detail message and 1 as the error index
Deflater.setLevel(int)	Sets the current compression level to the specified value
BitSet.get(int)	Returns the value of the bit with the specified index The value is true if the bit with the index bitIndex is currently set in this BitSet otherwise the result is false
Collections.emptySet()	Returns the empty set immutable This set is serializable
ZipEntry.setCompressedSize(long)	Sets the size of the compressed entry data
ConcurrentModificationException.ConcurrentModificationException(String,Throwable)	Constructs a new exception with the specified detail message and cause
Vector.listIterator()	Returns a list iterator over the elements in this list in proper sequence
ServiceLoader.iterator()	Lazily loads the available providers of this loader s service
ReentrantReadWriteLock.ReadLock.tryLock(long,TimeUnit)	Acquires the read lock if the write lock is not held by another thread within the given waiting time and the current thread has not been interrupted
Preferences.keys()	Returns all of the keys that have an associated value in this preference node The returned array will be of size zero if this node has no preferences If the implementation supports stored defaults and there are any such defaults at this node that have not been overridden by explicit preferences the defaults are returned in the array in addition to any explicit preferences
Attributes.remove(Object)	Removes the attribute with the specified name key from this Map
NavigableMap.higherEntry(K)	Returns a key value mapping associated with the least key strictly greater than the given key or null if there is no such key
ConcurrentNavigableMap.subMap(K,boolean,K,boolean)	Description copied from interface NavigableMap
LinkedBlockingDeque.offerLast(E,long,TimeUnit)	Description copied from interface BlockingDeque
NavigableMap.headMap(K,boolean)	Returns a view of the portion of this map whose keys are less than or equal to if inclusive is true toKey The returned map is backed by this map so changes in the returned map are reflected in this map and vice versa The returned map supports all optional map operations that this map supports
Calendar.getLeastMaximum(int)	Returns the lowest maximum value for the given calendar field of this Calendar instance The lowest maximum value is defined as the smallest value returned by getActualMaximum int for any possible time value The least maximum value depends on calendar system specific parameters of the instance For example a Calendar for the Gregorian calendar system returns 28 for the DAY OF MONTH field because the 28th is the last day of the shortest month of this calendar February in a common year
LogRecord.getResourceBundleName()	Get the localization resource bundle name This is the name for the ResourceBundle that should be used to localize the message string before formatting it
PreferenceChangeEvent.getKey()	Returns the key of the preference that was changed
List.removeAll(Collection)	Removes from this list all of its elements that are contained in the specified collection optional operation
Locale.getISO3Country()	Returns a three letter abbreviation for this locale s country
AtomicInteger.longValue()	Description copied from class Number
Preferences.putInt(String,int)	Associates a string representing the specified int value with the specified key in this preference node The associated string is the one that would be returned if the int value were passed to Integer toString int This method is intended for use in conjunction with getInt java lang String int
IdentityHashMap.clone()	Returns a shallow copy of this identity hash map the keys and values themselves are not cloned
AtomicIntegerArray.lazySet(int,int)	Eventually sets the element at position i to the given value
BlockingDeque.add(E)	Inserts the specified element into the queue represented by this deque in other words at the tail of this deque if it is possible to do so immediately without violating capacity restrictions returning true upon success and throwing an IllegalStateException if no space is currently available
LogRecord.setMillis(long)	Set event time
Inflater.inflate(byte[],int,int)	Uncompresses bytes into specified buffer Returns actual number of bytes uncompressed A return value of 0 indicates that needsInput or needsDictionary should be called in order to determine if more input data or a preset dictionary is required
AbstractMap.SimpleEntry.getKey()	Returns the key corresponding to this entry
Properties.getProperty(String)	Searches for the property with the specified key in this property list
PriorityBlockingQueue.clear()	Atomically removes all of the elements from this queue
SynchronousQueue.poll()	Retrieves and removes the head of this queue if another thread is currently making an element available
ArrayList.toArray()	Returns an array containing all of the elements in this list in proper sequence from first to last element
ConcurrentLinkedQueue.addAll(Collection)	Appends all of the elements in the specified collection to the end of this queue in the order that they are returned by the specified collection s iterator Attempts to addAll of a queue to itself result in IllegalArgumentException
ReentrantReadWriteLock.readLock()	Description copied from interface ReadWriteLock
Collection.remove(Object)	Removes a single instance of the specified element from this collection if it is present optional operation More formally removes an element e such that o null e null o equals e if this collection contains one or more such elements Returns true if this collection contained the specified element or equivalently if this collection changed as a result of the call
GregorianCalendar.GregorianCalendar()	Constructs a default GregorianCalendar using the current time in the default time zone with the default locale
HashMap.isEmpty()	Returns true if this map contains no key value mappings
SimpleTimeZone.setDSTSavings(int)	Sets the amount of time in milliseconds that the clock is advanced during daylight saving time
AtomicLongArray.get(int)	Gets the current value at position i
WeakHashMap.values()	Returns a Collection view of the values contained in this map
Map.putAll(Map)	Copies all of the mappings from the specified map to this map optional operation The effect of this call is equivalent to that of calling put k v on this map once for each mapping from key k to value v in the specified map The behavior of this operation is undefined if the specified map is modified while the operation is in progress
ReentrantLock.hasQueuedThreads()	Queries whether any threads are waiting to acquire this lock Note that because cancellations may occur at any time a true return does not guarantee that any other thread will ever acquire this lock This method is designed primarily for use in monitoring of the system state
ScheduledThreadPoolExecutor.submit(Runnable)	Description copied from interface ExecutorService
Inflater.Inflater(boolean)	Creates a new decompressor If the parameter nowrap is true then the ZLIB header and checksum fields will not be used This provides compatibility with the compression format used by both GZIP and PKZIP
Vector.contains(Object)	Returns true if this vector contains the specified element
TreeMap.TreeMap(Comparator)	Constructs a new empty tree map ordered according to the given comparator All keys inserted into the map must be mutually comparable by the given comparator comparator compare k1 k2 must not throw a ClassCastException for any keys k1 and k2 in the map If the user attempts to put a key into the map that violates this constraint the put Object key Object value call will throw a ClassCastException
HashSet.contains(Object)	Returns true if this set contains the specified element
SimpleTimeZone.setEndRule(int,int,int,int)	Sets the daylight saving time end rule For example if daylight saving time ends on the last Sunday in October at 2 am in wall clock time you can set the end rule by calling setEndRule Calendar OCTOBER 1 Calendar SUNDAY 2 60 60 1000
ArrayDeque.pollLast()	Description copied from interface Deque
TreeSet.contains(Object)	Returns true if this set contains the specified element
DeflaterInputStream.read()	Reads a single byte of compressed data from the input stream
LinkedTransferQueue.drainTo(Collection)	Description copied from interface BlockingQueue
DeflaterOutputStream.write(byte[],int,int)	Writes an array of bytes to the compressed output stream This method will block until all the bytes are written
Hashtable.contains(Object)	Tests if some key maps into the specified value in this hashtable
ServiceLoader.toString()	Returns a string describing this service
Map.containsKey(Object)	Returns true if this map contains a mapping for the specified key More formally returns true if and only if this map contains a mapping for a key k such that key null k null key equals k There can be at most one such mapping
InflaterOutputStream.write(int)	Writes a byte to the uncompressed output stream
AbstractQueuedLongSynchronizer.isQueued(Thread)	Returns true if the given thread is currently queued
Collections.frequency(Collection,Object)	Returns the number of elements in the specified collection equal to the specified object More formally returns the number of elements e in the collection such that o null e null o equals e
AtomicLong.set(long)	Sets to the given value
ReentrantReadWriteLock.ReentrantReadWriteLock(boolean)	Creates a new ReentrantReadWriteLock with the given fairness policy
Vector.Vector(Collection)	Constructs a vector containing the elements of the specified collection in the order they are returned by the collection s iterator
LinkedHashMap.LinkedHashMap()	Constructs an empty insertion ordered LinkedHashMap instance with the default initial capacity 16 and load factor 0 75
Arrays.toString(short[])	Returns a string representation of the contents of the specified array
AtomicMarkableReference.set(V,boolean)	Unconditionally sets the value of both the reference and mark
BitSet.clear(int,int)	Sets the bits from the specified fromIndex inclusive to the specified toIndex exclusive to false
Hashtable.hashCode()	Returns the hash code value for this Map as per the definition in the Map interface
ReentrantLock.tryLock(long,TimeUnit)	Acquires the lock if it is not held by another thread within the given waiting time and the current thread has not been interrupted
DelayQueue.size()	Description copied from interface Collection
Preferences.get(String,String)	Returns the value associated with the specified key in this preference node Returns the specified default if there is no value associated with the key or the backing store is inaccessible
Deque.offerFirst(E)	Inserts the specified element at the front of this deque unless it would violate capacity restrictions When using a capacity restricted deque this method is generally preferable to the addFirst E method which can fail to insert an element only by throwing an exception
NavigableMap.floorKey(K)	Returns the greatest key less than or equal to the given key or null if there is no such key
Collections.max(Collection,Comparator)	Returns the maximum element of the given collection according to the order induced by the specified comparator All elements in the collection must be mutually comparable by the specified comparator that is comp compare e1 e2 must not throw a ClassCastException for any elements e1 and e2 in the collection
LinkedTransferQueue.getWaitingConsumerCount()	Description copied from interface TransferQueue
LinkedBlockingDeque.pop()	Description copied from interface Deque
JarEntry.JarEntry(JarEntry)	Creates a new JarEntry with fields taken from the specified JarEntry object
InflaterInputStream.close()	Closes this input stream and releases any system resources associated with the stream
ReentrantReadWriteLock.WriteLock.getHoldCount()	Queries the number of holds on this write lock by the current thread A thread has a hold on a lock for each lock action that is not matched by an unlock action Identical in effect to ReentrantReadWriteLock getWriteHoldCount
ReentrantReadWriteLock.WriteLock.unlock()	Attempts to release this lock
Locale.toLanguageTag()	Returns a well formed IETF BCP 47 language tag representing this locale
ForkJoinPool.getFactory()	Returns the factory used for constructing new workers
TransferQueue.transfer(E)	Transfers the element to a consumer waiting if necessary to do so
AbstractPreferences.name()	Implements the name method as per the specification in Preferences name
Collection.equals(Object)	Compares the specified object with this collection for equality While the Collection interface adds no stipulations to the general contract for the Object equals programmers who implement the Collection interface directly in other words create a class that is a Collection but is not a Set or a List must exercise care if they choose to override the Object equals It is not necessary to do so and the simplest course of action is to rely on Object s implementation but the implementor may wish to implement a value comparison in place of the default reference comparison The List and Set interfaces mandate such value comparisons The general contract for the Object equals method states that equals must be symmetric in other words a equals b if and only if b equals a The contracts for List equals and Set equals state that lists are only equal to other lists and sets to other sets Thus a custom equals method for a collection class that implements neither the List nor Set interface must return false when this collection is compared to any list or set By the same logic it is not possible to write a class that correctly implements both the Set and List interfaces
LinkedBlockingDeque.pollFirst()	Description copied from interface Deque
Arrays.sort(float[],int,int)	Sorts the specified range of the array into ascending order The range to be sorted extends from the index fromIndex inclusive to the index toIndex exclusive If fromIndex toIndex the range to be sorted is empty
LinkedList.pop()	Pops an element from the stack represented by this list In other words removes and returns the first element of this list
EnumSet.of(E,E)	Creates an enum set initially containing the specified elements
Collections.shuffle(List,Random)	Randomly permute the specified list using the specified source of randomness All permutations occur with equal likelihood assuming that the source of randomness is fair
ConcurrentSkipListMap.comparator()	Description copied from interface SortedMap
EnumSet.of(E,E,E,E)	Creates an enum set initially containing the specified elements
BlockingDeque.push(E)	Pushes an element onto the stack represented by this deque In other words inserts the element at the front of this deque unless it would violate capacity restrictions
ForkJoinWorkerThread.getPoolIndex()	Returns the index number of this thread in its pool The returned value ranges from zero to the maximum number of threads minus one that have ever been created in the pool
ResourceBundle.getKeys()	Returns an enumeration of the keys
IllformedLocaleException.IllformedLocaleException(String,int)	Constructs a new IllformedLocaleException with the given message and the error index The error index is the approximate offset from the start of the ill formed value to the point where the parse first detected an error A negative error index value indicates either the error index is not applicable or unknown
PriorityQueue.size()	Description copied from interface Collection
EnumMap.equals(Object)	Compares the specified object with this map for equality Returns true if the given object is also a map and the two maps represent the same mappings as specified in the Map equals Object contract
IllegalFormatConversionException.getConversion()	Returns the inapplicable conversion
LinkedBlockingDeque.takeFirst()	Description copied from interface BlockingDeque
Deque.remove()	Retrieves and removes the head of the queue represented by this deque in other words the first element of this deque
BlockingDeque.contains(Object)	Returns true if this deque contains the specified element
NavigableMap.firstEntry()	Returns a key value mapping associated with the least key in this map or null if the map is empty
ZipFile.ZipFile(String,Charset)	Opens a zip file for reading
EnumMap.clone()	Returns a shallow copy of this enum map The values themselves are not cloned
Level.getLocalizedName()	Return the localized string name of the Level for the current default locale
AtomicLongArray.getAndIncrement(int)	Atomically increments by one the element at index i
AtomicLongArray.getAndSet(int,long)	Atomically sets the element at position i to the given value and returns the old value
Preferences.systemRoot()	Returns the root preference node for the system
Deflater.finish()	When called indicates that compression should end with the current contents of the input buffer
Stack.peek()	Looks at the object at the top of this stack without removing it from the stack
TreeMap.higherEntry(K)	Description copied from interface NavigableMap
BitSet.set(int,boolean)	Sets the bit at the specified index to the specified value
ArrayBlockingQueue.put(E)	Inserts the specified element at the tail of this queue waiting for space to become available if the queue is full
DelayQueue.remove(Object)	Removes a single instance of the specified element from this queue if it is present whether or not it has expired
LinkedList.remove(int)	Removes the element at the specified position in this list Shifts any subsequent elements to the left subtracts one from their indices
Attributes.containsKey(Object)	Returns true if this Map contains the specified attribute name key
Arrays.binarySearch(float[],int,int,float)	Searches a range of the specified array of floats for the specified value using the binary search algorithm
AbstractQueuedSynchronizer.acquireInterruptibly(int)	Acquires in exclusive mode aborting if interrupted
ConcurrentSkipListMap.ConcurrentSkipListMap(Comparator)	Constructs a new empty map sorted according to the specified comparator
Semaphore.availablePermits()	Returns the current number of permits available in this semaphore
SimpleFormatter.format(LogRecord)	Format the given LogRecord
LocaleNameProvider.getDisplayCountry(String,Locale)	Returns a localized name for the given IETF BCP47 region code either ISO 3166 country code or UN M 49 area codes and the given locale that is appropriate for display to the user
DeflaterInputStream.markSupported()	Always returns false because this input stream does not support the mark and reset methods
List.addAll(Collection)	Appends all of the elements in the specified collection to the end of this list in the order that they are returned by the specified collection s iterator optional operation The behavior of this operation is undefined if the specified collection is modified while the operation is in progress Note that this will occur if the specified collection is this list and it s nonempty
ThreadLocalRandom.nextDouble(double,double)	Returns a pseudorandom uniformly distributed value between the given least value inclusive and bound exclusive
LinkedTransferQueue.offer(E,long,TimeUnit)	Inserts the specified element at the tail of this queue
TreeMap.firstEntry()	Description copied from interface NavigableMap
CopyOnWriteArrayList.containsAll(Collection)	Returns true if this list contains all of the elements of the specified collection
AtomicLongFieldUpdater.newUpdater(Class,String)	Creates and returns an updater for objects with the given field
ThreadPoolExecutor.getMaximumPoolSize()	Returns the maximum allowed number of threads
FileHandler.FileHandler(String)	Initialize a FileHandler to write to the given filename
Objects.compare(T,T,Comparator)	Returns 0 if the arguments are identical and c compare a b otherwise
LinkedBlockingQueue.remove(Object)	Removes a single instance of the specified element from this queue if it is present More formally removes an element e such that o equals e if this queue contains one or more such elements
InflaterInputStream.markSupported()	Tests if this input stream supports the mark and reset methods The markSupported method of InflaterInputStream returns false
HashMap.HashMap(int)	Constructs an empty HashMap with the specified initial capacity and the default load factor 0 75
PriorityBlockingQueue.toArray(T[])	Returns an array containing all of the elements in this queue the runtime type of the returned array is that of the specified array
Scanner.nextFloat()	Scans the next token of the input as a float
UUID.getLeastSignificantBits()	Returns the least significant 64 bits of this UUID s 128 bit value
Calendar.set(int,int,int)	Sets the values for the calendar fields YEAR MONTH and DAY OF MONTH
Scanner.nextLong()	Scans the next token of the input as a long
TimeZone.getAvailableIDs(int)	Gets the available IDs according to the given time zone offset in milliseconds
ConcurrentHashMap.remove(Object,Object)	Removes the entry for a key only if currently mapped to a given value
Vector.insertElementAt(E,int)	Inserts the specified object as a component in this vector at the specified index Each component in this vector with an index greater or equal to the specified index is shifted upward to have an index one greater than the value it had previously
ReentrantLock.lockInterruptibly()	Acquires the lock unless the current thread is interrupted
EventObject.EventObject(Object)	Constructs a prototypical Event
Scanner.remove()	The remove operation is not supported by this implementation of Iterator
List.toArray()	Returns an array containing all of the elements in this list in proper sequence from first to last element
Matcher.replaceAll(String)	Replaces every subsequence of the input sequence that matches the pattern with the given replacement string
NavigableMap.higherKey(K)	Returns the least key strictly greater than the given key or null if there is no such key
FutureTask.isDone()	Description copied from interface Future
Vector.indexOf(Object)	Returns the index of the first occurrence of the specified element in this vector or 1 if this vector does not contain the element
BackingStoreException.BackingStoreException(Throwable)	Constructs a BackingStoreException with the specified cause
DelayQueue.DelayQueue(Collection)	Creates a DelayQueue initially containing the elements of the given collection of Delayed instances
ForkJoinPool.execute(ForkJoinTask)	Arranges for asynchronous execution of the given task
Arrays.copyOfRange(T[],int,int)	Copies the specified range of the specified array into a new array
Formatter.Formatter()	Constructs a new formatter
ConcurrentSkipListSet.headSet(E,boolean)	Description copied from interface NavigableSet
Formatter.Formatter(File,String,Locale)	Constructs a new formatter with the specified file charset and locale
Executors.newScheduledThreadPool(int,ThreadFactory)	Creates a thread pool that can schedule commands to run after a given delay or to execute periodically
ConcurrentMap.replace(K,V,V)	Replaces the entry for a key only if currently mapped to a given value
BitSet.equals(Object)	Compares this object against the specified object
ConcurrentSkipListMap.navigableKeySet()	Description copied from interface ConcurrentNavigableMap
Phaser.Phaser()	Creates a new phaser with no initially registered parties no parent and initial phase number 0 Any thread using this phaser will need to first register for it
PatternSyntaxException.getMessage()	Returns a multi line string containing the description of the syntax error and its index the erroneous regular expression pattern and a visual indication of the error index within the pattern
ArrayDeque.element()	Retrieves but does not remove the head of the queue represented by this deque This method differs from peek only in that it throws an exception if this deque is empty
ResourceBundle.getBundle(String)	Gets a resource bundle using the specified base name the default locale and the caller s class loader Calling this method is equivalent to calling getBundle baseName Locale getDefault this getClass getClassLoader except that getClassLoader is run with the security privileges of ResourceBundle
DelayQueue.put(E)	Inserts the specified element into this delay queue As the queue is unbounded this method will never block
Pack200.Packer.pack(JarInputStream,OutputStream)	Takes a JarInputStream and converts it into a Pack200 archive
AtomicMarkableReference.getReference()	Returns the current value of the reference
Collections.synchronizedCollection(Collection)	Returns a synchronized thread safe collection backed by the specified collection In order to guarantee serial access it is critical that all access to the backing collection is accomplished through the returned collection
Matcher.find(int)	Resets this matcher and then attempts to find the next subsequence of the input sequence that matches the pattern starting at the specified index
ThreadLocalRandom.nextInt(int,int)	Returns a pseudorandom uniformly distributed value between the given least value inclusive and bound exclusive
PropertyPermission.hashCode()	Returns the hash code value for this object
HashSet.add(E)	Adds the specified element to this set if it is not already present
Logger.getAnonymousLogger()	Create an anonymous Logger The newly created Logger is not registered in the LogManager namespace There will be no access checks on updates to the logger
SortedMap.values()	Returns a Collection view of the values contained in this map
ArrayBlockingQueue.drainTo(Collection)	Description copied from interface BlockingQueue
LinkedList.peekLast()	Retrieves but does not remove the last element of this list or returns null if this list is empty
AtomicIntegerArray.AtomicIntegerArray(int[])	Creates a new AtomicIntegerArray with the same length as and all elements copied from the given array
Map.Entry.getKey()	Returns the key corresponding to this entry
Pattern.matches(String,CharSequence)	Compiles the given regular expression and attempts to match the given input against it
GregorianCalendar.roll(int,int)	Adds a signed amount to the specified calendar field without changing larger fields
ListIterator.remove()	Removes from the list the last element that was returned by next or previous optional operation This call can only be made once per call to next or previous
BlockingQueue.offer(E,long,TimeUnit)	Inserts the specified element into this queue waiting up to the specified wait time if necessary for space to become available
ConcurrentHashMap.keys()	Returns an enumeration of the keys in this table
ZipOutputStream.ZipOutputStream(OutputStream)	Creates a new ZIP output stream
MissingFormatArgumentException.getMessage()	Description copied from class Throwable
CopyOnWriteArrayList.indexOf(E,int)	Returns the index of the first occurrence of the specified element in this list searching forwards from index or returns 1 if the element is not found
ThreadPoolExecutor.DiscardOldestPolicy.rejectedExecution(Runnable,ThreadPoolExecutor)	Obtains and ignores the next task that the executor would otherwise execute if one is immediately available and then retries execution of task r unless the executor is shut down in which case task r is instead discarded
Currency.getCurrencyCode()	Gets the ISO 4217 currency code of this currency
Preferences.addNodeChangeListener(NodeChangeListener)	Registers the specified listener to receive node change events for this node A node change event is generated when a child node is added to or removed from this node A single removeNode invocation results in multiple node change events one for every node in the subtree rooted at the removed node Events are only guaranteed for changes made within the same JVM as the registered listener though some implementations may generate events for changes made outside this JVM Events may be generated before the changes have become permanent Events are not generated when indirect descendants of this node are added or removed a caller desiring such events must register with each descendant
ZipFile.getComment()	Returns the zip file comment or null if none
Checksum.update(int)	Updates the current checksum with the specified byte
InvalidPreferencesFormatException.InvalidPreferencesFormatException(String)	Constructs an InvalidPreferencesFormatException with the specified detail message
ArrayList.removeAll(Collection)	Removes from this list all of its elements that are contained in the specified collection
AtomicIntegerArray.weakCompareAndSet(int,int,int)	Atomically sets the element at position i to the given updated value if the current value the expected value
ForkJoinWorkerThread.run()	This method is required to be public but should never be called explicitly It performs the main run loop to execute ForkJoinTasks
ConcurrentLinkedDeque.contains(Object)	Returns true if this deque contains at least one element e such that o equals e
ConcurrentSkipListMap.lastKey()	Description copied from interface SortedMap
BlockingDeque.offerFirst(E)	Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions returning true upon success and false if no space is currently available
Arrays.copyOf(double[],int)	Copies the specified array truncating or padding with zeros if necessary so the copy has the specified length For all indices that are valid in both the original array and the copy the two arrays will contain identical values For any indices that are valid in the copy but not the original the copy will contain 0d
Calendar.getInstance(Locale)	Gets a calendar using the default time zone and specified locale
Matcher.usePattern(Pattern)	Changes the Pattern that this Matcher uses to find matches with
LogRecord.getSourceClassName()	Get the name of the class that allegedly issued the logging request
AtomicLongFieldUpdater.incrementAndGet(T)	Atomically increments by one the current value of the field of the given object managed by this updater
SimpleTimeZone.hasSameRules(TimeZone)	Returns true if this zone has the same rules and offset as another zone
AbstractQueuedLongSynchronizer.getWaitQueueLength(ConditionObject)	Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer Note that because timeouts and interrupts may occur at any time the estimate serves only as an upper bound on the actual number of waiters This method is designed for use in monitoring of the system state not for synchronization control
ArrayList.indexOf(Object)	Returns the index of the first occurrence of the specified element in this list or 1 if this list does not contain the element
BitSet.flip(int,int)	Sets each bit from the specified fromIndex inclusive to the specified toIndex exclusive to the complement of its current value
ReentrantReadWriteLock.WriteLock.newCondition()	Returns a Condition instance for use with this Lock instance
TimeZone.clone()	Creates a copy of this TimeZone
AtomicIntegerFieldUpdater.newUpdater(Class,String)	Creates and returns an updater for objects with the given field
ConcurrentSkipListMap.descendingMap()	Description copied from interface ConcurrentNavigableMap
BitSet.valueOf(long[])	Returns a new bit set containing all the bits in the given long array
AbstractQueue.add(E)	Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions returning true upon success and throwing an IllegalStateException if no space is currently available
AbstractCollection.size()	Description copied from interface Collection
TreeMap.firstKey()	Description copied from interface SortedMap
TreeMap.lowerKey(K)	Description copied from interface NavigableMap
TreeSet.tailSet(E)	Description copied from interface NavigableSet
SortedSet.tailSet(E)	Returns a view of the portion of this set whose elements are greater than or equal to fromElement The returned set is backed by this set so changes in the returned set are reflected in this set and vice versa The returned set supports all optional set operations that this set supports
ArrayBlockingQueue.take()	Description copied from interface BlockingQueue
AbstractSequentialList.add(int,E)	Inserts the specified element at the specified position in this list optional operation Shifts the element currently at that position if any and any subsequent elements to the right adds one to their indices
Collection.isEmpty()	Returns true if this collection contains no elements
CopyOnWriteArrayList.addAll(int,Collection)	Inserts all of the elements in the specified collection into this list starting at the specified position Shifts the element currently at that position if any and any subsequent elements to the right increases their indices The new elements will appear in this list in the order that they are returned by the specified collection s iterator
ConcurrentLinkedDeque.removeFirstOccurrence(Object)	Removes the first element e such that o equals e if such an element exists in this deque
MatchResult.end(int)	Returns the offset after the last character of the subsequence captured by the given group during this match
Set.iterator()	Returns an iterator over the elements in this set The elements are returned in no particular order unless this set is an instance of some class that provides a guarantee
ConcurrentSkipListSet.comparator()	Description copied from interface SortedSet
Semaphore.isFair()	Returns true if this semaphore has fairness set true
Date.setDate(int)	Sets the day of the month of this Date object to the specified value This Date object is modified so that it represents a point in time within the specified day of the month with the year month hour minute and second the same as before as interpreted in the local time zone If the date was April 30 for example and the date is set to 31 then it will be treated as if it were on May 1 because April has only 30 days
ConcurrentSkipListSet.descendingIterator()	Returns an iterator over the elements in this set in descending order
ScheduledThreadPoolExecutor.getExecuteExistingDelayedTasksAfterShutdownPolicy()	Gets the policy on whether to execute existing delayed tasks even when this executor has been shutdown
AbstractQueuedSynchronizer.isQueued(Thread)	Returns true if the given thread is currently queued
LinkedBlockingDeque.peekFirst()	Description copied from interface Deque
TreeSet.last()	Description copied from interface SortedSet
AtomicLong.weakCompareAndSet(long,long)	Atomically sets the value to the given updated value if the current value the expected value
UUID.nameUUIDFromBytes(byte[])	Static factory to retrieve a type 3 name based UUID based on the specified byte array
DeflaterOutputStream.DeflaterOutputStream(OutputStream,Deflater,boolean)	Creates a new output stream with the specified compressor flush mode and a default buffer size
ConcurrentLinkedDeque.element()	Description copied from interface Deque
Locale.getISOLanguages()	Returns a list of all 2 letter language codes defined in ISO 639
AbstractSequentialList.listIterator(int)	Returns a list iterator over the elements in this list in proper sequence
ForkJoinPool.isTerminating()	Returns true if the process of termination has commenced but not yet completed This method may be useful for debugging A return of true reported a sufficient period after shutdown may indicate that submitted tasks have ignored or suppressed interruption or are waiting for IO causing this executor not to properly terminate See the advisory notes for class ForkJoinTask stating that tasks should not normally entail blocking operations But if they do they must abort them on interrupt
InflaterOutputStream.InflaterOutputStream(OutputStream,Inflater)	Creates a new output stream with the specified decompressor and a default buffer size
LogRecord.getThrown()	Get any throwable associated with the log record
CRC32.getValue()	Returns CRC 32 value
Hashtable.put(K,V)	Maps the specified key to the specified value in this hashtable Neither the key nor the value can be null The value can be retrieved by calling the get method with a key that is equal to the original key
ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy(boolean)	Sets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation This value is by default false
Locale.forLanguageTag(String)	Returns a locale for the specified IETF BCP 47 language tag string
Executors.newFixedThreadPool(int)	Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue At any point at most nThreads threads will be active processing tasks
Arrays.sort(T[],Comparator)	Sorts the specified array of objects according to the order induced by the specified comparator All elements in the array must be mutually comparable by the specified comparator that is c compare e1 e2 must not throw a ClassCastException for any elements e1 and e2 in the array
EventListenerProxy.getListener()	Returns the listener associated with the proxy
Currency.getSymbol(Locale)	Gets the symbol of this currency for the specified locale
Collections.checkedSortedMap(SortedMap,Class,Class)	Returns a dynamically typesafe view of the specified sorted map
ArrayList.toArray(T[])	Returns an array containing all of the elements in this list in proper sequence from first to last element the runtime type of the returned array is that of the specified array If the list fits in the specified array it is returned therein Otherwise a new array is allocated with the runtime type of the specified array and the size of this list
Vector.ensureCapacity(int)	Increases the capacity of this vector if necessary to ensure that it can hold at least the number of components specified by the minimum capacity argument
WeakHashMap.isEmpty()	Returns true if this map contains no key value mappings
LogRecord.setLoggerName(String)	Set the source Logger s name
Currency.getNumericCode()	Returns the ISO 4217 numeric code of this currency
Timer.schedule(TimerTask,Date,long)	Schedules the specified task for repeated fixed delay execution beginning at the specified time Subsequent executions take place at approximately regular intervals separated by the specified period
LogManager.reset()	Reset the logging configuration
Attributes.getValue(Name)	Returns the value of the specified Attributes Name or null if the attribute was not found
ArrayBlockingQueue.ArrayBlockingQueue(int)	Creates an ArrayBlockingQueue with the given fixed capacity and default access policy
Calendar.setLenient(boolean)	Specifies whether or not date time interpretation is to be lenient With lenient interpretation a date such as February 942 1996 will be treated as being equivalent to the 941st day after February 1 1996
AtomicLong.doubleValue()	Description copied from class Number
LinkedList.removeFirst()	Removes and returns the first element from this list
ForkJoinTask.quietlyInvoke()	Commences performing this task and awaits its completion if necessary without returning its result or throwing its exception
Calendar.getInstance(TimeZone,Locale)	Gets a calendar with the specified time zone and locale
Objects.hash()	Generates a hash code for a sequence of input values The hash code is generated as if all the input values were placed into an array and that array were hashed by calling Arrays hashCode Object
ForkJoinPool.getParallelism()	Returns the targeted parallelism level of this pool
AtomicLongFieldUpdater.weakCompareAndSet(T,long,long)	Atomically sets the field of the given object managed by this updater to the given updated value if the current value the expected value This method is guaranteed to be atomic with respect to other calls to compareAndSet and set but not necessarily with respect to other changes in the field
TreeMap.comparator()	Description copied from interface SortedMap
LinkedBlockingDeque.addLast(E)	Description copied from interface BlockingDeque
ConcurrentHashMap.containsKey(Object)	Tests if the specified object is a key in this table
Locale.Builder.clearExtensions()	Resets the extensions to their initial empty state
ArrayDeque.getLast()	Description copied from interface Deque
PropertyPermission.newPermissionCollection()	Returns a new PermissionCollection object for storing PropertyPermission objects
Collections.singleton(T)	Returns an immutable set containing only the specified object
AbstractMap.SimpleImmutableEntry.toString()	Returns a String representation of this map entry This implementation returns the string representation of this entry s key followed by the equals character followed by the string representation of this entry s value
Properties.load(Reader)	Reads a property list key and element pairs from the input character stream in a simple line oriented format
LinkedBlockingDeque.toString()	Description copied from class AbstractCollection
Calendar.equals(Object)	Compares this Calendar to the specified Object The result is true if and only if the argument is a Calendar object of the same calendar system that represents the same time value millisecond offset from the Epoch under the same Calendar parameters as this object
ZipEntry.setTime(long)	Sets the modification time of the entry
BlockingQueue.poll(long,TimeUnit)	Retrieves and removes the head of this queue waiting up to the specified wait time if necessary for an element to become available
Future.get()	Waits if necessary for the computation to complete and then retrieves its result
HashMap.values()	Returns a Collection view of the values contained in this map
Date.UTC(int,int,int,int,int,int)	Determines the date and time based on the arguments The arguments are interpreted as a year month day of the month hour of the day minute within the hour and second within the minute exactly as for the Date constructor with six arguments except that the arguments are interpreted relative to UTC rather than to the local time zone The time indicated is returned represented as the distance measured in milliseconds of that time from the epoch 00 00 00 GMT on January 1 1970
Calendar.setTimeInMillis(long)	Sets this Calendar s current time from the given long value
TreeMap.descendingKeySet()	Description copied from interface NavigableMap
ArrayList.ArrayList()	Constructs an empty list with an initial capacity of ten
BlockingDeque.putFirst(E)	Inserts the specified element at the front of this deque waiting if necessary for space to become available
LogRecord.setThrown(Throwable)	Set a throwable associated with the log event
Inflater.reset()	Resets inflater so that a new set of input data can be processed
NavigableSet.higher(E)	Returns the least element in this set strictly greater than the given element or null if there is no such element
Scanner.hasNextShort()	Returns true if the next token in this scanner s input can be interpreted as a short value in the default radix using the nextShort method The scanner does not advance past any input
TreeMap.containsKey(Object)	Returns true if this map contains a mapping for the specified key
ConcurrentSkipListSet.subSet(E,boolean,E,boolean)	Description copied from interface NavigableSet
Set.toArray()	Returns an array containing all of the elements in this set
ReentrantReadWriteLock.ReentrantReadWriteLock()	Creates a new ReentrantReadWriteLock with default nonfair ordering properties
ReentrantReadWriteLock.ReadLock.unlock()	Attempts to release this lock
TimeZone.TimeZone()	Sole constructor For invocation by subclass constructors typically implicit
ArrayList.size()	Returns the number of elements in this list
CopyOnWriteArrayList.lastIndexOf(E,int)	Returns the index of the last occurrence of the specified element in this list searching backwards from index or returns 1 if the element is not found
Handler.setErrorManager(ErrorManager)	Define an ErrorManager for this Handler
Calendar.getWeeksInWeekYear()	Returns the number of weeks in the week year represented by this Calendar
HashMap.get(Object)	Returns the value to which the specified key is mapped or null if this map contains no mapping for the key
AbstractMap.remove(Object)	Removes the mapping for a key from this map if it is present optional operation More formally if this map contains a mapping from key k to value v such that key null k null key equals k that mapping is removed The map can contain at most one such mapping Returns the value to which this map previously associated the key or null if the map contained no mapping for the key
Logger.log(Level,String,Object)	Log a message with one object parameter
AtomicLongFieldUpdater.set(T,long)	Sets the field of the given object managed by this updater to the given updated value This operation is guaranteed to act as a volatile store with respect to subsequent invocations of compareAndSet
ConcurrentSkipListMap.lowerKey(K)	Description copied from interface NavigableMap
BackingStoreException.BackingStoreException(String)	Constructs a BackingStoreException with the specified detail message
Preferences.getLong(String,long)	Returns the long value represented by the string associated with the specified key in this preference node The string is converted to a long as by Long parseLong String Returns the specified default if there is no value associated with the key the backing store is inaccessible or if Long parseLong String would throw a NumberFormatException if the associated value were passed This method is intended for use in conjunction with putLong java lang String long
Objects.requireNonNull(T)	Checks that the specified object reference is not null This method is designed primarily for doing parameter validation in methods and constructors as demonstrated below public Foo Bar bar this bar Objects requireNonNull bar
Arrays.binarySearch(T[],T,Comparator)	Searches the specified array for the specified object using the binary search algorithm The array must be sorted into ascending order according to the specified comparator as by the sort T Comparator method prior to making this call If it is not sorted the results are undefined
AtomicIntegerArray.getAndDecrement(int)	Atomically decrements by one the element at index i
LinkedBlockingQueue.remainingCapacity()	Returns the number of additional elements that this queue can ideally in the absence of memory or resource constraints accept without blocking This is always equal to the initial capacity of this queue less the current size of this queue
ConcurrentLinkedDeque.offerLast(E)	Inserts the specified element at the end of this deque
Collections.list(Enumeration)	Returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration This method provides interoperability between legacy APIs that return enumerations and new APIs that require collections
PriorityQueue.PriorityQueue(Collection)	Creates a PriorityQueue containing the elements in the specified collection If the specified collection is an instance of a SortedSet or is another PriorityQueue this priority queue will be ordered according to the same ordering
TreeMap.lastKey()	Description copied from interface SortedMap
LinkedBlockingDeque.removeLast()	Description copied from interface Deque
TransferQueue.tryTransfer(E)	Transfers the element to a waiting consumer immediately if possible
AtomicInteger.intValue()	Description copied from class Number
GZIPOutputStream.finish()	Finishes writing compressed data to the output stream without closing the underlying stream Use this method when applying multiple filters in succession to the same output stream
Locale.Locale.forLanguageTag("en-US-x-lvariant-POSIX");)	
Logger.removeHandler(Handler)	Remove a log Handler
Logger.logp(Level,String,String,String)	Log a message specifying source class and method with no arguments
Deflater.Deflater(int,boolean)	Creates a new compressor using the specified compression level
IdentityHashMap.putAll(Map)	Copies all of the mappings from the specified map to this map
Collections.enumeration(Collection)	Returns an enumeration over the specified collection This provides interoperability with legacy APIs that require an enumeration as input
LinkedList.addAll(Collection)	Appends all of the elements in the specified collection to the end of this list in the order that they are returned by the specified collection s iterator The behavior of this operation is undefined if the specified collection is modified while the operation is in progress Note that this will occur if the specified collection is this list and it s nonempty
Scanner.nextBoolean()	Scans the next token of the input into a boolean value and returns that value This method will throw InputMismatchException if the next token cannot be translated into a valid boolean value
EventListenerProxy.EventListenerProxy(EventListener>)	Creates a proxy for the specified listener
Locale.getCountry()	Returns the country region code for this locale which should either be the empty string an uppercase ISO 3166 2 letter code or a UN M 49 3 digit code
ConcurrentLinkedDeque.pollFirst()	Description copied from interface Deque
ConcurrentSkipListMap.tailMap(K,boolean)	Description copied from interface NavigableMap
ConcurrentSkipListMap.remove(Object)	Removes the mapping for the specified key from this map if present
ConcurrentSkipListSet.clone()	Returns a shallow copy of this ConcurrentSkipListSet instance The elements themselves are not cloned
ReentrantReadWriteLock.writeLock()	Description copied from interface ReadWriteLock
Dictionary.get(Object)	Returns the value to which the key is mapped in this dictionary
AtomicReferenceArray.weakCompareAndSet(int,E,E)	Atomically sets the element at position i to the given updated value if the current value the expected value
Arrays.sort(byte[])	Sorts the specified array into ascending numerical order
Locale.equals(Object)	Returns true if this Locale is equal to another object A Locale is deemed equal to another Locale with identical language script country variant and extensions and unequal to all other objects
List.add(E)	Appends the specified element to the end of this list optional operation
LinkedList.add(int,E)	Inserts the specified element at the specified position in this list
StringTokenizer.hasMoreElements()	Returns the same value as the hasMoreTokens method It exists so that this class can implement the Enumeration interface
Scanner.Scanner(Path)	Constructs a new Scanner that produces values scanned from the specified file Bytes from the file are converted into characters using the underlying platform s default charset
AtomicMarkableReference.AtomicMarkableReference(V,boolean)	Creates a new AtomicMarkableReference with the given initial values
HashMap.clear()	Removes all of the mappings from this map
LinkedHashMap.containsValue(Object)	Returns true if this map maps one or more keys to the specified value
ScheduledThreadPoolExecutor.ScheduledThreadPoolExecutor(int,RejectedExecutionHandler)	Creates a new ScheduledThreadPoolExecutor with the given initial parameters
CopyOnWriteArrayList.iterator()	Returns an iterator over the elements in this list in proper sequence
AbstractPreferences.addNodeChangeListener(NodeChangeListener)	Description copied from class Preferences
AbstractMap.isEmpty()	Returns true if this map contains no key value mappings
JarFile.entries()	Returns an enumeration of the zip file entries
Collection.removeAll(Collection)	Removes all of this collection s elements that are also contained in the specified collection optional operation After this call returns this collection will contain no elements in common with the specified collection
ConcurrentSkipListMap.equals(Object)	Compares the specified object with this map for equality
NavigableMap.tailMap(K)	Returns a view of the portion of this map whose keys are greater than or equal to fromKey The returned map is backed by this map so changes in the returned map are reflected in this map and vice versa The returned map supports all optional map operations that this map supports
Date.getMinutes()	Returns the number of minutes past the hour represented by this date as interpreted in the local time zone
LoggingMXBean.getLoggerLevel(String)	Gets the name of the log level associated with the specified logger
LogManager.readConfiguration()	Reinitialize the logging properties and reread the logging configuration
ForkJoinTask.isCompletedNormally()	Returns true if this task completed without throwing an exception and was not cancelled
TreeMap.lastEntry()	Description copied from interface NavigableMap
List.hashCode()	Returns the hash code value for this list The hash code of a list is defined to be the result of the following calculation int hashCode 1 for E e list hashCode 31 hashCode e null 0 e hashCode This ensures that list1 equals list2 implies that list1 hashCode list2 hashCode for any two lists list1 and list2 as required by the general contract of Object hashCode
AbstractList.listIterator(int)	Returns a list iterator over the elements in this list in proper sequence starting at the specified position in the list
Semaphore.acquireUninterruptibly(int)	Acquires the given number of permits from this semaphore blocking until all are available
LockSupport.parkUntil(long)	Disables the current thread for thread scheduling purposes until the specified deadline unless the permit is available
Scanner.delimiter()	Returns the Pattern this Scanner is currently using to match delimiters
FutureTask.FutureTask(Callable)	Creates a FutureTask that will upon running execute the given Callable
AbstractExecutorService.submit(Callable)	Description copied from interface ExecutorService
BitSet.length()	Returns the logical size of this BitSet the index of the highest set bit in the BitSet plus one Returns zero if the BitSet contains no set bits
Currency.getInstance(String)	Returns the Currency instance for the given currency code
Scanner.locale()	Returns this scanner s locale
Arrays.fill(char[],char)	Assigns the specified char value to each element of the specified array of chars
CyclicBarrier.await(long,TimeUnit)	Waits until all parties have invoked await on this barrier or the specified waiting time elapses
NavigableSet.lower(E)	Returns the greatest element in this set strictly less than the given element or null if there is no such element
AbstractSequentialList.remove(int)	Removes the element at the specified position in this list optional operation Shifts any subsequent elements to the left subtracts one from their indices Returns the element that was removed from the list
PriorityBlockingQueue.toArray()	Returns an array containing all of the elements in this queue
Hashtable.Hashtable(int,float)	Constructs a new empty hashtable with the specified initial capacity and the specified load factor
JarOutputStream.JarOutputStream(OutputStream)	Creates a new JarOutputStream with no manifest
Collections.fill(List,T)	Replaces all of the elements of the specified list with the specified element This method runs in linear time
List.listIterator(int)	Returns a list iterator over the elements in this list in proper sequence starting at the specified position in the list
UUID.compareTo(UUID)	Compares this UUID with the specified UUID
ReentrantReadWriteLock.ReadLock.toString()	Returns a string identifying this lock as well as its lock state
ConcurrentHashMap.ConcurrentHashMap(int,float,int)	Creates a new empty map with the specified initial capacity load factor and concurrency level
IllegalFormatWidthException.IllegalFormatWidthException(int)	Constructs an instance of this class with the specified width
ListIterator.hasNext()	Returns true if this list iterator has more elements when traversing the list in the forward direction In other words returns true if next would return an element rather than throwing an exception
HashMap.clone()	Returns a shallow copy of this HashMap instance the keys and values themselves are not cloned
Date.getTimezoneOffset()	Returns the offset measured in minutes for the local time zone relative to UTC that is appropriate for the time represented by this Date object
MatchResult.start(int)	Returns the start index of the subsequence captured by the given group during this match
TreeMap.TreeMap(Map)	Constructs a new tree map containing the same mappings as the given map ordered according to the natural ordering of its keys
AtomicIntegerFieldUpdater.get(T)	Gets the current value held in the field of the given object managed by this updater
GregorianCalendar.getWeeksInWeekYear()	Returns the number of weeks in the week year represented by this GregorianCalendar
BlockingQueue.drainTo(Collection,int)	Removes at most the given number of available elements from this queue and adds them to the given collection A failure encountered while attempting to add elements to collection c may result in elements being in neither either or both collections when the associated exception is thrown Attempts to drain a queue to itself result in IllegalArgumentException Further the behavior of this operation is undefined if the specified collection is modified while the operation is in progress
AtomicLong.getAndIncrement()	Atomically increments by one the current value
TreeSet.TreeSet(SortedSet)	Constructs a new tree set containing the same elements and using the same ordering as the specified sorted set
Collections.checkedSet(Set,Class)	Returns a dynamically typesafe view of the specified set
TreeMap.TreeMap(SortedMap)	Constructs a new tree map containing the same mappings and using the same ordering as the specified sorted map This method runs in linear time
DelayQueue.take()	Retrieves and removes the head of this queue waiting if necessary until an element with an expired delay is available on this queue
Condition.await()	Causes the current thread to wait until it is signalled or interrupted
AtomicBoolean.weakCompareAndSet(boolean,boolean)	Atomically sets the value to the given updated value if the current value the expected value
Date.setMinutes(int)	Sets the minutes of this Date object to the specified value
PriorityBlockingQueue.poll()	Description copied from interface Queue
HashSet.HashSet(int)	Constructs a new empty set the backing HashMap instance has the specified initial capacity and default load factor 0 75
Set.contains(Object)	Returns true if this set contains the specified element
SortedSet.first()	Returns the first lowest element currently in this set
ConcurrentSkipListMap.floorKey(K)	Description copied from interface NavigableMap
Pack200.Packer.removePropertyChangeListener(PropertyChangeListener)	Remove a listener for PropertyChange events added by the addPropertyChangeListener java beans PropertyChangeListener
Semaphore.Semaphore(int)	Creates a Semaphore with the given number of permits and nonfair fairness setting
TreeMap.putAll(Map)	Copies all of the mappings from the specified map to this map
Logger.entering(String,String,Object)	Log a method entry with one parameter
AtomicBoolean.set(boolean)	Unconditionally sets to the given value
Logger.finer(String)	Log a FINER message
ConcurrentLinkedDeque.iterator()	Returns an iterator over the elements in this deque in proper sequence
EnumSet.of(E,E,E)	Creates an enum set initially containing the specified elements
CountDownLatch.await()	Causes the current thread to wait until the latch has counted down to zero unless the thread is interrupted
Executors.unconfigurableExecutorService(ExecutorService)	Returns an object that delegates all defined ExecutorService methods to the given executor but not any other methods that might otherwise be accessible using casts This provides a way to safely freeze configuration and disallow tuning of a given concrete implementation
ConcurrentSkipListMap.headMap(K,boolean)	Description copied from interface NavigableMap
LinkedBlockingDeque.drainTo(Collection)	Description copied from interface BlockingQueue
Preferences.clear()	Removes all of the preferences key value associations in this preference node This call has no effect on any descendants of this node
Logger.getLogger(String,String)	Find or create a logger for a named subsystem If a logger has already been created with the given name it is returned Otherwise a new logger is created
BlockingDeque.take()	Retrieves and removes the head of the queue represented by this deque in other words the first element of this deque waiting if necessary until an element becomes available
Locale.getVariant()	Returns the variant code for this locale
SortedMap.firstKey()	Returns the first lowest key currently in this map
Locale.getExtensionKeys()	Returns the set of extension keys associated with this locale or the empty set if it has no extensions The returned set is unmodifiable
DeflaterInputStream.available()	Returns 0 after EOF has been reached otherwise always return 1
Preferences.getFloat(String,float)	Returns the float value represented by the string associated with the specified key in this preference node The string is converted to an integer as by Float parseFloat String Returns the specified default if there is no value associated with the key the backing store is inaccessible or if Float parseFloat String would throw a NumberFormatException if the associated value were passed
GregorianCalendar.GregorianCalendar(int,int,int,int,int,int)	Constructs a GregorianCalendar with the given date and time set for the default time zone with the default locale
NavigableMap.ceilingKey(K)	Returns the least key greater than or equal to the given key or null if there is no such key
Scanner.hasNextByte()	Returns true if the next token in this scanner s input can be interpreted as a byte value in the default radix using the nextByte method The scanner does not advance past any input
CopyOnWriteArrayList.toArray()	Returns an array containing all of the elements in this list in proper sequence from first to last element
Pattern.compile(String,int)	Compiles the given regular expression into a pattern with the given flags
Vector.hashCode()	Returns the hash code value for this Vector
AbstractMap.put(K,V)	Associates the specified value with the specified key in this map optional operation If the map previously contained a mapping for the key the old value is replaced by the specified value A map m is said to contain a mapping for a key k if and only if m containsKey k would return true This implementation always throws an UnsupportedOperationException
Locale.getLanguage()	Returns the language code of this Locale
MatchResult.group(int)	Returns the input subsequence captured by the given group during the previous match operation
LinkedBlockingQueue.contains(Object)	Returns true if this queue contains the specified element
AtomicReferenceFieldUpdater.compareAndSet(T,V,V)	Atomically sets the field of the given object managed by this updater to the given updated value if the current value the expected value This method is guaranteed to be atomic with respect to other calls to compareAndSet and set but not necessarily with respect to other changes in the field
CheckedInputStream.read(byte[],int,int)	Reads into an array of bytes If len is not zero the method blocks until some input is available otherwise no bytes are read and 0 is returned
TreeSet.size()	Returns the number of elements in this set its cardinality
Calendar.getAvailableLocales()	Returns an array of all locales for which the getInstance methods of this class can return localized instances
PriorityBlockingQueue.remainingCapacity()	Always returns Integer MAX VALUE because a PriorityBlockingQueue is not capacity constrained
Set.addAll(Collection)	Adds all of the elements in the specified collection to this set if they re not already present optional operation If the specified collection is also a set the addAll operation effectively modifies this set so that its value is the union of the two sets The behavior of this operation is undefined if the specified collection is modified while the operation is in progress
JarEntry.getCertificates()	Returns the Certificate objects for this entry or null if none This method can only be called once the JarEntry has been completely verified by reading from the entry input stream until the end of the stream has been reached Otherwise this method will return null
ForkJoinPool.getPoolSize()	Returns the number of worker threads that have started but not yet terminated The result returned by this method may differ from getParallelism when threads are created to maintain parallelism when others are cooperatively blocked
Future.isCancelled()	Returns true if this task was cancelled before it completed normally
ThreadPoolExecutor.DiscardPolicy.rejectedExecution(Runnable,ThreadPoolExecutor)	Does nothing which has the effect of discarding task r
LinkedBlockingQueue.put(E)	Inserts the specified element at the tail of this queue waiting if necessary for space to become available
AbstractQueuedLongSynchronizer.getWaitingThreads(ConditionObject)	Returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer Because the actual set of threads may change dynamically while constructing this result the returned collection is only a best effort estimate The elements of the returned collection are in no particular order
UUID.timestamp()	The timestamp value associated with this UUID
TreeSet.isEmpty()	Returns true if this set contains no elements
Logger.finest(String)	Log a FINEST message
Locale.getDisplayLanguage(Locale)	Returns a name for the locale s language that is appropriate for display to the user
UUID.equals(Object)	Compares this object to the specified object The result is true if and only if the argument is not null is a UUID object has the same variant and contains the same value bit for bit as this UUID
AtomicIntegerArray.compareAndSet(int,int,int)	Atomically sets the element at position i to the given updated value if the current value the expected value
ExecutorCompletionService.submit(Callable)	Description copied from interface CompletionService
PriorityQueue.toArray()	Returns an array containing all of the elements in this queue
BlockingDeque.remove(Object)	Removes the first occurrence of the specified element from this deque
Currency.toString()	Returns the ISO 4217 currency code of this currency
ExecutorCompletionService.ExecutorCompletionService(Executor)	Creates an ExecutorCompletionService using the supplied executor for base task execution and a LinkedBlockingQueue as a completion queue
ZipInputStream.getNextEntry()	Reads the next ZIP file entry and positions the stream at the beginning of the entry data
ForkJoinPool.getStealCount()	Returns an estimate of the total number of tasks stolen from one thread s work queue by another The reported value underestimates the actual total number of steals when the pool is not quiescent This value may be useful for monitoring and tuning fork join programs in general steal counts should be high enough to keep threads busy but low enough to avoid overhead and contention across threads
Observable.countObservers()	Returns the number of observers of this Observable object
BitSet.isEmpty()	Returns true if this BitSet contains no bits that are set to true
GregorianCalendar.getMinimum(int)	Returns the minimum value for the given calendar field of this GregorianCalendar instance The minimum value is defined as the smallest value returned by the get method for any possible time value taking into consideration the current values of the getFirstDayOfWeek getMinimalDaysInFirstWeek getGregorianChange and getTimeZone methods
Arrays.hashCode(long[])	Returns a hash code based on the contents of the specified array
Calendar.set(int,int)	Sets the given calendar field to the given value The value is not interpreted by this method regardless of the leniency mode
Logger.setUseParentHandlers(boolean)	Specify whether or not this logger should send its output to its parent Logger This means that any LogRecords will also be written to the parent s Handlers and potentially to its parent recursively up the namespace
Arrays.copyOf(U[],int,Class)	Copies the specified array truncating or padding with nulls if necessary so the copy has the specified length For all indices that are valid in both the original array and the copy the two arrays will contain identical values For any indices that are valid in the copy but not the original the copy will contain null
SortedMap.subMap(K,K)	Returns a view of the portion of this map whose keys range from fromKey inclusive to toKey exclusive If fromKey and toKey are equal the returned map is empty The returned map is backed by this map so changes in the returned map are reflected in this map and vice versa
ArrayBlockingQueue.offer(E)	Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue s capacity returning true upon success and false if this queue is full This method is generally preferable to method add E which can fail to insert an element only by throwing an exception
TreeSet.remove(Object)	Removes the specified element from this set if it is present
Preferences.name()	Returns this preference node s name relative to its parent
AbstractPreferences.removeNodeChangeListener(NodeChangeListener)	Description copied from class Preferences
ArrayList.iterator()	Returns an iterator over the elements in this list in proper sequence
ReentrantLock.hasWaiters(Condition)	Queries whether any threads are waiting on the given condition associated with this lock Note that because timeouts and interrupts may occur at any time a true return does not guarantee that a future signal will awaken any threads This method is designed primarily for use in monitoring of the system state
LinkedBlockingDeque.takeLast()	Description copied from interface BlockingDeque
ThreadPoolExecutor.CallerRunsPolicy.rejectedExecution(Runnable,ThreadPoolExecutor)	Executes task r in the caller s thread unless the executor has been shut down in which case the task is discarded
Condition.awaitUntil(Date)	Causes the current thread to wait until it is signalled or interrupted or the specified deadline elapses
UnknownFormatConversionException.getConversion()	Returns the unknown conversion
Manifest.read(InputStream)	Reads the Manifest from the specified InputStream The entry names and attributes read will be merged in with the current manifest entries
AbstractQueuedLongSynchronizer.hasWaiters(ConditionObject)	Queries whether any threads are waiting on the given condition associated with this synchronizer Note that because timeouts and interrupts may occur at any time a true return does not guarantee that a future signal will awaken any threads This method is designed primarily for use in monitoring of the system state
PriorityQueue.remove(Object)	Removes a single instance of the specified element from this queue if it is present More formally removes an element e such that o equals e if this queue contains one or more such elements Returns true if and only if this queue contained the specified element or equivalently if this queue changed as a result of the call
CountDownLatch.getCount()	Returns the current count
ZipEntry.ZipEntry(String)	Creates a new zip entry with the specified name
LinkedTransferQueue.tryTransfer(E,long,TimeUnit)	Transfers the element to a consumer if it is possible to do so before the timeout elapses
Scanner.nextShort(int)	Scans the next token of the input as a short
Logger.logrb(Level,String,String,String,String)	Log a message specifying source class method and resource bundle name with no arguments
StringTokenizer.StringTokenizer(String,String)	Constructs a string tokenizer for the specified string The characters in the delim argument are the delimiters for separating tokens Delimiter characters themselves will not be treated as tokens
JarFile.getJarEntry(String)	Returns the JarEntry for the given entry name or null if not found
ConcurrentSkipListMap.keySet()	Returns a NavigableSet view of the keys contained in this map
Logger.getResourceBundleName()	Retrieve the localization resource bundle name for this logger Note that if the result is null then the Logger will use a resource bundle name inherited from its parent
Scanner.Scanner(ReadableByteChannel)	Constructs a new Scanner that produces values scanned from the specified channel Bytes from the source are converted into characters using the underlying platform s default charset
Executors.newScheduledThreadPool(int)	Creates a thread pool that can schedule commands to run after a given delay or to execute periodically
ScheduledThreadPoolExecutor.scheduleWithFixedDelay(Runnable,long,long,TimeUnit)	Description copied from interface ScheduledExecutorService
Matcher.hasTransparentBounds()	Queries the transparency of region bounds for this matcher
AbstractList.get(int)	Returns the element at the specified position in this list
List.add(int,E)	Inserts the specified element at the specified position in this list optional operation Shifts the element currently at that position if any and any subsequent elements to the right adds one to their indices
LinkedList.addFirst(E)	Inserts the specified element at the beginning of this list
Logger.severe(String)	Log a SEVERE message
SynchronousQueue.drainTo(Collection,int)	Description copied from interface BlockingQueue
Vector.setSize(int)	Sets the size of this vector If the new size is greater than the current size new null items are added to the end of the vector If the new size is less than the current size all components at index newSize and greater are discarded
AbstractQueuedSynchronizer.acquire(int)	Acquires in exclusive mode ignoring interrupts Implemented by invoking at least once tryAcquire int returning on success Otherwise the thread is queued possibly repeatedly blocking and unblocking invoking tryAcquire int until success This method can be used to implement method Lock lock
Matcher.hasAnchoringBounds()	Queries the anchoring of region bounds for this matcher
LogManager.addLogger(Logger)	Add a named logger This does nothing and returns false if a logger with the same name is already registered
ArrayList.subList(int,int)	Returns a view of the portion of this list between the specified fromIndex inclusive and toIndex exclusive If fromIndex and toIndex are equal the returned list is empty The returned list is backed by this list so non structural changes in the returned list are reflected in this list and vice versa
Arrays.sort(double[])	Sorts the specified array into ascending numerical order
TreeMap.containsValue(Object)	Returns true if this map maps one or more keys to the specified value More formally returns true if and only if this map contains at least one mapping to a value v such that value null v null value equals v This operation will probably require time linear in the map size for most implementations
AbstractExecutorService.invokeAny(Collection)	Description copied from interface ExecutorService
ArrayDeque.clone()	Returns a copy of this deque
ArrayList.lastIndexOf(Object)	Returns the index of the last occurrence of the specified element in this list or 1 if this list does not contain the element
TimeZone.getDisplayName()	Returns a long standard time name of this TimeZone suitable for presentation to the user in the default locale
NavigableMap.descendingMap()	Returns a reverse order view of the mappings contained in this map
IllegalFormatFlagsException.getMessage()	Description copied from class Throwable
AbstractPreferences.putInt(String,int)	Implements the putInt method as per the specification in Preferences putInt String int
ThreadPoolExecutor.getLargestPoolSize()	Returns the largest number of threads that have ever simultaneously been in the pool
StringTokenizer.nextToken(String)	Returns the next token in this string tokenizer s string First the set of characters considered to be delimiters by this StringTokenizer object is changed to be the characters in the string delim Then the next token in the string after the current position is returned The current position is advanced beyond the recognized token The new delimiter set remains the default after this call
AbstractQueuedSynchronizer.tryAcquireNanos(int,long)	Attempts to acquire in exclusive mode aborting if interrupted and failing if the given timeout elapses Implemented by first checking interrupt status then invoking at least once tryAcquire int returning on success Otherwise the thread is queued possibly repeatedly blocking and unblocking invoking tryAcquire int until success or the thread is interrupted or the timeout elapses This method can be used to implement method Lock tryLock long TimeUnit
AbstractMap.keySet()	Returns a Set view of the keys contained in this map
ConcurrentHashMap.containsValue(Object)	Returns true if this map maps one or more keys to the specified value Note This method requires a full internal traversal of the hash table and so is much slower than method containsKey
TreeSet.TreeSet(Comparator)	Constructs a new empty tree set sorted according to the specified comparator All elements inserted into the set must be mutually comparable by the specified comparator comparator compare e1 e2 must not throw a ClassCastException for any elements e1 and e2 in the set If the user attempts to add an element to the set that violates this constraint the add call will throw a ClassCastException
Calendar.getGreatestMinimum(int)	Returns the highest minimum value for the given calendar field of this Calendar instance The highest minimum value is defined as the largest value returned by getActualMinimum int for any possible time value The greatest minimum value depends on calendar system specific parameters of the instance
TreeSet.descendingSet()	Description copied from interface NavigableSet
MissingResourceException.getClassName()	Gets parameter passed by constructor
SimpleTimeZone.inDaylightTime(Date)	Queries if the given date is in daylight saving time
GregorianCalendar.clone()	Description copied from class Calendar
CheckedInputStream.read()	Reads a byte Will block if no input is available
StringTokenizer.StringTokenizer(String)	Constructs a string tokenizer for the specified string The tokenizer uses the default delimiter set which is t n r f the space character the tab character the newline character the carriage return character and the form feed character Delimiter characters themselves will not be treated as tokens
ConcurrentMap.remove(Object,Object)	Removes the entry for a key only if currently mapped to a given value
TreeSet.comparator()	Description copied from interface SortedSet
ConcurrentLinkedDeque.poll()	Description copied from interface Deque
Arrays.sort(T[],int,int,Comparator)	Sorts the specified range of the specified array of objects according to the order induced by the specified comparator The range to be sorted extends from index fromIndex inclusive to index toIndex exclusive If fromIndex toIndex the range to be sorted is empty All elements in the range must be mutually comparable by the specified comparator that is c compare e1 e2 must not throw a ClassCastException for any elements e1 and e2 in the range
ResourceBundle.Control.toResourceName(String,String)	Converts the given bundleName to the form required by the ClassLoader getResource method by replacing all occurrences of in bundleName with and appending a and the given file suffix For example if bundleName is foo bar MyResources ja JP and suffix is properties then foo bar MyResources ja JP properties is returned
Scanner.hasNextFloat()	Returns true if the next token in this scanner s input can be interpreted as a float value using the nextFloat method The scanner does not advance past any input
Arrays.hashCode(short[])	Returns a hash code based on the contents of the specified array
ArrayDeque.ArrayDeque()	Constructs an empty array deque with an initial capacity sufficient to hold 16 elements
ConcurrentHashMap.keySet()	Returns a Set view of the keys contained in this map
Arrays.equals(double[],double[])	Returns true if the two specified arrays of doubles are equal to one another Two arrays are considered equal if both arrays contain the same number of elements and all corresponding pairs of elements in the two arrays are equal In other words two arrays are equal if they contain the same elements in the same order Also two array references are considered equal if both are null
Scanner.radix()	Returns this scanner s default radix
BitSet.previousSetBit(int)	Returns the index of the nearest bit that is set to true that occurs on or before the specified starting index
GregorianCalendar.setTimeZone(TimeZone)	Description copied from class Calendar
ServiceLoader.load(Class,ClassLoader)	Creates a new service loader for the given service type and class loader
Inflater.getTotalIn()	Returns the total number of compressed bytes input so far
Collections.unmodifiableSet(Set)	Returns an unmodifiable view of the specified set This method allows modules to provide users with read only access to internal sets
ForkJoinPool.submit(Runnable)	Description copied from interface ExecutorService
AbstractQueue.element()	Retrieves but does not remove the head of this queue This method differs from peek only in that it throws an exception if this queue is empty
CompletionService.submit(Callable)	Submits a value returning task for execution and returns a Future representing the pending results of the task Upon completion this task may be taken or polled
Executors.callable(PrivilegedAction)	Returns a Callable object that when called runs the given privileged action and returns its result
Vector.lastIndexOf(Object,int)	Returns the index of the last occurrence of the specified element in this vector searching backwards from index or returns 1 if the element is not found
ArrayBlockingQueue.ArrayBlockingQueue(int,boolean,Collection)	Creates an ArrayBlockingQueue with the given fixed capacity the specified access policy and initially containing the elements of the given collection added in traversal order of the collection s iterator
Arrays.binarySearch(long[],int,int,long)	Searches a range of the specified array of longs for the specified value using the binary search algorithm
Queue.offer(E)	Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions
ScheduledExecutorService.scheduleAtFixedRate(Runnable,long,long,TimeUnit)	Creates and executes a periodic action that becomes enabled first after the given initial delay and subsequently with the given period that is executions will commence after initialDelay then initialDelay period then initialDelay 2 period and so on
AbstractMap.SimpleEntry.AbstractMap.SimpleEntry(Entry)	Creates an entry representing the same mapping as the specified entry
Collections.unmodifiableSortedMap(SortedMap)	Returns an unmodifiable view of the specified sorted map This method allows modules to provide users with read only access to internal sorted maps Query operations on the returned sorted map read through to the specified sorted map Attempts to modify the returned sorted map whether direct via its collection views or via its subMap headMap or tailMap views result in an UnsupportedOperationException
ForkJoinPool.ManagedBlocker.block()	Possibly blocks the current thread for example waiting for a lock or condition
DeflaterOutputStream.DeflaterOutputStream(OutputStream,Deflater,int)	Creates a new output stream with the specified compressor and buffer size
AtomicIntegerFieldUpdater.decrementAndGet(T)	Atomically decrements by one the current value of the field of the given object managed by this updater
LogManager.getLoggerNames()	Get an enumeration of known logger names
Vector.clone()	Returns a clone of this vector The copy will contain a reference to a clone of the internal data array not a reference to the original internal data array of this Vector object
Arrays.hashCode(char[])	Returns a hash code based on the contents of the specified array
NavigableSet.descendingSet()	Returns a reverse order view of the elements contained in this set
Calendar.getDisplayName(int,int,Locale)	Returns the string representation of the calendar field value in the given style and locale If no string representation is applicable null is returned This method calls get field to get the calendar field value if the string representation is applicable to the given calendar field
ZipEntry.setMethod(int)	Sets the compression method for the entry
ConcurrentSkipListMap.remove(Object,Object)	Removes the entry for a key only if currently mapped to a given value
Manifest.clone()	Returns a shallow copy of this Manifest The shallow copy is implemented as follows public Object clone return new Manifest this
TimeZone.setDefault(TimeZone)	Sets the TimeZone that is returned by the getDefault method If zone is null reset the default to the value it had originally when the VM first started
Hashtable.get(Object)	Returns the value to which the specified key is mapped or null if this map contains no mapping for the key
Timer.schedule(TimerTask,long,long)	Schedules the specified task for repeated fixed delay execution beginning after the specified delay Subsequent executions take place at approximately regular intervals separated by the specified period
AtomicReference.toString()	Returns the String representation of the current value
NoSuchElementException.NoSuchElementException()	Constructs a NoSuchElementException with null as its error message string
GregorianCalendar.getTimeZone()	Description copied from class Calendar
Matcher.requireEnd()	Returns true if more input could change a positive match into a negative one
Formatter.flush()	Flushes this formatter If the destination implements the Flushable interface its flush method will be invoked
ExecutorService.submit(Callable)	Submits a value returning task for execution and returns a Future representing the pending results of the task The Future s get method will return the task s result upon successful completion
AtomicInteger.incrementAndGet()	Atomically increments by one the current value
SortedSet.comparator()	Returns the comparator used to order the elements in this set or null if this set uses the natural ordering of its elements
TreeSet.first()	Description copied from interface SortedSet
ThreadFactory.newThread(Runnable)	Constructs a new Thread Implementations may also initialize priority name daemon status ThreadGroup etc
Locale.getExtension(char)	Returns the extension or private use value associated with the specified key or null if there is no extension associated with the key To be well formed the key must be one of 0 9A Za z Keys are case insensitive so for example z and Z represent the same extension
BlockingDeque.putLast(E)	Inserts the specified element at the end of this deque waiting if necessary for space to become available
Calendar.roll(int,boolean)	Adds or subtracts up down a single unit of time on the given time field without changing larger fields For example to roll the current date up by one day you can achieve it by calling roll Calendar DATE true
LogManager.removePropertyChangeListener(PropertyChangeListener)	Removes an event listener for property change events
AbstractQueuedSynchronizer.acquireSharedInterruptibly(int)	Acquires in shared mode aborting if interrupted Implemented by first checking interrupt status then invoking at least once tryAcquireShared int returning on success Otherwise the thread is queued possibly repeatedly blocking and unblocking invoking tryAcquireShared int until success or the thread is interrupted
AbstractQueuedLongSynchronizer.release(long)	Releases in exclusive mode Implemented by unblocking one or more threads if tryRelease long returns true
BlockingDeque.put(E)	Inserts the specified element into the queue represented by this deque in other words at the tail of this deque waiting if necessary for space to become available
Locale.hashCode()	Override hashCode
AbstractMap.SimpleEntry.getValue()	Returns the value corresponding to this entry
ArrayDeque.remove(Object)	Removes a single instance of the specified element from this deque
Arrays.binarySearch(T[],int,int,T,Comparator)	Searches a range of the specified array for the specified object using the binary search algorithm
ListIterator.hasPrevious()	Returns true if this list iterator has more elements when traversing the list in the reverse direction In other words returns true if previous would return an element rather than throwing an exception
Deque.descendingIterator()	Returns an iterator over the elements in this deque in reverse sequential order The elements will be returned in order from last tail to first head
Logger.isLoggable(Level)	Check if a message of the given level would actually be logged by this logger This check is based on the Loggers effective level which may be inherited from its parent
AtomicLongFieldUpdater.get(T)	Gets the current value held in the field of the given object managed by this updater
ScheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)	Sets the policy on whether to execute existing delayed tasks even when this executor has been shutdown
ZipEntry.setCrc(long)	Sets the CRC 32 checksum of the uncompressed entry data
EnumSet.noneOf(Class)	Creates an empty enum set with the specified element type
ForkJoinTask.isCompletedAbnormally()	Returns true if this task threw an exception or was cancelled
Collections.unmodifiableCollection(Collection)	Returns an unmodifiable view of the specified collection This method allows modules to provide users with read only access to internal collections Query operations on the returned collection read through to the specified collection and attempts to modify the returned collection whether direct or via its iterator result in an UnsupportedOperationException
TreeSet.TreeSet(Collection)	Constructs a new tree set containing the elements in the specified collection sorted according to the natural ordering of its elements All elements inserted into the set must implement the Comparable interface Furthermore all such elements must be mutually comparable e1 compareTo e2 must not throw a ClassCastException for any elements e1 and e2 in the set
Semaphore.acquire()	Acquires a permit from this semaphore blocking until one is available or the thread is interrupted
SimpleTimeZone.equals(Object)	Compares the equality of two SimpleTimeZone objects
Matcher.find()	Attempts to find the next subsequence of the input sequence that matches the pattern
AbstractPreferences.absolutePath()	Implements the absolutePath method as per the specification in Preferences absolutePath
CopyOnWriteArraySet.toArray(T[])	Returns an array containing all of the elements in this set the runtime type of the returned array is that of the specified array
Preferences.absolutePath()	Returns this preference node s absolute path name
Vector.Vector(int,int)	Constructs an empty vector with the specified initial capacity and capacity increment
ThreadLocalRandom.nextDouble(double)	Returns a pseudorandom uniformly distributed double value between 0 inclusive and the specified value exclusive
Deque.offerLast(E)	Inserts the specified element at the end of this deque unless it would violate capacity restrictions When using a capacity restricted deque this method is generally preferable to the addLast E method which can fail to insert an element only by throwing an exception
ThreadPoolExecutor.isShutdown()	Description copied from interface ExecutorService
ThreadLocalRandom.nextLong(long)	Returns a pseudorandom uniformly distributed value between 0 inclusive and the specified value exclusive
PriorityBlockingQueue.toString()	Description copied from class AbstractCollection
AtomicLong.intValue()	Description copied from class Number
Collections.asLifoQueue(Deque)	Returns a view of a Deque as a Last in first out Lifo Queue Method add is mapped to push remove is mapped to pop and so on This view can be useful when you would like to use a method requiring a Queue but you need Lifo ordering
Date.before(Date)	Tests if this date is before the specified date
PriorityBlockingQueue.drainTo(Collection,int)	Description copied from interface BlockingQueue
AbstractList.indexOf(Object)	Returns the index of the first occurrence of the specified element in this list or 1 if this list does not contain the element
DuplicateFormatFlagsException.DuplicateFormatFlagsException(String)	Constructs an instance of this class with the specified flags
AbstractSequentialList.get(int)	Returns the element at the specified position in this list
ConcurrentHashMap.ConcurrentHashMap(int,float)	Creates a new empty map with the specified initial capacity and load factor and with the default concurrencyLevel 16
TimeoutException.TimeoutException(String)	Constructs a TimeoutException with the specified detail message
SimpleTimeZone.useDaylightTime()	Queries if this time zone uses daylight saving time
SimpleTimeZone.SimpleTimeZone(int,String,int,int,int,int,int,int,int,int,int,int,int)	Constructs a SimpleTimeZone with the given base time zone offset from GMT time zone ID and rules for starting and ending the daylight time
ConcurrentLinkedDeque.size()	Returns the number of elements in this deque If this deque contains more than Integer MAX VALUE elements it returns Integer MAX VALUE
NodeChangeListener.childRemoved(NodeChangeEvent)	This method gets called when a child node is removed
Hashtable.Hashtable()	Constructs a new empty hashtable with a default initial capacity 11 and load factor 0 75
HashMap.put(K,V)	Associates the specified value with the specified key in this map
ConcurrentSkipListMap.firstEntry()	Returns a key value mapping associated with the least key in this map or null if the map is empty
List.isEmpty()	Returns true if this list contains no elements
BlockingDeque.element()	Retrieves but does not remove the head of the queue represented by this deque in other words the first element of this deque
ConcurrentSkipListSet.pollFirst()	Description copied from interface NavigableSet
Arrays.fill(Object[],Object)	Assigns the specified Object reference to each element of the specified array of Objects
WeakHashMap.putAll(Map)	Copies all of the mappings from the specified map to this map
StreamHandler.flush()	Flush any buffered messages
Arrays.sort(long[])	Sorts the specified array into ascending numerical order
LinkedBlockingDeque.LinkedBlockingDeque(Collection)	Creates a LinkedBlockingDeque with a capacity of Integer MAX VALUE initially containing the elements of the given collection added in traversal order of the collection s iterator
Collection.size()	Returns the number of elements in this collection If this collection contains more than Integer MAX VALUE elements returns Integer MAX VALUE
LinkedBlockingQueue.drainTo(Collection)	Description copied from interface BlockingQueue
SynchronousQueue.toArray(T[])	Sets the zeroeth element of the specified array to null if the array has non zero length and returns it
ConcurrentSkipListMap.clear()	Removes all of the mappings from this map
ThreadLocalRandom.current()	Returns the current thread s ThreadLocalRandom
ResourceBundle.getBundle(String,Locale,Control)	Returns a resource bundle using the specified base name target locale and control and the caller s class loader Calling this method is equivalent to calling getBundle baseName targetLocale this getClass getClassLoader control except that getClassLoader is run with the security privileges of ResourceBundle See getBundle for the complete description of the resource bundle loading process with a ResourceBundle Control
ArrayList.remove(int)	Removes the element at the specified position in this list
ForkJoinTask.getException()	Returns the exception thrown by the base computation or a CancellationException if cancelled or null if none or if the method has not yet completed
Properties.Properties(Properties)	Creates an empty property list with the specified defaults
ConcurrentLinkedQueue.ConcurrentLinkedQueue(Collection)	Creates a ConcurrentLinkedQueue initially containing the elements of the given collection added in traversal order of the collection s iterator
AtomicIntegerFieldUpdater.compareAndSet(T,int,int)	Atomically sets the field of the given object managed by this updater to the given updated value if the current value the expected value This method is guaranteed to be atomic with respect to other calls to compareAndSet and set but not necessarily with respect to other changes in the field
Matcher.start(int)	Returns the start index of the subsequence captured by the given group during the previous match operation
LinkedBlockingQueue.take()	Description copied from interface BlockingQueue
Calendar.getActualMaximum(int)	Returns the maximum value that the specified calendar field could have given the time value of this Calendar For example the actual maximum value of the MONTH field is 12 in some years and 13 in other years in the Hebrew calendar system
ForkJoinPool.execute(Runnable)	Description copied from interface Executor
SortedMap.comparator()	Returns the comparator used to order the keys in this map or null if this map uses the natural ordering of its keys
ServiceLoader.reload()	Clear this loader s provider cache so that all providers will be reloaded
BitSet.toByteArray()	Returns a new byte array containing all the bits in this bit set
ScheduledThreadPoolExecutor.shutdown()	Initiates an orderly shutdown in which previously submitted tasks are executed but no new tasks will be accepted
ThreadPoolExecutor.awaitTermination(long,TimeUnit)	Description copied from interface ExecutorService
AtomicLongArray.getAndAdd(int,long)	Atomically adds the given value to the element at index i
Collections.synchronizedSortedMap(SortedMap)	Returns a synchronized thread safe sorted map backed by the specified sorted map In order to guarantee serial access it is critical that all access to the backing sorted map is accomplished through the returned sorted map or its views
Deflater.setInput(byte[])	Sets input data for compression This should be called whenever needsInput returns true indicating that more input data is required
ForkJoinPool.isQuiescent()	Returns true if all worker threads are currently idle
BlockingDeque.addFirst(E)	Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions throwing an IllegalStateException if no space is currently available When using a capacity restricted deque it is generally preferable to use offerFirst
Scanner.close()	Closes this scanner
ConcurrentModificationException.ConcurrentModificationException(String)	Constructs a ConcurrentModificationException with the specified detail message
Calendar.getMinimum(int)	Returns the minimum value for the given calendar field of this Calendar instance The minimum value is defined as the smallest value returned by the get method for any possible time value The minimum value depends on calendar system specific parameters of the instance
EnumMap.EnumMap(Map)	Creates an enum map initialized from the specified map If the specified map is an EnumMap instance this constructor behaves identically to EnumMap EnumMap Otherwise the specified map must contain at least one mapping in order to determine the new enum map s key type
LogRecord.getMessage()	Get the raw log message before localization or formatting
AtomicStampedReference.getReference()	Returns the current value of the reference
ResourceBundle.Control.getCandidateLocales(String,Locale)	Returns a List of Locales as candidate locales for baseName and locale This method is called by the ResourceBundle getBundle factory method each time the factory method tries finding a resource bundle for a target Locale
EnumSet.allOf(Class)	Creates an enum set containing all of the elements in the specified element type
PreferenceChangeEvent.PreferenceChangeEvent(Preferences,String,String)	Constructs a new PreferenceChangeEvent instance
Hashtable.values()	Returns a Collection view of the values contained in this map
LogManager.checkAccess()	Check that the current context is trusted to modify the logging configuration This requires LoggingPermission control
ThreadPoolExecutor.prestartAllCoreThreads()	Starts all core threads causing them to idly wait for work This overrides the default policy of starting core threads only when new tasks are executed
LogManager.getLoggingMXBean()	Returns LoggingMXBean for managing loggers
Preferences.childrenNames()	Returns the names of the children of this preference node relative to this node The returned array will be of size zero if this node has no children
Calendar.getWeekYear()	Returns the week year represented by this Calendar The week year is in sync with the week cycle The first day of the first week is the first day of the week year
AtomicIntegerArray.length()	Returns the length of the array
LinkedHashSet.LinkedHashSet(int,float)	Constructs a new empty linked hash set with the specified initial capacity and load factor
Scanner.reset()	Resets this scanner
AbstractQueuedSynchronizer.ConditionObject.awaitUninterruptibly()	Implements uninterruptible condition wait
SortedMap.lastKey()	Returns the last highest key currently in this map
JarInputStream.JarInputStream(InputStream,boolean)	Creates a new JarInputStream and reads the optional manifest If a manifest is present and verify is true also attempts to verify the signatures if the JarInputStream is signed
ConcurrentSkipListSet.last()	Description copied from interface SortedSet
CopyOnWriteArrayList.listIterator()	Returns a list iterator over the elements in this list in proper sequence
AtomicStampedReference.get(int[])	Returns the current values of both the reference and the stamp
StreamHandler.StreamHandler()	Create a StreamHandler with no current output stream
CRC32.reset()	Resets CRC 32 to initial value
HashSet.remove(Object)	Removes the specified element from this set if it is present
Locale.Locale.forLanguageTag(toLanguageTag);)	
Arrays.sort(short[],int,int)	Sorts the specified range of the array into ascending order The range to be sorted extends from the index fromIndex inclusive to the index toIndex exclusive If fromIndex toIndex the range to be sorted is empty
AtomicLongArray.incrementAndGet(int)	Atomically increments by one the element at index i
LinkedTransferQueue.transfer(E)	Transfers the element to a consumer waiting if necessary to do so
AbstractQueuedLongSynchronizer.getQueueLength()	Returns an estimate of the number of threads waiting to acquire The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures This method is designed for use in monitoring system state not for synchronization control
LogRecord.getThreadID()	Get an identifier for the thread where the message originated
ArrayDeque.pop()	Pops an element from the stack represented by this deque In other words removes and returns the first element of this deque
AtomicReference.set(V)	Sets to the given value
AtomicIntegerArray.set(int,int)	Sets the element at position i to the given value
Lock.lock()	Acquires the lock
Level.parse(String)	Parse a level name string into a Level
CompletionService.poll()	Retrieves and removes the Future representing the next completed task or null if none are present
AbstractExecutorService.invokeAll(Collection)	Description copied from interface ExecutorService
DeflaterOutputStream.close()	Writes remaining compressed data to the output stream and closes the underlying stream
Collection.containsAll(Collection)	Returns true if this collection contains all of the elements in the specified collection
LinkedBlockingDeque.offer(E,long,TimeUnit)	Description copied from interface BlockingDeque
AtomicMarkableReference.weakCompareAndSet(V,V,boolean,boolean)	Atomically sets the value of both the reference and mark to the given update values if the current reference is to the expected reference and the current mark is equal to the expected mark
LinkedBlockingDeque.addFirst(E)	Description copied from interface BlockingDeque
GregorianCalendar.equals(Object)	Compares this GregorianCalendar to the specified Object The result is true if and only if the argument is a GregorianCalendar object that represents the same time value millisecond offset from the Epoch under the same Calendar parameters and Gregorian change date as this object
PriorityBlockingQueue.iterator()	Returns an iterator over the elements in this queue The iterator does not return the elements in any particular order
LinkedBlockingDeque.poll()	Description copied from interface BlockingDeque
AbstractPreferences.getFloat(String,float)	Implements the getFloat method as per the specification in Preferences getFloat String float
AtomicReferenceFieldUpdater.lazySet(T,V)	Eventually sets the field of the given object managed by this updater to the given updated value
List.contains(Object)	Returns true if this list contains the specified element
ReentrantLock.tryLock()	Acquires the lock only if it is not held by another thread at the time of invocation
AbstractPreferences.removeNode()	Implements the removeNode method as per the specification in Preferences removeNode
Collections.synchronizedMap(Map)	Returns a synchronized thread safe map backed by the specified map In order to guarantee serial access it is critical that all access to the backing map is accomplished through the returned map
PriorityQueue.comparator()	Returns the comparator used to order the elements in this queue or null if this queue is sorted according to the natural ordering of its elements
UUID.fromString(String)	Creates a UUID from the string standard representation as described in the toString method
Locale.Builder.build()	Returns an instance of Locale created from the fields set on this builder
Arrays.binarySearch(int[],int)	Searches the specified array of ints for the specified value using the binary search algorithm The array must be sorted as by the sort int method prior to making this call If it is not sorted the results are undefined If the array contains multiple elements with the specified value there is no guarantee which one will be found
Random.nextBytes(byte[])	Generates random bytes and places them into a user supplied byte array The number of random bytes produced is equal to the length of the byte array
ZipFile.size()	Returns the number of entries in the ZIP file
Currency.getDefaultFractionDigits()	Gets the default number of fraction digits used with this currency
FutureTask.get(long,TimeUnit)	Description copied from interface Future
PriorityQueue.PriorityQueue(PriorityQueue)	Creates a PriorityQueue containing the elements in the specified priority queue This priority queue will be ordered according to the same ordering as the given priority queue
DelayQueue.clear()	Atomically removes all of the elements from this delay queue
ConcurrentLinkedDeque.getFirst()	Description copied from interface Deque
AtomicLongArray.set(int,long)	Sets the element at position i to the given value
GregorianCalendar.getGregorianChange()	Gets the Gregorian Calendar change date This is the point when the switch from Julian dates to Gregorian dates occurred Default is October 15 1582 Gregorian Previous to this dates will be in the Julian calendar
Hashtable.Hashtable(Map)	Constructs a new hashtable with the same mappings as the given Map The hashtable is created with an initial capacity sufficient to hold the mappings in the given Map and a default load factor 0 75
AbstractPreferences.put(String,String)	Implements the put method as per the specification in Preferences put String String
Arrays.sort(long[],int,int)	Sorts the specified range of the array into ascending order The range to be sorted extends from the index fromIndex inclusive to the index toIndex exclusive If fromIndex toIndex the range to be sorted is empty
NavigableMap.tailMap(K,boolean)	Returns a view of the portion of this map whose keys are greater than or equal to if inclusive is true fromKey The returned map is backed by this map so changes in the returned map are reflected in this map and vice versa The returned map supports all optional map operations that this map supports
TooManyListenersException.TooManyListenersException()	Constructs a TooManyListenersException with no detail message
AtomicMarkableReference.isMarked()	Returns the current value of the mark
Scanner.next(Pattern)	Returns the next token if it matches the specified pattern This method may block while waiting for input to scan even if a previous invocation of hasNext Pattern returned true
AbstractCollection.clear()	Removes all of the elements from this collection optional operation
ResourceBundle.keySet()	Returns a Set of all keys contained in this ResourceBundle and its parent bundles
TimeZone.getDefault()	Gets the default TimeZone for this host
Handler.getLevel()	Get the log level specifying which messages will be logged by this Handler Message levels lower than this level will be discarded
ThreadPoolExecutor.AbortPolicy.ThreadPoolExecutor.AbortPolicy()	Creates an AbortPolicy
ZipOutputStream.setMethod(int)	Sets the default compression method for subsequent entries This default will be used whenever the compression method is not specified for an individual ZIP file entry and is initially set to DEFLATED
BitSet.nextClearBit(int)	Returns the index of the first bit that is set to false that occurs on or after the specified starting index
Attributes.Attributes()	Constructs a new empty Attributes object with default size
Set.toArray(T[])	Returns an array containing all of the elements in this set the runtime type of the returned array is that of the specified array
Pattern.pattern()	Returns the regular expression from which this pattern was compiled
ForkJoinPool.getUncaughtExceptionHandler()	Returns the handler for internal worker threads that terminate due to unrecoverable errors encountered while executing tasks
LinkedBlockingDeque.descendingIterator()	Returns an iterator over the elements in this deque in reverse sequential order The elements will be returned in order from last tail to first head
ConcurrentNavigableMap.keySet()	Returns a NavigableSet view of the keys contained in this map
Locale.Locale(String,String)	Construct a locale from language and country
AbstractQueuedSynchronizer.getWaitingThreads(ConditionObject)	Returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer Because the actual set of threads may change dynamically while constructing this result the returned collection is only a best effort estimate The elements of the returned collection are in no particular order
HashSet.HashSet(Collection)	Constructs a new set containing the elements in the specified collection The HashMap is created with default load factor 0 75 and an initial capacity sufficient to contain the elements in the specified collection
IllegalFormatCodePointException.IllegalFormatCodePointException(int)	Constructs an instance of this class with the specified illegal code point as defined by Character isValidCodePoint int
AbstractMap.clear()	Removes all of the mappings from this map optional operation
ForkJoinPool.hasQueuedSubmissions()	Returns true if there are any tasks submitted to this pool that have not yet begun executing
ConcurrentSkipListMap.descendingKeySet()	Description copied from interface ConcurrentNavigableMap
AtomicIntegerFieldUpdater.incrementAndGet(T)	Atomically increments by one the current value of the field of the given object managed by this updater
PriorityQueue.PriorityQueue(int)	Creates a PriorityQueue with the specified initial capacity that orders its elements according to their natural ordering
AbstractPreferences.putLong(String,long)	Implements the putLong method as per the specification in Preferences putLong String long
ConcurrentNavigableMap.tailMap(K)	Description copied from interface NavigableMap
Scanner.skip(String)	Skips input that matches a pattern constructed from the specified string
Deflater.getBytesRead()	Returns the total number of uncompressed bytes input so far
Scanner.useDelimiter(String)	Sets this scanner s delimiting pattern to a pattern constructed from the specified String
Collections.unmodifiableSortedSet(SortedSet)	Returns an unmodifiable view of the specified sorted set This method allows modules to provide users with read only access to internal sorted sets Query operations on the returned sorted set read through to the specified sorted set Attempts to modify the returned sorted set whether direct via its iterator or via its subSet headSet or tailSet views result in an UnsupportedOperationException
BitSet.xor(BitSet)	Performs a logical XOR of this bit set with the bit set argument This bit set is modified so that a bit in it has the value true if and only if one of the following statements holds The bit initially has the value true and the corresponding bit in the argument has the value false
AtomicIntegerFieldUpdater.weakCompareAndSet(T,int,int)	Atomically sets the field of the given object managed by this updater to the given updated value if the current value the expected value This method is guaranteed to be atomic with respect to other calls to compareAndSet and set but not necessarily with respect to other changes in the field
BitSet.set(int,int)	Sets the bits from the specified fromIndex inclusive to the specified toIndex exclusive to true
JarFile.JarFile(File)	Creates a new JarFile to read from the specified File object The JarFile will be verified if it is signed
Vector.set(int,E)	Replaces the element at the specified position in this Vector with the specified element
ScheduledThreadPoolExecutor.schedule(Callable,long,TimeUnit)	Description copied from interface ScheduledExecutorService
ArrayDeque.removeLast()	Description copied from interface Deque
DeflaterOutputStream.write(int)	Writes a byte to the compressed output stream This method will block until the byte can be written
AbstractQueuedSynchronizer.getQueuedThreads()	Returns a collection containing threads that may be waiting to acquire Because the actual set of threads may change dynamically while constructing this result the returned collection is only a best effort estimate The elements of the returned collection are in no particular order This method is designed to facilitate construction of subclasses that provide more extensive monitoring facilities
PriorityBlockingQueue.PriorityBlockingQueue(int,Comparator)	Creates a PriorityBlockingQueue with the specified initial capacity that orders its elements according to the specified comparator
AtomicBoolean.AtomicBoolean()	Creates a new AtomicBoolean with initial value false
AtomicInteger.compareAndSet(int,int)	Atomically sets the value to the given updated value if the current value the expected value
Date.getTime()	Returns the number of milliseconds since January 1 1970 00 00 00 GMT represented by this Date object
Observable.Observable()	Construct an Observable with zero Observers
BlockingDeque.takeLast()	Retrieves and removes the last element of this deque waiting if necessary until an element becomes available
Vector.lastIndexOf(Object)	Returns the index of the last occurrence of the specified element in this vector or 1 if this vector does not contain the element
ZipInputStream.ZipInputStream(InputStream,Charset)	Creates a new ZIP input stream
Attributes.hashCode()	Returns the hash code value for this Map
ForkJoinPool.getQueuedTaskCount()	Returns an estimate of the total number of tasks currently held in queues by worker threads but not including tasks submitted to the pool that have not begun executing This value is only an approximation obtained by iterating across all threads in the pool This method may be useful for tuning task granularities
Random.nextInt(int)	Returns a pseudorandom uniformly distributed int value between 0 inclusive and the specified value exclusive drawn from this random number generator s sequence The general contract of nextInt is that one int value in the specified range is pseudorandomly generated and returned All n possible int values are produced with approximately equal probability The method nextInt int n is implemented by class Random as if by public int nextInt int n if n 0 throw new IllegalArgumentException n must be positive if n n n i e n is a power of 2 return int n long next 31 31 int bits val do bits next 31 val bits n while bits val n 1 0 return val The hedge approximately is used in the foregoing description only because the next method is only approximately an unbiased source of independently chosen bits If it were a perfect source of randomly chosen bits then the algorithm shown would choose int values from the stated range with perfect uniformity
TransferQueue.hasWaitingConsumer()	Returns true if there is at least one consumer waiting to receive an element via BlockingQueue take or timed poll
Matcher.groupCount()	Returns the number of capturing groups in this matcher s pattern
Locale.setDefault(Category,Locale)	Sets the default locale for the specified Category for this instance of the Java Virtual Machine This does not affect the host locale
Attributes.Name.hashCode()	Computes the hash value for this attribute name
TransferQueue.getWaitingConsumerCount()	Returns an estimate of the number of consumers waiting to receive elements via BlockingQueue take or timed poll The return value is an approximation of a momentary state of affairs that may be inaccurate if consumers have completed or given up waiting
Arrays.toString(double[])	Returns a string representation of the contents of the specified array
AtomicLong.getAndSet(long)	Atomically sets to the given value and returns the old value
FormatFlagsConversionMismatchException.getConversion()	Returns the incompatible conversion
Queue.add(E)	Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions returning true upon success and throwing an IllegalStateException if no space is currently available
AbstractMap.SimpleEntry.AbstractMap.SimpleEntry(K,V)	Creates an entry representing a mapping from the specified key to the specified value
Arrays.hashCode(double[])	Returns a hash code based on the contents of the specified array
ReentrantReadWriteLock.getReadLockCount()	Queries the number of read locks held for this lock This method is designed for use in monitoring system state not for synchronization control
EnumSet.copyOf(Collection)	Creates an enum set initialized from the specified collection If the specified collection is an EnumSet instance this static factory method behaves identically to copyOf EnumSet
Lock.tryLock()	Acquires the lock only if it is free at the time of invocation
ReentrantLock.isHeldByCurrentThread()	Queries if this lock is held by the current thread
ConcurrentHashMap.contains(Object)	Legacy method testing if some key maps into the specified value in this table This method is identical in functionality to containsValue java lang Object and exists solely to ensure full compatibility with class Hashtable which supported this method prior to introduction of the Java Collections framework
Date.setMonth(int)	Sets the month of this date to the specified value This Date object is modified so that it represents a point in time within the specified month with the year date hour minute and second the same as before as interpreted in the local time zone If the date was October 31 for example and the month is set to June then the new date will be treated as if it were on July 1 because June has only 30 days
AtomicIntegerFieldUpdater.getAndSet(T,int)	Atomically sets the field of the given object managed by this updater to the given value and returns the old value
GregorianCalendar.roll(int,boolean)	Adds or subtracts up down a single unit of time on the given time field without changing larger fields
ReentrantLock.hasQueuedThread(Thread)	Queries whether the given thread is waiting to acquire this lock Note that because cancellations may occur at any time a true return does not guarantee that this thread will ever acquire this lock This method is designed primarily for use in monitoring of the system state
LockSupport.parkUntil(Object,long)	Disables the current thread for thread scheduling purposes until the specified deadline unless the permit is available
Attributes.isEmpty()	Returns true if this Map contains no attributes
Map.entrySet()	Returns a Set view of the mappings contained in this map
ZipEntry.getComment()	Returns the comment string for the entry or null if none
HashMap.keySet()	Returns a Set view of the keys contained in this map
AtomicLong.compareAndSet(long,long)	Atomically sets the value to the given updated value if the current value the expected value
JarInputStream.read(byte[],int,int)	Reads from the current JAR file entry into an array of bytes
TreeSet.iterator()	Returns an iterator over the elements in this set in ascending order
SimpleTimeZone.getOffset(int,int,int,int,int,int)	Returns the difference in milliseconds between local time and UTC taking into account both the raw offset and the effect of daylight saving for the specified date and time This method assumes that the start and end month are distinct It also uses a default GregorianCalendar object as its underlying calendar such as for determining leap years Do not use the result of this method with a calendar other than a default GregorianCalendar
ForkJoinTask.completeExceptionally(Throwable)	Completes this task abnormally and if not already aborted or cancelled causes it to throw the given exception upon join and related operations This method may be used to induce exceptions in asynchronous tasks or to force completion of tasks that would not otherwise complete Its use in other situations is discouraged This method is overridable but overridden versions must invoke super implementation to maintain guarantees
BlockingDeque.remove()	Retrieves and removes the head of the queue represented by this deque in other words the first element of this deque
ScheduledThreadPoolExecutor.submit(Runnable,T)	Description copied from interface ExecutorService
IdentityHashMap.hashCode()	Returns the hash code value for this map The hash code of a map is defined to be the sum of the hash codes of each entry in the map s entrySet view This ensures that m1 equals m2 implies that m1 hashCode m2 hashCode for any two IdentityHashMap instances m1 and m2 as required by the general contract of Object hashCode
Level.getName()	Return the non localized string name of the Level
AbstractList.set(int,E)	Replaces the element at the specified position in this list with the specified element optional operation
ReentrantLock.isFair()	Returns true if this lock has fairness set true
Logger.getLevel()	Get the log Level that has been specified for this Logger
ExecutorCompletionService.submit(Runnable,V)	Description copied from interface CompletionService
ConcurrentSkipListMap.ceilingEntry(K)	Returns a key value mapping associated with the least key greater than or equal to the given key or null if there is no such entry The returned entry does not support the Entry setValue method
SynchronousQueue.offer(E)	Inserts the specified element into this queue if another thread is waiting to receive it
ForkJoinTask.adapt(Callable)	Returns a new ForkJoinTask that performs the call method of the given Callable as its action and returns its result upon join translating any checked exceptions encountered into RuntimeException
Hashtable.containsValue(Object)	Returns true if this hashtable maps one or more keys to this value
Arrays.fill(long[],long)	Assigns the specified long value to each element of the specified array of longs
ConcurrentHashMap.elements()	Returns an enumeration of the values in this table
Properties.Properties()	Creates an empty property list with no default values
Stack.push(E)	Pushes an item onto the top of this stack This has exactly the same effect as addElement item
TreeSet.pollLast()	Description copied from interface NavigableSet
ConcurrentLinkedQueue.add(E)	Inserts the specified element at the tail of this queue
SynchronousQueue.drainTo(Collection)	Description copied from interface BlockingQueue
Locale.Builder.setLocale(Locale)	Resets the Builder to match the provided locale Existing state is discarded
DelayQueue.poll(long,TimeUnit)	Retrieves and removes the head of this queue waiting if necessary until an element with an expired delay is available on this queue or the specified wait time expires
TreeSet.addAll(Collection)	Adds all of the elements in the specified collection to this set
ReadWriteLock.readLock()	Returns the lock used for reading
Manifest.clear()	Clears the main Attributes as well as the entries in this Manifest
Vector.elementAt(int)	Returns the component at the specified index
Queue.element()	Retrieves but does not remove the head of this queue This method differs from peek only in that it throws an exception if this queue is empty
Timer.Timer(boolean)	Creates a new timer whose associated thread may be specified to run as a daemon
AbstractQueuedLongSynchronizer.hasQueuedThreads()	Queries whether any threads are waiting to acquire Note that because cancellations due to interrupts and timeouts may occur at any time a true return does not guarantee that any other thread will ever acquire
TreeMap.entrySet()	Returns a Set view of the mappings contained in this map
Date.Date(int,int,int)	Allocates a Date object and initializes it so that it represents midnight local time at the beginning of the day specified by the year month and date arguments
ExecutorService.invokeAll(Collection)	Executes the given tasks returning a list of Futures holding their status and results when all complete
Arrays.hashCode(Object[])	Returns a hash code based on the contents of the specified array If the array contains other arrays as elements the hash code is based on their identities rather than their contents It is therefore acceptable to invoke this method on an array that contains itself as an element either directly or indirectly through one or more levels of arrays
ForkJoinPool.submit(ForkJoinTask)	Submits a ForkJoinTask for execution
LocaleNameProvider.getDisplayVariant(String,Locale)	Returns a localized name for the given variant code and the given locale that is appropriate for display to the user
Map.Entry.setValue(V)	Replaces the value corresponding to this entry with the specified value optional operation Writes through to the map The behavior of this call is undefined if the mapping has already been removed from the map by the iterator s remove operation
ReentrantReadWriteLock.hasQueuedThreads()	Queries whether any threads are waiting to acquire the read or write lock Note that because cancellations may occur at any time a true return does not guarantee that any other thread will ever acquire a lock This method is designed primarily for use in monitoring of the system state
InflaterInputStream.read()	Reads a byte of uncompressed data This method will block until enough input is available for decompression
Level.toString()	Returns a string representation of this Level
Vector.retainAll(Collection)	Retains only the elements in this Vector that are contained in the specified Collection In other words removes from this Vector all of its elements that are not contained in the specified Collection
Locale.getDisplayCountry()	Returns a name for the locale s country that is appropriate for display to the user
Calendar.clone()	Creates and returns a copy of this object
ResourceBundle.Control.newBundle(String,Locale,String,ClassLoader,boolean)	Instantiates a resource bundle for the given bundle name of the given format and locale using the given class loader if necessary This method returns null if there is no resource bundle available for the given parameters If a resource bundle can t be instantiated due to an unexpected error the error must be reported by throwing an Error or Exception rather than simply returning null
Inflater.setDictionary(byte[])	Sets the preset dictionary to the given array of bytes Should be called when inflate returns 0 and needsDictionary returns true indicating that a preset dictionary is required The method getAdler can be used to get the Adler 32 value of the dictionary needed
AbstractMap.SimpleImmutableEntry.getKey()	Returns the key corresponding to this entry
Scanner.ioException()	Returns the IOException last thrown by this Scanner s underlying Readable This method returns null if no such exception exists
GregorianCalendar.GregorianCalendar(int,int,int,int,int)	Constructs a GregorianCalendar with the given date and time set for the default time zone with the default locale
Scanner.Scanner(ReadableByteChannel,String)	Constructs a new Scanner that produces values scanned from the specified channel Bytes from the source are converted into characters using the specified charset
ConcurrentLinkedDeque.remove()	Description copied from interface Deque
EnumMap.entrySet()	Returns a Set view of the mappings contained in this map
DelayQueue.drainTo(Collection,int)	Description copied from interface BlockingQueue
TreeSet.headSet(E,boolean)	Description copied from interface NavigableSet
ConcurrentSkipListMap.putIfAbsent(K,V)	If the specified key is not already associated with a value associate it with the given value
Executor.execute(Runnable)	Executes the given command at some time in the future The command may execute in a new thread in a pooled thread or in the calling thread at the discretion of the Executor implementation
CopyOnWriteArraySet.iterator()	Returns an iterator over the elements contained in this set in the order in which these elements were added
AbstractList.clear()	Removes all of the elements from this list optional operation
LinkedTransferQueue.poll(long,TimeUnit)	Description copied from interface BlockingQueue
TreeMap.tailMap(K,boolean)	Description copied from interface NavigableMap
EnumSet.copyOf(EnumSet)	Creates an enum set with the same element type as the specified enum set initially containing the same elements if any
BlockingDeque.peek()	Retrieves but does not remove the head of the queue represented by this deque in other words the first element of this deque or returns null if this deque is empty
Phaser.forceTermination()	Forces this phaser to enter termination state Counts of registered parties are unaffected If this phaser is a member of a tiered set of phasers then all of the phasers in the set are terminated If this phaser is already terminated this method has no effect This method may be useful for coordinating recovery after one or more tasks encounter unexpected exceptions
LinkedList.set(int,E)	Replaces the element at the specified position in this list with the specified element
BlockingQueue.remainingCapacity()	Returns the number of additional elements that this queue can ideally in the absence of memory or resource constraints accept without blocking or Integer MAX VALUE if there is no intrinsic limit
LinkedHashMap.LinkedHashMap(int)	Constructs an empty insertion ordered LinkedHashMap instance with the specified initial capacity and a default load factor 0 75
Queue.remove()	Retrieves and removes the head of this queue This method differs from poll only in that it throws an exception if this queue is empty
ForkJoinTask.isCancelled()	Description copied from interface Future
AtomicIntegerFieldUpdater.getAndAdd(T,int)	Atomically adds the given value to the current value of the field of the given object managed by this updater
Handler.setFormatter(Formatter)	Set a Formatter This Formatter will be used to format LogRecords for this Handler
ZipOutputStream.putNextEntry(ZipEntry)	Begins writing a new ZIP file entry and positions the stream to the start of the entry data Closes the current entry if still active
HashMap.containsKey(Object)	Returns true if this map contains a mapping for the specified key
ConcurrentNavigableMap.navigableKeySet()	Returns a NavigableSet view of the keys contained in this map
AtomicLongArray.toString()	Returns the String representation of the current values of array
ExecutorService.awaitTermination(long,TimeUnit)	Blocks until all tasks have completed execution after a shutdown request or the timeout occurs or the current thread is interrupted whichever happens first
BlockingQueue.put(E)	Inserts the specified element into this queue waiting if necessary for space to become available
ArrayList.isEmpty()	Returns true if this list contains no elements
RunnableScheduledFuture.isPeriodic()	Returns true if this is a periodic task A periodic task may re run according to some schedule A non periodic task can be run only once
Calendar.get(int)	Returns the value of the given calendar field In lenient mode all calendar fields are normalized In non lenient mode all calendar fields are validated and this method throws an exception if any calendar fields have out of range values The normalization and validation are handled by the complete method which process is calendar system dependent
ListIterator.nextIndex()	Returns the index of the element that would be returned by a subsequent call to next Returns list size if the list iterator is at the end of the list
CopyOnWriteArrayList.isEmpty()	Returns true if this list contains no elements
Executors.unconfigurableScheduledExecutorService(ScheduledExecutorService)	Returns an object that delegates all defined ScheduledExecutorService methods to the given executor but not any other methods that might otherwise be accessible using casts This provides a way to safely freeze configuration and disallow tuning of a given concrete implementation
ForkJoinTask.get()	Waits if necessary for the computation to complete and then retrieves its result
TimeZone.getDisplayName(boolean,int,Locale)	Returns a name in the specified style of this TimeZone suitable for presentation to the user in the specified locale If the specified daylight is true a Daylight Saving Time name is returned even if this TimeZone doesn t observe Daylight Saving Time Otherwise a Standard Time name is returned
Collections.singletonMap(K,V)	Returns an immutable map mapping only the specified key to the specified value The returned map is serializable
EnumSet.of(E,)	Creates an enum set initially containing the specified elements
AbstractMap.entrySet()	Description copied from interface Map
MemoryHandler.push()	Push any buffered output to the target Handler
SimpleTimeZone.setStartYear(int)	Sets the daylight saving time starting year
BitSet.intersects(BitSet)	Returns true if the specified BitSet has any bits set to true that are also set to true in this BitSet
Matcher.hitEnd()	Returns true if the end of input was hit by the search engine in the last match operation performed by this matcher
ScheduledThreadPoolExecutor.execute(Runnable)	Executes command with zero required delay
ServiceConfigurationError.ServiceConfigurationError(String,Throwable)	Constructs a new instance with the specified message and cause
SortedSet.subSet(E,E)	Returns a view of the portion of this set whose elements range from fromElement inclusive to toElement exclusive If fromElement and toElement are equal the returned set is empty The returned set is backed by this set so changes in the returned set are reflected in this set and vice versa The returned set supports all optional set operations that this set supports
PriorityQueue.iterator()	Returns an iterator over the elements in this queue The iterator does not return the elements in any particular order
Arrays.binarySearch(double[],double)	Searches the specified array of doubles for the specified value using the binary search algorithm The array must be sorted as by the sort double method prior to making this call
Adler32.update(int)	Updates the checksum with the specified byte the low eight bits of the argument b
LinkedList.remove(Object)	Removes the first occurrence of the specified element from this list if it is present If this list does not contain the element it is unchanged More formally removes the element with the lowest index i such that o null get i null o equals get i if such an element exists Returns true if this list contained the specified element or equivalently if this list changed as a result of the call
MemoryHandler.close()	Close the Handler and free all associated resources
Queue.poll()	Retrieves and removes the head of this queue or returns null if this queue is empty
TimeZone.getTimeZone(String)	Gets the TimeZone for the given ID
DeflaterOutputStream.DeflaterOutputStream(OutputStream,Deflater)	Creates a new output stream with the specified compressor and a default buffer size
Deque.remove(Object)	Removes the first occurrence of the specified element from this deque
LinkedBlockingQueue.iterator()	Returns an iterator over the elements in this queue in proper sequence
AtomicReference.AtomicReference(V)	Creates a new AtomicReference with the given initial value
TreeMap.navigableKeySet()	Description copied from interface NavigableMap
Scanner.findWithinHorizon(Pattern,int)	Attempts to find the next occurrence of the specified pattern
PriorityBlockingQueue.offer(E,long,TimeUnit)	Inserts the specified element into this priority queue
Handler.publish(LogRecord)	Publish a LogRecord
Deque.pollLast()	Retrieves and removes the last element of this deque or returns null if this deque is empty
ReentrantLock.ReentrantLock()	Creates an instance of ReentrantLock
ArrayList.addAll(Collection)	Appends all of the elements in the specified collection to the end of this list in the order that they are returned by the specified collection s Iterator The behavior of this operation is undefined if the specified collection is modified while the operation is in progress This implies that the behavior of this call is undefined if the specified collection is this list and this list is nonempty
AtomicLongFieldUpdater.getAndAdd(T,long)	Atomically adds the given value to the current value of the field of the given object managed by this updater
TreeMap.size()	Returns the number of key value mappings in this map
LogRecord.setSourceClassName(String)	Set the name of the class that allegedly issued the logging request
Scanner.hasNextBigDecimal()	Returns true if the next token in this scanner s input can be interpreted as a BigDecimal using the nextBigDecimal method The scanner does not advance past any input
TimeZone.getDisplayName(boolean,int)	Returns a name in the specified style of this TimeZone suitable for presentation to the user in the default locale If the specified daylight is true a Daylight Saving Time name is returned even if this TimeZone doesn t observe Daylight Saving Time Otherwise a Standard Time name is returned
LoggingPermission.LoggingPermission(String,String)	Creates a new LoggingPermission object
Attributes.size()	Returns the number of attributes in this Map
Attributes.entrySet()	Returns a Collection view of the attribute name value mappings contained in this Map
SimpleTimeZone.setStartRule(int,int,int,int,boolean)	Sets the daylight saving time start rule to a weekday before or after the given date within a month e g the first Monday on or after the 8th
Deflater.deflate(byte[],int,int,int)	Compresses the input data and fills the specified buffer with compressed data Returns actual number of bytes of data compressed
BitSet.nextSetBit(int)	Returns the index of the first bit that is set to true that occurs on or after the specified starting index If no such bit exists then 1 is returned
PreferenceChangeListener.preferenceChange(PreferenceChangeEvent)	This method gets called when a preference is added removed or when its value is changed
Locale.Locale.forLanguageTag(getLanguage);)	
SimpleTimeZone.observesDaylightTime()	Returns true if this SimpleTimeZone observes Daylight Saving Time This method is equivalent to useDaylightTime
JarException.JarException(String)	Constructs a JarException with the specified detail message
AbstractPreferences.remove(String)	Implements the remove String method as per the specification in Preferences remove String
Vector.equals(Object)	Compares the specified Object with this Vector for equality Returns true if and only if the specified Object is also a List both Lists have the same size and all corresponding pairs of elements in the two Lists are equal Two elements e1 and e2 are equal if e1 null e2 null e1 equals e2 In other words two Lists are defined to be equal if they contain the same elements in the same order
AtomicLong.longValue()	Description copied from class Number
List.remove(int)	Removes the element at the specified position in this list optional operation Shifts any subsequent elements to the left subtracts one from their indices Returns the element that was removed from the list
ArrayBlockingQueue.remove(Object)	Removes a single instance of the specified element from this queue if it is present More formally removes an element e such that o equals e if this queue contains one or more such elements
TreeMap.keySet()	Returns a Set view of the keys contained in this map
Calendar.after(Object)	Returns whether this Calendar represents a time after the time represented by the specified Object This method is equivalent to compareTo when 0 if and only if when is a Calendar instance Otherwise the method returns false
ArrayDeque.getFirst()	Description copied from interface Deque
AtomicBoolean.getAndSet(boolean)	Atomically sets to the given value and returns the previous value
ArrayDeque.peekFirst()	Description copied from interface Deque
CopyOnWriteArrayList.addIfAbsent(E)	Append the element if not present
SortedMap.keySet()	Returns a Set view of the keys contained in this map
Properties.loadFromXML(InputStream)	Loads all of the properties represented by the XML document on the specified input stream into this properties table
Phaser.awaitAdvanceInterruptibly(int,long,TimeUnit)	Awaits the phase of this phaser to advance from the given phase value or the given timeout to elapse throwing InterruptedException if interrupted while waiting or returning immediately if the current phase is not equal to the given phase value or this phaser is terminated
Calendar.setTimeZone(TimeZone)	Sets the time zone with the given time zone value
TreeSet.TreeSet()	Constructs a new empty tree set sorted according to the natural ordering of its elements All elements inserted into the set must implement the Comparable interface
Pattern.flags()	Returns this pattern s match flags
Formatter.format(Locale,String,)	Writes a formatted string to this object s destination using the specified locale format string and arguments
CountDownLatch.await(long,TimeUnit)	Causes the current thread to wait until the latch has counted down to zero unless the thread is interrupted or the specified waiting time elapses
CyclicBarrier.reset()	Resets the barrier to its initial state If any parties are currently waiting at the barrier they will return with a BrokenBarrierException Note that resets after a breakage has occurred for other reasons can be complicated to carry out threads need to re synchronize in some other way and choose one to perform the reset It may be preferable to instead create a new barrier for subsequent use
ForkJoinPool.ManagedBlocker.isReleasable()	Returns true if blocking is unnecessary
BlockingDeque.pollLast(long,TimeUnit)	Retrieves and removes the last element of this deque waiting up to the specified wait time if necessary for an element to become available
Collections.newSetFromMap(Map)	Returns a set backed by the specified map The resulting set displays the same ordering concurrency and performance characteristics as the backing map In essence this factory method provides a Set implementation corresponding to any Map implementation There is no need to use this method on a Map implementation that already has a corresponding Set implementation such as HashMap or TreeMap
Pattern.compile(String)	Compiles the given regular expression into a pattern
DelayQueue.offer(E,long,TimeUnit)	Inserts the specified element into this delay queue As the queue is unbounded this method will never block
Collection.hashCode()	Returns the hash code value for this collection While the Collection interface adds no stipulations to the general contract for the Object hashCode method programmers should take note that any class that overrides the Object equals method must also override the Object hashCode method in order to satisfy the general contract for the Object hashCode method
LogManager.getLogger(String)	Method to find a named logger
ForkJoinPool.isShutdown()	Returns true if this pool has been shut down
ResourceBundle.clearCache(ClassLoader)	Removes all resource bundles from the cache that have been loaded using the given class loader
IdentityHashMap.remove(Object)	Removes the mapping for this key from this map if present
ZipFile.entries()	Returns an enumeration of the ZIP file entries
Date.Date()	Allocates a Date object and initializes it so that it represents the time at which it was allocated measured to the nearest millisecond
SynchronousQueue.retainAll(Collection)	Always returns false
GZIPOutputStream.GZIPOutputStream(OutputStream,int,boolean)	Creates a new output stream with the specified buffer size and flush mode
Calendar.getInstance(TimeZone)	Gets a calendar using the specified time zone and default locale
Collection.iterator()	Returns an iterator over the elements in this collection There are no guarantees concerning the order in which the elements are returned unless this collection is an instance of some class that provides a guarantee
Vector.remove(Object)	Removes the first occurrence of the specified element in this Vector If the Vector does not contain the element it is unchanged More formally removes the element with the lowest index i such that o null get i null o equals get i if such an element exists
ConcurrentLinkedQueue.toArray()	Returns an array containing all of the elements in this queue in proper sequence
ArrayDeque.pollFirst()	Description copied from interface Deque
Collections.reverseOrder()	Returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface The natural ordering is the ordering imposed by the objects own compareTo method This enables a simple idiom for sorting or maintaining collections or arrays of objects that implement the Comparable interface in reverse natural order For example suppose a is an array of strings Then Arrays sort a Collections reverseOrder sorts the array in reverse lexicographic alphabetical order
ExecutorService.isTerminated()	Returns true if all tasks have completed following shut down
Properties.propertyNames()	Returns an enumeration of all the keys in this property list including distinct keys in the default property list if a key of the same name has not already been found from the main properties list
Handler.setFilter(Filter)	Set a Filter to control output on this Handler
ForkJoinPool.ForkJoinWorkerThreadFactory.newThread(ForkJoinPool)	Returns a new worker thread operating in the given pool
ConcurrentSkipListSet.equals(Object)	Compares the specified object with this set for equality Returns true if the specified object is also a set the two sets have the same size and every member of the specified set is contained in this set or equivalently every member of this set is contained in the specified set This definition ensures that the equals method works properly across different implementations of the set interface
Timer.schedule(TimerTask,long)	Schedules the specified task for execution after the specified delay
LinkedList.add(E)	Appends the specified element to the end of this list
Formatter.Formatter(OutputStream,String,Locale)	Constructs a new formatter with the specified output stream charset and locale
LinkedBlockingDeque.removeLastOccurrence(Object)	Description copied from interface BlockingDeque
PriorityBlockingQueue.PriorityBlockingQueue(int)	Creates a PriorityBlockingQueue with the specified initial capacity that orders its elements according to their natural ordering
HashMap.size()	Returns the number of key value mappings in this map
Matcher.regionEnd()	Reports the end index exclusive of this matcher s region
Preferences.removePreferenceChangeListener(PreferenceChangeListener)	Removes the specified preference change listener so it no longer receives preference change events
LinkedList.pollLast()	Retrieves and removes the last element of this list or returns null if this list is empty
Vector.subList(int,int)	Returns a view of the portion of this List between fromIndex inclusive and toIndex exclusive If fromIndex and toIndex are equal the returned List is empty The returned List is backed by this List so changes in the returned List are reflected in this List and vice versa The returned List supports all of the optional List operations supported by this List
ExecutorCompletionService.poll()	Description copied from interface CompletionService
Locale.getDefault()	Gets the current value of the default locale for this instance of the Java Virtual Machine
Calendar.clear()	Sets all the calendar field values and the time value millisecond offset from the Epoch of this Calendar undefined This means that isSet will return false for all the calendar fields and the date and time calculations will treat the fields as if they had never been set A Calendar implementation class may use its specific default field values for date time calculations For example GregorianCalendar uses 1970 if the YEAR field value is undefined
Set.size()	Returns the number of elements in this set its cardinality If this set contains more than Integer MAX VALUE elements returns Integer MAX VALUE
HashSet.size()	Returns the number of elements in this set its cardinality
DeflaterInputStream.close()	Closes this input stream and its underlying input stream discarding any pending uncompressed data
AtomicLongArray.getAndDecrement(int)	Atomically decrements by one the element at index i
ForkJoinTask.helpQuiesce()	Possibly executes tasks until the pool hosting the current task is quiescent This method may be of use in designs in which many tasks are forked but none are explicitly joined instead executing them until all are processed
LinkedBlockingDeque.LinkedBlockingDeque(int)	Creates a LinkedBlockingDeque with the given fixed capacity
FileHandler.FileHandler(String,boolean)	Initialize a FileHandler to write to the given filename with optional append
Calendar.isSet(int)	Determines if the given calendar field has a value set including cases that the value has been set by internal fields calculations triggered by a get method call
Inflater.finished()	Returns true if the end of the compressed data stream has been reached
Collections.binarySearch(List,T,Comparator)	Searches the specified list for the specified object using the binary search algorithm The list must be sorted into ascending order according to the specified comparator as by the sort List Comparator method prior to making this call If it is not sorted the results are undefined If the list contains multiple elements equal to the specified object there is no guarantee which one will be found
AbstractQueuedSynchronizer.owns(ConditionObject)	Queries whether the given ConditionObject uses this synchronizer as its lock
AtomicLong.floatValue()	Description copied from class Number
ReentrantReadWriteLock.hasWaiters(Condition)	Queries whether any threads are waiting on the given condition associated with the write lock Note that because timeouts and interrupts may occur at any time a true return does not guarantee that a future signal will awaken any threads This method is designed primarily for use in monitoring of the system state
ConcurrentLinkedQueue.isEmpty()	Returns true if this queue contains no elements
EnumSet.clone()	Returns a copy of this set
SimpleTimeZone.toString()	Returns a string representation of this time zone
ArrayDeque.poll()	Retrieves and removes the head of the queue represented by this deque in other words the first element of this deque or returns null if this deque is empty
ConcurrentLinkedDeque.peekFirst()	Description copied from interface Deque
Collections.checkedSortedSet(SortedSet,Class)	Returns a dynamically typesafe view of the specified sorted set
LinkedList.pollFirst()	Retrieves and removes the first element of this list or returns null if this list is empty
DelayQueue.toArray(T[])	Returns an array containing all of the elements in this queue the runtime type of the returned array is that of the specified array
Preferences.sync()	Ensures that future reads from this preference node and its descendants reflect any changes that were committed to the persistent store from any VM prior to the sync invocation As a side effect forces any changes in the contents of this preference node and its descendants to the persistent store as if the flush method had been invoked on this node
Attributes.Attributes(Attributes)	Constructs a new Attributes object with the same attribute name value mappings as in the specified Attributes
Properties.load(InputStream)	Reads a property list key and element pairs from the input byte stream The input stream is in a simple line oriented format as specified in load Reader and is assumed to use the ISO 8859 1 character encoding that is each byte is one Latin1 character Characters not in Latin1 and certain special characters are represented in keys and elements using Unicode escapes as defined in section 3 3 of The Java Language Specification
CopyOnWriteArrayList.set(int,E)	Replaces the element at the specified position in this list with the specified element
AtomicInteger.weakCompareAndSet(int,int)	Atomically sets the value to the given updated value if the current value the expected value
AbstractQueuedLongSynchronizer.ConditionObject.awaitNanos(long)	Implements timed condition wait
LinkedBlockingDeque.drainTo(Collection,int)	Description copied from interface BlockingQueue
IllegalFormatPrecisionException.getPrecision()	Returns the precision
AbstractPreferences.getInt(String,int)	Implements the getInt method as per the specification in Preferences getInt String int
StringTokenizer.nextToken()	Returns the next token from this string tokenizer
Date.clone()	Return a copy of this object
Deflater.end()	Closes the compressor and discards any unprocessed input
Callable.call()	Computes a result or throws an exception if unable to do so
GregorianCalendar.getGreatestMinimum(int)	Returns the highest minimum value for the given calendar field of this GregorianCalendar instance The highest minimum value is defined as the largest value returned by getActualMinimum int for any possible time value taking into consideration the current values of the getFirstDayOfWeek getMinimalDaysInFirstWeek getGregorianChange and getTimeZone methods
Vector.capacity()	Returns the current capacity of this vector
AtomicReference.compareAndSet(V,V)	Atomically sets the value to the given updated value if the current value the expected value
Filter.isLoggable(LogRecord)	Check if a given log record should be published
ConcurrentLinkedDeque.addFirst(E)	Inserts the specified element at the front of this deque
StreamHandler.close()	Close the current output stream
TimeZone.getDisplayName(Locale)	Returns a long standard time name of this TimeZone suitable for presentation to the user in the specified locale
ForkJoinTask.invokeAll(ForkJoinTask)	Forks the given tasks returning when isDone holds for each task or an unchecked exception is encountered in which case the exception is rethrown If more than one task encounters an exception then this method throws any one of these exceptions If any task encounters an exception others may be cancelled However the execution status of individual tasks is not guaranteed upon exceptional return The status of each task may be obtained using getException and related methods to check if they have been cancelled completed normally or exceptionally or left unprocessed
Enumeration.hasMoreElements()	Tests if this enumeration contains more elements
PriorityBlockingQueue.poll(long,TimeUnit)	Description copied from interface BlockingQueue
CopyOnWriteArraySet.equals(Object)	Compares the specified object with this set for equality
AbstractQueuedSynchronizer.getFirstQueuedThread()	Returns the first longest waiting thread in the queue or null if no threads are currently queued
Handler.flush()	Flush any buffered output
ArrayList.get(int)	Returns the element at the specified position in this list
EnumSet.range(E,E)	Creates an enum set initially containing all of the elements in the range defined by the two specified endpoints The returned set will contain the endpoints themselves which may be identical but must not be out of order
Set.retainAll(Collection)	Retains only the elements in this set that are contained in the specified collection optional operation In other words removes from this set all of its elements that are not contained in the specified collection If the specified collection is also a set this operation effectively modifies this set so that its value is the intersection of the two sets
Executors.newCachedThreadPool(ThreadFactory)	Creates a thread pool that creates new threads as needed but will reuse previously constructed threads when they are available and uses the provided ThreadFactory to create new threads when needed
Vector.add(E)	Appends the specified element to the end of this Vector
SynchronousQueue.isEmpty()	Always returns true
Logger.getHandlers()	Get the Handlers associated with this logger
ConcurrentLinkedDeque.addLast(E)	Inserts the specified element at the end of this deque
PropertyResourceBundle.PropertyResourceBundle(InputStream)	Creates a property resource bundle from an InputStream The property file read with this constructor must be encoded in ISO 8859 1
ReentrantReadWriteLock.toString()	Returns a string identifying this lock as well as its lock state
LockSupport.getBlocker(Thread)	Returns the blocker object supplied to the most recent invocation of a park method that has not yet unblocked or null if not blocked The value returned is just a momentary snapshot the thread may have since unblocked or blocked on a different blocker object
Deque.poll()	Retrieves and removes the head of the queue represented by this deque in other words the first element of this deque or returns null if this deque is empty
MemoryHandler.MemoryHandler()	Create a MemoryHandler and configure it based on LogManager configuration properties
Matcher.reset()	Resets this matcher
Dictionary.put(K,V)	Maps the specified key to the specified value in this dictionary Neither the key nor the value can be null
WeakHashMap.containsValue(Object)	Returns true if this map maps one or more keys to the specified value
Arrays.fill(Object[],int,int,Object)	Assigns the specified Object reference to each element of the specified range of the specified array of Objects The range to be filled extends from index fromIndex inclusive to index toIndex exclusive If fromIndex toIndex the range to be filled is empty
TreeMap.pollLastEntry()	Description copied from interface NavigableMap
ZipFile.ZipFile(File)	Opens a ZIP file for reading given the specified File object
FutureTask.get()	Description copied from interface Future
Formattable.formatTo(Formatter,int,int,int)	Formats the object using the provided formatter
Formatter.locale()	Returns the locale set by the construction of this formatter
LinkedBlockingDeque.clear()	Atomically removes all of the elements from this deque
BlockingDeque.offerLast(E,long,TimeUnit)	Inserts the specified element at the end of this deque waiting up to the specified wait time if necessary for space to become available
AbstractCollection.addAll(Collection)	Adds all of the elements in the specified collection to this collection optional operation The behavior of this operation is undefined if the specified collection is modified while the operation is in progress
Logger.getAnonymousLogger(String)	Create an anonymous Logger The newly created Logger is not registered in the LogManager namespace There will be no access checks on updates to the logger
Preferences.addPreferenceChangeListener(PreferenceChangeListener)	Registers the specified listener to receive preference change events for this preference node A preference change event is generated when a preference is added to this node removed from this node or when the value associated with a preference is changed
ForkJoinTask.inForkJoinPool()	Returns true if the current thread is a ForkJoinWorkerThread executing as a ForkJoinPool computation
DelayQueue.peek()	Retrieves but does not remove the head of this queue or returns null if this queue is empty Unlike poll if no expired elements are available in the queue this method returns the element that will expire next if one exists
Semaphore.tryAcquire(int)	Acquires the given number of permits from this semaphore only if all are available at the time of invocation
Vector.setElementAt(E,int)	Sets the component at the specified index of this vector to be the specified object The previous component at that position is discarded
MemoryHandler.setPushLevel(Level)	Set the pushLevel After a LogRecord is copied into our internal buffer if its level is greater than or equal to the pushLevel then push will be called
ConcurrentHashMap.get(Object)	Returns the value to which the specified key is mapped or null if this map contains no mapping for the key
DeflaterOutputStream.DeflaterOutputStream(OutputStream,Deflater,int,boolean)	Creates a new output stream with the specified compressor buffer size and flush mode
PriorityQueue.add(E)	Inserts the specified element into this priority queue
JarInputStream.JarInputStream(InputStream)	Creates a new JarInputStream and reads the optional manifest If a manifest is present also attempts to verify the signatures if the JarInputStream is signed
IdentityHashMap.keySet()	Returns an identity based set view of the keys contained in this map
LinkedBlockingDeque.putLast(E)	Description copied from interface BlockingDeque
Attributes.values()	Returns a Collection view of the attribute values contained in this Map
DelayQueue.drainTo(Collection)	Description copied from interface BlockingQueue
SynchronousQueue.toArray()	Returns a zero length array
Phaser.arriveAndDeregister()	Arrives at this phaser and deregisters from it without waiting for others to arrive Deregistration reduces the number of parties required to advance in future phases If this phaser has a parent and deregistration causes this phaser to have zero parties this phaser is also deregistered from its parent
ConcurrentSkipListSet.ConcurrentSkipListSet(Comparator)	Constructs a new empty set that orders its elements according to the specified comparator
LinkedTransferQueue.contains(Object)	Returns true if this queue contains the specified element
ThreadPoolExecutor.getKeepAliveTime(TimeUnit)	Returns the thread keep alive time which is the amount of time that threads in excess of the core pool size may remain idle before being terminated
Matcher.useAnchoringBounds(boolean)	Sets the anchoring of region bounds for this matcher
Deflater.setDictionary(byte[])	Sets preset dictionary for compression A preset dictionary is used when the history buffer can be predetermined When the data is later uncompressed with Inflater inflate Inflater getAdler can be called in order to get the Adler 32 value of the dictionary required for decompression
ReentrantReadWriteLock.hasQueuedThread(Thread)	Queries whether the given thread is waiting to acquire either the read or write lock Note that because cancellations may occur at any time a true return does not guarantee that this thread will ever acquire a lock This method is designed primarily for use in monitoring of the system state
Map.values()	Returns a Collection view of the values contained in this map
Deflater.reset()	Resets deflater so that a new set of input data can be processed
CRC32.CRC32()	Creates a new CRC32 object
Collections.disjoint(Collection,Collection)	Returns true if the two specified collections have no elements in common
AbstractQueuedSynchronizer.getSharedQueuedThreads()	Returns a collection containing threads that may be waiting to acquire in shared mode This has the same properties as getQueuedThreads except that it only returns those threads waiting due to a shared acquire
LogRecord.getLevel()	Get the logging message level for example Level SEVERE
ForkJoinPool.isTerminated()	Returns true if all tasks have completed following shut down
CopyOnWriteArrayList.equals(Object)	Compares the specified object with this list for equality
Date.compareTo(Date)	Compares two Dates for ordering
AtomicReferenceFieldUpdater.getAndSet(T,V)	Atomically sets the field of the given object managed by this updater to the given value and returns the old value
ArrayList.ensureCapacity(int)	Increases the capacity of this ArrayList instance if necessary to ensure that it can hold at least the number of elements specified by the minimum capacity argument
ArrayBlockingQueue.add(E)	Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue s capacity returning true upon success and throwing an IllegalStateException if this queue is full
ConcurrentSkipListSet.ConcurrentSkipListSet(Collection)	Constructs a new set containing the elements in the specified collection that orders its elements according to their natural ordering
AtomicIntegerArray.AtomicIntegerArray(int)	Creates a new AtomicIntegerArray of the given length with all elements initially zero
Iterator.next()	Returns the next element in the iteration
ZipInputStream.close()	Closes this input stream and releases any system resources associated with the stream
ZipFile.getName()	Returns the path name of the ZIP file
LockSupport.parkNanos(long)	Disables the current thread for thread scheduling purposes for up to the specified waiting time unless the permit is available
LogRecord.setSourceMethodName(String)	Set the name of the method that allegedly issued the logging request
EnumMap.get(Object)	Returns the value to which the specified key is mapped or null if this map contains no mapping for the key
SynchronousQueue.offer(E,long,TimeUnit)	Inserts the specified element into this queue waiting if necessary up to the specified wait time for another thread to receive it
ConsoleHandler.close()	Override StreamHandler close to do a flush but not to close the output stream That is we do not close System err
Scanner.nextByte(int)	Scans the next token of the input as a byte
Phaser.arrive()	Arrives at this phaser without waiting for others to arrive
ForkJoinTask.get(long,TimeUnit)	Waits if necessary for at most the given time for the computation to complete and then retrieves its result if available
TimeZone.setRawOffset(int)	Sets the base time zone offset to GMT
BlockingDeque.addLast(E)	Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions throwing an IllegalStateException if no space is currently available When using a capacity restricted deque it is generally preferable to use offerLast
Collections.replaceAll(List,T,T)	Replaces all occurrences of one specified value in a list with another
ConcurrentNavigableMap.headMap(K,boolean)	Description copied from interface NavigableMap
ResourceBundle.ResourceBundle()	Sole constructor For invocation by subclass constructors typically implicit
Hashtable.clear()	Clears this hashtable so that it contains no keys
ConcurrentSkipListMap.values()	Returns a Collection view of the values contained in this map
ResourceBundle.getBundle(String,Locale)	Gets a resource bundle using the specified base name and locale and the caller s class loader Calling this method is equivalent to calling getBundle baseName locale this getClass getClassLoader except that getClassLoader is run with the security privileges of ResourceBundle
NavigableSet.tailSet(E,boolean)	Returns a view of the portion of this set whose elements are greater than or equal to if inclusive is true fromElement
ConcurrentLinkedQueue.offer(E)	Inserts the specified element at the tail of this queue
ArrayList.ArrayList(Collection)	Constructs a list containing the elements of the specified collection in the order they are returned by the collection s iterator
AbstractQueuedLongSynchronizer.ConditionObject.await(long,TimeUnit)	Implements timed condition wait
AbstractList.add(int,E)	Inserts the specified element at the specified position in this list optional operation Shifts the element currently at that position if any and any subsequent elements to the right adds one to their indices
Locale.getDisplayScript(Locale)	Returns a name for the locale s script that is appropriate for display to the user If possible the name will be localized for the given locale Returns the empty string if this locale doesn t specify a script code
PriorityQueue.offer(E)	Inserts the specified element into this priority queue
ForkJoinPool.managedBlock(ManagedBlocker)	Blocks in accord with the given blocker If the current thread is a ForkJoinWorkerThread this method possibly arranges for a spare thread to be activated if necessary to ensure sufficient parallelism while the current thread is blocked
AbstractCollection.isEmpty()	Returns true if this collection contains no elements
NodeChangeEvent.getChild()	Returns the node that was added or removed
HashMap.containsValue(Object)	Returns true if this map maps one or more keys to the specified value
Logger.log(LogRecord)	Log a LogRecord
LinkedBlockingDeque.contains(Object)	Returns true if this deque contains the specified element
ReentrantReadWriteLock.WriteLock.lockInterruptibly()	Acquires the write lock unless the current thread is interrupted
Date.Date(int,int,int,int,int)	Allocates a Date object and initializes it so that it represents the instant at the start of the minute specified by the year month date hrs and min arguments in the local time zone
JarFile.getEntry(String)	Returns the ZipEntry for the given entry name or null if not found
TreeSet.floor(E)	Description copied from interface NavigableSet
AtomicLong.decrementAndGet()	Atomically decrements by one the current value
EnumMap.putAll(Map)	Copies all of the mappings from the specified map to this map
TreeMap.get(Object)	Returns the value to which the specified key is mapped or null if this map contains no mapping for the key
AbstractExecutorService.submit(Runnable)	Description copied from interface ExecutorService
LinkedBlockingQueue.peek()	Description copied from interface Queue
BitSet.valueOf(LongBuffer)	Returns a new bit set containing all the bits in the given long buffer between its position and limit
Phaser.awaitAdvanceInterruptibly(int)	Awaits the phase of this phaser to advance from the given phase value throwing InterruptedException if interrupted while waiting or returning immediately if the current phase is not equal to the given phase value or this phaser is terminated
ArrayBlockingQueue.offer(E,long,TimeUnit)	Inserts the specified element at the tail of this queue waiting up to the specified wait time for space to become available if the queue is full
LinkedBlockingDeque.add(E)	Inserts the specified element at the end of this deque unless it would violate capacity restrictions When using a capacity restricted deque it is generally preferable to use method offer
StreamHandler.publish(LogRecord)	Format and publish a LogRecord
ThreadPoolExecutor.getThreadFactory()	Returns the thread factory used to create new threads
List.toArray(T[])	Returns an array containing all of the elements in this list in proper sequence from first to last element the runtime type of the returned array is that of the specified array If the list fits in the specified array it is returned therein Otherwise a new array is allocated with the runtime type of the specified array and the size of this list
List.retainAll(Collection)	Retains only the elements in this list that are contained in the specified collection optional operation In other words removes from this list all of its elements that are not contained in the specified collection
JarException.JarException()	Constructs a JarException with no detail message
ForkJoinTask.getQueuedTaskCount()	Returns an estimate of the number of tasks that have been forked by the current worker thread but not yet executed This value may be useful for heuristic decisions about whether to fork other tasks
Executors.privilegedCallableUsingCurrentClassLoader(Callable)	Returns a Callable object that will when called execute the given callable under the current access control context with the current context class loader as the context class loader This method should normally be invoked within an AccessController doPrivileged java security PrivilegedAction T action to create callables that will if possible execute under the selected permission settings holding within that action or if not possible throw an associated AccessControlException
TreeMap.ceilingKey(K)	Description copied from interface NavigableMap
LinkedTransferQueue.LinkedTransferQueue(Collection)	Creates a LinkedTransferQueue initially containing the elements of the given collection added in traversal order of the collection s iterator
AbstractPreferences.clear()	Implements the clear method as per the specification in Preferences clear
CopyOnWriteArraySet.toArray()	Returns an array containing all of the elements in this set
Matcher.end(int)	Returns the offset after the last character of the subsequence captured by the given group during the previous match operation
AtomicLongFieldUpdater.getAndSet(T,long)	Atomically sets the field of the given object managed by this updater to the given value and returns the old value
Map.Entry.getValue()	Returns the value corresponding to this entry If the mapping has been removed from the backing map by the iterator s remove operation the results of this call are undefined
AbstractMap.SimpleImmutableEntry.AbstractMap.SimpleImmutableEntry(K,V)	Creates an entry representing a mapping from the specified key to the specified value
Logger.fine(String)	Log a FINE message
EnumSet.of(E,E,E,E,E)	Creates an enum set initially containing the specified elements
CopyOnWriteArrayList.retainAll(Collection)	Retains only the elements in this list that are contained in the specified collection In other words removes from this list all of its elements that are not contained in the specified collection
Deque.element()	Retrieves but does not remove the head of the queue represented by this deque in other words the first element of this deque
CheckedInputStream.getChecksum()	Returns the Checksum for this input stream
Scanner.nextShort()	Scans the next token of the input as a short
ArrayDeque.size()	Returns the number of elements in this deque
AbstractPreferences.removePreferenceChangeListener(PreferenceChangeListener)	Description copied from class Preferences
AbstractList.add(E)	Appends the specified element to the end of this list optional operation
Arrays.toString(boolean[])	Returns a string representation of the contents of the specified array
ConcurrentSkipListMap.lastEntry()	Returns a key value mapping associated with the greatest key in this map or null if the map is empty
LinkedBlockingQueue.clear()	Atomically removes all of the elements from this queue
BlockingQueue.take()	Retrieves and removes the head of this queue waiting if necessary until an element becomes available
Collection.toArray()	Returns an array containing all of the elements in this collection
Arrays.copyOf(int[],int)	Copies the specified array truncating or padding with zeros if necessary so the copy has the specified length For all indices that are valid in both the original array and the copy the two arrays will contain identical values For any indices that are valid in the copy but not the original the copy will contain 0
BitSet.BitSet()	Creates a new bit set All bits are initially false
Locale.Locale(String)	Construct a locale from a language code
ThreadPoolExecutor.getCompletedTaskCount()	Returns the approximate total number of tasks that have completed execution Because the states of tasks and threads may change dynamically during computation the returned value is only an approximation but one that does not ever decrease across successive calls
JarFile.JarFile(File,boolean,int)	Creates a new JarFile to read from the specified File object in the specified mode The mode argument must be either OPEN READ or OPEN READ OPEN DELETE
Objects.hashCode(Object)	Returns the hash code of a non null argument and 0 for a null argument
Locale.getDisplayLanguage()	Returns a name for the locale s language that is appropriate for display to the user
GZIPOutputStream.GZIPOutputStream(OutputStream,boolean)	Creates a new output stream with a default buffer size and the specified flush mode
Preferences.userNodeForPackage(Class)	Returns the preference node from the calling user s preference tree that is associated by convention with the specified class s package
SimpleTimeZone.SimpleTimeZone(int,String)	Constructs a SimpleTimeZone with the given base time zone offset from GMT and time zone ID with no daylight saving time schedule
Properties.storeToXML(OutputStream,String,String)	Emits an XML document representing all of the properties contained in this table using the specified encoding
Preferences.flush()	Forces any changes in the contents of this preference node and its descendants to the persistent store Once this method returns successfully it is safe to assume that all changes made in the subtree rooted at this node prior to the method invocation have become permanent
DeflaterOutputStream.DeflaterOutputStream(OutputStream)	Creates a new output stream with a default compressor and buffer size
Arrays.sort(byte[],int,int)	Sorts the specified range of the array into ascending order The range to be sorted extends from the index fromIndex inclusive to the index toIndex exclusive If fromIndex toIndex the range to be sorted is empty
TreeSet.pollFirst()	Description copied from interface NavigableSet
InputMismatchException.InputMismatchException(String)	Constructs an InputMismatchException saving a reference to the error message string s for later retrieval by the getMessage method
Arrays.sort(Object[])	Sorts the specified array of objects into ascending order according to the natural ordering of its elements
AtomicLongArray.AtomicLongArray(int)	Creates a new AtomicLongArray of the given length with all elements initially zero
Deque.peekLast()	Retrieves but does not remove the last element of this deque or returns null if this deque is empty
IllegalFormatConversionException.getMessage()	Description copied from class Throwable
ArrayDeque.isEmpty()	Returns true if this deque contains no elements
AtomicStampedReference.attemptStamp(V,int)	Atomically sets the value of the stamp to the given update value if the current reference is to the expected reference Any given invocation of this operation may fail return false spuriously but repeated invocation when the current value holds the expected value and no other thread is also attempting to set the value will eventually succeed
Properties.list(PrintWriter)	Prints this property list out to the specified output stream
ZipFile.ZipFile(File,int)	Opens a new ZipFile to read from the specified File object in the specified mode The mode argument must be either OPEN READ or OPEN READ OPEN DELETE
Attributes.Name.Attributes.Name(String)	Constructs a new attribute name using the given string name
ZipInputStream.available()	Returns 0 after EOF has reached for the current entry data otherwise always return 1
CheckedOutputStream.write(byte[],int,int)	Writes an array of bytes Will block until the bytes are actually written
PriorityQueue.PriorityQueue(SortedSet)	Creates a PriorityQueue containing the elements in the specified sorted set This priority queue will be ordered according to the same ordering as the given sorted set
Arrays.sort(int[],int,int)	Sorts the specified range of the array into ascending order The range to be sorted extends from the index fromIndex inclusive to the index toIndex exclusive If fromIndex toIndex the range to be sorted is empty
AbstractQueuedLongSynchronizer.ConditionObject.signal()	Moves the longest waiting thread if one exists from the wait queue for this condition to the wait queue for the owning lock
TimerTask.scheduledExecutionTime()	Returns the scheduled execution time of the most recent actual execution of this task If this method is invoked while task execution is in progress the return value is the scheduled execution time of the ongoing task execution This method is typically invoked from within a task s run method to determine whether the current execution of the task is sufficiently timely to warrant performing the scheduled activity public void run if System currentTimeMillis scheduledExecutionTime MAX TARDINESS return Too late skip this execution
Date.equals(Object)	Compares two dates for equality
HashSet.clear()	Removes all of the elements from this set
Set.hashCode()	Returns the hash code value for this set The hash code of a set is defined to be the sum of the hash codes of the elements in the set where the hash code of a null element is defined to be zero
NavigableSet.subSet(E,E)	Returns a view of the portion of this set whose elements range from fromElement inclusive to toElement exclusive If fromElement and toElement are equal the returned set is empty The returned set is backed by this set so changes in the returned set are reflected in this set and vice versa The returned set supports all optional set operations that this set supports
ArrayDeque.iterator()	Returns an iterator over the elements in this deque The elements will be ordered from first head to last tail This is the same order that elements would be dequeued via successive calls to remove or popped via successive calls to pop
SocketHandler.SocketHandler()	Create a SocketHandler using only LogManager properties or their defaults
ArrayList.clear()	Removes all of the elements from this list The list will be empty after this call returns
AtomicLong.getAndDecrement()	Atomically decrements by one the current value
NavigableSet.floor(E)	Returns the greatest element in this set less than or equal to the given element or null if there is no such element
Scanner.useRadix(int)	Sets this scanner s default radix to the specified radix
Inflater.Inflater()	Creates a new decompressor
XMLFormatter.getTail(Handler)	Return the tail string for a set of XML formatted records
AbstractExecutorService.AbstractExecutorService()	
ConcurrentSkipListSet.removeAll(Collection)	Removes from this set all of its elements that are contained in the specified collection If the specified collection is also a set this operation effectively modifies this set so that its value is the asymmetric set difference of the two sets
Properties.store(Writer,String)	Writes this property list key and element pairs in this Properties table to the output character stream in a format suitable for using the load Reader method
Arrays.equals(char[],char[])	Returns true if the two specified arrays of chars are equal to one another Two arrays are considered equal if both arrays contain the same number of elements and all corresponding pairs of elements in the two arrays are equal In other words two arrays are equal if they contain the same elements in the same order Also two array references are considered equal if both are null
PreferenceChangeEvent.getNode()	Returns the preference node that emitted the event
Phaser.bulkRegister(int)	Adds the given number of new unarrived parties to this phaser
AtomicStampedReference.weakCompareAndSet(V,V,int,int)	Atomically sets the value of both the reference and stamp to the given update values if the current reference is to the expected reference and the current stamp is equal to the expected stamp
TreeSet.add(E)	Adds the specified element to this set if it is not already present
Date.after(Date)	Tests if this date is after the specified date
Manifest.getAttributes(String)	Returns the Attributes for the specified entry name
Scanner.useDelimiter(Pattern)	Sets this scanner s delimiting pattern to the specified pattern
Dictionary.Dictionary()	Sole constructor For invocation by subclass constructors typically implicit
Deque.contains(Object)	Returns true if this deque contains the specified element
Attributes.equals(Object)	Compares the specified Attributes object with this Map for equality
PropertyPermission.PropertyPermission(String,String)	Creates a new PropertyPermission object with the specified name
ReentrantLock.getHoldCount()	Queries the number of holds on this lock by the current thread
AbstractPreferences.parent()	Implements the parent method as per the specification in Preferences parent
XMLFormatter.format(LogRecord)	Format the given message to XML
ConcurrentLinkedDeque.add(E)	Inserts the specified element at the tail of this deque
ConcurrentLinkedQueue.toArray(T[])	Returns an array containing all of the elements in this queue in proper sequence the runtime type of the returned array is that of the specified array If the queue fits in the specified array it is returned therein Otherwise a new array is allocated with the runtime type of the specified array and the size of this queue
ForkJoinTask.tryUnfork()	Tries to unschedule this task for execution This method will typically succeed if this task is the most recently forked task by the current thread and has not commenced executing in another thread This method may be useful when arranging alternative local processing of tasks that could have been but were not stolen
Set.remove(Object)	Removes the specified element from this set if it is present optional operation More formally removes an element e such that o null e null o equals e if this set contains such an element Returns true if this set contained the element or equivalently if this set changed as a result of the call This set will not contain the element once the call returns
TimeZone.hasSameRules(TimeZone)	Returns true if this zone has the same rule and offset as another zone
Vector.addAll(int,Collection)	Inserts all of the elements in the specified Collection into this Vector at the specified position Shifts the element currently at that position if any and any subsequent elements to the right increases their indices The new elements will appear in the Vector in the order that they are returned by the specified Collection s iterator
AbstractQueuedSynchronizer.hasContended()	Queries whether any threads have ever contended to acquire this synchronizer that is if an acquire method has ever blocked
ConcurrentSkipListSet.descendingSet()	Returns a reverse order view of the elements contained in this set
Pack200.Packer.addPropertyChangeListener(PropertyChangeListener)	Registers a listener for PropertyChange events on the properties map
AbstractQueuedLongSynchronizer.getFirstQueuedThread()	Returns the first longest waiting thread in the queue or null if no threads are currently queued
CurrencyNameProvider.getDisplayName(String,Locale)	Returns a name for the currency that is appropriate for display to the user The default implementation returns null
Arrays.toString(byte[])	Returns a string representation of the contents of the specified array
Date.toLocaleString()	Creates a string representation of this Date object in an implementation dependent form The intent is that the form should be familiar to the user of the Java application wherever it may happen to be running The intent is comparable to that of the c format supported by the strftime function of ISO C
MissingFormatWidthException.getFormatSpecifier()	Returns the format specifier which does not have a width
BitSet.clear(int)	Sets the bit specified by the index to false
Manifest.Manifest(InputStream)	Constructs a new Manifest from the specified input stream
ConcurrentSkipListMap.clone()	Returns a shallow copy of this ConcurrentSkipListMap instance The keys and values themselves are not cloned
Scanner.nextInt()	Scans the next token of the input as an int
TimeZone.getRawOffset()	Returns the amount of time in milliseconds to add to UTC to get standard time in this time zone Because this value is not affected by daylight saving time it is called raw offset
Pack200.newUnpacker()	Obtain new instance of a class that implements Unpacker
Arrays.binarySearch(Object[],int,int,Object)	Searches a range of the specified array for the specified object using the binary search algorithm
Collections.emptyMap()	Returns the empty map immutable This map is serializable
NavigableMap.ceilingEntry(K)	Returns a key value mapping associated with the least key greater than or equal to the given key or null if there is no such key
Logger.logrb(Level,String,String,String,String,Object)	Log a message specifying source class method and resource bundle name with a single object parameter to the log message
NoSuchElementException.NoSuchElementException(String)	Constructs a NoSuchElementException saving a reference to the error message string s for later retrieval by the getMessage method
Scanner.nextDouble()	Scans the next token of the input as a double
Locale.Builder.setUnicodeLocaleKeyword(String,String)	Sets the Unicode locale keyword type for the given key If the type is null the Unicode keyword is removed Otherwise the key must be non null and both key and type must be well formed or an exception is thrown
ScheduledThreadPoolExecutor.schedule(Runnable,long,TimeUnit)	Description copied from interface ScheduledExecutorService
IdentityHashMap.containsValue(Object)	Tests whether the specified object reference is a value in this identity hash map
AbstractList.remove(int)	Removes the element at the specified position in this list optional operation Shifts any subsequent elements to the left subtracts one from their indices Returns the element that was removed from the list
SynchronousQueue.size()	Always returns zero
SimpleTimeZone.getDSTSavings()	Returns the amount of time in milliseconds that the clock is advanced during daylight saving time
Level.intValue()	Get the integer value for this level This integer value can be used for efficient ordering comparisons between Level objects
LocaleNameProvider.getDisplayScript(String,Locale)	Returns a localized name for the given IETF BCP47 script code and the given locale that is appropriate for display to the user
AbstractMap.SimpleEntry.toString()	Returns a String representation of this map entry This implementation returns the string representation of this entry s key followed by the equals character followed by the string representation of this entry s value
SynchronousQueue.iterator()	Returns an empty iterator in which hasNext always returns false
AbstractSequentialList.set(int,E)	Replaces the element at the specified position in this list with the specified element optional operation
LogRecord.setMessage(String)	Set the raw log message before localization or formatting
Hashtable.keys()	Returns an enumeration of the keys in this hashtable
Preferences.parent()	Returns the parent of this preference node or null if this is the root
ConcurrentSkipListSet.add(E)	Adds the specified element to this set if it is not already present
DeflaterInputStream.DeflaterInputStream(InputStream)	Creates a new input stream with a default compressor and buffer size
AtomicLongArray.lazySet(int,long)	Eventually sets the element at position i to the given value
CopyOnWriteArrayList.CopyOnWriteArrayList()	Creates an empty list
Deque.pollFirst()	Retrieves and removes the first element of this deque or returns null if this deque is empty
AtomicLongArray.weakCompareAndSet(int,long,long)	Atomically sets the element at position i to the given updated value if the current value the expected value
ResourceBundle.getLocale()	Returns the locale of this resource bundle This method can be used after a call to getBundle to determine whether the resource bundle returned really corresponds to the requested locale or is a fallback
ConcurrentHashMap.isEmpty()	Returns true if this map contains no key value mappings
Arrays.copyOfRange(byte[],int,int)	Copies the specified range of the specified array into a new array
ForkJoinTask.getSurplusQueuedTaskCount()	Returns an estimate of how many more locally queued tasks are held by the current worker thread than there are other worker threads that might steal them This value may be useful for heuristic decisions about whether to fork other tasks In many usages of ForkJoinTasks at steady state each worker should aim to maintain a small constant surplus for example 3 of tasks and to process computations locally if this threshold is exceeded
BitSet.cardinality()	Returns the number of bits set to true in this BitSet
Attributes.putAll(Map)	Copies all of the attribute name value mappings from the specified Attributes to this Map Duplicate mappings will be replaced
ConcurrentHashMap.putIfAbsent(K,V)	If the specified key is not already associated with a value associate it with the given value
AtomicIntegerFieldUpdater.getAndIncrement(T)	Atomically increments by one the current value of the field of the given object managed by this updater
SynchronousQueue.clear()	Does nothing
Scanner.nextInt(int)	Scans the next token of the input as an int
ThreadPoolExecutor.getPoolSize()	Returns the current number of threads in the pool
AbstractMap.SimpleImmutableEntry.equals(Object)	Compares the specified object with this entry for equality
LinkedBlockingQueue.offer(E,long,TimeUnit)	Inserts the specified element at the tail of this queue waiting if necessary up to the specified wait time for space to become available
MatchResult.groupCount()	Returns the number of capturing groups in this match result s pattern
Scanner.nextBigDecimal()	Scans the next token of the input as a BigDecimal
Timer.Timer(String,boolean)	Creates a new timer whose associated thread has the specified name and may be specified to run as a daemon
ArrayList.add(E)	Appends the specified element to the end of this list
Deflater.getTotalOut()	Returns the total number of compressed bytes output so far
StreamHandler.setEncoding(String)	Set or change the character encoding used by this Handler
AtomicIntegerArray.getAndSet(int,int)	Atomically sets the element at position i to the given value and returns the old value
HashMap.putAll(Map)	Copies all of the mappings from the specified map to this map
Matcher.lookingAt()	Attempts to match the input sequence starting at the beginning of the region against the pattern
ConcurrentLinkedDeque.isEmpty()	Returns true if this collection contains no elements
Stack.Stack()	Creates an empty Stack
ConcurrentMap.putIfAbsent(K,V)	If the specified key is not already associated with a value associate it with the given value
Random.nextDouble()	Returns the next pseudorandom uniformly distributed double value between 0 0 and 1 0 from this random number generator s sequence
FutureTask.isCancelled()	Description copied from interface Future
Logger.getName()	Get the name for this logger
LogRecord.getParameters()	Get the parameters to the log message
Date.getHours()	Returns the hour represented by this Date object The returned value is a number 0 through 23 representing the hour within the day that contains or begins with the instant in time represented by this Date object as interpreted in the local time zone
LinkedList.toArray()	Returns an array containing all of the elements in this list in proper sequence from first to last element
AbstractPreferences.putDouble(String,double)	Implements the putDouble method as per the specification in Preferences putDouble String double
CopyOnWriteArraySet.add(E)	Adds the specified element to this set if it is not already present
AtomicReference.getAndSet(V)	Atomically sets to the given value and returns the old value
ResourceBundle.containsKey(String)	Determines whether the given key is contained in this ResourceBundle or its parent bundles
Scanner.findInLine(Pattern)	Attempts to find the next occurrence of the specified pattern ignoring delimiters If the pattern is found before the next line separator the scanner advances past the input that matched and returns the string that matched the pattern
ArrayList.addAll(int,Collection)	Inserts all of the elements in the specified collection into this list starting at the specified position Shifts the element currently at that position if any and any subsequent elements to the right increases their indices The new elements will appear in the list in the order that they are returned by the specified collection s iterator
IdentityHashMap.containsKey(Object)	Tests whether the specified object reference is a key in this identity hash map
SimpleTimeZone.setStartRule(int,int,int,int)	Sets the daylight saving time start rule For example if daylight saving time starts on the first Sunday in April at 2 am in local wall clock time you can set the start rule by calling setStartRule Calendar APRIL 1 Calendar SUNDAY 2 60 60 1000
ConcurrentModificationException.ConcurrentModificationException()	Constructs a ConcurrentModificationException with no detail message
PriorityBlockingQueue.put(E)	Inserts the specified element into this priority queue
AtomicStampedReference.AtomicStampedReference(V,int)	Creates a new AtomicStampedReference with the given initial values
IdentityHashMap.clear()	Removes all of the mappings from this map
LinkedBlockingDeque.offerFirst(E)	Description copied from interface BlockingDeque
ScheduledThreadPoolExecutor.getRemoveOnCancelPolicy()	Gets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation This value is by default false
ZipEntry.setExtra(byte[])	Sets the optional extra field data for the entry
DeflaterInputStream.mark(int)	This operation is not supported
LinkedBlockingDeque.toArray()	Returns an array containing all of the elements in this deque in proper sequence from first to last element
Deflater.needsInput()	Returns true if the input data buffer is empty and setInput should be called in order to provide more input
LockSupport.park(Object)	Disables the current thread for thread scheduling purposes unless the permit is available
CopyOnWriteArrayList.add(int,E)	Inserts the specified element at the specified position in this list Shifts the element currently at that position if any and any subsequent elements to the right adds one to their indices
Arrays.equals(float[],float[])	Returns true if the two specified arrays of floats are equal to one another Two arrays are considered equal if both arrays contain the same number of elements and all corresponding pairs of elements in the two arrays are equal In other words two arrays are equal if they contain the same elements in the same order Also two array references are considered equal if both are null
Phaser.awaitAdvance(int)	Awaits the phase of this phaser to advance from the given phase value returning immediately if the current phase is not equal to the given phase value or this phaser is terminated
BlockingDeque.pollFirst(long,TimeUnit)	Retrieves and removes the first element of this deque waiting up to the specified wait time if necessary for an element to become available
LinkedBlockingDeque.getFirst()	Description copied from interface Deque
Executors.callable(Runnable)	Returns a Callable object that when called runs the given task and returns null
Arrays.binarySearch(int[],int,int,int)	Searches a range of the specified array of ints for the specified value using the binary search algorithm
ThreadPoolExecutor.shutdown()	Initiates an orderly shutdown in which previously submitted tasks are executed but no new tasks will be accepted
Attributes.Name.toString()	Returns the attribute name as a String
Level.getResourceBundleName()	Return the level s localization resource bundle name or null if no localization bundle is defined
SynchronousQueue.removeAll(Collection)	Always returns false
LogRecord.getLoggerName()	Get the source Logger s name
AbstractQueuedSynchronizer.ConditionObject.await(long,TimeUnit)	Implements timed condition wait
Semaphore.drainPermits()	Acquires and returns all permits that are immediately available
Phaser.Phaser(int)	Creates a new phaser with the given number of registered unarrived parties no parent and initial phase number 0
AbstractQueuedSynchronizer.hasQueuedThreads()	Queries whether any threads are waiting to acquire Note that because cancellations due to interrupts and timeouts may occur at any time a true return does not guarantee that any other thread will ever acquire
Formatter.Formatter(File,String)	Constructs a new formatter with the specified file and charset
Logger.setFilter(Filter)	Set a filter to control output on this Logger
ArrayDeque.ArrayDeque(Collection)	Constructs a deque containing the elements of the specified collection in the order they are returned by the collection s iterator The first element returned by the collection s iterator becomes the first element or front of the deque
Collections.synchronizedList(List)	Returns a synchronized thread safe list backed by the specified list In order to guarantee serial access it is critical that all access to the backing list is accomplished through the returned list
ScheduledThreadPoolExecutor.ScheduledThreadPoolExecutor(int,ThreadFactory,RejectedExecutionHandler)	Creates a new ScheduledThreadPoolExecutor with the given initial parameters
SimpleTimeZone.SimpleTimeZone(int,String,int,int,int,int,int,int,int,int)	Constructs a SimpleTimeZone with the given base time zone offset from GMT time zone ID and rules for starting and ending the daylight time
ConcurrentSkipListMap.lowerEntry(K)	Returns a key value mapping associated with the greatest key strictly less than the given key or null if there is no such key The returned entry does not support the Entry setValue method
Formatter.Formatter(Appendable,Locale)	Constructs a new formatter with the specified destination and locale
CopyOnWriteArraySet.remove(Object)	Removes the specified element from this set if it is present
Arrays.fill(byte[],int,int,byte)	Assigns the specified byte value to each element of the specified range of the specified array of bytes The range to be filled extends from index fromIndex inclusive to index toIndex exclusive If fromIndex toIndex the range to be filled is empty
BlockingDeque.offer(E,long,TimeUnit)	Inserts the specified element into the queue represented by this deque in other words at the tail of this deque waiting up to the specified wait time if necessary for space to become available
TreeSet.ceiling(E)	Description copied from interface NavigableSet
Date.getDay()	Returns the day of the week represented by this date The returned value 0 Sunday 1 Monday 2 Tuesday 3 Wednesday 4 Thursday 5 Friday 6 Saturday represents the day of the week that contains or begins with the instant in time represented by this Date object as interpreted in the local time zone
XMLFormatter.getHead(Handler)	Return the header string for a set of XML formatted records
AbstractSet.hashCode()	Returns the hash code value for this set The hash code of a set is defined to be the sum of the hash codes of the elements in the set where the hash code of a null element is defined to be zero
Currency.getInstance(Locale)	Returns the Currency instance for the country of the given locale The language and variant components of the locale are ignored The result may vary over time as countries change their currencies For example for the original member countries of the European Monetary Union the method returns the old national currencies until December 31 2001 and the Euro from January 1 2002 local time of the respective countries
Future.cancel(boolean)	Attempts to cancel execution of this task This attempt will fail if the task has already completed has already been cancelled or could not be cancelled for some other reason If successful and this task has not started when cancel is called this task should never run If the task has already started then the mayInterruptIfRunning parameter determines whether the thread executing this task should be interrupted in an attempt to stop the task
PropertyPermission.implies(Permission)	Checks if this PropertyPermission object implies the specified permission
Date.getDate()	Returns the day of the month represented by this Date object
SortedMap.entrySet()	Returns a Set view of the mappings contained in this map
ReentrantReadWriteLock.getWaitQueueLength(Condition)	Returns an estimate of the number of threads waiting on the given condition associated with the write lock Note that because timeouts and interrupts may occur at any time the estimate serves only as an upper bound on the actual number of waiters
CopyOnWriteArrayList.subList(int,int)	Returns a view of the portion of this list between fromIndex inclusive and toIndex exclusive
BlockingDeque.offerLast(E)	Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions returning true upon success and false if no space is currently available
Collections.checkedList(List,Class)	Returns a dynamically typesafe view of the specified list
Executors.callable(PrivilegedExceptionAction)	Returns a Callable object that when called runs the given privileged exception action and returns its result
AtomicReference.weakCompareAndSet(V,V)	Atomically sets the value to the given updated value if the current value the expected value
Adler32.getValue()	Returns the checksum value
PriorityBlockingQueue.drainTo(Collection)	Description copied from interface BlockingQueue
SimpleTimeZone.setEndRule(int,int,int,int,boolean)	Sets the daylight saving time end rule to a weekday before or after the given date within a month e g the first Monday on or after the 8th
CyclicBarrier.CyclicBarrier(int)	Creates a new CyclicBarrier that will trip when the given number of parties threads are waiting upon it and does not perform a predefined action when the barrier is tripped
ScheduledThreadPoolExecutor.getContinueExistingPeriodicTasksAfterShutdownPolicy()	Gets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown
Handler.close()	Close the Handler and free all associated resources
Calendar.getTimeZone()	Gets the time zone
Calendar.roll(int,int)	Adds the specified signed amount to the specified calendar field without changing larger fields A negative amount means to roll down
