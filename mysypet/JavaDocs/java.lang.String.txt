String.length()	Returns the length of this string
String.valueOf(char[])	Returns the string representation of the char array argument The contents of the character array are copied subsequent modification of the character array does not affect the newly created string
String.indexOf(int)	Returns the index within this string of the first occurrence of the specified character If a character with value ch occurs in the character sequence represented by this String object then the index in Unicode code units of the first such occurrence is returned For values of ch in the range from 0 to 0xFFFF inclusive this is the smallest value k such that this charAt k ch is true For other values of ch it is the smallest value k such that this codePointAt k ch is true In either case if no such character occurs in this string then 1 is returned
String.lastIndexOf(int,int)	Returns the index within this string of the last occurrence of the specified character searching backward starting at the specified index For values of ch in the range from 0 to 0xFFFF inclusive the index returned is the largest value k such that this charAt k ch k fromIndex is true For other values of ch it is the largest value k such that this codePointAt k ch k fromIndex is true In either case if no such character occurs in this string at or before position fromIndex then 1 is returned
String.substring(int,int)	Returns a new string that is a substring of this string The substring begins at the specified beginIndex and extends to the character at index endIndex 1
String.compareToIgnoreCase(String)	Compares two strings lexicographically ignoring case differences This method returns an integer whose sign is that of calling compareTo with normalized versions of the strings where case differences have been eliminated by calling Character toLowerCase Character toUpperCase character on each character
String.valueOf(char)	Returns the string representation of the char argument
String.substring(int)	Returns a new string that is a substring of this string The substring begins with the character at the specified index and extends to the end of this string Examples unhappy substring 2 returns happy Harbison substring 3 returns bison emptiness substring 9 returns an empty string
String.indexOf(int,int)	Returns the index within this string of the first occurrence of the specified character starting the search at the specified index
String.split(String,int)	Splits this string around matches of the given regular expression
String.getBytes(Charset)	Encodes this String into a sequence of bytes using the given charset storing the result into a new byte array
String.valueOf(long)	Returns the string representation of the long argument
String.subSequence(int,int)	Returns a new character sequence that is a subsequence of this sequence
String.String(StringBuilder)	Allocates a new string that contains the sequence of characters currently contained in the string builder argument The contents of the string builder are copied subsequent modification of the string builder does not affect the newly created string
String.String(byte[],int)	Allocates a new String containing characters constructed from an array of 8 bit integer values Each character cin the resulting string is constructed from the corresponding component b in the byte array such that c char hibyte 0xff 8 b 0xff
String.String(StringBuffer)	Allocates a new string that contains the sequence of characters currently contained in the string buffer argument The contents of the string buffer are copied subsequent modification of the string buffer does not affect the newly created string
String.codePointAt(int)	Returns the character Unicode code point at the specified index The index refers to char values Unicode code units and ranges from 0 to length 1
String.equalsIgnoreCase(String)	Compares this String to another String ignoring case considerations Two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case
String.copyValueOf(char[])	Returns a String that represents the character sequence in the array specified
String.String()	Initializes a newly created String object so that it represents an empty character sequence Note that use of this constructor is unnecessary since Strings are immutable
String.offsetByCodePoints(int,int)	Returns the index within this String that is offset from the given index by codePointOffset code points Unpaired surrogates within the text range given by index and codePointOffset count as one code point each
String.trim()	Returns a copy of the string with leading and trailing whitespace omitted
String.String(int[],int,int)	Allocates a new String that contains characters from a subarray of the Unicode code point array argument The offset argument is the index of the first code point of the subarray and the count argument specifies the length of the subarray The contents of the subarray are converted to chars subsequent modification of the int array does not affect the newly created string
String.String(byte[],Charset)	Constructs a new String by decoding the specified array of bytes using the specified charset
String.isEmpty()	Returns true if and only if length is 0
String.lastIndexOf(String,int)	Returns the index within this string of the last occurrence of the specified substring searching backward starting at the specified index
String.String(byte[],String)	Constructs a new String by decoding the specified array of bytes using the specified charset The length of the new String is a function of the charset and hence may not be equal to the length of the byte array
String.startsWith(String)	Tests if this string starts with the specified prefix
String.String(char[],int,int)	Allocates a new String that contains characters from a subarray of the character array argument The offset argument is the index of the first character of the subarray and the count argument specifies the length of the subarray The contents of the subarray are copied subsequent modification of the character array does not affect the newly created string
String.matches(String)	Tells whether or not this string matches the given regular expression
String.toLowerCase()	Converts all of the characters in this String to lower case using the rules of the default locale This is equivalent to calling toLowerCase Locale getDefault
String.valueOf(char[],int,int)	Returns the string representation of a specific subarray of the char array argument
String.format(String,)	Returns a formatted string using the specified format string and arguments
String.valueOf(Object)	Returns the string representation of the Object argument
String.startsWith(String,int)	Tests if the substring of this string beginning at the specified index starts with the specified prefix
String.contentEquals(StringBuffer)	Compares this string to the specified StringBuffer The result is true if and only if this String represents the same sequence of characters as the specified StringBuffer
String.codePointBefore(int)	Returns the character Unicode code point before the specified index The index refers to char values Unicode code units and ranges from 1 to length
String.getChars(int,int,char[],int)	Copies characters from this string into the destination character array
String.indexOf(String,int)	Returns the index within this string of the first occurrence of the specified substring starting at the specified index
String.toCharArray()	Converts this string to a new character array
String.toString()	This object which is already a string is itself returned
String.valueOf(boolean)	Returns the string representation of the boolean argument
String.getBytes(String)	Encodes this String into a sequence of bytes using the named charset storing the result into a new byte array
String.String(byte[])	Constructs a new String by decoding the specified array of bytes using the platform s default charset The length of the new String is a function of the charset and hence may not be equal to the length of the byte array
String.valueOf(int)	Returns the string representation of the int argument
String.copyValueOf(char[],int,int)	Returns a String that represents the character sequence in the array specified
String.toUpperCase()	Converts all of the characters in this String to upper case using the rules of the default locale This method is equivalent to toUpperCase Locale getDefault
String.compareTo(String)	Compares two strings lexicographically
String.lastIndexOf(String)	Returns the index within this string of the last occurrence of the specified substring The last occurrence of the empty string is considered to occur at the index value this length
String.replaceFirst(String,String)	Replaces the first substring of this string that matches the given regular expression with the given replacement
String.split(String)	Splits this string around matches of the given regular expression
String.endsWith(String)	Tests if this string ends with the specified suffix
String.regionMatches(boolean,int,String,int,int)	Tests if two string regions are equal
String.getBytes()	Encodes this String into a sequence of bytes using the platform s default charset storing the result into a new byte array
String.replace(char,char)	Returns a new string resulting from replacing all occurrences of oldChar in this string with newChar
String.replaceAll(String,String)	Replaces each substring of this string that matches the given regular expression with the given replacement
String.String(byte[],int,int)	Constructs a new String by decoding the specified subarray of bytes using the platform s default charset The length of the new String is a function of the charset and hence may not be equal to the length of the subarray
String.valueOf(float)	Returns the string representation of the float argument
String.String(byte[],int,int,String)	Constructs a new String by decoding the specified subarray of bytes using the specified charset The length of the new String is a function of the charset and hence may not be equal to the length of the subarray
String.String(byte[],int,int,int)	Allocates a new String constructed from a subarray of an array of 8 bit integer values
String.intern()	Returns a canonical representation for the string object
String.charAt(int)	Returns the char value at the specified index An index ranges from 0 to length 1 The first char value of the sequence is at index 0 the next at index 1 and so on as for array indexing
String.contentEquals(CharSequence)	Compares this string to the specified CharSequence The result is true if and only if this String represents the same sequence of char values as the specified sequence
String.String(char[])	Allocates a new String so that it represents the sequence of characters currently contained in the character array argument The contents of the character array are copied subsequent modification of the character array does not affect the newly created string
String.concat(String)	Concatenates the specified string to the end of this string
String.hashCode()	Returns a hash code for this string The hash code for a String object is computed as s 0 31 n 1 s 1 31 n 2 s n 1 using int arithmetic where s i is the ith character of the string n is the length of the string and indicates exponentiation
String.replace(CharSequence,CharSequence)	Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence The replacement proceeds from the beginning of the string to the end for example replacing aa with b in the string aaa will result in ba rather than ab
String.getBytes(int,int,byte[],int)	Copies characters from this string into the destination byte array Each byte receives the 8 low order bits of the corresponding character The eight high order bits of each character are not copied and do not participate in the transfer in any way
String.toUpperCase(Locale)	Converts all of the characters in this String to upper case using the rules of the given Locale Case mapping is based on the Unicode Standard version specified by the Character class Since case mappings are not always 1 1 char mappings the resulting String may be a different length than the original String
String.codePointCount(int,int)	Returns the number of Unicode code points in the specified text range of this String The text range begins at the specified beginIndex and extends to the char at index endIndex 1 Thus the length in chars of the text range is endIndex beginIndex Unpaired surrogates within the text range count as one code point each
String.equals(Object)	Compares this string to the specified object The result is true if and only if the argument is not null and is a String object that represents the same sequence of characters as this object
String.lastIndexOf(int)	Returns the index within this string of the last occurrence of the specified character For values of ch in the range from 0 to 0xFFFF inclusive the index in Unicode code units returned is the largest value k such that this charAt k ch is true For other values of ch it is the largest value k such that this codePointAt k ch is true In either case if no such character occurs in this string then 1 is returned The String is searched backwards starting at the last character
String.indexOf(String)	Returns the index within this string of the first occurrence of the specified substring
String.String(String)	Initializes a newly created String object so that it represents the same sequence of characters as the argument in other words the newly created string is a copy of the argument string Unless an explicit copy of original is needed use of this constructor is unnecessary since Strings are immutable
String.String(byte[],int,int,Charset)	Constructs a new String by decoding the specified subarray of bytes using the specified charset
String.toLowerCase(Locale)	Converts all of the characters in this String to lower case using the rules of the given Locale Case mapping is based on the Unicode Standard version specified by the Character class Since case mappings are not always 1 1 char mappings the resulting String may be a different length than the original String
String.format(Locale,String,)	Returns a formatted string using the specified locale format string and arguments
String.valueOf(double)	Returns the string representation of the double argument
String.regionMatches(int,String,int,int)	Tests if two string regions are equal
String.contains(CharSequence)	Returns true if and only if this string contains the specified sequence of char values
