Buildfile: /home/ljx/workplace/liujiaxin/sypet-master-ljx/build.xml

sypet:
     [java] ----------Options
     [java] Verbose: false
     [java] Timeout: 1800000
     [java] Round Robin: false
     [java] Round Robin Iterations: 100
     [java] Round Robin Range: 2
     [java] Solver limit: 5
     [java] ----------benchmarks/word2api/38/benchmark38.json
     [java] Benchmark Id: 38
     [java] Method name: readFile
     [java] Packages: [java.io]
     [java] Libraries: [./lib/rt7.jar]
     [java] Source type(s): [java.lang.String]
     [java] Target type: java.lang.String
     [java] --------------------------------------------------------
     [java] Warning: javax.crypto.spec.DESKeySpec is a phantom class!
     [java] Warning: javax.crypto.spec.DESedeKeySpec is a phantom class!
     [java] Warning: javax.crypto.Cipher is a phantom class!
     [java] Warning: javax.crypto.spec.SecretKeySpec is a phantom class!
     [java] Warning: javax.crypto.SecretKeyFactory is a phantom class!
     [java] Warning: javax.crypto.spec.IvParameterSpec is a phantom class!
     [java] Warning: javax.crypto.SecretKey is a phantom class!
     [java] Warning: javax.crypto.spec.PBEKeySpec is a phantom class!
     [java] Warning: javax.crypto.Mac is a phantom class!
     [java] Warning: javax.crypto.IllegalBlockSizeException is a phantom class!
     [java] Warning: javax.crypto.BadPaddingException is a phantom class!
     [java] Warning: javax.crypto.NoSuchPaddingException is a phantom class!
     [java] Warning: sun.security.ssl.Krb5Helper is a phantom class!
     [java] Warning: com.oracle.jrockit.jfr.FlightRecorder is a phantom class!
     [java] Warning: sun.security.ssl.SSLSocketImpl is a phantom class!
     [java] Warning: javax.crypto.CipherInputStream is a phantom class!
     [java] Warning: javax.crypto.CipherOutputStream is a phantom class!
     [java] Warning: sun.nio.cs.ext.EUC_TW$Decoder is a phantom class!
     [java] Warning: sun.nio.cs.ext.EUC_TW$Encoder is a phantom class!
     [java] Warning: sun.nio.cs.ext.DoubleByteEncoder is a phantom class!
     [java] Warning: sun.nio.cs.ext.JIS_X_0201$Encoder is a phantom class!
     [java] Warning: sun.nio.cs.ext.JIS_X_0201$Decoder is a phantom class!
     [java] Warning: sun.nio.cs.ext.JIS_X_0208_Encoder is a phantom class!
     [java] Warning: sun.nio.cs.ext.JIS_X_0208_Decoder is a phantom class!
     [java] Warning: sun.nio.cs.ext.JIS_X_0212_Encoder is a phantom class!
     [java] Warning: sun.nio.cs.ext.JIS_X_0212_Decoder is a phantom class!
     [java] Warning: javax.crypto.spec.PBEParameterSpec is a phantom class!
     [java] Warning: javax.crypto.spec.DHParameterSpec is a phantom class!
     [java] Warning: javax.crypto.spec.DHPublicKeySpec is a phantom class!
     [java] Warning: javax.crypto.interfaces.DHKey is a phantom class!
     [java] Warning: javax.crypto.interfaces.DHPublicKey is a phantom class!
     [java] Warning: javax.crypto.spec.OAEPParameterSpec is a phantom class!
     [java] Warning: javax.crypto.spec.PSource is a phantom class!
     [java] Warning: javax.crypto.spec.PSource$PSpecified is a phantom class!
     [java] Warning: javax.crypto.KeyGenerator is a phantom class!
     [java] ---------------------api amount:---------------------1130
     [java] -------------Word2api Time: 5184.876434
     [java] #Classes: 129
     [java] #Methods: 1415
     [java] Soot Time: 8521.735633
     [java] ========Transitions========
     [java] <java.io.BufferedInputStream: int available()>
     [java] <java.io.BufferedInputStream: int read()>
     [java] <java.io.BufferedInputStream: int read(byte[],int,int)>
     [java] <java.io.BufferedInputStream: void <init>(java.io.InputStream)>
     [java] <java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>
     [java] <java.io.BufferedInputStream: void close()>
     [java] <java.io.BufferedInputStream: void mark(int)>
     [java] <java.io.BufferedInputStream: void reset()>
     [java] <java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>
     [java] <java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>
     [java] <java.io.BufferedOutputStream: void flush()>
     [java] <java.io.BufferedOutputStream: void write(byte[],int,int)>
     [java] <java.io.BufferedOutputStream: void write(int)>
     [java] <java.io.BufferedReader: boolean ready()>
     [java] <java.io.BufferedReader: int read()>
     [java] <java.io.BufferedReader: int read(char[],int,int)>
     [java] <java.io.BufferedReader: java.lang.String readLine()>
     [java] <java.io.BufferedReader: long skip(long)>
     [java] <java.io.BufferedReader: void <init>(java.io.Reader)>
     [java] <java.io.BufferedReader: void <init>(java.io.Reader,int)>
     [java] <java.io.BufferedReader: void close()>
     [java] <java.io.BufferedReader: void mark(int)>
     [java] <java.io.BufferedReader: void reset()>
     [java] <java.io.BufferedWriter: void <init>(java.io.Writer)>
     [java] <java.io.BufferedWriter: void <init>(java.io.Writer,int)>
     [java] <java.io.BufferedWriter: void close()>
     [java] <java.io.BufferedWriter: void flush()>
     [java] <java.io.BufferedWriter: void newLine()>
     [java] <java.io.BufferedWriter: void write(char[],int,int)>
     [java] <java.io.BufferedWriter: void write(int)>
     [java] <java.io.BufferedWriter: void write(java.lang.String,int,int)>
     [java] <java.io.ByteArrayInputStream: void <init>(byte[])>
     [java] <java.io.ByteArrayInputStream: void <init>(byte[],int,int)>
     [java] <java.io.ByteArrayOutputStream: byte[] toByteArray()>
     [java] <java.io.CharArrayReader: void <init>(char[])>
     [java] <java.io.CharArrayReader: void <init>(char[],int,int)>
     [java] <java.io.CharArrayWriter: char[] toCharArray()>
     [java] <java.io.CharArrayWriter: int size()>
     [java] <java.io.Console: char[] readPassword()>
     [java] <java.io.Console: char[] readPassword(java.lang.String,java.lang.Object[])>
     [java] <java.io.Console: java.io.Console format(java.lang.String,java.lang.Object[])>
     [java] <java.io.Console: java.io.Console printf(java.lang.String,java.lang.Object[])>
     [java] <java.io.Console: java.lang.String readLine()>
     [java] <java.io.Console: java.lang.String readLine(java.lang.String,java.lang.Object[])>
     [java] <java.io.Console: void flush()>
     [java] <java.io.DataInput: double readDouble()>
     [java] <java.io.DataInput: float readFloat()>
     [java] <java.io.DataInput: int skipBytes(int)>
     [java] <java.io.DataInput: java.lang.String readLine()>
     [java] <java.io.DataInputStream: byte readByte()>
     [java] <java.io.DataInputStream: char readChar()>
     [java] <java.io.DataInputStream: double readDouble()>
     [java] <java.io.DataInputStream: float readFloat()>
     [java] <java.io.DataInputStream: int read(byte[])>
     [java] <java.io.DataInputStream: int read(byte[],int,int)>
     [java] <java.io.DataInputStream: int readInt()>
     [java] <java.io.DataInputStream: int readUnsignedShort()>
     [java] <java.io.DataInputStream: int skipBytes(int)>
     [java] <java.io.DataInputStream: java.lang.String readLine()>
     [java] <java.io.DataInputStream: java.lang.String readUTF()>
     [java] <java.io.DataInputStream: java.lang.String readUTF(java.io.DataInput)>
     [java] <java.io.DataInputStream: long readLong()>
     [java] <java.io.DataInputStream: short readShort()>
     [java] <java.io.DataInputStream: void <init>(java.io.InputStream)>
     [java] <java.io.DataInputStream: void readFully(byte[])>
     [java] <java.io.DataInputStream: void readFully(byte[],int,int)>
     [java] <java.io.DataOutput: void writeChar(int)>
     [java] <java.io.DataOutput: void writeDouble(double)>
     [java] <java.io.DataOutput: void writeFloat(float)>
     [java] <java.io.DataOutputStream: void <init>(java.io.OutputStream)>
     [java] <java.io.DataOutputStream: void flush()>
     [java] <java.io.DataOutputStream: void writeBytes(java.lang.String)>
     [java] <java.io.File: boolean canRead()>
     [java] <java.io.File: boolean canWrite()>
     [java] <java.io.File: boolean createNewFile()>
     [java] <java.io.File: boolean delete()>
     [java] <java.io.File: boolean equals(java.lang.Object)>
     [java] <java.io.File: boolean exists()>
     [java] <java.io.File: boolean isAbsolute()>
     [java] <java.io.File: boolean isDirectory()>
     [java] <java.io.File: boolean isFile()>
     [java] <java.io.File: boolean isHidden()>
     [java] <java.io.File: boolean mkdir()>
     [java] <java.io.File: boolean mkdirs()>
     [java] <java.io.File: boolean renameTo(java.io.File)>
     [java] <java.io.File: boolean setExecutable(boolean)>
     [java] <java.io.File: boolean setExecutable(boolean,boolean)>
     [java] <java.io.File: boolean setLastModified(long)>
     [java] <java.io.File: boolean setReadOnly()>
     [java] <java.io.File: boolean setReadable(boolean)>
     [java] <java.io.File: boolean setReadable(boolean,boolean)>
     [java] <java.io.File: boolean setWritable(boolean)>
     [java] <java.io.File: boolean setWritable(boolean,boolean)>
     [java] <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>
     [java] <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>
     [java] <java.io.File: java.io.File getAbsoluteFile()>
     [java] <java.io.File: java.io.File getCanonicalFile()>
     [java] <java.io.File: java.io.File getParentFile()>
     [java] <java.io.File: java.io.File[] listFiles()>
     [java] <java.io.File: java.io.File[] listFiles(java.io.FileFilter)>
     [java] <java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>
     [java] <java.io.File: java.io.File[] listRoots()>
     [java] <java.io.File: java.lang.String getAbsolutePath()>
     [java] <java.io.File: java.lang.String getCanonicalPath()>
     [java] <java.io.File: java.lang.String getName()>
     [java] <java.io.File: java.lang.String getParent()>
     [java] <java.io.File: java.lang.String getPath()>
     [java] <java.io.File: java.lang.String toString()>
     [java] <java.io.File: java.lang.String[] list()>
     [java] <java.io.File: java.lang.String[] list(java.io.FilenameFilter)>
     [java] <java.io.File: java.net.URI toURI()>
     [java] <java.io.File: java.net.URL toURL()>
     [java] <java.io.File: java.nio.file.Path toPath()>
     [java] <java.io.File: long getFreeSpace()>
     [java] <java.io.File: long getTotalSpace()>
     [java] <java.io.File: long getUsableSpace()>
     [java] <java.io.File: long lastModified()>
     [java] <java.io.File: long length()>
     [java] <java.io.File: void <init>(java.io.File,java.lang.String)>
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: void <init>(java.lang.String,java.lang.String)>
     [java] <java.io.File: void <init>(java.net.URI)>
     [java] <java.io.File: void deleteOnExit()>
     [java] <java.io.FileDescriptor: void sync()>
     [java] <java.io.FileFilter: boolean accept(java.io.File)>
     [java] <java.io.FileInputStream: int available()>
     [java] <java.io.FileInputStream: int read()>
     [java] <java.io.FileInputStream: int read(byte[])>
     [java] <java.io.FileInputStream: int read(byte[],int,int)>
     [java] <java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>
     [java] <java.io.FileInputStream: long skip(long)>
     [java] <java.io.FileInputStream: void <init>(java.io.File)>
     [java] <java.io.FileInputStream: void <init>(java.io.FileDescriptor)>
     [java] <java.io.FileInputStream: void <init>(java.lang.String)>
     [java] <java.io.FileInputStream: void close()>
     [java] <java.io.FileOutputStream: java.io.FileDescriptor getFD()>
     [java] <java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>
     [java] <java.io.FileOutputStream: void <init>(java.io.File)>
     [java] <java.io.FileOutputStream: void <init>(java.io.File,boolean)>
     [java] <java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>
     [java] <java.io.FileOutputStream: void <init>(java.lang.String)>
     [java] <java.io.FileOutputStream: void <init>(java.lang.String,boolean)>
     [java] <java.io.FileOutputStream: void close()>
     [java] <java.io.FileOutputStream: void write(byte[])>
     [java] <java.io.FileOutputStream: void write(byte[],int,int)>
     [java] <java.io.FileOutputStream: void write(int)>
     [java] <java.io.FilePermission: void <init>(java.lang.String,java.lang.String)>
     [java] <java.io.FileReader: void <init>(java.io.File)>
     [java] <java.io.FileReader: void <init>(java.io.FileDescriptor)>
     [java] <java.io.FileReader: void <init>(java.lang.String)>
     [java] <java.io.FileSystem: boolean delete(java.io.File)>
     [java] <java.io.FileWriter: void <init>(java.io.File)>
     [java] <java.io.FileWriter: void <init>(java.io.File,boolean)>
     [java] <java.io.FileWriter: void <init>(java.io.FileDescriptor)>
     [java] <java.io.FileWriter: void <init>(java.lang.String)>
     [java] <java.io.FileWriter: void <init>(java.lang.String,boolean)>
     [java] <java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>
     [java] <java.io.FilterInputStream: int read()>
     [java] <java.io.FilterInputStream: int read(byte[])>
     [java] <java.io.FilterInputStream: int read(byte[],int,int)>
     [java] <java.io.InputStream: int available()>
     [java] <java.io.InputStream: int read()>
     [java] <java.io.InputStream: int read(byte[])>
     [java] <java.io.InputStream: int read(byte[],int,int)>
     [java] <java.io.InputStream: long skip(long)>
     [java] <java.io.InputStream: void close()>
     [java] <java.io.InputStream: void mark(int)>
     [java] <java.io.InputStreamReader: boolean ready()>
     [java] <java.io.InputStreamReader: int read()>
     [java] <java.io.InputStreamReader: int read(char[],int,int)>
     [java] <java.io.InputStreamReader: void <init>(java.io.InputStream)>
     [java] <java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
     [java] <java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>
     [java] <java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.CharsetDecoder)>
     [java] <java.io.InputStreamReader: void close()>
     [java] <java.io.LineNumberReader: int getLineNumber()>
     [java] <java.io.LineNumberReader: int read()>
     [java] <java.io.LineNumberReader: int read(char[],int,int)>
     [java] <java.io.LineNumberReader: java.lang.String readLine()>
     [java] <java.io.LineNumberReader: long skip(long)>
     [java] <java.io.LineNumberReader: void <init>(java.io.Reader)>
     [java] <java.io.LineNumberReader: void <init>(java.io.Reader,int)>
     [java] <java.io.LineNumberReader: void mark(int)>
     [java] <java.io.LineNumberReader: void reset()>
     [java] <java.io.LineNumberReader: void setLineNumber(int)>
     [java] <java.io.ObjectInput: int read()>
     [java] <java.io.ObjectInput: int read(byte[])>
     [java] <java.io.ObjectInput: int read(byte[],int,int)>
     [java] <java.io.ObjectInput: long skip(long)>
     [java] <java.io.ObjectInputStream: boolean readBoolean()>
     [java] <java.io.ObjectInputStream: double readDouble()>
     [java] <java.io.ObjectInputStream: int available()>
     [java] <java.io.ObjectInputStream: int read()>
     [java] <java.io.ObjectInputStream: int read(byte[],int,int)>
     [java] <java.io.ObjectInputStream: int readUnsignedByte()>
     [java] <java.io.ObjectInputStream: java.lang.Object readObject()>
     [java] <java.io.ObjectInputStream: java.lang.Object readUnshared()>
     [java] <java.io.ObjectInputStream: long readLong()>
     [java] <java.io.ObjectInputStream: void <init>(java.io.InputStream)>
     [java] <java.io.ObjectInputStream: void close()>
     [java] <java.io.ObjectStreamClass: java.io.ObjectStreamField getField(java.lang.String)>
     [java] <java.io.ObjectStreamClass: java.lang.Class forClass()>
     [java] <java.io.ObjectStreamField: java.lang.Class getType()>
     [java] <java.io.ObjectStreamField: java.lang.String getName()>
     [java] <java.io.OutputStream: void close()>
     [java] <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
     [java] <java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>
     [java] <java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>
     [java] <java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.CharsetEncoder)>
     [java] <java.io.PipedInputStream: int read()>
     [java] <java.io.PipedInputStream: int read(byte[],int,int)>
     [java] <java.io.PrintStream: void <init>(java.io.File)>
     [java] <java.io.PrintStream: void <init>(java.io.File,java.lang.String)>
     [java] <java.io.PrintStream: void <init>(java.io.OutputStream)>
     [java] <java.io.PrintStream: void <init>(java.io.OutputStream,boolean)>
     [java] <java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>
     [java] <java.io.PrintStream: void <init>(java.lang.String)>
     [java] <java.io.PrintStream: void <init>(java.lang.String,java.lang.String)>
     [java] <java.io.PrintStream: void write(byte[],int,int)>
     [java] <java.io.PrintStream: void write(int)>
     [java] <java.io.PrintWriter: java.io.PrintWriter format(java.lang.String,java.lang.Object[])>
     [java] <java.io.PrintWriter: java.io.PrintWriter format(java.util.Locale,java.lang.String,java.lang.Object[])>
     [java] <java.io.PrintWriter: void <init>(java.io.File)>
     [java] <java.io.PrintWriter: void <init>(java.io.File,java.lang.String)>
     [java] <java.io.PrintWriter: void <init>(java.io.OutputStream)>
     [java] <java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>
     [java] <java.io.PrintWriter: void <init>(java.io.Writer)>
     [java] <java.io.PrintWriter: void <init>(java.io.Writer,boolean)>
     [java] <java.io.PrintWriter: void <init>(java.lang.String)>
     [java] <java.io.PrintWriter: void <init>(java.lang.String,java.lang.String)>
     [java] <java.io.PrintWriter: void close()>
     [java] <java.io.PrintWriter: void flush()>
     [java] <java.io.PushbackInputStream: int available()>
     [java] <java.io.PushbackInputStream: int read()>
     [java] <java.io.PushbackInputStream: int read(byte[],int,int)>
     [java] <java.io.PushbackInputStream: void unread(byte[])>
     [java] <java.io.PushbackInputStream: void unread(byte[],int,int)>
     [java] <java.io.PushbackInputStream: void unread(int)>
     [java] <java.io.PushbackReader: int read()>
     [java] <java.io.PushbackReader: int read(char[],int,int)>
     [java] <java.io.PushbackReader: void close()>
     [java] <java.io.RandomAccessFile: byte readByte()>
     [java] <java.io.RandomAccessFile: char readChar()>
     [java] <java.io.RandomAccessFile: float readFloat()>
     [java] <java.io.RandomAccessFile: int read()>
     [java] <java.io.RandomAccessFile: int read(byte[])>
     [java] <java.io.RandomAccessFile: int read(byte[],int,int)>
     [java] <java.io.RandomAccessFile: int readInt()>
     [java] <java.io.RandomAccessFile: java.io.FileDescriptor getFD()>
     [java] <java.io.RandomAccessFile: java.lang.String readLine()>
     [java] <java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>
     [java] <java.io.RandomAccessFile: long length()>
     [java] <java.io.RandomAccessFile: short readShort()>
     [java] <java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>
     [java] <java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>
     [java] <java.io.RandomAccessFile: void close()>
     [java] <java.io.RandomAccessFile: void seek(long)>
     [java] <java.io.Reader: boolean ready()>
     [java] <java.io.Reader: int read()>
     [java] <java.io.Reader: int read(char[])>
     [java] <java.io.Reader: int read(char[],int,int)>
     [java] <java.io.Reader: int read(java.nio.CharBuffer)>
     [java] <java.io.Reader: void close()>
     [java] <java.io.StringReader: long skip(long)>
     [java] <java.io.StringReader: void <init>(java.lang.String)>
     [java] _upper0
     [java] _upper1
     [java] _upper10
     [java] _upper11
     [java] _upper12
     [java] _upper13
     [java] _upper14
     [java] _upper15
     [java] _upper16
     [java] _upper17
     [java] _upper18
     [java] _upper19
     [java] _upper2
     [java] _upper20
     [java] _upper21
     [java] _upper22
     [java] _upper3
     [java] _upper4
     [java] _upper5
     [java] _upper6
     [java] _upper7
     [java] _upper8
     [java] _upper9
     [java] sypet_clone_boolean
     [java] sypet_clone_byte
     [java] sypet_clone_byte[]
     [java] sypet_clone_char
     [java] sypet_clone_char[]
     [java] sypet_clone_double
     [java] sypet_clone_float
     [java] sypet_clone_int
     [java] sypet_clone_java.awt.Shape
     [java] sypet_clone_java.awt.geom.Ellipse2D
     [java] sypet_clone_java.awt.geom.Line2D
     [java] sypet_clone_java.awt.geom.Line2D$Double
     [java] sypet_clone_java.awt.geom.Rectangle2D
     [java] sypet_clone_java.awt.geom.RectangularShape
     [java] sypet_clone_java.io.BufferedInputStream
     [java] sypet_clone_java.io.BufferedOutputStream
     [java] sypet_clone_java.io.BufferedReader
     [java] sypet_clone_java.io.BufferedWriter
     [java] sypet_clone_java.io.ByteArrayInputStream
     [java] sypet_clone_java.io.ByteArrayOutputStream
     [java] sypet_clone_java.io.CharArrayReader
     [java] sypet_clone_java.io.CharArrayWriter
     [java] sypet_clone_java.io.Console
     [java] sypet_clone_java.io.DataInput
     [java] sypet_clone_java.io.DataInputStream
     [java] sypet_clone_java.io.DataOutput
     [java] sypet_clone_java.io.DataOutputStream
     [java] sypet_clone_java.io.File
     [java] sypet_clone_java.io.FileDescriptor
     [java] sypet_clone_java.io.FileFilter
     [java] sypet_clone_java.io.FileInputStream
     [java] sypet_clone_java.io.FileOutputStream
     [java] sypet_clone_java.io.FilePermission
     [java] sypet_clone_java.io.FileReader
     [java] sypet_clone_java.io.FileSystem
     [java] sypet_clone_java.io.FileWriter
     [java] sypet_clone_java.io.File[]
     [java] sypet_clone_java.io.FilenameFilter
     [java] sypet_clone_java.io.FilterInputStream
     [java] sypet_clone_java.io.InputStream
     [java] sypet_clone_java.io.InputStreamReader
     [java] sypet_clone_java.io.LineNumberReader
     [java] sypet_clone_java.io.ObjectInput
     [java] sypet_clone_java.io.ObjectInputStream
     [java] sypet_clone_java.io.ObjectStreamClass
     [java] sypet_clone_java.io.ObjectStreamField
     [java] sypet_clone_java.io.OutputStream
     [java] sypet_clone_java.io.OutputStreamWriter
     [java] sypet_clone_java.io.PipedInputStream
     [java] sypet_clone_java.io.PrintStream
     [java] sypet_clone_java.io.PrintWriter
     [java] sypet_clone_java.io.PushbackInputStream
     [java] sypet_clone_java.io.PushbackReader
     [java] sypet_clone_java.io.RandomAccessFile
     [java] sypet_clone_java.io.Reader
     [java] sypet_clone_java.io.StringReader
     [java] sypet_clone_java.io.Writer
     [java] sypet_clone_java.lang.CharSequence
     [java] sypet_clone_java.lang.Class
     [java] sypet_clone_java.lang.Object
     [java] sypet_clone_java.lang.Object[]
     [java] sypet_clone_java.lang.String
     [java] sypet_clone_java.lang.String[]
     [java] sypet_clone_java.net.URI
     [java] sypet_clone_java.net.URL
     [java] sypet_clone_java.nio.CharBuffer
     [java] sypet_clone_java.nio.channels.FileChannel
     [java] sypet_clone_java.nio.charset.Charset
     [java] sypet_clone_java.nio.charset.CharsetDecoder
     [java] sypet_clone_java.nio.charset.CharsetEncoder
     [java] sypet_clone_java.nio.file.Path
     [java] sypet_clone_java.text.DateFormat
     [java] sypet_clone_java.text.SimpleDateFormat
     [java] sypet_clone_java.util.Calendar
     [java] sypet_clone_java.util.GregorianCalendar
     [java] sypet_clone_java.util.Locale
     [java] sypet_clone_long
     [java] sypet_clone_org.apache.commons.math.linear.SingularValueDecomposition
     [java] sypet_clone_org.apache.commons.math.linear.SingularValueDecompositionImpl
     [java] sypet_clone_org.joda.time.DateTime
     [java] sypet_clone_org.joda.time.DateTime$Property
     [java] sypet_clone_org.joda.time.LocalDate
     [java] sypet_clone_org.joda.time.ReadableInstant
     [java] sypet_clone_org.joda.time.ReadablePartial
     [java] sypet_clone_org.joda.time.base.AbstractDateTime
     [java] sypet_clone_org.joda.time.base.BaseDateTime
     [java] sypet_clone_org.joda.time.field.AbstractReadableInstantFieldProperty
     [java] sypet_clone_org.jsoup.nodes.Document
     [java] sypet_clone_org.jsoup.nodes.Element
     [java] sypet_clone_org.w3c.dom.Document
     [java] sypet_clone_org.w3c.dom.Element
     [java] sypet_clone_org.w3c.dom.Node
     [java] sypet_clone_org.xml.sax.InputSource
     [java] sypet_clone_short
     [java] sypet_clone_void
     [java] PetriNet for path length: 1 [places: 95 ; transitions: 383 ; edges: 900]
     [java] =========sketch========
     [java] PetriNet for path length: 2 [places: 95 ; transitions: 383 ; edges: 900]
     [java] =========sketch========
     [java] PetriNet for path length: 3 [places: 95 ; transitions: 383 ; edges: 900]
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.lang.String getAbsolutePath()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.lang.String getCanonicalPath()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.lang.String getName()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.lang.String getParent()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.lang.String getPath()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.lang.String toString()>
     [java] =========sketch========
     [java] PetriNet for path length: 4 [places: 95 ; transitions: 383 ; edges: 900]
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getCanonicalFile()>
     [java] <java.io.File: java.lang.String toString()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getAbsoluteFile()>
     [java] <java.io.File: java.lang.String getAbsolutePath()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getCanonicalFile()>
     [java] <java.io.File: java.lang.String getAbsolutePath()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getParentFile()>
     [java] <java.io.File: java.lang.String getAbsolutePath()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getAbsoluteFile()>
     [java] <java.io.File: java.lang.String toString()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getAbsoluteFile()>
     [java] <java.io.File: java.lang.String getCanonicalPath()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getCanonicalFile()>
     [java] <java.io.File: java.lang.String getCanonicalPath()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getParentFile()>
     [java] <java.io.File: java.lang.String getCanonicalPath()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getAbsoluteFile()>
     [java] <java.io.File: java.lang.String getPath()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getAbsoluteFile()>
     [java] <java.io.File: java.lang.String getName()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getCanonicalFile()>
     [java] <java.io.File: java.lang.String getName()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getParentFile()>
     [java] <java.io.File: java.lang.String getName()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getAbsoluteFile()>
     [java] <java.io.File: java.lang.String getParent()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getCanonicalFile()>
     [java] <java.io.File: java.lang.String getParent()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getParentFile()>
     [java] <java.io.File: java.lang.String getParent()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getParentFile()>
     [java] <java.io.File: java.lang.String getPath()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getCanonicalFile()>
     [java] <java.io.File: java.lang.String getPath()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getParentFile()>
     [java] <java.io.File: java.lang.String toString()>
     [java] =========sketch========
     [java] sypet_clone_java.lang.String
     [java] <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>
     [java] <java.io.File: java.lang.String toString()>
     [java] =========sketch========
     [java] sypet_clone_java.lang.String
     [java] <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>
     [java] <java.io.File: java.lang.String getAbsolutePath()>
     [java] =========sketch========
     [java] sypet_clone_java.lang.String
     [java] <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>
     [java] <java.io.File: java.lang.String getCanonicalPath()>
     [java] =========sketch========
     [java] sypet_clone_java.lang.String
     [java] <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>
     [java] <java.io.File: java.lang.String getName()>
     [java] =========sketch========
     [java] sypet_clone_java.lang.String
     [java] <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>
     [java] <java.io.File: java.lang.String getParent()>
     [java] =========sketch========
     [java] sypet_clone_java.lang.String
     [java] <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>
     [java] <java.io.File: java.lang.String getPath()>
     [java] =========sketch========
     [java] sypet_clone_java.lang.String
     [java] <java.io.File: void <init>(java.lang.String,java.lang.String)>
     [java] <java.io.File: java.lang.String getPath()>
     [java] =========sketch========
     [java] sypet_clone_java.lang.String
     [java] <java.io.File: void <init>(java.lang.String,java.lang.String)>
     [java] <java.io.File: java.lang.String getAbsolutePath()>
     [java] =========sketch========
     [java] sypet_clone_java.lang.String
     [java] <java.io.File: void <init>(java.lang.String,java.lang.String)>
     [java] <java.io.File: java.lang.String getCanonicalPath()>
     [java] =========sketch========
     [java] sypet_clone_java.lang.String
     [java] <java.io.File: void <init>(java.lang.String,java.lang.String)>
     [java] <java.io.File: java.lang.String getName()>
     [java] =========sketch========
     [java] sypet_clone_java.lang.String
     [java] <java.io.File: void <init>(java.lang.String,java.lang.String)>
     [java] <java.io.File: java.lang.String getParent()>
     [java] =========sketch========
     [java] sypet_clone_java.lang.String
     [java] <java.io.File: void <init>(java.lang.String,java.lang.String)>
     [java] <java.io.File: java.lang.String toString()>
     [java] =========sketch========
     [java] sypet_clone_java.lang.String
     [java] <java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>
     [java] <java.io.RandomAccessFile: java.lang.String readLine()>
     [java] =========sketch========
     [java] sypet_clone_java.lang.String
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: void deleteOnExit()>
     [java] =========sketch========
     [java] sypet_clone_java.lang.String
     [java] <java.io.FileOutputStream: void <init>(java.lang.String)>
     [java] <java.io.FileOutputStream: void close()>
     [java] =========sketch========
     [java] sypet_clone_java.lang.String
     [java] <java.io.FileInputStream: void <init>(java.lang.String)>
     [java] <java.io.FileInputStream: void close()>
     [java] =========sketch========
     [java] sypet_clone_java.lang.String
     [java] <java.io.PrintWriter: void <init>(java.lang.String)>
     [java] <java.io.PrintWriter: void flush()>
     [java] =========sketch========
     [java] sypet_clone_java.lang.String
     [java] <java.io.PrintWriter: void <init>(java.lang.String)>
     [java] <java.io.PrintWriter: void close()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.lang.String getAbsolutePath()>
     [java] sypet_clone_void
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.lang.String toString()>
     [java] sypet_clone_void
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.lang.String getCanonicalPath()>
     [java] sypet_clone_void
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] sypet_clone_void
     [java] <java.io.File: java.lang.String getName()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.lang.String getParent()>
     [java] sypet_clone_void
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.lang.String getPath()>
     [java] sypet_clone_void
     [java] =========sketch========
     [java] PetriNet for path length: 5 [places: 95 ; transitions: 383 ; edges: 900]
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getCanonicalFile()>
     [java] <java.io.File: java.io.File getCanonicalFile()>
     [java] <java.io.File: java.lang.String toString()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getAbsoluteFile()>
     [java] <java.io.File: java.io.File getCanonicalFile()>
     [java] <java.io.File: java.lang.String getAbsolutePath()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getAbsoluteFile()>
     [java] <java.io.File: java.io.File getAbsoluteFile()>
     [java] <java.io.File: java.lang.String getAbsolutePath()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getCanonicalFile()>
     [java] <java.io.File: java.io.File getCanonicalFile()>
     [java] <java.io.File: java.lang.String getAbsolutePath()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getParentFile()>
     [java] <java.io.File: java.io.File getCanonicalFile()>
     [java] <java.io.File: java.lang.String getAbsolutePath()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getParentFile()>
     [java] <java.io.File: java.io.File getAbsoluteFile()>
     [java] <java.io.File: java.lang.String getAbsolutePath()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getParentFile()>
     [java] <java.io.File: java.io.File getParentFile()>
     [java] <java.io.File: java.lang.String getAbsolutePath()>
     [java] =========sketch========
     [java] <java.io.File: void <init>(java.lang.String)>
     [java] <java.io.File: java.io.File getParentFile()>
     [java] <java.io.File: java.io.File getParentFile()>
     [java] <java.io.File: java.lang.String getCanonicalPath()>
